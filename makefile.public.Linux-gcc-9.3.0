# This file is included by all Makefiles below to specify system
# specific things. Note that by default all optimisations are
# turned on

CC = gcc
RM = /bin/rm
CP = /bin/cp
LN = ln
PTHREAD = -pthread
CXX = g++

PROF=

# DEBUG = -g -fsanitize=address 
# DEBUG = -g
DEBUG = -DNDEBUG
#DEBUG = -g -gdwarf-3

# CPU = -DUNIX -mtune=sandybridge
# CPU = -DUNIX -mtune=haswell
# Define -march and -mutune options based on your hardware
CPU = -DUNIX -march=westmere -mtune=haswell

OPT = -O2 
#OPT = -O0 

OPENMP = -fopenmp

EXEDIR = $(IWPROGRAMMES)/bin/$(UNAME)
LIBDIR = $(IWPROGRAMMES)/lib/$(UNAME)

LIB = -L $(IWPROGRAMMES)/lib/$(UNAME)
# Define ZLIB to point to where zlib.a is located.  Need version 1.2.8 or higher
# Example: ZLIB = /zlib/zlib-1.2.11/lib
ZLIB =
ifeq ($(ZLIB),)
    LIBZ = -lz
else
    LIBZ = -L$(ZLIB) -lz
endif

# If you have a non-default protoc installation.
PROTOC_INCLUDES=-I /home/ian/pub/include
PROTOLIB=-L/home/ian/pub/lib -lprotobuf

RE2LIB=-lre2

USRLIB=

OPENSSL_INC = $(C3TK_HOME)/src/smallmolecule/include

INC = $(MYINC) -I . -I $(IWPROGRAMMES)/src 

COMPILER = -msse -mfpmath=sse

CPP_STD = -std=c++17

FLAGS = $(PROF) $(DEBUG) $(COMPILER) $(CPU) $(OPT) $(CPP_STD) $(PROJ) $(INC) -Wl,--no-warn-search-mismatch $(PROTOC_INCLUDES)

CFLAGS  =  $(FLAGS)
CXXFLAGS = $(FLAGS)

FLAGS_FOR_TEMPLATE_INSTANTIATORS = $(CXXFLAGS)

# not needed if we are compiling 64 bit

# CPPFLAGS = -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
CPPFLAGS = -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -DNEED_EXTERN_OPT

# Some programmes want implicit templates

CXX_FLAGS_WITH_IMPLICIT_TEMPLATES = $(CPPFLAGS) $(COMPILER) $(PROF) $(DEBUG) $(CPU) $(OPT) $(PROJ) $(INC) $(CPP_STD) $(PROTOC_INCLUDES)


LD = $(CXX) $(PROF) 
# Intel requires Fortran executables to be linked with ifort - gcc is happy with either (I think)
FORT_LD = $(CXX) $(PROF) 

# Whenever we use fortran
FC=gfortran
FFLAGS = $(OPT) $(DEBUG) $(CPU) $(PROF) 
FORTRAN_LIBRARY = -lgfortran

SHARED_LIBRARY_CREATOR = gcc -shared

SHARED_LIBRARY_SUFFIX = so

CLANG_SHARED_LIBRARY_COMPILER = gcc


%.lo : %.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $<

%.lo : %.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -c -o $@ $<
