load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")

http_archive(
    name = "bazel_skylib",
    urls = [
        "https://github.com/bazelbuild/bazel-skylib/releases/download/1.2.1/bazel-skylib-1.2.1.tar.gz",
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.2.1/bazel-skylib-1.2.1.tar.gz",
    ],
)
load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")
bazel_skylib_workspace()

#load("//build_deps/py:python_configure.bzl", "python_configure")
#python_configure(name = "local_config_python")

# pybond11
git_repository(
    name = "pybind11_bazel",
    commit = "f22df0e57ba664c2d3cf439ddfb7f8804e3f36c1",
    remote = "https://github.com/pybind/pybind11_bazel.git",
)

http_archive(
    name = "pybind11",
    build_file = "@pybind11_bazel//:pybind11.BUILD",
    strip_prefix = "pybind11-2.9.0",
    urls = [
        "https://github.com/pybind/pybind11/archive/v2.9.0.tar.gz",
    ],
)

# The next were all copied from Riegeli's WORKSPACE to enable riegeli
http_archive(
    name = "com_google_absl",
    sha256 = "6a6eee57ce3375e26d49c542d191ceb90822984d5b587f0ea8e0d0c77016b02b",
    strip_prefix = "abseil-cpp-20200225.3",
    urls = [
        "https://mirror.bazel.build/github.com/abseil/abseil-cpp/archive/20200225.3.zip",
        "https://github.com/abseil/abseil-cpp/archive/20200225.3.zip",  # 2020-10-09
    ],
)
http_archive(
    name = "highwayhash",
    build_file = "//third_party:highwayhash.BUILD",
#   sha256 = "cf891e024699c82aabce528a024adbe16e529f2b4e57f954455e0bf53efae585",
    strip_prefix = "highwayhash-276dd7b4b6d330e4734b756e97ccfb1b69cc2e12",
    urls = [
        "https://mirror.bazel.build/github.com/google/highwayhash/archive/276dd7b4b6d330e4734b756e97ccfb1b69cc2e12.zip",
        "https://github.com/google/highwayhash/archive/276dd7b4b6d330e4734b756e97ccfb1b69cc2e12.zip",  # 2019-02-22
    ],
)
#http_archive(
##    name = "snappy",
#    build_file = "//third_party:snappy.BUILD",
#    sha256 = "38b4aabf88eb480131ed45bfb89c19ca3e2a62daeb081bdf001cfb17ec4cd303",
#    strip_prefix = "snappy-1.1.8",
#    urls = [
#        "https://mirror.bazel.build/github.com/google/snappy/archive/1.1.8.zip",
#        "https://github.com/google/snappy/archive/1.1.8.zip",  # 2020-01-14
#    ],
#)

# rules_cc defines rules for generating C++ code from Protocol Buffers.
http_archive(
    name = "rules_cc",
    sha256 = "35f2fb4ea0b3e61ad64a369de284e4fbbdcdba71836a5555abb5e194cf119509",
    strip_prefix = "rules_cc-624b5d59dfb45672d4239422fa1e3de1822ee110",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_cc/archive/624b5d59dfb45672d4239422fa1e3de1822ee110.tar.gz",
        "https://github.com/bazelbuild/rules_cc/archive/624b5d59dfb45672d4239422fa1e3de1822ee110.tar.gz",
    ],
)

# rules_java defines rules for generating Java code from Protocol Buffers.
http_archive(
    name = "rules_java",
    sha256 = "ccf00372878d141f7d5568cedc4c42ad4811ba367ea3e26bc7c43445bbc52895",
    strip_prefix = "rules_java-d7bf804c8731edd232cb061cb2a9fe003a85d8ee",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_java/archive/d7bf804c8731edd232cb061cb2a9fe003a85d8ee.tar.gz",
        "https://github.com/bazelbuild/rules_java/archive/d7bf804c8731edd232cb061cb2a9fe003a85d8ee.tar.gz",
    ],
)

# rules_proto defines abstract rules for building Protocol Buffers.
#http_archive(
#   name = "rules_proto",
#   sha256 = "2490dca4f249b8a9a3ab07bd1ba6eca085aaf8e45a734af92aad0c42d9dc7aaf",
#   sha256 = "cfdc2fa31879c0aebe31ce7702b1a9c8a4be02d2",
#   sha256 = "d8992e6eeec276d49f1d4e63cfa05bbed6d4a26cfe6ca63c972827a0d141ea3b",
#   strip_prefix = "rules_proto-cfdc2fa31879c0aebe31ce7702b1a9c8a4be02d2",
#   urls = [
#       "https://mirror.bazel.build/github.com/bazelbuild/rules_proto/archive/cfdc2fa31879c0aebe31ce7702b1a9c8a4be02d2.tar.gz",
#       "https://github.com/bazelbuild/rules_proto/archive/cfdc2fa31879c0aebe31ce7702b1a9c8a4be02d2.tar.gz",
#        "https://github.com/bazelbuild/rules_proto/archive/refs/heads/master.zip",
#    ],
#)

http_archive(
    name = "rules_proto",
    sha256 = "e017528fd1c91c5a33f15493e3a398181a9e821a804eb7ff5acdd1d2d6c2b18d",
    strip_prefix = "rules_proto-4.0.0-3.20.0",
    urls = [
        "https://github.com/bazelbuild/rules_proto/archive/refs/tags/4.0.0-3.20.0.tar.gz",
    ],
)
load("@rules_proto//proto:repositories.bzl", "rules_proto_dependencies", "rules_proto_toolchains")
rules_proto_dependencies()
rules_proto_toolchains()


load("@rules_cc//cc:repositories.bzl", "rules_cc_dependencies")
rules_cc_dependencies()

load("@rules_java//java:repositories.bzl", "rules_java_dependencies", "rules_java_toolchains")
rules_java_dependencies()
rules_java_toolchains()

# copied from
# https://chromium.googlesource.com/external/github.com/google/protobuf/+/HEAD/examples/WORKSPACE

#load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# Different ways of getting googletest, remote or local
# local_repository(
#     name = "googletest",
#     path = "/home/ian/pub/googletest",
# )

git_repository(
    name = "googletest",
    remote = "https://github.com/google/googletest",
    branch = "main",
)

# Multiple ways of getting re2, remote or local.
# git_repository(
#     name = "re2",
#     remote = "https://github.com/google/re2",
#     branch = "main",
# )

local_repository(
    name = 're2',
    path = "/home/ian/pub/re2",
)

local_repository(
    name = 'benchmark',
    path = "/home/ian/pub/benchmark",
)

local_repository(
    name = 'tensorflow',
    path = '/home/ian/pub/tensorflow',
)

local_repository(
    name = "absl_cpp",
    path = '/home/ian/pub/abseil-cpp',
)

local_repository(
    name = "ord_schema",
    path = "/home/ian/ord_schema",
)

new_local_repository(
  name = "leveldb",
  path = "/home/ian/pub/leveldb",
  build_file_content = """
cc_library(
    name = "leveldb",
    strip_include_prefix = "include",
    hdrs = glob(["include/leveldb/*.h"]),
    srcs = [
      "build/libleveldb.a",
    ],
    visibility = ["//visibility:public"],
)
"""
)



http_archive(
    name = "com_google_protobuf",
    strip_prefix = "protobuf-master",
    urls = ["https://github.com/protocolbuffers/protobuf/archive/master.zip"],
)

# This com_google_protobuf_cc repository is required for cc_proto_library
# rule. It provides protobuf C++ runtime. Note that it actually is the same
# repo as com_google_protobuf but has to be given a different name as
# required by bazel.
#http_archive(
#    name = "com_google_protobuf_cc",
#    strip_prefix = "protobuf-master",
#    urls = ["https://github.com/protocolbuffers/protobuf/archive/master.zip"],
#)
#
#http_archive(
#    name = "bazel_skylib",
#    sha256 = "bbccf674aa441c266df9894182d80de104cabd19be98be002f6d478aaa31574d",
#    strip_prefix = "bazel-skylib-2169ae1c374aab4a09aa90e65efe1a3aad4e279b",
#    urls = ["https://github.com/bazelbuild/bazel-skylib/archive/2169ae1c374aab4a09aa90e65efe1a3aad4e279b.tar.gz"],
#)
load("@com_google_protobuf//:protobuf_deps.bzl", "protobuf_deps")
protobuf_deps()
#load("@bazel_skylib//lib:versions.bzl", "versions")
#versions.check(minimum_bazel_version = "0.5.4")

http_archive(
    name = "com_grail_bazel_toolchain",
#   sha256 = "f82f3ddfb4e5e11fd34edc518cbf2943c6e7680a6144976eb33e97369af5453e",
    strip_prefix = "bazel-toolchain-master",
    urls = ["https://github.com/grailbio/bazel-toolchain/archive/master.tar.gz"],
)

# Does not work because the config file only gets produced by cmake
#http_archive(
#    name = "crc32",
#    strip_prefix = "crc32c-main",
#    urls = [
#        "https://github.com/google/crc32c/archive/refs/heads/main.zip",
#    ],
#    build_file_content = """
#cc_library(
#    name = "crc32",
#    srcs = glob(["src/*c", "src/*h"], exclude = ["src/*test*", "src/*benchmark*"]),
#    hdrs = ["include/crc32c/crc32c.h"],
#    copts = ["-iquote external/crc32", "-iquote external/crc32/include"],
#
#    visibility = ["//visibility:public"],
#)
#""",
#)

# Even with the config file generated, could never get it to compile
#new_local_repository(
#    name = "crc32",
#    path = "/home/ian/pub/crc32c",
#    build_file_content = """
#cc_library(
#    name = "crc32",
#    visibility = ["//visibility:public"],
#    srcs = glob(["src/*c", "src/*h"], exclude = ["src/*test*", "src/*benchmark*"]),
#    hdrs = ["include/crc32c/crc32c.h"],
#    copts = ["-iquote external/crc32/build/include", "-iquote build/include", "-iquote include", "-iquote src"],
#)
#""",
#)

new_local_repository(
    name = "crc32",
    path = "/home/ian/pub/crc32c",
    build_file_content = """
cc_library(
    name = "crc32",
    srcs = ["build/libcrc32c.a"],
    strip_include_prefix = "include",
    hdrs = ["include/crc32c/crc32c.h"],
    visibility = ["//visibility:public"],
)
""",
)

new_local_repository(
    name = "local_highwayhash",
    path = "/home/ian/pub/highwayhash",
    build_file_content = """
cc_library(
    name = "highwayhash",
    srcs = ["lib/libhighwayhash.a"],
    hdrs = glob(["highwayhash/*.h"]),
    visibility = ["//visibility:public"],
)
""",
)

new_local_repository(
    name = "snappy",
    path = "/home/ian/third_party/snappy",
    build_file_content = """
cc_library(
    name = "snappy",
    srcs = [
       "build/libsnappy.a",
    ],
    hdrs = glob(["include/snappy*.h"]),
    strip_include_prefix = "include",
    visibility = ["//visibility:public"],
)
""",
)

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
  name = "com_google_absl",
  urls = ["https://github.com/abseil/abseil-cpp/archive/98eb410c93ad059f9bba1bf43f5bb916fc92a5ea.zip"],
  strip_prefix = "abseil-cpp-98eb410c93ad059f9bba1bf43f5bb916fc92a5ea",
)

load("@com_grail_bazel_toolchain//toolchain:deps.bzl", "bazel_toolchain_dependencies")

bazel_toolchain_dependencies()

load("@com_grail_bazel_toolchain//toolchain:rules.bzl", "llvm_toolchain")

llvm_toolchain(
    name = "llvm_toolchain",
    llvm_version = "9.0.0",
)

load("@llvm_toolchain//:toolchains.bzl", "llvm_register_toolchains")

llvm_register_toolchains()

# taken from https://rules-proto-grpc.com/en/latest/lang/ruby.html
http_archive(
    name = "rules_proto_grpc",
    url = "https://github.com/rules-proto-grpc/rules_proto_grpc/archive/refs/tags/4.3.0.tar.gz",
    strip_prefix = "rules_proto_grpc-4.3.0",
)

load("@rules_proto_grpc//:repositories.bzl", "rules_proto_grpc_repos", "rules_proto_grpc_toolchains")

rules_proto_grpc_toolchains()
rules_proto_grpc_repos()

load("@rules_proto//proto:repositories.bzl", "rules_proto_dependencies", "rules_proto_toolchains")

rules_proto_dependencies()
rules_proto_toolchains()

load("@rules_proto_grpc//ruby:repositories.bzl", rules_proto_grpc_ruby_repos = "ruby_repos")

rules_proto_grpc_ruby_repos()

load("@bazelruby_rules_ruby//ruby:deps.bzl", "rules_ruby_dependencies", "rules_ruby_select_sdk")

rules_ruby_dependencies()

