load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")

#load("//build_deps/py:python_configure.bzl", "python_configure")
#python_configure(name = "local_config_python")

# pybond11
git_repository(
    name = "pybind11_bazel",
    commit = "f22df0e57ba664c2d3cf439ddfb7f8804e3f36c1",
    remote = "https://github.com/pybind/pybind11_bazel.git",
)

http_archive(
    name = "pybind11",
    build_file = "@pybind11_bazel//:pybind11.BUILD",
    strip_prefix = "pybind11-2.9.0",
    urls = [
        "https://github.com/pybind/pybind11/archive/v2.9.0.tar.gz",
    ],
)

# The next were all copied from Riegeli's WORKSPACE to enable riegeli
#http_archive(
#    name = "com_google_absl",
#    sha256 = "6a6eee57ce3375e26d49c542d191ceb90822984d5b587f0ea8e0d0c77016b02b",
#    strip_prefix = "abseil-cpp-20200225.3",
#    urls = [
#        "https://mirror.bazel.build/github.com/abseil/abseil-cpp/archive/20200225.3.zip",
#        "https://github.com/abseil/abseil-cpp/archive/20200225.3.zip",  # 2020-10-09
#    ],
#)
http_archive(
    name = "highwayhash",
    build_file = "//third_party:highwayhash.BUILD",
#   sha256 = "cf891e024699c82aabce528a024adbe16e529f2b4e57f954455e0bf53efae585",
    strip_prefix = "highwayhash-276dd7b4b6d330e4734b756e97ccfb1b69cc2e12",
    urls = [
        "https://mirror.bazel.build/github.com/google/highwayhash/archive/276dd7b4b6d330e4734b756e97ccfb1b69cc2e12.zip",
        "https://github.com/google/highwayhash/archive/276dd7b4b6d330e4734b756e97ccfb1b69cc2e12.zip",  # 2019-02-22
    ],
)




local_repository(
    name = 'benchmark',
    path = "/home/ian/pub/benchmark",
)

local_repository(
    name = 'tensorflow',
    path = '/home/ian/pub/tensorflow',
)

local_repository(
    name = "ord_schema",
    path = "/home/ian/ord_schema",
)

new_local_repository(
  name = "leveldb",
  path = "/home/ian/pub/leveldb",
  build_file_content = """
cc_library(
    name = "leveldb",
    strip_include_prefix = "include",
    hdrs = glob(["include/leveldb/*.h"]),
    srcs = [
      "build/libleveldb.a",
    ],
    visibility = ["//visibility:public"],
)
"""
)


http_archive(
    name = "com_grail_bazel_toolchain",
#   sha256 = "f82f3ddfb4e5e11fd34edc518cbf2943c6e7680a6144976eb33e97369af5453e",
    strip_prefix = "bazel-toolchain-master",
    urls = ["https://github.com/grailbio/bazel-toolchain/archive/master.tar.gz"],
)

# Does not work because the config file only gets produced by cmake
#http_archive(
#    name = "crc32",
#    strip_prefix = "crc32c-main",
#    urls = [
#        "https://github.com/google/crc32c/archive/refs/heads/main.zip",
#    ],
#    build_file_content = """
#cc_library(
#    name = "crc32",
#    srcs = glob(["src/*c", "src/*h"], exclude = ["src/*test*", "src/*benchmark*"]),
#    hdrs = ["include/crc32c/crc32c.h"],
#    copts = ["-iquote external/crc32", "-iquote external/crc32/include"],
#
#    visibility = ["//visibility:public"],
#)
#""",
#)

# Even with the config file generated, could never get it to compile
#new_local_repository(
#    name = "crc32",
#    path = "/home/ian/pub/crc32c",
#    build_file_content = """
#cc_library(
#    name = "crc32",
#    visibility = ["//visibility:public"],
#    srcs = glob(["src/*c", "src/*h"], exclude = ["src/*test*", "src/*benchmark*"]),
#    hdrs = ["include/crc32c/crc32c.h"],
#    copts = ["-iquote external/crc32/build/include", "-iquote build/include", "-iquote include", "-iquote src"],
#)
#""",
#)

new_local_repository(
    name = "crc32",
    path = "/home/ian/pub/crc32c",
    build_file_content = """
cc_library(
    name = "crc32",
    srcs = ["build/libcrc32c.a"],
    strip_include_prefix = "include",
    hdrs = ["include/crc32c/crc32c.h"],
    visibility = ["//visibility:public"],
)
""",
)

new_local_repository(
    name = "local_highwayhash",
    path = "/home/ian/pub/highwayhash",
    build_file_content = """
cc_library(
    name = "highwayhash",
    srcs = ["lib/libhighwayhash.a"],
    hdrs = glob(["highwayhash/*.h"]),
    visibility = ["//visibility:public"],
)
""",
)

new_local_repository(
    name = "snappy",
    path = "/home/ian/third_party/snappy",
    build_file_content = """
cc_library(
    name = "snappy",
    srcs = [
       "build/libsnappy.a",
    ],
    hdrs = glob(["include/snappy*.h"]),
    strip_include_prefix = "include",
    visibility = ["//visibility:public"],
)
""",
)

load("@com_grail_bazel_toolchain//toolchain:deps.bzl", "bazel_toolchain_dependencies")

bazel_toolchain_dependencies()

load("@com_grail_bazel_toolchain//toolchain:rules.bzl", "llvm_toolchain")

llvm_toolchain(
    name = "llvm_toolchain",
    llvm_version = "14.0.0",
)

load("@llvm_toolchain//:toolchains.bzl", "llvm_register_toolchains")

llvm_register_toolchains()

# taken from https://rules-proto-grpc.com/en/latest/lang/ruby.html
http_archive(
    name = "rules_proto_grpc",
    url = "https://github.com/rules-proto-grpc/rules_proto_grpc/archive/refs/tags/4.3.0.tar.gz",
    strip_prefix = "rules_proto_grpc-4.3.0",
)

load("@rules_proto_grpc//:repositories.bzl", "rules_proto_grpc_repos", "rules_proto_grpc_toolchains")

rules_proto_grpc_toolchains()
rules_proto_grpc_repos()

load("@rules_proto_grpc//ruby:repositories.bzl", rules_proto_grpc_ruby_repos = "ruby_repos")

rules_proto_grpc_ruby_repos()

load("@bazelruby_rules_ruby//ruby:deps.bzl", "rules_ruby_dependencies", "rules_ruby_select_sdk")

rules_ruby_dependencies()

new_local_repository(
    name = "lemon",
    path="/home/ian/third_party/lemon_head/include",
    build_file_content = """
cc_library(
    name = "lemon",
    srcs = [
    ],
    hdrs = glob(
        ["lemon/**/*.h"],
    ),
    includes = ["."],
    visibility = ["//visibility:public"],
)
""",
)
