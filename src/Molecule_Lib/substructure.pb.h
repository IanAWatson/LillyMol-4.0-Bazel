// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Molecule_Lib/substructure.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Molecule_5fLib_2fsubstructure_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Molecule_5fLib_2fsubstructure_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2fsubstructure_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Molecule_5fLib_2fsubstructure_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[23]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Molecule_5fLib_2fsubstructure_2eproto;
namespace SubstructureSearch {
class AtomNumberOrHLp;
class AtomNumberOrHLpDefaultTypeInternal;
extern AtomNumberOrHLpDefaultTypeInternal _AtomNumberOrHLp_default_instance_;
class ElementsNeeded;
class ElementsNeededDefaultTypeInternal;
extern ElementsNeededDefaultTypeInternal _ElementsNeeded_default_instance_;
class EnvironmentAttachment;
class EnvironmentAttachmentDefaultTypeInternal;
extern EnvironmentAttachmentDefaultTypeInternal _EnvironmentAttachment_default_instance_;
class LinkAtoms;
class LinkAtomsDefaultTypeInternal;
extern LinkAtomsDefaultTypeInternal _LinkAtoms_default_instance_;
class MinMaxSpecifierInt;
class MinMaxSpecifierIntDefaultTypeInternal;
extern MinMaxSpecifierIntDefaultTypeInternal _MinMaxSpecifierInt_default_instance_;
class MinMaxSpecifierUInt;
class MinMaxSpecifierUIntDefaultTypeInternal;
extern MinMaxSpecifierUIntDefaultTypeInternal _MinMaxSpecifierUInt_default_instance_;
class NoMatchedAtomsBetween;
class NoMatchedAtomsBetweenDefaultTypeInternal;
extern NoMatchedAtomsBetweenDefaultTypeInternal _NoMatchedAtomsBetween_default_instance_;
class QueryMatchResults;
class QueryMatchResultsDefaultTypeInternal;
extern QueryMatchResultsDefaultTypeInternal _QueryMatchResults_default_instance_;
class QueryMatchResults_Matches;
class QueryMatchResults_MatchesDefaultTypeInternal;
extern QueryMatchResults_MatchesDefaultTypeInternal _QueryMatchResults_Matches_default_instance_;
class RingSizeRequirement;
class RingSizeRequirementDefaultTypeInternal;
extern RingSizeRequirementDefaultTypeInternal _RingSizeRequirement_default_instance_;
class SingleSubstructureQuery;
class SingleSubstructureQueryDefaultTypeInternal;
extern SingleSubstructureQueryDefaultTypeInternal _SingleSubstructureQuery_default_instance_;
class SubstructureAtom;
class SubstructureAtomDefaultTypeInternal;
extern SubstructureAtomDefaultTypeInternal _SubstructureAtom_default_instance_;
class SubstructureAtomEnvironment;
class SubstructureAtomEnvironmentDefaultTypeInternal;
extern SubstructureAtomEnvironmentDefaultTypeInternal _SubstructureAtomEnvironment_default_instance_;
class SubstructureAtomSpecifier;
class SubstructureAtomSpecifierDefaultTypeInternal;
extern SubstructureAtomSpecifierDefaultTypeInternal _SubstructureAtomSpecifier_default_instance_;
class SubstructureBond;
class SubstructureBondDefaultTypeInternal;
extern SubstructureBondDefaultTypeInternal _SubstructureBond_default_instance_;
class SubstructureChiralCenter;
class SubstructureChiralCenterDefaultTypeInternal;
extern SubstructureChiralCenterDefaultTypeInternal _SubstructureChiralCenter_default_instance_;
class SubstructureEnvironment;
class SubstructureEnvironmentDefaultTypeInternal;
extern SubstructureEnvironmentDefaultTypeInternal _SubstructureEnvironment_default_instance_;
class SubstructureEnvironmentBond;
class SubstructureEnvironmentBondDefaultTypeInternal;
extern SubstructureEnvironmentBondDefaultTypeInternal _SubstructureEnvironmentBond_default_instance_;
class SubstructureQuery;
class SubstructureQueryDefaultTypeInternal;
extern SubstructureQueryDefaultTypeInternal _SubstructureQuery_default_instance_;
class SubstructureRingBase;
class SubstructureRingBaseDefaultTypeInternal;
extern SubstructureRingBaseDefaultTypeInternal _SubstructureRingBase_default_instance_;
class SubstructureRingEnvironment;
class SubstructureRingEnvironmentDefaultTypeInternal;
extern SubstructureRingEnvironmentDefaultTypeInternal _SubstructureRingEnvironment_default_instance_;
class SubstructureRingSpecification;
class SubstructureRingSpecificationDefaultTypeInternal;
extern SubstructureRingSpecificationDefaultTypeInternal _SubstructureRingSpecification_default_instance_;
class SubstructureRingSystemSpecification;
class SubstructureRingSystemSpecificationDefaultTypeInternal;
extern SubstructureRingSystemSpecificationDefaultTypeInternal _SubstructureRingSystemSpecification_default_instance_;
}  // namespace SubstructureSearch
PROTOBUF_NAMESPACE_OPEN
template<> ::SubstructureSearch::AtomNumberOrHLp* Arena::CreateMaybeMessage<::SubstructureSearch::AtomNumberOrHLp>(Arena*);
template<> ::SubstructureSearch::ElementsNeeded* Arena::CreateMaybeMessage<::SubstructureSearch::ElementsNeeded>(Arena*);
template<> ::SubstructureSearch::EnvironmentAttachment* Arena::CreateMaybeMessage<::SubstructureSearch::EnvironmentAttachment>(Arena*);
template<> ::SubstructureSearch::LinkAtoms* Arena::CreateMaybeMessage<::SubstructureSearch::LinkAtoms>(Arena*);
template<> ::SubstructureSearch::MinMaxSpecifierInt* Arena::CreateMaybeMessage<::SubstructureSearch::MinMaxSpecifierInt>(Arena*);
template<> ::SubstructureSearch::MinMaxSpecifierUInt* Arena::CreateMaybeMessage<::SubstructureSearch::MinMaxSpecifierUInt>(Arena*);
template<> ::SubstructureSearch::NoMatchedAtomsBetween* Arena::CreateMaybeMessage<::SubstructureSearch::NoMatchedAtomsBetween>(Arena*);
template<> ::SubstructureSearch::QueryMatchResults* Arena::CreateMaybeMessage<::SubstructureSearch::QueryMatchResults>(Arena*);
template<> ::SubstructureSearch::QueryMatchResults_Matches* Arena::CreateMaybeMessage<::SubstructureSearch::QueryMatchResults_Matches>(Arena*);
template<> ::SubstructureSearch::RingSizeRequirement* Arena::CreateMaybeMessage<::SubstructureSearch::RingSizeRequirement>(Arena*);
template<> ::SubstructureSearch::SingleSubstructureQuery* Arena::CreateMaybeMessage<::SubstructureSearch::SingleSubstructureQuery>(Arena*);
template<> ::SubstructureSearch::SubstructureAtom* Arena::CreateMaybeMessage<::SubstructureSearch::SubstructureAtom>(Arena*);
template<> ::SubstructureSearch::SubstructureAtomEnvironment* Arena::CreateMaybeMessage<::SubstructureSearch::SubstructureAtomEnvironment>(Arena*);
template<> ::SubstructureSearch::SubstructureAtomSpecifier* Arena::CreateMaybeMessage<::SubstructureSearch::SubstructureAtomSpecifier>(Arena*);
template<> ::SubstructureSearch::SubstructureBond* Arena::CreateMaybeMessage<::SubstructureSearch::SubstructureBond>(Arena*);
template<> ::SubstructureSearch::SubstructureChiralCenter* Arena::CreateMaybeMessage<::SubstructureSearch::SubstructureChiralCenter>(Arena*);
template<> ::SubstructureSearch::SubstructureEnvironment* Arena::CreateMaybeMessage<::SubstructureSearch::SubstructureEnvironment>(Arena*);
template<> ::SubstructureSearch::SubstructureEnvironmentBond* Arena::CreateMaybeMessage<::SubstructureSearch::SubstructureEnvironmentBond>(Arena*);
template<> ::SubstructureSearch::SubstructureQuery* Arena::CreateMaybeMessage<::SubstructureSearch::SubstructureQuery>(Arena*);
template<> ::SubstructureSearch::SubstructureRingBase* Arena::CreateMaybeMessage<::SubstructureSearch::SubstructureRingBase>(Arena*);
template<> ::SubstructureSearch::SubstructureRingEnvironment* Arena::CreateMaybeMessage<::SubstructureSearch::SubstructureRingEnvironment>(Arena*);
template<> ::SubstructureSearch::SubstructureRingSpecification* Arena::CreateMaybeMessage<::SubstructureSearch::SubstructureRingSpecification>(Arena*);
template<> ::SubstructureSearch::SubstructureRingSystemSpecification* Arena::CreateMaybeMessage<::SubstructureSearch::SubstructureRingSystemSpecification>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SubstructureSearch {

enum Aromaticity : int {
  SS_ALIPHATIC = 1,
  SS_AROMATIC = 2
};
bool Aromaticity_IsValid(int value);
constexpr Aromaticity Aromaticity_MIN = SS_ALIPHATIC;
constexpr Aromaticity Aromaticity_MAX = SS_AROMATIC;
constexpr int Aromaticity_ARRAYSIZE = Aromaticity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Aromaticity_descriptor();
template<typename T>
inline const std::string& Aromaticity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Aromaticity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Aromaticity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Aromaticity_descriptor(), enum_t_value);
}
inline bool Aromaticity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Aromaticity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Aromaticity>(
    Aromaticity_descriptor(), name, value);
}
enum BondType : int {
  SS_SINGLE_BOND = 3,
  SS_DOUBLE_BOND = 4,
  SS_TRIPLE_BOND = 5,
  SS_AROMATIC_BOND = 6,
  SS_BOND = 7
};
bool BondType_IsValid(int value);
constexpr BondType BondType_MIN = SS_SINGLE_BOND;
constexpr BondType BondType_MAX = SS_BOND;
constexpr int BondType_ARRAYSIZE = BondType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BondType_descriptor();
template<typename T>
inline const std::string& BondType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BondType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BondType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BondType_descriptor(), enum_t_value);
}
inline bool BondType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BondType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BondType>(
    BondType_descriptor(), name, value);
}
enum Operator : int {
  SS_OR = 8,
  SS_AND = 9,
  SS_XOR = 10,
  SS_LP_AND = 11
};
bool Operator_IsValid(int value);
constexpr Operator Operator_MIN = SS_OR;
constexpr Operator Operator_MAX = SS_LP_AND;
constexpr int Operator_ARRAYSIZE = Operator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operator_descriptor();
template<typename T>
inline const std::string& Operator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Operator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Operator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Operator_descriptor(), enum_t_value);
}
inline bool Operator_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Operator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Operator>(
    Operator_descriptor(), name, value);
}
// ===================================================================

class AtomNumberOrHLp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubstructureSearch.AtomNumberOrHLp) */ {
 public:
  inline AtomNumberOrHLp() : AtomNumberOrHLp(nullptr) {}
  virtual ~AtomNumberOrHLp();

  AtomNumberOrHLp(const AtomNumberOrHLp& from);
  AtomNumberOrHLp(AtomNumberOrHLp&& from) noexcept
    : AtomNumberOrHLp() {
    *this = ::std::move(from);
  }

  inline AtomNumberOrHLp& operator=(const AtomNumberOrHLp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AtomNumberOrHLp& operator=(AtomNumberOrHLp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AtomNumberOrHLp& default_instance();

  enum AtomNumberOrCase {
    kAtomNumber = 1,
    kHOrLp = 2,
    ATOMNUMBEROR_NOT_SET = 0,
  };

  static inline const AtomNumberOrHLp* internal_default_instance() {
    return reinterpret_cast<const AtomNumberOrHLp*>(
               &_AtomNumberOrHLp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AtomNumberOrHLp& a, AtomNumberOrHLp& b) {
    a.Swap(&b);
  }
  inline void Swap(AtomNumberOrHLp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AtomNumberOrHLp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AtomNumberOrHLp* New() const final {
    return CreateMaybeMessage<AtomNumberOrHLp>(nullptr);
  }

  AtomNumberOrHLp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AtomNumberOrHLp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AtomNumberOrHLp& from);
  void MergeFrom(const AtomNumberOrHLp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AtomNumberOrHLp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubstructureSearch.AtomNumberOrHLp";
  }
  protected:
  explicit AtomNumberOrHLp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
    return ::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAtomNumberFieldNumber = 1,
    kHOrLpFieldNumber = 2,
  };
  // uint32 atom_number = 1;
  bool has_atom_number() const;
  private:
  bool _internal_has_atom_number() const;
  public:
  void clear_atom_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 atom_number() const;
  void set_atom_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_atom_number() const;
  void _internal_set_atom_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // string h_or_lp = 2;
  bool has_h_or_lp() const;
  private:
  bool _internal_has_h_or_lp() const;
  public:
  void clear_h_or_lp();
  const std::string& h_or_lp() const;
  void set_h_or_lp(const std::string& value);
  void set_h_or_lp(std::string&& value);
  void set_h_or_lp(const char* value);
  void set_h_or_lp(const char* value, size_t size);
  std::string* mutable_h_or_lp();
  std::string* release_h_or_lp();
  void set_allocated_h_or_lp(std::string* h_or_lp);
  private:
  const std::string& _internal_h_or_lp() const;
  void _internal_set_h_or_lp(const std::string& value);
  std::string* _internal_mutable_h_or_lp();
  public:

  void clear_AtomNumberOr();
  AtomNumberOrCase AtomNumberOr_case() const;
  // @@protoc_insertion_point(class_scope:SubstructureSearch.AtomNumberOrHLp)
 private:
  class _Internal;
  void set_has_atom_number();
  void set_has_h_or_lp();

  inline bool has_AtomNumberOr() const;
  inline void clear_has_AtomNumberOr();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union AtomNumberOrUnion {
    AtomNumberOrUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 atom_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr h_or_lp_;
  } AtomNumberOr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Molecule_5fLib_2fsubstructure_2eproto;
};
// -------------------------------------------------------------------

class SubstructureChiralCenter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubstructureSearch.SubstructureChiralCenter) */ {
 public:
  inline SubstructureChiralCenter() : SubstructureChiralCenter(nullptr) {}
  virtual ~SubstructureChiralCenter();

  SubstructureChiralCenter(const SubstructureChiralCenter& from);
  SubstructureChiralCenter(SubstructureChiralCenter&& from) noexcept
    : SubstructureChiralCenter() {
    *this = ::std::move(from);
  }

  inline SubstructureChiralCenter& operator=(const SubstructureChiralCenter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstructureChiralCenter& operator=(SubstructureChiralCenter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstructureChiralCenter& default_instance();

  static inline const SubstructureChiralCenter* internal_default_instance() {
    return reinterpret_cast<const SubstructureChiralCenter*>(
               &_SubstructureChiralCenter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SubstructureChiralCenter& a, SubstructureChiralCenter& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstructureChiralCenter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstructureChiralCenter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstructureChiralCenter* New() const final {
    return CreateMaybeMessage<SubstructureChiralCenter>(nullptr);
  }

  SubstructureChiralCenter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstructureChiralCenter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstructureChiralCenter& from);
  void MergeFrom(const SubstructureChiralCenter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstructureChiralCenter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubstructureSearch.SubstructureChiralCenter";
  }
  protected:
  explicit SubstructureChiralCenter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
    return ::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopFrontFieldNumber = 2,
    kTopBackFieldNumber = 3,
    kLeftDownFieldNumber = 4,
    kRightDownFieldNumber = 5,
    kCenterFieldNumber = 1,
  };
  // optional .SubstructureSearch.AtomNumberOrHLp top_front = 2;
  bool has_top_front() const;
  private:
  bool _internal_has_top_front() const;
  public:
  void clear_top_front();
  const ::SubstructureSearch::AtomNumberOrHLp& top_front() const;
  ::SubstructureSearch::AtomNumberOrHLp* release_top_front();
  ::SubstructureSearch::AtomNumberOrHLp* mutable_top_front();
  void set_allocated_top_front(::SubstructureSearch::AtomNumberOrHLp* top_front);
  private:
  const ::SubstructureSearch::AtomNumberOrHLp& _internal_top_front() const;
  ::SubstructureSearch::AtomNumberOrHLp* _internal_mutable_top_front();
  public:
  void unsafe_arena_set_allocated_top_front(
      ::SubstructureSearch::AtomNumberOrHLp* top_front);
  ::SubstructureSearch::AtomNumberOrHLp* unsafe_arena_release_top_front();

  // optional .SubstructureSearch.AtomNumberOrHLp top_back = 3;
  bool has_top_back() const;
  private:
  bool _internal_has_top_back() const;
  public:
  void clear_top_back();
  const ::SubstructureSearch::AtomNumberOrHLp& top_back() const;
  ::SubstructureSearch::AtomNumberOrHLp* release_top_back();
  ::SubstructureSearch::AtomNumberOrHLp* mutable_top_back();
  void set_allocated_top_back(::SubstructureSearch::AtomNumberOrHLp* top_back);
  private:
  const ::SubstructureSearch::AtomNumberOrHLp& _internal_top_back() const;
  ::SubstructureSearch::AtomNumberOrHLp* _internal_mutable_top_back();
  public:
  void unsafe_arena_set_allocated_top_back(
      ::SubstructureSearch::AtomNumberOrHLp* top_back);
  ::SubstructureSearch::AtomNumberOrHLp* unsafe_arena_release_top_back();

  // optional .SubstructureSearch.AtomNumberOrHLp left_down = 4;
  bool has_left_down() const;
  private:
  bool _internal_has_left_down() const;
  public:
  void clear_left_down();
  const ::SubstructureSearch::AtomNumberOrHLp& left_down() const;
  ::SubstructureSearch::AtomNumberOrHLp* release_left_down();
  ::SubstructureSearch::AtomNumberOrHLp* mutable_left_down();
  void set_allocated_left_down(::SubstructureSearch::AtomNumberOrHLp* left_down);
  private:
  const ::SubstructureSearch::AtomNumberOrHLp& _internal_left_down() const;
  ::SubstructureSearch::AtomNumberOrHLp* _internal_mutable_left_down();
  public:
  void unsafe_arena_set_allocated_left_down(
      ::SubstructureSearch::AtomNumberOrHLp* left_down);
  ::SubstructureSearch::AtomNumberOrHLp* unsafe_arena_release_left_down();

  // optional .SubstructureSearch.AtomNumberOrHLp right_down = 5;
  bool has_right_down() const;
  private:
  bool _internal_has_right_down() const;
  public:
  void clear_right_down();
  const ::SubstructureSearch::AtomNumberOrHLp& right_down() const;
  ::SubstructureSearch::AtomNumberOrHLp* release_right_down();
  ::SubstructureSearch::AtomNumberOrHLp* mutable_right_down();
  void set_allocated_right_down(::SubstructureSearch::AtomNumberOrHLp* right_down);
  private:
  const ::SubstructureSearch::AtomNumberOrHLp& _internal_right_down() const;
  ::SubstructureSearch::AtomNumberOrHLp* _internal_mutable_right_down();
  public:
  void unsafe_arena_set_allocated_right_down(
      ::SubstructureSearch::AtomNumberOrHLp* right_down);
  ::SubstructureSearch::AtomNumberOrHLp* unsafe_arena_release_right_down();

  // optional uint32 center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  ::PROTOBUF_NAMESPACE_ID::uint32 center() const;
  void set_center(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_center() const;
  void _internal_set_center(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SubstructureSearch.SubstructureChiralCenter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::SubstructureSearch::AtomNumberOrHLp* top_front_;
  ::SubstructureSearch::AtomNumberOrHLp* top_back_;
  ::SubstructureSearch::AtomNumberOrHLp* left_down_;
  ::SubstructureSearch::AtomNumberOrHLp* right_down_;
  ::PROTOBUF_NAMESPACE_ID::uint32 center_;
  friend struct ::TableStruct_Molecule_5fLib_2fsubstructure_2eproto;
};
// -------------------------------------------------------------------

class SubstructureBond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubstructureSearch.SubstructureBond) */ {
 public:
  inline SubstructureBond() : SubstructureBond(nullptr) {}
  virtual ~SubstructureBond();

  SubstructureBond(const SubstructureBond& from);
  SubstructureBond(SubstructureBond&& from) noexcept
    : SubstructureBond() {
    *this = ::std::move(from);
  }

  inline SubstructureBond& operator=(const SubstructureBond& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstructureBond& operator=(SubstructureBond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstructureBond& default_instance();

  static inline const SubstructureBond* internal_default_instance() {
    return reinterpret_cast<const SubstructureBond*>(
               &_SubstructureBond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SubstructureBond& a, SubstructureBond& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstructureBond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstructureBond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstructureBond* New() const final {
    return CreateMaybeMessage<SubstructureBond>(nullptr);
  }

  SubstructureBond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstructureBond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstructureBond& from);
  void MergeFrom(const SubstructureBond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstructureBond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubstructureSearch.SubstructureBond";
  }
  protected:
  explicit SubstructureBond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
    return ::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBondTypeFieldNumber = 1,
    kOtherEndFieldNumber = 2,
  };
  // repeated .SubstructureSearch.BondType bond_type = 1;
  int bond_type_size() const;
  private:
  int _internal_bond_type_size() const;
  public:
  void clear_bond_type();
  private:
  ::SubstructureSearch::BondType _internal_bond_type(int index) const;
  void _internal_add_bond_type(::SubstructureSearch::BondType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_bond_type();
  public:
  ::SubstructureSearch::BondType bond_type(int index) const;
  void set_bond_type(int index, ::SubstructureSearch::BondType value);
  void add_bond_type(::SubstructureSearch::BondType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& bond_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_bond_type();

  // optional uint32 other_end = 2;
  bool has_other_end() const;
  private:
  bool _internal_has_other_end() const;
  public:
  void clear_other_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 other_end() const;
  void set_other_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_other_end() const;
  void _internal_set_other_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SubstructureSearch.SubstructureBond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> bond_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 other_end_;
  friend struct ::TableStruct_Molecule_5fLib_2fsubstructure_2eproto;
};
// -------------------------------------------------------------------

class SubstructureEnvironmentBond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubstructureSearch.SubstructureEnvironmentBond) */ {
 public:
  inline SubstructureEnvironmentBond() : SubstructureEnvironmentBond(nullptr) {}
  virtual ~SubstructureEnvironmentBond();

  SubstructureEnvironmentBond(const SubstructureEnvironmentBond& from);
  SubstructureEnvironmentBond(SubstructureEnvironmentBond&& from) noexcept
    : SubstructureEnvironmentBond() {
    *this = ::std::move(from);
  }

  inline SubstructureEnvironmentBond& operator=(const SubstructureEnvironmentBond& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstructureEnvironmentBond& operator=(SubstructureEnvironmentBond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstructureEnvironmentBond& default_instance();

  static inline const SubstructureEnvironmentBond* internal_default_instance() {
    return reinterpret_cast<const SubstructureEnvironmentBond*>(
               &_SubstructureEnvironmentBond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SubstructureEnvironmentBond& a, SubstructureEnvironmentBond& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstructureEnvironmentBond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstructureEnvironmentBond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstructureEnvironmentBond* New() const final {
    return CreateMaybeMessage<SubstructureEnvironmentBond>(nullptr);
  }

  SubstructureEnvironmentBond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstructureEnvironmentBond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstructureEnvironmentBond& from);
  void MergeFrom(const SubstructureEnvironmentBond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstructureEnvironmentBond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubstructureSearch.SubstructureEnvironmentBond";
  }
  protected:
  explicit SubstructureEnvironmentBond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
    return ::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBondTypeFieldNumber = 1,
    kOtherEndFieldNumber = 2,
  };
  // repeated .SubstructureSearch.BondType bond_type = 1;
  int bond_type_size() const;
  private:
  int _internal_bond_type_size() const;
  public:
  void clear_bond_type();
  private:
  ::SubstructureSearch::BondType _internal_bond_type(int index) const;
  void _internal_add_bond_type(::SubstructureSearch::BondType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_bond_type();
  public:
  ::SubstructureSearch::BondType bond_type(int index) const;
  void set_bond_type(int index, ::SubstructureSearch::BondType value);
  void add_bond_type(::SubstructureSearch::BondType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& bond_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_bond_type();

  // repeated uint32 other_end = 2;
  int other_end_size() const;
  private:
  int _internal_other_end_size() const;
  public:
  void clear_other_end();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_other_end(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_other_end() const;
  void _internal_add_other_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_other_end();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 other_end(int index) const;
  void set_other_end(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_other_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      other_end() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_other_end();

  // @@protoc_insertion_point(class_scope:SubstructureSearch.SubstructureEnvironmentBond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> bond_type_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > other_end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Molecule_5fLib_2fsubstructure_2eproto;
};
// -------------------------------------------------------------------

class ElementsNeeded PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubstructureSearch.ElementsNeeded) */ {
 public:
  inline ElementsNeeded() : ElementsNeeded(nullptr) {}
  virtual ~ElementsNeeded();

  ElementsNeeded(const ElementsNeeded& from);
  ElementsNeeded(ElementsNeeded&& from) noexcept
    : ElementsNeeded() {
    *this = ::std::move(from);
  }

  inline ElementsNeeded& operator=(const ElementsNeeded& from) {
    CopyFrom(from);
    return *this;
  }
  inline ElementsNeeded& operator=(ElementsNeeded&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ElementsNeeded& default_instance();

  enum ElementSpecifierCase {
    kAtomicNumber = 1,
    kAtomicSymbol = 2,
    ELEMENTSPECIFIER_NOT_SET = 0,
  };

  static inline const ElementsNeeded* internal_default_instance() {
    return reinterpret_cast<const ElementsNeeded*>(
               &_ElementsNeeded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ElementsNeeded& a, ElementsNeeded& b) {
    a.Swap(&b);
  }
  inline void Swap(ElementsNeeded* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ElementsNeeded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ElementsNeeded* New() const final {
    return CreateMaybeMessage<ElementsNeeded>(nullptr);
  }

  ElementsNeeded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ElementsNeeded>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ElementsNeeded& from);
  void MergeFrom(const ElementsNeeded& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementsNeeded* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubstructureSearch.ElementsNeeded";
  }
  protected:
  explicit ElementsNeeded(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
    return ::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHitsNeededFieldNumber = 3,
    kMinHitsNeededFieldNumber = 4,
    kMaxHitsNeededFieldNumber = 5,
    kAtomicNumberFieldNumber = 1,
    kAtomicSymbolFieldNumber = 2,
  };
  // repeated uint32 hits_needed = 3;
  int hits_needed_size() const;
  private:
  int _internal_hits_needed_size() const;
  public:
  void clear_hits_needed();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hits_needed(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_hits_needed() const;
  void _internal_add_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_hits_needed();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 hits_needed(int index) const;
  void set_hits_needed(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      hits_needed() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_hits_needed();

  // optional uint32 min_hits_needed = 4;
  bool has_min_hits_needed() const;
  private:
  bool _internal_has_min_hits_needed() const;
  public:
  void clear_min_hits_needed();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_hits_needed() const;
  void set_min_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_hits_needed() const;
  void _internal_set_min_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_hits_needed = 5;
  bool has_max_hits_needed() const;
  private:
  bool _internal_has_max_hits_needed() const;
  public:
  void clear_max_hits_needed();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_hits_needed() const;
  void set_max_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_hits_needed() const;
  void _internal_set_max_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 atomic_number = 1;
  bool has_atomic_number() const;
  private:
  bool _internal_has_atomic_number() const;
  public:
  void clear_atomic_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 atomic_number() const;
  void set_atomic_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_atomic_number() const;
  void _internal_set_atomic_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // string atomic_symbol = 2;
  bool has_atomic_symbol() const;
  private:
  bool _internal_has_atomic_symbol() const;
  public:
  void clear_atomic_symbol();
  const std::string& atomic_symbol() const;
  void set_atomic_symbol(const std::string& value);
  void set_atomic_symbol(std::string&& value);
  void set_atomic_symbol(const char* value);
  void set_atomic_symbol(const char* value, size_t size);
  std::string* mutable_atomic_symbol();
  std::string* release_atomic_symbol();
  void set_allocated_atomic_symbol(std::string* atomic_symbol);
  private:
  const std::string& _internal_atomic_symbol() const;
  void _internal_set_atomic_symbol(const std::string& value);
  std::string* _internal_mutable_atomic_symbol();
  public:

  void clear_ElementSpecifier();
  ElementSpecifierCase ElementSpecifier_case() const;
  // @@protoc_insertion_point(class_scope:SubstructureSearch.ElementsNeeded)
 private:
  class _Internal;
  void set_has_atomic_number();
  void set_has_atomic_symbol();

  inline bool has_ElementSpecifier() const;
  inline void clear_has_ElementSpecifier();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > hits_needed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_hits_needed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_hits_needed_;
  union ElementSpecifierUnion {
    ElementSpecifierUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 atomic_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr atomic_symbol_;
  } ElementSpecifier_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Molecule_5fLib_2fsubstructure_2eproto;
};
// -------------------------------------------------------------------

class NoMatchedAtomsBetween PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubstructureSearch.NoMatchedAtomsBetween) */ {
 public:
  inline NoMatchedAtomsBetween() : NoMatchedAtomsBetween(nullptr) {}
  virtual ~NoMatchedAtomsBetween();

  NoMatchedAtomsBetween(const NoMatchedAtomsBetween& from);
  NoMatchedAtomsBetween(NoMatchedAtomsBetween&& from) noexcept
    : NoMatchedAtomsBetween() {
    *this = ::std::move(from);
  }

  inline NoMatchedAtomsBetween& operator=(const NoMatchedAtomsBetween& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoMatchedAtomsBetween& operator=(NoMatchedAtomsBetween&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NoMatchedAtomsBetween& default_instance();

  static inline const NoMatchedAtomsBetween* internal_default_instance() {
    return reinterpret_cast<const NoMatchedAtomsBetween*>(
               &_NoMatchedAtomsBetween_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NoMatchedAtomsBetween& a, NoMatchedAtomsBetween& b) {
    a.Swap(&b);
  }
  inline void Swap(NoMatchedAtomsBetween* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoMatchedAtomsBetween* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NoMatchedAtomsBetween* New() const final {
    return CreateMaybeMessage<NoMatchedAtomsBetween>(nullptr);
  }

  NoMatchedAtomsBetween* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NoMatchedAtomsBetween>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NoMatchedAtomsBetween& from);
  void MergeFrom(const NoMatchedAtomsBetween& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoMatchedAtomsBetween* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubstructureSearch.NoMatchedAtomsBetween";
  }
  protected:
  explicit NoMatchedAtomsBetween(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
    return ::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQualifierFieldNumber = 3,
    kA1FieldNumber = 1,
    kA2FieldNumber = 2,
  };
  // optional string qualifier = 3;
  bool has_qualifier() const;
  private:
  bool _internal_has_qualifier() const;
  public:
  void clear_qualifier();
  const std::string& qualifier() const;
  void set_qualifier(const std::string& value);
  void set_qualifier(std::string&& value);
  void set_qualifier(const char* value);
  void set_qualifier(const char* value, size_t size);
  std::string* mutable_qualifier();
  std::string* release_qualifier();
  void set_allocated_qualifier(std::string* qualifier);
  private:
  const std::string& _internal_qualifier() const;
  void _internal_set_qualifier(const std::string& value);
  std::string* _internal_mutable_qualifier();
  public:

  // optional uint32 a1 = 1;
  bool has_a1() const;
  private:
  bool _internal_has_a1() const;
  public:
  void clear_a1();
  ::PROTOBUF_NAMESPACE_ID::uint32 a1() const;
  void set_a1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_a1() const;
  void _internal_set_a1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 a2 = 2;
  bool has_a2() const;
  private:
  bool _internal_has_a2() const;
  public:
  void clear_a2();
  ::PROTOBUF_NAMESPACE_ID::uint32 a2() const;
  void set_a2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_a2() const;
  void _internal_set_a2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SubstructureSearch.NoMatchedAtomsBetween)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qualifier_;
  ::PROTOBUF_NAMESPACE_ID::uint32 a1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 a2_;
  friend struct ::TableStruct_Molecule_5fLib_2fsubstructure_2eproto;
};
// -------------------------------------------------------------------

class LinkAtoms PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubstructureSearch.LinkAtoms) */ {
 public:
  inline LinkAtoms() : LinkAtoms(nullptr) {}
  virtual ~LinkAtoms();

  LinkAtoms(const LinkAtoms& from);
  LinkAtoms(LinkAtoms&& from) noexcept
    : LinkAtoms() {
    *this = ::std::move(from);
  }

  inline LinkAtoms& operator=(const LinkAtoms& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkAtoms& operator=(LinkAtoms&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinkAtoms& default_instance();

  static inline const LinkAtoms* internal_default_instance() {
    return reinterpret_cast<const LinkAtoms*>(
               &_LinkAtoms_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LinkAtoms& a, LinkAtoms& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkAtoms* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkAtoms* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinkAtoms* New() const final {
    return CreateMaybeMessage<LinkAtoms>(nullptr);
  }

  LinkAtoms* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinkAtoms>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinkAtoms& from);
  void MergeFrom(const LinkAtoms& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkAtoms* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubstructureSearch.LinkAtoms";
  }
  protected:
  explicit LinkAtoms(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
    return ::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistanceFieldNumber = 3,
    kA1FieldNumber = 1,
    kA2FieldNumber = 2,
    kMinDistanceFieldNumber = 4,
    kMaxDistanceFieldNumber = 5,
  };
  // repeated uint32 distance = 3;
  int distance_size() const;
  private:
  int _internal_distance_size() const;
  public:
  void clear_distance();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_distance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_distance() const;
  void _internal_add_distance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_distance();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 distance(int index) const;
  void set_distance(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_distance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      distance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_distance();

  // optional uint32 a1 = 1;
  bool has_a1() const;
  private:
  bool _internal_has_a1() const;
  public:
  void clear_a1();
  ::PROTOBUF_NAMESPACE_ID::uint32 a1() const;
  void set_a1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_a1() const;
  void _internal_set_a1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 a2 = 2;
  bool has_a2() const;
  private:
  bool _internal_has_a2() const;
  public:
  void clear_a2();
  ::PROTOBUF_NAMESPACE_ID::uint32 a2() const;
  void set_a2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_a2() const;
  void _internal_set_a2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_distance = 4;
  bool has_min_distance() const;
  private:
  bool _internal_has_min_distance() const;
  public:
  void clear_min_distance();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_distance() const;
  void set_min_distance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_distance() const;
  void _internal_set_min_distance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_distance = 5;
  bool has_max_distance() const;
  private:
  bool _internal_has_max_distance() const;
  public:
  void clear_max_distance();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_distance() const;
  void set_max_distance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_distance() const;
  void _internal_set_max_distance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SubstructureSearch.LinkAtoms)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > distance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 a1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 a2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_distance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_distance_;
  friend struct ::TableStruct_Molecule_5fLib_2fsubstructure_2eproto;
};
// -------------------------------------------------------------------

class EnvironmentAttachment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubstructureSearch.EnvironmentAttachment) */ {
 public:
  inline EnvironmentAttachment() : EnvironmentAttachment(nullptr) {}
  virtual ~EnvironmentAttachment();

  EnvironmentAttachment(const EnvironmentAttachment& from);
  EnvironmentAttachment(EnvironmentAttachment&& from) noexcept
    : EnvironmentAttachment() {
    *this = ::std::move(from);
  }

  inline EnvironmentAttachment& operator=(const EnvironmentAttachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvironmentAttachment& operator=(EnvironmentAttachment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvironmentAttachment& default_instance();

  static inline const EnvironmentAttachment* internal_default_instance() {
    return reinterpret_cast<const EnvironmentAttachment*>(
               &_EnvironmentAttachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EnvironmentAttachment& a, EnvironmentAttachment& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvironmentAttachment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnvironmentAttachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvironmentAttachment* New() const final {
    return CreateMaybeMessage<EnvironmentAttachment>(nullptr);
  }

  EnvironmentAttachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvironmentAttachment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvironmentAttachment& from);
  void MergeFrom(const EnvironmentAttachment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvironmentAttachment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubstructureSearch.EnvironmentAttachment";
  }
  protected:
  explicit EnvironmentAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
    return ::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachmentPointFieldNumber = 1,
    kBondFieldNumber = 2,
    kSubstructureBondFieldNumber = 3,
  };
  // repeated uint32 attachment_point = 1;
  int attachment_point_size() const;
  private:
  int _internal_attachment_point_size() const;
  public:
  void clear_attachment_point();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attachment_point(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_attachment_point() const;
  void _internal_add_attachment_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_attachment_point();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 attachment_point(int index) const;
  void set_attachment_point(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_attachment_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      attachment_point() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_attachment_point();

  // repeated .SubstructureSearch.BondType bond = 2;
  int bond_size() const;
  private:
  int _internal_bond_size() const;
  public:
  void clear_bond();
  private:
  ::SubstructureSearch::BondType _internal_bond(int index) const;
  void _internal_add_bond(::SubstructureSearch::BondType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_bond();
  public:
  ::SubstructureSearch::BondType bond(int index) const;
  void set_bond(int index, ::SubstructureSearch::BondType value);
  void add_bond(::SubstructureSearch::BondType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& bond() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_bond();

  // optional string substructure_bond = 3;
  bool has_substructure_bond() const;
  private:
  bool _internal_has_substructure_bond() const;
  public:
  void clear_substructure_bond();
  const std::string& substructure_bond() const;
  void set_substructure_bond(const std::string& value);
  void set_substructure_bond(std::string&& value);
  void set_substructure_bond(const char* value);
  void set_substructure_bond(const char* value, size_t size);
  std::string* mutable_substructure_bond();
  std::string* release_substructure_bond();
  void set_allocated_substructure_bond(std::string* substructure_bond);
  private:
  const std::string& _internal_substructure_bond() const;
  void _internal_set_substructure_bond(const std::string& value);
  std::string* _internal_mutable_substructure_bond();
  public:

  // @@protoc_insertion_point(class_scope:SubstructureSearch.EnvironmentAttachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > attachment_point_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> bond_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr substructure_bond_;
  friend struct ::TableStruct_Molecule_5fLib_2fsubstructure_2eproto;
};
// -------------------------------------------------------------------

class SubstructureRingEnvironment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubstructureSearch.SubstructureRingEnvironment) */ {
 public:
  inline SubstructureRingEnvironment() : SubstructureRingEnvironment(nullptr) {}
  virtual ~SubstructureRingEnvironment();

  SubstructureRingEnvironment(const SubstructureRingEnvironment& from);
  SubstructureRingEnvironment(SubstructureRingEnvironment&& from) noexcept
    : SubstructureRingEnvironment() {
    *this = ::std::move(from);
  }

  inline SubstructureRingEnvironment& operator=(const SubstructureRingEnvironment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstructureRingEnvironment& operator=(SubstructureRingEnvironment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstructureRingEnvironment& default_instance();

  static inline const SubstructureRingEnvironment* internal_default_instance() {
    return reinterpret_cast<const SubstructureRingEnvironment*>(
               &_SubstructureRingEnvironment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SubstructureRingEnvironment& a, SubstructureRingEnvironment& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstructureRingEnvironment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstructureRingEnvironment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstructureRingEnvironment* New() const final {
    return CreateMaybeMessage<SubstructureRingEnvironment>(nullptr);
  }

  SubstructureRingEnvironment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstructureRingEnvironment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstructureRingEnvironment& from);
  void MergeFrom(const SubstructureRingEnvironment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstructureRingEnvironment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubstructureSearch.SubstructureRingEnvironment";
  }
  protected:
  explicit SubstructureRingEnvironment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
    return ::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubstructureAtomFieldNumber = 1,
    kMinHitsNeededFieldNumber = 2,
    kMaxHitsNeededFieldNumber = 3,
  };
  // optional .SubstructureSearch.SubstructureAtom substructure_atom = 1;
  bool has_substructure_atom() const;
  private:
  bool _internal_has_substructure_atom() const;
  public:
  void clear_substructure_atom();
  const ::SubstructureSearch::SubstructureAtom& substructure_atom() const;
  ::SubstructureSearch::SubstructureAtom* release_substructure_atom();
  ::SubstructureSearch::SubstructureAtom* mutable_substructure_atom();
  void set_allocated_substructure_atom(::SubstructureSearch::SubstructureAtom* substructure_atom);
  private:
  const ::SubstructureSearch::SubstructureAtom& _internal_substructure_atom() const;
  ::SubstructureSearch::SubstructureAtom* _internal_mutable_substructure_atom();
  public:
  void unsafe_arena_set_allocated_substructure_atom(
      ::SubstructureSearch::SubstructureAtom* substructure_atom);
  ::SubstructureSearch::SubstructureAtom* unsafe_arena_release_substructure_atom();

  // optional uint32 min_hits_needed = 2;
  bool has_min_hits_needed() const;
  private:
  bool _internal_has_min_hits_needed() const;
  public:
  void clear_min_hits_needed();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_hits_needed() const;
  void set_min_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_hits_needed() const;
  void _internal_set_min_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_hits_needed = 3;
  bool has_max_hits_needed() const;
  private:
  bool _internal_has_max_hits_needed() const;
  public:
  void clear_max_hits_needed();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_hits_needed() const;
  void set_max_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_hits_needed() const;
  void _internal_set_max_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SubstructureSearch.SubstructureRingEnvironment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::SubstructureSearch::SubstructureAtom* substructure_atom_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_hits_needed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_hits_needed_;
  friend struct ::TableStruct_Molecule_5fLib_2fsubstructure_2eproto;
};
// -------------------------------------------------------------------

class SubstructureRingBase PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubstructureSearch.SubstructureRingBase) */ {
 public:
  inline SubstructureRingBase() : SubstructureRingBase(nullptr) {}
  virtual ~SubstructureRingBase();

  SubstructureRingBase(const SubstructureRingBase& from);
  SubstructureRingBase(SubstructureRingBase&& from) noexcept
    : SubstructureRingBase() {
    *this = ::std::move(from);
  }

  inline SubstructureRingBase& operator=(const SubstructureRingBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstructureRingBase& operator=(SubstructureRingBase&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstructureRingBase& default_instance();

  static inline const SubstructureRingBase* internal_default_instance() {
    return reinterpret_cast<const SubstructureRingBase*>(
               &_SubstructureRingBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SubstructureRingBase& a, SubstructureRingBase& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstructureRingBase* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstructureRingBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstructureRingBase* New() const final {
    return CreateMaybeMessage<SubstructureRingBase>(nullptr);
  }

  SubstructureRingBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstructureRingBase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstructureRingBase& from);
  void MergeFrom(const SubstructureRingBase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstructureRingBase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubstructureSearch.SubstructureRingBase";
  }
  protected:
  explicit SubstructureRingBase(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
    return ::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHitsNeededFieldNumber = 2,
    kAttachedHeteroatomCountFieldNumber = 5,
    kHeteroatomCountFieldNumber = 8,
    kNconFieldNumber = 11,
    kWithinRingUnsaturationFieldNumber = 16,
    kLargestNumberOfBondsSharedWithAnotherRingFieldNumber = 19,
    kAtomsWithPiElectronsFieldNumber = 26,
    kStronglyFusedRingNeighboursFieldNumber = 29,
    kEnvironmentFieldNumber = 22,
    kMinHitsNeededFieldNumber = 3,
    kMaxHitsNeededFieldNumber = 4,
    kMinAttachedHeteroatomCountFieldNumber = 6,
    kMaxAttachedHeteroatomCountFieldNumber = 7,
    kMinHeteroatomCountFieldNumber = 9,
    kMaxHeteroatomCountFieldNumber = 10,
    kMinNconFieldNumber = 12,
    kMatchAsMatchFieldNumber = 1,
    kAllHitsInSameFragmentFieldNumber = 14,
    kEnvironmentCanMatchInRingAtomsFieldNumber = 23,
    kMaxNconFieldNumber = 13,
    kMinWithinRingUnsaturationFieldNumber = 17,
    kMaxWithinRingUnsaturationFieldNumber = 18,
    kMinLargestNumberOfBondsSharedWithAnotherRingFieldNumber = 20,
    kMaxLargestNumberOfBondsSharedWithAnotherRingFieldNumber = 21,
    kMinAtomsWithPiElectronsFieldNumber = 27,
    kMaxAtomsWithPiElectronsFieldNumber = 28,
    kMinStronglyFusedRingNeighboursFieldNumber = 30,
    kMaxStronglyFusedRingNeighboursFieldNumber = 31,
  };
  // repeated uint32 hits_needed = 2;
  int hits_needed_size() const;
  private:
  int _internal_hits_needed_size() const;
  public:
  void clear_hits_needed();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hits_needed(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_hits_needed() const;
  void _internal_add_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_hits_needed();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 hits_needed(int index) const;
  void set_hits_needed(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      hits_needed() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_hits_needed();

  // repeated uint32 attached_heteroatom_count = 5;
  int attached_heteroatom_count_size() const;
  private:
  int _internal_attached_heteroatom_count_size() const;
  public:
  void clear_attached_heteroatom_count();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attached_heteroatom_count(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_attached_heteroatom_count() const;
  void _internal_add_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_attached_heteroatom_count();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 attached_heteroatom_count(int index) const;
  void set_attached_heteroatom_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      attached_heteroatom_count() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_attached_heteroatom_count();

  // repeated uint32 heteroatom_count = 8;
  int heteroatom_count_size() const;
  private:
  int _internal_heteroatom_count_size() const;
  public:
  void clear_heteroatom_count();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heteroatom_count(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_heteroatom_count() const;
  void _internal_add_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_heteroatom_count();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 heteroatom_count(int index) const;
  void set_heteroatom_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      heteroatom_count() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_heteroatom_count();

  // repeated uint32 ncon = 11;
  int ncon_size() const;
  private:
  int _internal_ncon_size() const;
  public:
  void clear_ncon();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ncon(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ncon() const;
  void _internal_add_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ncon();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ncon(int index) const;
  void set_ncon(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ncon() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ncon();

  // repeated uint32 within_ring_unsaturation = 16;
  int within_ring_unsaturation_size() const;
  private:
  int _internal_within_ring_unsaturation_size() const;
  public:
  void clear_within_ring_unsaturation();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_within_ring_unsaturation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_within_ring_unsaturation() const;
  void _internal_add_within_ring_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_within_ring_unsaturation();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 within_ring_unsaturation(int index) const;
  void set_within_ring_unsaturation(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_within_ring_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      within_ring_unsaturation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_within_ring_unsaturation();

  // repeated uint32 largest_number_of_bonds_shared_with_another_ring = 19;
  int largest_number_of_bonds_shared_with_another_ring_size() const;
  private:
  int _internal_largest_number_of_bonds_shared_with_another_ring_size() const;
  public:
  void clear_largest_number_of_bonds_shared_with_another_ring();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_largest_number_of_bonds_shared_with_another_ring(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_largest_number_of_bonds_shared_with_another_ring() const;
  void _internal_add_largest_number_of_bonds_shared_with_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_largest_number_of_bonds_shared_with_another_ring();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 largest_number_of_bonds_shared_with_another_ring(int index) const;
  void set_largest_number_of_bonds_shared_with_another_ring(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_largest_number_of_bonds_shared_with_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      largest_number_of_bonds_shared_with_another_ring() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_largest_number_of_bonds_shared_with_another_ring();

  // repeated uint32 atoms_with_pi_electrons = 26;
  int atoms_with_pi_electrons_size() const;
  private:
  int _internal_atoms_with_pi_electrons_size() const;
  public:
  void clear_atoms_with_pi_electrons();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_atoms_with_pi_electrons(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_atoms_with_pi_electrons() const;
  void _internal_add_atoms_with_pi_electrons(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_atoms_with_pi_electrons();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 atoms_with_pi_electrons(int index) const;
  void set_atoms_with_pi_electrons(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_atoms_with_pi_electrons(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      atoms_with_pi_electrons() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_atoms_with_pi_electrons();

  // repeated uint32 strongly_fused_ring_neighbours = 29;
  int strongly_fused_ring_neighbours_size() const;
  private:
  int _internal_strongly_fused_ring_neighbours_size() const;
  public:
  void clear_strongly_fused_ring_neighbours();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_strongly_fused_ring_neighbours(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_strongly_fused_ring_neighbours() const;
  void _internal_add_strongly_fused_ring_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_strongly_fused_ring_neighbours();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 strongly_fused_ring_neighbours(int index) const;
  void set_strongly_fused_ring_neighbours(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_strongly_fused_ring_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      strongly_fused_ring_neighbours() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_strongly_fused_ring_neighbours();

  // optional string environment = 22;
  bool has_environment() const;
  private:
  bool _internal_has_environment() const;
  public:
  void clear_environment();
  const std::string& environment() const;
  void set_environment(const std::string& value);
  void set_environment(std::string&& value);
  void set_environment(const char* value);
  void set_environment(const char* value, size_t size);
  std::string* mutable_environment();
  std::string* release_environment();
  void set_allocated_environment(std::string* environment);
  private:
  const std::string& _internal_environment() const;
  void _internal_set_environment(const std::string& value);
  std::string* _internal_mutable_environment();
  public:

  // optional uint32 min_hits_needed = 3;
  bool has_min_hits_needed() const;
  private:
  bool _internal_has_min_hits_needed() const;
  public:
  void clear_min_hits_needed();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_hits_needed() const;
  void set_min_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_hits_needed() const;
  void _internal_set_min_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_hits_needed = 4;
  bool has_max_hits_needed() const;
  private:
  bool _internal_has_max_hits_needed() const;
  public:
  void clear_max_hits_needed();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_hits_needed() const;
  void set_max_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_hits_needed() const;
  void _internal_set_max_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_attached_heteroatom_count = 6;
  bool has_min_attached_heteroatom_count() const;
  private:
  bool _internal_has_min_attached_heteroatom_count() const;
  public:
  void clear_min_attached_heteroatom_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_attached_heteroatom_count() const;
  void set_min_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_attached_heteroatom_count() const;
  void _internal_set_min_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_attached_heteroatom_count = 7;
  bool has_max_attached_heteroatom_count() const;
  private:
  bool _internal_has_max_attached_heteroatom_count() const;
  public:
  void clear_max_attached_heteroatom_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_attached_heteroatom_count() const;
  void set_max_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_attached_heteroatom_count() const;
  void _internal_set_max_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_heteroatom_count = 9;
  bool has_min_heteroatom_count() const;
  private:
  bool _internal_has_min_heteroatom_count() const;
  public:
  void clear_min_heteroatom_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_heteroatom_count() const;
  void set_min_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_heteroatom_count() const;
  void _internal_set_min_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_heteroatom_count = 10;
  bool has_max_heteroatom_count() const;
  private:
  bool _internal_has_max_heteroatom_count() const;
  public:
  void clear_max_heteroatom_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_heteroatom_count() const;
  void set_max_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_heteroatom_count() const;
  void _internal_set_max_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_ncon = 12;
  bool has_min_ncon() const;
  private:
  bool _internal_has_min_ncon() const;
  public:
  void clear_min_ncon();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_ncon() const;
  void set_min_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_ncon() const;
  void _internal_set_min_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool match_as_match = 1;
  bool has_match_as_match() const;
  private:
  bool _internal_has_match_as_match() const;
  public:
  void clear_match_as_match();
  bool match_as_match() const;
  void set_match_as_match(bool value);
  private:
  bool _internal_match_as_match() const;
  void _internal_set_match_as_match(bool value);
  public:

  // optional bool all_hits_in_same_fragment = 14;
  bool has_all_hits_in_same_fragment() const;
  private:
  bool _internal_has_all_hits_in_same_fragment() const;
  public:
  void clear_all_hits_in_same_fragment();
  bool all_hits_in_same_fragment() const;
  void set_all_hits_in_same_fragment(bool value);
  private:
  bool _internal_all_hits_in_same_fragment() const;
  void _internal_set_all_hits_in_same_fragment(bool value);
  public:

  // optional bool environment_can_match_in_ring_atoms = 23;
  bool has_environment_can_match_in_ring_atoms() const;
  private:
  bool _internal_has_environment_can_match_in_ring_atoms() const;
  public:
  void clear_environment_can_match_in_ring_atoms();
  bool environment_can_match_in_ring_atoms() const;
  void set_environment_can_match_in_ring_atoms(bool value);
  private:
  bool _internal_environment_can_match_in_ring_atoms() const;
  void _internal_set_environment_can_match_in_ring_atoms(bool value);
  public:

  // optional uint32 max_ncon = 13;
  bool has_max_ncon() const;
  private:
  bool _internal_has_max_ncon() const;
  public:
  void clear_max_ncon();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ncon() const;
  void set_max_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_ncon() const;
  void _internal_set_max_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_within_ring_unsaturation = 17;
  bool has_min_within_ring_unsaturation() const;
  private:
  bool _internal_has_min_within_ring_unsaturation() const;
  public:
  void clear_min_within_ring_unsaturation();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_within_ring_unsaturation() const;
  void set_min_within_ring_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_within_ring_unsaturation() const;
  void _internal_set_min_within_ring_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_within_ring_unsaturation = 18;
  bool has_max_within_ring_unsaturation() const;
  private:
  bool _internal_has_max_within_ring_unsaturation() const;
  public:
  void clear_max_within_ring_unsaturation();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_within_ring_unsaturation() const;
  void set_max_within_ring_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_within_ring_unsaturation() const;
  void _internal_set_max_within_ring_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_largest_number_of_bonds_shared_with_another_ring = 20;
  bool has_min_largest_number_of_bonds_shared_with_another_ring() const;
  private:
  bool _internal_has_min_largest_number_of_bonds_shared_with_another_ring() const;
  public:
  void clear_min_largest_number_of_bonds_shared_with_another_ring();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_largest_number_of_bonds_shared_with_another_ring() const;
  void set_min_largest_number_of_bonds_shared_with_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_largest_number_of_bonds_shared_with_another_ring() const;
  void _internal_set_min_largest_number_of_bonds_shared_with_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_largest_number_of_bonds_shared_with_another_ring = 21;
  bool has_max_largest_number_of_bonds_shared_with_another_ring() const;
  private:
  bool _internal_has_max_largest_number_of_bonds_shared_with_another_ring() const;
  public:
  void clear_max_largest_number_of_bonds_shared_with_another_ring();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_largest_number_of_bonds_shared_with_another_ring() const;
  void set_max_largest_number_of_bonds_shared_with_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_largest_number_of_bonds_shared_with_another_ring() const;
  void _internal_set_max_largest_number_of_bonds_shared_with_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_atoms_with_pi_electrons = 27;
  bool has_min_atoms_with_pi_electrons() const;
  private:
  bool _internal_has_min_atoms_with_pi_electrons() const;
  public:
  void clear_min_atoms_with_pi_electrons();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_atoms_with_pi_electrons() const;
  void set_min_atoms_with_pi_electrons(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_atoms_with_pi_electrons() const;
  void _internal_set_min_atoms_with_pi_electrons(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_atoms_with_pi_electrons = 28;
  bool has_max_atoms_with_pi_electrons() const;
  private:
  bool _internal_has_max_atoms_with_pi_electrons() const;
  public:
  void clear_max_atoms_with_pi_electrons();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_atoms_with_pi_electrons() const;
  void set_max_atoms_with_pi_electrons(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_atoms_with_pi_electrons() const;
  void _internal_set_max_atoms_with_pi_electrons(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_strongly_fused_ring_neighbours = 30;
  bool has_min_strongly_fused_ring_neighbours() const;
  private:
  bool _internal_has_min_strongly_fused_ring_neighbours() const;
  public:
  void clear_min_strongly_fused_ring_neighbours();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_strongly_fused_ring_neighbours() const;
  void set_min_strongly_fused_ring_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_strongly_fused_ring_neighbours() const;
  void _internal_set_min_strongly_fused_ring_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_strongly_fused_ring_neighbours = 31;
  bool has_max_strongly_fused_ring_neighbours() const;
  private:
  bool _internal_has_max_strongly_fused_ring_neighbours() const;
  public:
  void clear_max_strongly_fused_ring_neighbours();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_strongly_fused_ring_neighbours() const;
  void set_max_strongly_fused_ring_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_strongly_fused_ring_neighbours() const;
  void _internal_set_max_strongly_fused_ring_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SubstructureSearch.SubstructureRingBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > hits_needed_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > attached_heteroatom_count_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > heteroatom_count_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ncon_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > within_ring_unsaturation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > largest_number_of_bonds_shared_with_another_ring_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > atoms_with_pi_electrons_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > strongly_fused_ring_neighbours_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr environment_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_hits_needed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_hits_needed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_attached_heteroatom_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_attached_heteroatom_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_heteroatom_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_heteroatom_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_ncon_;
  bool match_as_match_;
  bool all_hits_in_same_fragment_;
  bool environment_can_match_in_ring_atoms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ncon_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_within_ring_unsaturation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_within_ring_unsaturation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_largest_number_of_bonds_shared_with_another_ring_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_largest_number_of_bonds_shared_with_another_ring_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_atoms_with_pi_electrons_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_atoms_with_pi_electrons_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_strongly_fused_ring_neighbours_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_strongly_fused_ring_neighbours_;
  friend struct ::TableStruct_Molecule_5fLib_2fsubstructure_2eproto;
};
// -------------------------------------------------------------------

class SubstructureRingSpecification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubstructureSearch.SubstructureRingSpecification) */ {
 public:
  inline SubstructureRingSpecification() : SubstructureRingSpecification(nullptr) {}
  virtual ~SubstructureRingSpecification();

  SubstructureRingSpecification(const SubstructureRingSpecification& from);
  SubstructureRingSpecification(SubstructureRingSpecification&& from) noexcept
    : SubstructureRingSpecification() {
    *this = ::std::move(from);
  }

  inline SubstructureRingSpecification& operator=(const SubstructureRingSpecification& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstructureRingSpecification& operator=(SubstructureRingSpecification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstructureRingSpecification& default_instance();

  static inline const SubstructureRingSpecification* internal_default_instance() {
    return reinterpret_cast<const SubstructureRingSpecification*>(
               &_SubstructureRingSpecification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SubstructureRingSpecification& a, SubstructureRingSpecification& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstructureRingSpecification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstructureRingSpecification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstructureRingSpecification* New() const final {
    return CreateMaybeMessage<SubstructureRingSpecification>(nullptr);
  }

  SubstructureRingSpecification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstructureRingSpecification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstructureRingSpecification& from);
  void MergeFrom(const SubstructureRingSpecification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstructureRingSpecification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubstructureSearch.SubstructureRingSpecification";
  }
  protected:
  explicit SubstructureRingSpecification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
    return ::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRingSizeFieldNumber = 2,
    kFusedFieldNumber = 6,
    kFusedAromaticNeighboursFieldNumber = 9,
    kFusedNonAromaticNeighboursFieldNumber = 12,
    kBaseFieldNumber = 1,
    kMinRingSizeFieldNumber = 3,
    kMaxRingSizeFieldNumber = 4,
    kAromaticFieldNumber = 5,
    kMinFusedFieldNumber = 7,
    kMaxFusedFieldNumber = 8,
    kMinFusedAromaticNeighboursFieldNumber = 10,
    kMaxFusedAromaticNeighboursFieldNumber = 11,
    kMinFusedNonAromaticNeighboursFieldNumber = 13,
    kMaxFusedNonAromaticNeighboursFieldNumber = 14,
  };
  // repeated uint32 ring_size = 2;
  int ring_size_size() const;
  private:
  int _internal_ring_size_size() const;
  public:
  void clear_ring_size();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ring_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ring_size() const;
  void _internal_add_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ring_size();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ring_size(int index) const;
  void set_ring_size(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ring_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ring_size();

  // repeated uint32 fused = 6;
  int fused_size() const;
  private:
  int _internal_fused_size() const;
  public:
  void clear_fused();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fused(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_fused() const;
  void _internal_add_fused(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_fused();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 fused(int index) const;
  void set_fused(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_fused(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      fused() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_fused();

  // repeated uint32 fused_aromatic_neighbours = 9;
  int fused_aromatic_neighbours_size() const;
  private:
  int _internal_fused_aromatic_neighbours_size() const;
  public:
  void clear_fused_aromatic_neighbours();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fused_aromatic_neighbours(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_fused_aromatic_neighbours() const;
  void _internal_add_fused_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_fused_aromatic_neighbours();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 fused_aromatic_neighbours(int index) const;
  void set_fused_aromatic_neighbours(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_fused_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      fused_aromatic_neighbours() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_fused_aromatic_neighbours();

  // repeated uint32 fused_non_aromatic_neighbours = 12;
  int fused_non_aromatic_neighbours_size() const;
  private:
  int _internal_fused_non_aromatic_neighbours_size() const;
  public:
  void clear_fused_non_aromatic_neighbours();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fused_non_aromatic_neighbours(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_fused_non_aromatic_neighbours() const;
  void _internal_add_fused_non_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_fused_non_aromatic_neighbours();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 fused_non_aromatic_neighbours(int index) const;
  void set_fused_non_aromatic_neighbours(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_fused_non_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      fused_non_aromatic_neighbours() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_fused_non_aromatic_neighbours();

  // optional .SubstructureSearch.SubstructureRingBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::SubstructureSearch::SubstructureRingBase& base() const;
  ::SubstructureSearch::SubstructureRingBase* release_base();
  ::SubstructureSearch::SubstructureRingBase* mutable_base();
  void set_allocated_base(::SubstructureSearch::SubstructureRingBase* base);
  private:
  const ::SubstructureSearch::SubstructureRingBase& _internal_base() const;
  ::SubstructureSearch::SubstructureRingBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::SubstructureSearch::SubstructureRingBase* base);
  ::SubstructureSearch::SubstructureRingBase* unsafe_arena_release_base();

  // optional uint32 min_ring_size = 3;
  bool has_min_ring_size() const;
  private:
  bool _internal_has_min_ring_size() const;
  public:
  void clear_min_ring_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_ring_size() const;
  void set_min_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_ring_size() const;
  void _internal_set_min_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_ring_size = 4;
  bool has_max_ring_size() const;
  private:
  bool _internal_has_max_ring_size() const;
  public:
  void clear_max_ring_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ring_size() const;
  void set_max_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_ring_size() const;
  void _internal_set_max_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool aromatic = 5;
  bool has_aromatic() const;
  private:
  bool _internal_has_aromatic() const;
  public:
  void clear_aromatic();
  bool aromatic() const;
  void set_aromatic(bool value);
  private:
  bool _internal_aromatic() const;
  void _internal_set_aromatic(bool value);
  public:

  // optional uint32 min_fused = 7;
  bool has_min_fused() const;
  private:
  bool _internal_has_min_fused() const;
  public:
  void clear_min_fused();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_fused() const;
  void set_min_fused(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_fused() const;
  void _internal_set_min_fused(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_fused = 8;
  bool has_max_fused() const;
  private:
  bool _internal_has_max_fused() const;
  public:
  void clear_max_fused();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_fused() const;
  void set_max_fused(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_fused() const;
  void _internal_set_max_fused(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_fused_aromatic_neighbours = 10;
  bool has_min_fused_aromatic_neighbours() const;
  private:
  bool _internal_has_min_fused_aromatic_neighbours() const;
  public:
  void clear_min_fused_aromatic_neighbours();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_fused_aromatic_neighbours() const;
  void set_min_fused_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_fused_aromatic_neighbours() const;
  void _internal_set_min_fused_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_fused_aromatic_neighbours = 11;
  bool has_max_fused_aromatic_neighbours() const;
  private:
  bool _internal_has_max_fused_aromatic_neighbours() const;
  public:
  void clear_max_fused_aromatic_neighbours();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_fused_aromatic_neighbours() const;
  void set_max_fused_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_fused_aromatic_neighbours() const;
  void _internal_set_max_fused_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_fused_non_aromatic_neighbours = 13;
  bool has_min_fused_non_aromatic_neighbours() const;
  private:
  bool _internal_has_min_fused_non_aromatic_neighbours() const;
  public:
  void clear_min_fused_non_aromatic_neighbours();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_fused_non_aromatic_neighbours() const;
  void set_min_fused_non_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_fused_non_aromatic_neighbours() const;
  void _internal_set_min_fused_non_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_fused_non_aromatic_neighbours = 14;
  bool has_max_fused_non_aromatic_neighbours() const;
  private:
  bool _internal_has_max_fused_non_aromatic_neighbours() const;
  public:
  void clear_max_fused_non_aromatic_neighbours();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_fused_non_aromatic_neighbours() const;
  void set_max_fused_non_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_fused_non_aromatic_neighbours() const;
  void _internal_set_max_fused_non_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SubstructureSearch.SubstructureRingSpecification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ring_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > fused_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > fused_aromatic_neighbours_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > fused_non_aromatic_neighbours_;
  ::SubstructureSearch::SubstructureRingBase* base_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_ring_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ring_size_;
  bool aromatic_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_fused_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_fused_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_fused_aromatic_neighbours_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_fused_aromatic_neighbours_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_fused_non_aromatic_neighbours_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_fused_non_aromatic_neighbours_;
  friend struct ::TableStruct_Molecule_5fLib_2fsubstructure_2eproto;
};
// -------------------------------------------------------------------

class RingSizeRequirement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubstructureSearch.RingSizeRequirement) */ {
 public:
  inline RingSizeRequirement() : RingSizeRequirement(nullptr) {}
  virtual ~RingSizeRequirement();

  RingSizeRequirement(const RingSizeRequirement& from);
  RingSizeRequirement(RingSizeRequirement&& from) noexcept
    : RingSizeRequirement() {
    *this = ::std::move(from);
  }

  inline RingSizeRequirement& operator=(const RingSizeRequirement& from) {
    CopyFrom(from);
    return *this;
  }
  inline RingSizeRequirement& operator=(RingSizeRequirement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RingSizeRequirement& default_instance();

  static inline const RingSizeRequirement* internal_default_instance() {
    return reinterpret_cast<const RingSizeRequirement*>(
               &_RingSizeRequirement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RingSizeRequirement& a, RingSizeRequirement& b) {
    a.Swap(&b);
  }
  inline void Swap(RingSizeRequirement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RingSizeRequirement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RingSizeRequirement* New() const final {
    return CreateMaybeMessage<RingSizeRequirement>(nullptr);
  }

  RingSizeRequirement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RingSizeRequirement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RingSizeRequirement& from);
  void MergeFrom(const RingSizeRequirement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RingSizeRequirement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubstructureSearch.RingSizeRequirement";
  }
  protected:
  explicit RingSizeRequirement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
    return ::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 2,
    kRingSizeFieldNumber = 1,
    kMinCountFieldNumber = 3,
    kMaxCountFieldNumber = 4,
  };
  // repeated uint32 count = 2;
  int count_size() const;
  private:
  int _internal_count_size() const;
  public:
  void clear_count();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_count() const;
  void _internal_add_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_count();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 count(int index) const;
  void set_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      count() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_count();

  // optional uint32 ring_size = 1;
  bool has_ring_size() const;
  private:
  bool _internal_has_ring_size() const;
  public:
  void clear_ring_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 ring_size() const;
  void set_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ring_size() const;
  void _internal_set_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_count = 3;
  bool has_min_count() const;
  private:
  bool _internal_has_min_count() const;
  public:
  void clear_min_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_count() const;
  void set_min_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_count() const;
  void _internal_set_min_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_count = 4;
  bool has_max_count() const;
  private:
  bool _internal_has_max_count() const;
  public:
  void clear_max_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_count() const;
  void set_max_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_count() const;
  void _internal_set_max_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SubstructureSearch.RingSizeRequirement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ring_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_count_;
  friend struct ::TableStruct_Molecule_5fLib_2fsubstructure_2eproto;
};
// -------------------------------------------------------------------

class SubstructureRingSystemSpecification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubstructureSearch.SubstructureRingSystemSpecification) */ {
 public:
  inline SubstructureRingSystemSpecification() : SubstructureRingSystemSpecification(nullptr) {}
  virtual ~SubstructureRingSystemSpecification();

  SubstructureRingSystemSpecification(const SubstructureRingSystemSpecification& from);
  SubstructureRingSystemSpecification(SubstructureRingSystemSpecification&& from) noexcept
    : SubstructureRingSystemSpecification() {
    *this = ::std::move(from);
  }

  inline SubstructureRingSystemSpecification& operator=(const SubstructureRingSystemSpecification& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstructureRingSystemSpecification& operator=(SubstructureRingSystemSpecification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstructureRingSystemSpecification& default_instance();

  static inline const SubstructureRingSystemSpecification* internal_default_instance() {
    return reinterpret_cast<const SubstructureRingSystemSpecification*>(
               &_SubstructureRingSystemSpecification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SubstructureRingSystemSpecification& a, SubstructureRingSystemSpecification& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstructureRingSystemSpecification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstructureRingSystemSpecification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstructureRingSystemSpecification* New() const final {
    return CreateMaybeMessage<SubstructureRingSystemSpecification>(nullptr);
  }

  SubstructureRingSystemSpecification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstructureRingSystemSpecification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstructureRingSystemSpecification& from);
  void MergeFrom(const SubstructureRingSystemSpecification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstructureRingSystemSpecification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubstructureSearch.SubstructureRingSystemSpecification";
  }
  protected:
  explicit SubstructureRingSystemSpecification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
    return ::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRingsInSystemFieldNumber = 2,
    kRingSizesFieldNumber = 5,
    kRingSizeCountFieldNumber = 8,
    kAromaticRingCountFieldNumber = 11,
    kNonAromaticRingCountFieldNumber = 14,
    kDegreeOfFusionFieldNumber = 17,
    kAtomsInSystemFieldNumber = 20,
    kNumberSpinachGroupsFieldNumber = 23,
    kNumberNonSpinachGroupsFieldNumber = 26,
    kAtomsInSpinachGroupFieldNumber = 29,
    kLengthOfSpinachGroupFieldNumber = 32,
    kDistanceToAnotherRingFieldNumber = 35,
    kStronglyFusedRingCountFieldNumber = 38,
    kBaseFieldNumber = 1,
    kMinRingsInSystemFieldNumber = 3,
    kMaxRingsInSystemFieldNumber = 4,
    kMinRingSizesFieldNumber = 6,
    kMaxRingSizesFieldNumber = 7,
    kMinAromaticRingCountFieldNumber = 12,
    kMaxAromaticRingCountFieldNumber = 13,
    kMinNonAromaticRingCountFieldNumber = 15,
    kMaxNonAromaticRingCountFieldNumber = 16,
    kMinDegreeOfFusionFieldNumber = 18,
    kMaxDegreeOfFusionFieldNumber = 19,
    kMinAtomsInSystemFieldNumber = 21,
    kMaxAtomsInSystemFieldNumber = 22,
    kMinNumberSpinachGroupsFieldNumber = 24,
    kMaxNumberSpinachGroupsFieldNumber = 25,
    kMinNumberNonSpinachGroupsFieldNumber = 27,
    kMaxNumberNonSpinachGroupsFieldNumber = 28,
    kMinAtomsInSpinachGroupFieldNumber = 30,
    kMaxAtomsInSpinachGroupFieldNumber = 31,
    kMinLengthOfSpinachGroupFieldNumber = 33,
    kMaxLengthOfSpinachGroupFieldNumber = 34,
    kMinDistanceToAnotherRingFieldNumber = 36,
    kMaxDistanceToAnotherRingFieldNumber = 37,
    kMinStronglyFusedRingCountFieldNumber = 39,
    kMaxStronglyFusedRingCountFieldNumber = 40,
  };
  // repeated uint32 rings_in_system = 2;
  int rings_in_system_size() const;
  private:
  int _internal_rings_in_system_size() const;
  public:
  void clear_rings_in_system();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rings_in_system(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_rings_in_system() const;
  void _internal_add_rings_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_rings_in_system();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 rings_in_system(int index) const;
  void set_rings_in_system(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_rings_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      rings_in_system() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_rings_in_system();

  // repeated uint32 ring_sizes = 5;
  int ring_sizes_size() const;
  private:
  int _internal_ring_sizes_size() const;
  public:
  void clear_ring_sizes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ring_sizes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ring_sizes() const;
  void _internal_add_ring_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ring_sizes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ring_sizes(int index) const;
  void set_ring_sizes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ring_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ring_sizes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ring_sizes();

  // repeated .SubstructureSearch.RingSizeRequirement ring_size_count = 8;
  int ring_size_count_size() const;
  private:
  int _internal_ring_size_count_size() const;
  public:
  void clear_ring_size_count();
  ::SubstructureSearch::RingSizeRequirement* mutable_ring_size_count(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::RingSizeRequirement >*
      mutable_ring_size_count();
  private:
  const ::SubstructureSearch::RingSizeRequirement& _internal_ring_size_count(int index) const;
  ::SubstructureSearch::RingSizeRequirement* _internal_add_ring_size_count();
  public:
  const ::SubstructureSearch::RingSizeRequirement& ring_size_count(int index) const;
  ::SubstructureSearch::RingSizeRequirement* add_ring_size_count();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::RingSizeRequirement >&
      ring_size_count() const;

  // repeated uint32 aromatic_ring_count = 11;
  int aromatic_ring_count_size() const;
  private:
  int _internal_aromatic_ring_count_size() const;
  public:
  void clear_aromatic_ring_count();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_aromatic_ring_count(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_aromatic_ring_count() const;
  void _internal_add_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_aromatic_ring_count();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 aromatic_ring_count(int index) const;
  void set_aromatic_ring_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      aromatic_ring_count() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_aromatic_ring_count();

  // repeated uint32 non_aromatic_ring_count = 14;
  int non_aromatic_ring_count_size() const;
  private:
  int _internal_non_aromatic_ring_count_size() const;
  public:
  void clear_non_aromatic_ring_count();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_non_aromatic_ring_count(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_non_aromatic_ring_count() const;
  void _internal_add_non_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_non_aromatic_ring_count();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 non_aromatic_ring_count(int index) const;
  void set_non_aromatic_ring_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_non_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      non_aromatic_ring_count() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_non_aromatic_ring_count();

  // repeated uint32 degree_of_fusion = 17;
  int degree_of_fusion_size() const;
  private:
  int _internal_degree_of_fusion_size() const;
  public:
  void clear_degree_of_fusion();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_degree_of_fusion(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_degree_of_fusion() const;
  void _internal_add_degree_of_fusion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_degree_of_fusion();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 degree_of_fusion(int index) const;
  void set_degree_of_fusion(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_degree_of_fusion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      degree_of_fusion() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_degree_of_fusion();

  // repeated uint32 atoms_in_system = 20;
  int atoms_in_system_size() const;
  private:
  int _internal_atoms_in_system_size() const;
  public:
  void clear_atoms_in_system();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_atoms_in_system(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_atoms_in_system() const;
  void _internal_add_atoms_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_atoms_in_system();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 atoms_in_system(int index) const;
  void set_atoms_in_system(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_atoms_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      atoms_in_system() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_atoms_in_system();

  // repeated uint32 number_spinach_groups = 23;
  int number_spinach_groups_size() const;
  private:
  int _internal_number_spinach_groups_size() const;
  public:
  void clear_number_spinach_groups();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_spinach_groups(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_number_spinach_groups() const;
  void _internal_add_number_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_number_spinach_groups();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 number_spinach_groups(int index) const;
  void set_number_spinach_groups(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_number_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      number_spinach_groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_number_spinach_groups();

  // repeated uint32 number_non_spinach_groups = 26;
  int number_non_spinach_groups_size() const;
  private:
  int _internal_number_non_spinach_groups_size() const;
  public:
  void clear_number_non_spinach_groups();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_non_spinach_groups(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_number_non_spinach_groups() const;
  void _internal_add_number_non_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_number_non_spinach_groups();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 number_non_spinach_groups(int index) const;
  void set_number_non_spinach_groups(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_number_non_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      number_non_spinach_groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_number_non_spinach_groups();

  // repeated uint32 atoms_in_spinach_group = 29;
  int atoms_in_spinach_group_size() const;
  private:
  int _internal_atoms_in_spinach_group_size() const;
  public:
  void clear_atoms_in_spinach_group();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_atoms_in_spinach_group(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_atoms_in_spinach_group() const;
  void _internal_add_atoms_in_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_atoms_in_spinach_group();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 atoms_in_spinach_group(int index) const;
  void set_atoms_in_spinach_group(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_atoms_in_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      atoms_in_spinach_group() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_atoms_in_spinach_group();

  // repeated uint32 length_of_spinach_group = 32;
  int length_of_spinach_group_size() const;
  private:
  int _internal_length_of_spinach_group_size() const;
  public:
  void clear_length_of_spinach_group();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length_of_spinach_group(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_length_of_spinach_group() const;
  void _internal_add_length_of_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_length_of_spinach_group();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 length_of_spinach_group(int index) const;
  void set_length_of_spinach_group(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_length_of_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      length_of_spinach_group() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_length_of_spinach_group();

  // repeated uint32 distance_to_another_ring = 35;
  int distance_to_another_ring_size() const;
  private:
  int _internal_distance_to_another_ring_size() const;
  public:
  void clear_distance_to_another_ring();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_distance_to_another_ring(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_distance_to_another_ring() const;
  void _internal_add_distance_to_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_distance_to_another_ring();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 distance_to_another_ring(int index) const;
  void set_distance_to_another_ring(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_distance_to_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      distance_to_another_ring() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_distance_to_another_ring();

  // repeated uint32 strongly_fused_ring_count = 38;
  int strongly_fused_ring_count_size() const;
  private:
  int _internal_strongly_fused_ring_count_size() const;
  public:
  void clear_strongly_fused_ring_count();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_strongly_fused_ring_count(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_strongly_fused_ring_count() const;
  void _internal_add_strongly_fused_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_strongly_fused_ring_count();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 strongly_fused_ring_count(int index) const;
  void set_strongly_fused_ring_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_strongly_fused_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      strongly_fused_ring_count() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_strongly_fused_ring_count();

  // optional .SubstructureSearch.SubstructureRingBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::SubstructureSearch::SubstructureRingBase& base() const;
  ::SubstructureSearch::SubstructureRingBase* release_base();
  ::SubstructureSearch::SubstructureRingBase* mutable_base();
  void set_allocated_base(::SubstructureSearch::SubstructureRingBase* base);
  private:
  const ::SubstructureSearch::SubstructureRingBase& _internal_base() const;
  ::SubstructureSearch::SubstructureRingBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::SubstructureSearch::SubstructureRingBase* base);
  ::SubstructureSearch::SubstructureRingBase* unsafe_arena_release_base();

  // optional uint32 min_rings_in_system = 3;
  bool has_min_rings_in_system() const;
  private:
  bool _internal_has_min_rings_in_system() const;
  public:
  void clear_min_rings_in_system();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_rings_in_system() const;
  void set_min_rings_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_rings_in_system() const;
  void _internal_set_min_rings_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_rings_in_system = 4;
  bool has_max_rings_in_system() const;
  private:
  bool _internal_has_max_rings_in_system() const;
  public:
  void clear_max_rings_in_system();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_rings_in_system() const;
  void set_max_rings_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_rings_in_system() const;
  void _internal_set_max_rings_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_ring_sizes = 6;
  bool has_min_ring_sizes() const;
  private:
  bool _internal_has_min_ring_sizes() const;
  public:
  void clear_min_ring_sizes();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_ring_sizes() const;
  void set_min_ring_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_ring_sizes() const;
  void _internal_set_min_ring_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_ring_sizes = 7;
  bool has_max_ring_sizes() const;
  private:
  bool _internal_has_max_ring_sizes() const;
  public:
  void clear_max_ring_sizes();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ring_sizes() const;
  void set_max_ring_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_ring_sizes() const;
  void _internal_set_max_ring_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_aromatic_ring_count = 12;
  bool has_min_aromatic_ring_count() const;
  private:
  bool _internal_has_min_aromatic_ring_count() const;
  public:
  void clear_min_aromatic_ring_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_aromatic_ring_count() const;
  void set_min_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_aromatic_ring_count() const;
  void _internal_set_min_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_aromatic_ring_count = 13;
  bool has_max_aromatic_ring_count() const;
  private:
  bool _internal_has_max_aromatic_ring_count() const;
  public:
  void clear_max_aromatic_ring_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_aromatic_ring_count() const;
  void set_max_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_aromatic_ring_count() const;
  void _internal_set_max_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_non_aromatic_ring_count = 15;
  bool has_min_non_aromatic_ring_count() const;
  private:
  bool _internal_has_min_non_aromatic_ring_count() const;
  public:
  void clear_min_non_aromatic_ring_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_non_aromatic_ring_count() const;
  void set_min_non_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_non_aromatic_ring_count() const;
  void _internal_set_min_non_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_non_aromatic_ring_count = 16;
  bool has_max_non_aromatic_ring_count() const;
  private:
  bool _internal_has_max_non_aromatic_ring_count() const;
  public:
  void clear_max_non_aromatic_ring_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_non_aromatic_ring_count() const;
  void set_max_non_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_non_aromatic_ring_count() const;
  void _internal_set_max_non_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_degree_of_fusion = 18;
  bool has_min_degree_of_fusion() const;
  private:
  bool _internal_has_min_degree_of_fusion() const;
  public:
  void clear_min_degree_of_fusion();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_degree_of_fusion() const;
  void set_min_degree_of_fusion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_degree_of_fusion() const;
  void _internal_set_min_degree_of_fusion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_degree_of_fusion = 19;
  bool has_max_degree_of_fusion() const;
  private:
  bool _internal_has_max_degree_of_fusion() const;
  public:
  void clear_max_degree_of_fusion();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_degree_of_fusion() const;
  void set_max_degree_of_fusion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_degree_of_fusion() const;
  void _internal_set_max_degree_of_fusion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_atoms_in_system = 21;
  bool has_min_atoms_in_system() const;
  private:
  bool _internal_has_min_atoms_in_system() const;
  public:
  void clear_min_atoms_in_system();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_atoms_in_system() const;
  void set_min_atoms_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_atoms_in_system() const;
  void _internal_set_min_atoms_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_atoms_in_system = 22;
  bool has_max_atoms_in_system() const;
  private:
  bool _internal_has_max_atoms_in_system() const;
  public:
  void clear_max_atoms_in_system();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_atoms_in_system() const;
  void set_max_atoms_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_atoms_in_system() const;
  void _internal_set_max_atoms_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_number_spinach_groups = 24;
  bool has_min_number_spinach_groups() const;
  private:
  bool _internal_has_min_number_spinach_groups() const;
  public:
  void clear_min_number_spinach_groups();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_number_spinach_groups() const;
  void set_min_number_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_number_spinach_groups() const;
  void _internal_set_min_number_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_number_spinach_groups = 25;
  bool has_max_number_spinach_groups() const;
  private:
  bool _internal_has_max_number_spinach_groups() const;
  public:
  void clear_max_number_spinach_groups();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_number_spinach_groups() const;
  void set_max_number_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_number_spinach_groups() const;
  void _internal_set_max_number_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_number_non_spinach_groups = 27;
  bool has_min_number_non_spinach_groups() const;
  private:
  bool _internal_has_min_number_non_spinach_groups() const;
  public:
  void clear_min_number_non_spinach_groups();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_number_non_spinach_groups() const;
  void set_min_number_non_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_number_non_spinach_groups() const;
  void _internal_set_min_number_non_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_number_non_spinach_groups = 28;
  bool has_max_number_non_spinach_groups() const;
  private:
  bool _internal_has_max_number_non_spinach_groups() const;
  public:
  void clear_max_number_non_spinach_groups();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_number_non_spinach_groups() const;
  void set_max_number_non_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_number_non_spinach_groups() const;
  void _internal_set_max_number_non_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_atoms_in_spinach_group = 30;
  bool has_min_atoms_in_spinach_group() const;
  private:
  bool _internal_has_min_atoms_in_spinach_group() const;
  public:
  void clear_min_atoms_in_spinach_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_atoms_in_spinach_group() const;
  void set_min_atoms_in_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_atoms_in_spinach_group() const;
  void _internal_set_min_atoms_in_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_atoms_in_spinach_group = 31;
  bool has_max_atoms_in_spinach_group() const;
  private:
  bool _internal_has_max_atoms_in_spinach_group() const;
  public:
  void clear_max_atoms_in_spinach_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_atoms_in_spinach_group() const;
  void set_max_atoms_in_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_atoms_in_spinach_group() const;
  void _internal_set_max_atoms_in_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_length_of_spinach_group = 33;
  bool has_min_length_of_spinach_group() const;
  private:
  bool _internal_has_min_length_of_spinach_group() const;
  public:
  void clear_min_length_of_spinach_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_length_of_spinach_group() const;
  void set_min_length_of_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_length_of_spinach_group() const;
  void _internal_set_min_length_of_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_length_of_spinach_group = 34;
  bool has_max_length_of_spinach_group() const;
  private:
  bool _internal_has_max_length_of_spinach_group() const;
  public:
  void clear_max_length_of_spinach_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_length_of_spinach_group() const;
  void set_max_length_of_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_length_of_spinach_group() const;
  void _internal_set_max_length_of_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_distance_to_another_ring = 36;
  bool has_min_distance_to_another_ring() const;
  private:
  bool _internal_has_min_distance_to_another_ring() const;
  public:
  void clear_min_distance_to_another_ring();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_distance_to_another_ring() const;
  void set_min_distance_to_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_distance_to_another_ring() const;
  void _internal_set_min_distance_to_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_distance_to_another_ring = 37;
  bool has_max_distance_to_another_ring() const;
  private:
  bool _internal_has_max_distance_to_another_ring() const;
  public:
  void clear_max_distance_to_another_ring();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_distance_to_another_ring() const;
  void set_max_distance_to_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_distance_to_another_ring() const;
  void _internal_set_max_distance_to_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_strongly_fused_ring_count = 39;
  bool has_min_strongly_fused_ring_count() const;
  private:
  bool _internal_has_min_strongly_fused_ring_count() const;
  public:
  void clear_min_strongly_fused_ring_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_strongly_fused_ring_count() const;
  void set_min_strongly_fused_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_strongly_fused_ring_count() const;
  void _internal_set_min_strongly_fused_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_strongly_fused_ring_count = 40;
  bool has_max_strongly_fused_ring_count() const;
  private:
  bool _internal_has_max_strongly_fused_ring_count() const;
  public:
  void clear_max_strongly_fused_ring_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_strongly_fused_ring_count() const;
  void set_max_strongly_fused_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_strongly_fused_ring_count() const;
  void _internal_set_max_strongly_fused_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SubstructureSearch.SubstructureRingSystemSpecification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > rings_in_system_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ring_sizes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::RingSizeRequirement > ring_size_count_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > aromatic_ring_count_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > non_aromatic_ring_count_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > degree_of_fusion_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > atoms_in_system_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > number_spinach_groups_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > number_non_spinach_groups_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > atoms_in_spinach_group_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > length_of_spinach_group_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > distance_to_another_ring_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > strongly_fused_ring_count_;
  ::SubstructureSearch::SubstructureRingBase* base_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_rings_in_system_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_rings_in_system_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_ring_sizes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ring_sizes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_aromatic_ring_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_aromatic_ring_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_non_aromatic_ring_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_non_aromatic_ring_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_degree_of_fusion_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_degree_of_fusion_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_atoms_in_system_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_atoms_in_system_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_number_spinach_groups_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_number_spinach_groups_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_number_non_spinach_groups_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_number_non_spinach_groups_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_atoms_in_spinach_group_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_atoms_in_spinach_group_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_length_of_spinach_group_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_length_of_spinach_group_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_distance_to_another_ring_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_distance_to_another_ring_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_strongly_fused_ring_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_strongly_fused_ring_count_;
  friend struct ::TableStruct_Molecule_5fLib_2fsubstructure_2eproto;
};
// -------------------------------------------------------------------

class SubstructureAtomSpecifier PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubstructureSearch.SubstructureAtomSpecifier) */ {
 public:
  inline SubstructureAtomSpecifier() : SubstructureAtomSpecifier(nullptr) {}
  virtual ~SubstructureAtomSpecifier();

  SubstructureAtomSpecifier(const SubstructureAtomSpecifier& from);
  SubstructureAtomSpecifier(SubstructureAtomSpecifier&& from) noexcept
    : SubstructureAtomSpecifier() {
    *this = ::std::move(from);
  }

  inline SubstructureAtomSpecifier& operator=(const SubstructureAtomSpecifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstructureAtomSpecifier& operator=(SubstructureAtomSpecifier&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstructureAtomSpecifier& default_instance();

  static inline const SubstructureAtomSpecifier* internal_default_instance() {
    return reinterpret_cast<const SubstructureAtomSpecifier*>(
               &_SubstructureAtomSpecifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SubstructureAtomSpecifier& a, SubstructureAtomSpecifier& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstructureAtomSpecifier* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstructureAtomSpecifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstructureAtomSpecifier* New() const final {
    return CreateMaybeMessage<SubstructureAtomSpecifier>(nullptr);
  }

  SubstructureAtomSpecifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstructureAtomSpecifier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstructureAtomSpecifier& from);
  void MergeFrom(const SubstructureAtomSpecifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstructureAtomSpecifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubstructureSearch.SubstructureAtomSpecifier";
  }
  protected:
  explicit SubstructureAtomSpecifier(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
    return ::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAtomicSymbolFieldNumber = 1,
    kAtomicNumberFieldNumber = 2,
    kNconFieldNumber = 3,
    kNcon2FieldNumber = 6,
    kNbondsFieldNumber = 9,
    kFormalChargeFieldNumber = 12,
    kNringsFieldNumber = 15,
    kRingBondCountFieldNumber = 18,
    kRingSizeFieldNumber = 21,
    kHcountFieldNumber = 24,
    kAromaticRingSizeFieldNumber = 30,
    kAliphaticRingSizeFieldNumber = 33,
    kAttachedHeteroatomCountFieldNumber = 36,
    kLonePairCountFieldNumber = 39,
    kUnsaturationFieldNumber = 42,
    kDaylightXFieldNumber = 45,
    kIsotopeFieldNumber = 48,
    kArylFieldNumber = 51,
    kFusedSystemSizeFieldNumber = 54,
    kVinylFieldNumber = 57,
    kHeteroatomsInRingFieldNumber = 61,
    kScaffoldBondsAttachedToRingFieldNumber = 65,
    kSymmetryDegreeFieldNumber = 69,
    kMinNconFieldNumber = 4,
    kMaxNconFieldNumber = 5,
    kMinNcon2FieldNumber = 7,
    kMaxNcon2FieldNumber = 8,
    kMinNbondsFieldNumber = 10,
    kMaxNbondsFieldNumber = 11,
    kMinFormalChargeFieldNumber = 13,
    kMaxFormalChargeFieldNumber = 14,
    kMinNringsFieldNumber = 16,
    kMaxNringsFieldNumber = 17,
    kMinRingBondCountFieldNumber = 19,
    kMaxRingBondCountFieldNumber = 20,
    kMinRingSizeFieldNumber = 22,
    kMaxRingSizeFieldNumber = 23,
    kMinHcountFieldNumber = 25,
    kMaxHcountFieldNumber = 26,
    kMinAromaticRingSizeFieldNumber = 31,
    kMaxAromaticRingSizeFieldNumber = 32,
    kMinAliphaticRingSizeFieldNumber = 34,
    kMaxAliphaticRingSizeFieldNumber = 35,
    kMinAttachedHeteroatomCountFieldNumber = 37,
    kMaxAttachedHeteroatomCountFieldNumber = 38,
    kAromaticFieldNumber = 27,
    kChiralityFieldNumber = 28,
    kAllRingsKekuleFieldNumber = 60,
    kMinLonePairCountFieldNumber = 40,
    kMaxLonePairCountFieldNumber = 41,
    kMinUnsaturationFieldNumber = 43,
    kMaxUnsaturationFieldNumber = 44,
    kMinDaylightXFieldNumber = 46,
    kMaxDaylightXFieldNumber = 47,
    kMinIsotopeFieldNumber = 49,
    kMaxIsotopeFieldNumber = 50,
    kMinArylFieldNumber = 52,
    kMaxArylFieldNumber = 53,
    kMinFusedSystemSizeFieldNumber = 55,
    kMaxFusedSystemSizeFieldNumber = 56,
    kMinVinylFieldNumber = 58,
    kMaxVinylFieldNumber = 59,
    kMinHeteroatomsInRingFieldNumber = 62,
    kMaxHeteroatomsInRingFieldNumber = 63,
    kMatchSpinachOnlyFieldNumber = 64,
    kMinScaffoldBondsAttachedToRingFieldNumber = 66,
    kMaxScaffoldBondsAttachedToRingFieldNumber = 67,
    kPreferenceValueFieldNumber = 68,
    kMinSymmetryDegreeFieldNumber = 70,
    kMaxSymmetryDegreeFieldNumber = 71,
    kSymmetryGroupFieldNumber = 72,
    kUserAtomTypeFieldNumber = 77,
    kAtomTypeFieldNumber = 78,
    kLogicalOperatorFieldNumber = 76,
  };
  // repeated string atomic_symbol = 1;
  int atomic_symbol_size() const;
  private:
  int _internal_atomic_symbol_size() const;
  public:
  void clear_atomic_symbol();
  const std::string& atomic_symbol(int index) const;
  std::string* mutable_atomic_symbol(int index);
  void set_atomic_symbol(int index, const std::string& value);
  void set_atomic_symbol(int index, std::string&& value);
  void set_atomic_symbol(int index, const char* value);
  void set_atomic_symbol(int index, const char* value, size_t size);
  std::string* add_atomic_symbol();
  void add_atomic_symbol(const std::string& value);
  void add_atomic_symbol(std::string&& value);
  void add_atomic_symbol(const char* value);
  void add_atomic_symbol(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& atomic_symbol() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_atomic_symbol();
  private:
  const std::string& _internal_atomic_symbol(int index) const;
  std::string* _internal_add_atomic_symbol();
  public:

  // repeated uint32 atomic_number = 2;
  int atomic_number_size() const;
  private:
  int _internal_atomic_number_size() const;
  public:
  void clear_atomic_number();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_atomic_number(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_atomic_number() const;
  void _internal_add_atomic_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_atomic_number();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 atomic_number(int index) const;
  void set_atomic_number(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_atomic_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      atomic_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_atomic_number();

  // repeated uint32 ncon = 3;
  int ncon_size() const;
  private:
  int _internal_ncon_size() const;
  public:
  void clear_ncon();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ncon(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ncon() const;
  void _internal_add_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ncon();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ncon(int index) const;
  void set_ncon(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ncon() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ncon();

  // repeated uint32 ncon2 = 6;
  int ncon2_size() const;
  private:
  int _internal_ncon2_size() const;
  public:
  void clear_ncon2();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ncon2(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ncon2() const;
  void _internal_add_ncon2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ncon2();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ncon2(int index) const;
  void set_ncon2(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ncon2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ncon2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ncon2();

  // repeated uint32 nbonds = 9;
  int nbonds_size() const;
  private:
  int _internal_nbonds_size() const;
  public:
  void clear_nbonds();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nbonds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_nbonds() const;
  void _internal_add_nbonds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_nbonds();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 nbonds(int index) const;
  void set_nbonds(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_nbonds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      nbonds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_nbonds();

  // repeated int32 formal_charge = 12;
  int formal_charge_size() const;
  private:
  int _internal_formal_charge_size() const;
  public:
  void clear_formal_charge();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_formal_charge(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_formal_charge() const;
  void _internal_add_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_formal_charge();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 formal_charge(int index) const;
  void set_formal_charge(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      formal_charge() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_formal_charge();

  // repeated uint32 nrings = 15;
  int nrings_size() const;
  private:
  int _internal_nrings_size() const;
  public:
  void clear_nrings();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nrings(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_nrings() const;
  void _internal_add_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_nrings();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 nrings(int index) const;
  void set_nrings(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      nrings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_nrings();

  // repeated uint32 ring_bond_count = 18;
  int ring_bond_count_size() const;
  private:
  int _internal_ring_bond_count_size() const;
  public:
  void clear_ring_bond_count();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ring_bond_count(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ring_bond_count() const;
  void _internal_add_ring_bond_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ring_bond_count();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ring_bond_count(int index) const;
  void set_ring_bond_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ring_bond_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ring_bond_count() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ring_bond_count();

  // repeated uint32 ring_size = 21;
  int ring_size_size() const;
  private:
  int _internal_ring_size_size() const;
  public:
  void clear_ring_size();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ring_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ring_size() const;
  void _internal_add_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ring_size();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ring_size(int index) const;
  void set_ring_size(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ring_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ring_size();

  // repeated uint32 hcount = 24;
  int hcount_size() const;
  private:
  int _internal_hcount_size() const;
  public:
  void clear_hcount();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hcount(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_hcount() const;
  void _internal_add_hcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_hcount();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 hcount(int index) const;
  void set_hcount(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_hcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      hcount() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_hcount();

  // repeated uint32 aromatic_ring_size = 30;
  int aromatic_ring_size_size() const;
  private:
  int _internal_aromatic_ring_size_size() const;
  public:
  void clear_aromatic_ring_size();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_aromatic_ring_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_aromatic_ring_size() const;
  void _internal_add_aromatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_aromatic_ring_size();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 aromatic_ring_size(int index) const;
  void set_aromatic_ring_size(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_aromatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      aromatic_ring_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_aromatic_ring_size();

  // repeated uint32 aliphatic_ring_size = 33;
  int aliphatic_ring_size_size() const;
  private:
  int _internal_aliphatic_ring_size_size() const;
  public:
  void clear_aliphatic_ring_size();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_aliphatic_ring_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_aliphatic_ring_size() const;
  void _internal_add_aliphatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_aliphatic_ring_size();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 aliphatic_ring_size(int index) const;
  void set_aliphatic_ring_size(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_aliphatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      aliphatic_ring_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_aliphatic_ring_size();

  // repeated uint32 attached_heteroatom_count = 36;
  int attached_heteroatom_count_size() const;
  private:
  int _internal_attached_heteroatom_count_size() const;
  public:
  void clear_attached_heteroatom_count();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attached_heteroatom_count(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_attached_heteroatom_count() const;
  void _internal_add_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_attached_heteroatom_count();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 attached_heteroatom_count(int index) const;
  void set_attached_heteroatom_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      attached_heteroatom_count() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_attached_heteroatom_count();

  // repeated uint32 lone_pair_count = 39;
  int lone_pair_count_size() const;
  private:
  int _internal_lone_pair_count_size() const;
  public:
  void clear_lone_pair_count();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lone_pair_count(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_lone_pair_count() const;
  void _internal_add_lone_pair_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_lone_pair_count();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 lone_pair_count(int index) const;
  void set_lone_pair_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_lone_pair_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      lone_pair_count() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_lone_pair_count();

  // repeated uint32 unsaturation = 42;
  int unsaturation_size() const;
  private:
  int _internal_unsaturation_size() const;
  public:
  void clear_unsaturation();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unsaturation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_unsaturation() const;
  void _internal_add_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_unsaturation();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 unsaturation(int index) const;
  void set_unsaturation(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      unsaturation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_unsaturation();

  // repeated uint32 daylight_x = 45;
  int daylight_x_size() const;
  private:
  int _internal_daylight_x_size() const;
  public:
  void clear_daylight_x();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_daylight_x(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_daylight_x() const;
  void _internal_add_daylight_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_daylight_x();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 daylight_x(int index) const;
  void set_daylight_x(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_daylight_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      daylight_x() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_daylight_x();

  // repeated uint32 isotope = 48;
  int isotope_size() const;
  private:
  int _internal_isotope_size() const;
  public:
  void clear_isotope();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_isotope(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_isotope() const;
  void _internal_add_isotope(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_isotope();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 isotope(int index) const;
  void set_isotope(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_isotope(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      isotope() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_isotope();

  // repeated uint32 aryl = 51;
  int aryl_size() const;
  private:
  int _internal_aryl_size() const;
  public:
  void clear_aryl();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_aryl(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_aryl() const;
  void _internal_add_aryl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_aryl();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 aryl(int index) const;
  void set_aryl(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_aryl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      aryl() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_aryl();

  // repeated uint32 fused_system_size = 54;
  int fused_system_size_size() const;
  private:
  int _internal_fused_system_size_size() const;
  public:
  void clear_fused_system_size();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fused_system_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_fused_system_size() const;
  void _internal_add_fused_system_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_fused_system_size();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 fused_system_size(int index) const;
  void set_fused_system_size(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_fused_system_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      fused_system_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_fused_system_size();

  // repeated uint32 vinyl = 57;
  int vinyl_size() const;
  private:
  int _internal_vinyl_size() const;
  public:
  void clear_vinyl();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vinyl(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_vinyl() const;
  void _internal_add_vinyl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_vinyl();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 vinyl(int index) const;
  void set_vinyl(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_vinyl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      vinyl() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_vinyl();

  // repeated uint32 heteroatoms_in_ring = 61;
  int heteroatoms_in_ring_size() const;
  private:
  int _internal_heteroatoms_in_ring_size() const;
  public:
  void clear_heteroatoms_in_ring();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heteroatoms_in_ring(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_heteroatoms_in_ring() const;
  void _internal_add_heteroatoms_in_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_heteroatoms_in_ring();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 heteroatoms_in_ring(int index) const;
  void set_heteroatoms_in_ring(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_heteroatoms_in_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      heteroatoms_in_ring() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_heteroatoms_in_ring();

  // repeated uint32 scaffold_bonds_attached_to_ring = 65;
  int scaffold_bonds_attached_to_ring_size() const;
  private:
  int _internal_scaffold_bonds_attached_to_ring_size() const;
  public:
  void clear_scaffold_bonds_attached_to_ring();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_scaffold_bonds_attached_to_ring(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_scaffold_bonds_attached_to_ring() const;
  void _internal_add_scaffold_bonds_attached_to_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_scaffold_bonds_attached_to_ring();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 scaffold_bonds_attached_to_ring(int index) const;
  void set_scaffold_bonds_attached_to_ring(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_scaffold_bonds_attached_to_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      scaffold_bonds_attached_to_ring() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_scaffold_bonds_attached_to_ring();

  // repeated uint32 symmetry_degree = 69;
  int symmetry_degree_size() const;
  private:
  int _internal_symmetry_degree_size() const;
  public:
  void clear_symmetry_degree();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_symmetry_degree(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_symmetry_degree() const;
  void _internal_add_symmetry_degree(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_symmetry_degree();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 symmetry_degree(int index) const;
  void set_symmetry_degree(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_symmetry_degree(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      symmetry_degree() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_symmetry_degree();

  // optional uint32 min_ncon = 4;
  bool has_min_ncon() const;
  private:
  bool _internal_has_min_ncon() const;
  public:
  void clear_min_ncon();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_ncon() const;
  void set_min_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_ncon() const;
  void _internal_set_min_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_ncon = 5;
  bool has_max_ncon() const;
  private:
  bool _internal_has_max_ncon() const;
  public:
  void clear_max_ncon();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ncon() const;
  void set_max_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_ncon() const;
  void _internal_set_max_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_ncon2 = 7;
  bool has_min_ncon2() const;
  private:
  bool _internal_has_min_ncon2() const;
  public:
  void clear_min_ncon2();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_ncon2() const;
  void set_min_ncon2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_ncon2() const;
  void _internal_set_min_ncon2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_ncon2 = 8;
  bool has_max_ncon2() const;
  private:
  bool _internal_has_max_ncon2() const;
  public:
  void clear_max_ncon2();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ncon2() const;
  void set_max_ncon2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_ncon2() const;
  void _internal_set_max_ncon2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_nbonds = 10;
  bool has_min_nbonds() const;
  private:
  bool _internal_has_min_nbonds() const;
  public:
  void clear_min_nbonds();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_nbonds() const;
  void set_min_nbonds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_nbonds() const;
  void _internal_set_min_nbonds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_nbonds = 11;
  bool has_max_nbonds() const;
  private:
  bool _internal_has_max_nbonds() const;
  public:
  void clear_max_nbonds();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_nbonds() const;
  void set_max_nbonds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_nbonds() const;
  void _internal_set_max_nbonds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 min_formal_charge = 13;
  bool has_min_formal_charge() const;
  private:
  bool _internal_has_min_formal_charge() const;
  public:
  void clear_min_formal_charge();
  ::PROTOBUF_NAMESPACE_ID::int32 min_formal_charge() const;
  void set_min_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_formal_charge() const;
  void _internal_set_min_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 max_formal_charge = 14;
  bool has_max_formal_charge() const;
  private:
  bool _internal_has_max_formal_charge() const;
  public:
  void clear_max_formal_charge();
  ::PROTOBUF_NAMESPACE_ID::int32 max_formal_charge() const;
  void set_max_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_formal_charge() const;
  void _internal_set_max_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 min_nrings = 16;
  bool has_min_nrings() const;
  private:
  bool _internal_has_min_nrings() const;
  public:
  void clear_min_nrings();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_nrings() const;
  void set_min_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_nrings() const;
  void _internal_set_min_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_nrings = 17;
  bool has_max_nrings() const;
  private:
  bool _internal_has_max_nrings() const;
  public:
  void clear_max_nrings();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_nrings() const;
  void set_max_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_nrings() const;
  void _internal_set_max_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_ring_bond_count = 19;
  bool has_min_ring_bond_count() const;
  private:
  bool _internal_has_min_ring_bond_count() const;
  public:
  void clear_min_ring_bond_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_ring_bond_count() const;
  void set_min_ring_bond_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_ring_bond_count() const;
  void _internal_set_min_ring_bond_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_ring_bond_count = 20;
  bool has_max_ring_bond_count() const;
  private:
  bool _internal_has_max_ring_bond_count() const;
  public:
  void clear_max_ring_bond_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ring_bond_count() const;
  void set_max_ring_bond_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_ring_bond_count() const;
  void _internal_set_max_ring_bond_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_ring_size = 22;
  bool has_min_ring_size() const;
  private:
  bool _internal_has_min_ring_size() const;
  public:
  void clear_min_ring_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_ring_size() const;
  void set_min_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_ring_size() const;
  void _internal_set_min_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_ring_size = 23;
  bool has_max_ring_size() const;
  private:
  bool _internal_has_max_ring_size() const;
  public:
  void clear_max_ring_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ring_size() const;
  void set_max_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_ring_size() const;
  void _internal_set_max_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_hcount = 25;
  bool has_min_hcount() const;
  private:
  bool _internal_has_min_hcount() const;
  public:
  void clear_min_hcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_hcount() const;
  void set_min_hcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_hcount() const;
  void _internal_set_min_hcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_hcount = 26;
  bool has_max_hcount() const;
  private:
  bool _internal_has_max_hcount() const;
  public:
  void clear_max_hcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_hcount() const;
  void set_max_hcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_hcount() const;
  void _internal_set_max_hcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_aromatic_ring_size = 31;
  bool has_min_aromatic_ring_size() const;
  private:
  bool _internal_has_min_aromatic_ring_size() const;
  public:
  void clear_min_aromatic_ring_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_aromatic_ring_size() const;
  void set_min_aromatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_aromatic_ring_size() const;
  void _internal_set_min_aromatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_aromatic_ring_size = 32;
  bool has_max_aromatic_ring_size() const;
  private:
  bool _internal_has_max_aromatic_ring_size() const;
  public:
  void clear_max_aromatic_ring_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_aromatic_ring_size() const;
  void set_max_aromatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_aromatic_ring_size() const;
  void _internal_set_max_aromatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_aliphatic_ring_size = 34;
  bool has_min_aliphatic_ring_size() const;
  private:
  bool _internal_has_min_aliphatic_ring_size() const;
  public:
  void clear_min_aliphatic_ring_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_aliphatic_ring_size() const;
  void set_min_aliphatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_aliphatic_ring_size() const;
  void _internal_set_min_aliphatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_aliphatic_ring_size = 35;
  bool has_max_aliphatic_ring_size() const;
  private:
  bool _internal_has_max_aliphatic_ring_size() const;
  public:
  void clear_max_aliphatic_ring_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_aliphatic_ring_size() const;
  void set_max_aliphatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_aliphatic_ring_size() const;
  void _internal_set_max_aliphatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_attached_heteroatom_count = 37;
  bool has_min_attached_heteroatom_count() const;
  private:
  bool _internal_has_min_attached_heteroatom_count() const;
  public:
  void clear_min_attached_heteroatom_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_attached_heteroatom_count() const;
  void set_min_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_attached_heteroatom_count() const;
  void _internal_set_min_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_attached_heteroatom_count = 38;
  bool has_max_attached_heteroatom_count() const;
  private:
  bool _internal_has_max_attached_heteroatom_count() const;
  public:
  void clear_max_attached_heteroatom_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_attached_heteroatom_count() const;
  void set_max_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_attached_heteroatom_count() const;
  void _internal_set_max_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool aromatic = 27;
  bool has_aromatic() const;
  private:
  bool _internal_has_aromatic() const;
  public:
  void clear_aromatic();
  bool aromatic() const;
  void set_aromatic(bool value);
  private:
  bool _internal_aromatic() const;
  void _internal_set_aromatic(bool value);
  public:

  // optional bool chirality = 28;
  bool has_chirality() const;
  private:
  bool _internal_has_chirality() const;
  public:
  void clear_chirality();
  bool chirality() const;
  void set_chirality(bool value);
  private:
  bool _internal_chirality() const;
  void _internal_set_chirality(bool value);
  public:

  // optional bool all_rings_kekule = 60;
  bool has_all_rings_kekule() const;
  private:
  bool _internal_has_all_rings_kekule() const;
  public:
  void clear_all_rings_kekule();
  bool all_rings_kekule() const;
  void set_all_rings_kekule(bool value);
  private:
  bool _internal_all_rings_kekule() const;
  void _internal_set_all_rings_kekule(bool value);
  public:

  // optional uint32 min_lone_pair_count = 40;
  bool has_min_lone_pair_count() const;
  private:
  bool _internal_has_min_lone_pair_count() const;
  public:
  void clear_min_lone_pair_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_lone_pair_count() const;
  void set_min_lone_pair_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_lone_pair_count() const;
  void _internal_set_min_lone_pair_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_lone_pair_count = 41;
  bool has_max_lone_pair_count() const;
  private:
  bool _internal_has_max_lone_pair_count() const;
  public:
  void clear_max_lone_pair_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_lone_pair_count() const;
  void set_max_lone_pair_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_lone_pair_count() const;
  void _internal_set_max_lone_pair_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_unsaturation = 43;
  bool has_min_unsaturation() const;
  private:
  bool _internal_has_min_unsaturation() const;
  public:
  void clear_min_unsaturation();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_unsaturation() const;
  void set_min_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_unsaturation() const;
  void _internal_set_min_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_unsaturation = 44;
  bool has_max_unsaturation() const;
  private:
  bool _internal_has_max_unsaturation() const;
  public:
  void clear_max_unsaturation();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_unsaturation() const;
  void set_max_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_unsaturation() const;
  void _internal_set_max_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_daylight_x = 46;
  bool has_min_daylight_x() const;
  private:
  bool _internal_has_min_daylight_x() const;
  public:
  void clear_min_daylight_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_daylight_x() const;
  void set_min_daylight_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_daylight_x() const;
  void _internal_set_min_daylight_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_daylight_x = 47;
  bool has_max_daylight_x() const;
  private:
  bool _internal_has_max_daylight_x() const;
  public:
  void clear_max_daylight_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_daylight_x() const;
  void set_max_daylight_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_daylight_x() const;
  void _internal_set_max_daylight_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_isotope = 49;
  bool has_min_isotope() const;
  private:
  bool _internal_has_min_isotope() const;
  public:
  void clear_min_isotope();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_isotope() const;
  void set_min_isotope(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_isotope() const;
  void _internal_set_min_isotope(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_isotope = 50;
  bool has_max_isotope() const;
  private:
  bool _internal_has_max_isotope() const;
  public:
  void clear_max_isotope();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_isotope() const;
  void set_max_isotope(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_isotope() const;
  void _internal_set_max_isotope(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_aryl = 52;
  bool has_min_aryl() const;
  private:
  bool _internal_has_min_aryl() const;
  public:
  void clear_min_aryl();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_aryl() const;
  void set_min_aryl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_aryl() const;
  void _internal_set_min_aryl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_aryl = 53;
  bool has_max_aryl() const;
  private:
  bool _internal_has_max_aryl() const;
  public:
  void clear_max_aryl();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_aryl() const;
  void set_max_aryl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_aryl() const;
  void _internal_set_max_aryl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_fused_system_size = 55;
  bool has_min_fused_system_size() const;
  private:
  bool _internal_has_min_fused_system_size() const;
  public:
  void clear_min_fused_system_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_fused_system_size() const;
  void set_min_fused_system_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_fused_system_size() const;
  void _internal_set_min_fused_system_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_fused_system_size = 56;
  bool has_max_fused_system_size() const;
  private:
  bool _internal_has_max_fused_system_size() const;
  public:
  void clear_max_fused_system_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_fused_system_size() const;
  void set_max_fused_system_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_fused_system_size() const;
  void _internal_set_max_fused_system_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_vinyl = 58;
  bool has_min_vinyl() const;
  private:
  bool _internal_has_min_vinyl() const;
  public:
  void clear_min_vinyl();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_vinyl() const;
  void set_min_vinyl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_vinyl() const;
  void _internal_set_min_vinyl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_vinyl = 59;
  bool has_max_vinyl() const;
  private:
  bool _internal_has_max_vinyl() const;
  public:
  void clear_max_vinyl();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_vinyl() const;
  void set_max_vinyl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_vinyl() const;
  void _internal_set_max_vinyl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_heteroatoms_in_ring = 62;
  bool has_min_heteroatoms_in_ring() const;
  private:
  bool _internal_has_min_heteroatoms_in_ring() const;
  public:
  void clear_min_heteroatoms_in_ring();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_heteroatoms_in_ring() const;
  void set_min_heteroatoms_in_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_heteroatoms_in_ring() const;
  void _internal_set_min_heteroatoms_in_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_heteroatoms_in_ring = 63;
  bool has_max_heteroatoms_in_ring() const;
  private:
  bool _internal_has_max_heteroatoms_in_ring() const;
  public:
  void clear_max_heteroatoms_in_ring();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_heteroatoms_in_ring() const;
  void set_max_heteroatoms_in_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_heteroatoms_in_ring() const;
  void _internal_set_max_heteroatoms_in_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 match_spinach_only = 64;
  bool has_match_spinach_only() const;
  private:
  bool _internal_has_match_spinach_only() const;
  public:
  void clear_match_spinach_only();
  ::PROTOBUF_NAMESPACE_ID::int32 match_spinach_only() const;
  void set_match_spinach_only(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_match_spinach_only() const;
  void _internal_set_match_spinach_only(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 min_scaffold_bonds_attached_to_ring = 66;
  bool has_min_scaffold_bonds_attached_to_ring() const;
  private:
  bool _internal_has_min_scaffold_bonds_attached_to_ring() const;
  public:
  void clear_min_scaffold_bonds_attached_to_ring();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_scaffold_bonds_attached_to_ring() const;
  void set_min_scaffold_bonds_attached_to_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_scaffold_bonds_attached_to_ring() const;
  void _internal_set_min_scaffold_bonds_attached_to_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_scaffold_bonds_attached_to_ring = 67;
  bool has_max_scaffold_bonds_attached_to_ring() const;
  private:
  bool _internal_has_max_scaffold_bonds_attached_to_ring() const;
  public:
  void clear_max_scaffold_bonds_attached_to_ring();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_scaffold_bonds_attached_to_ring() const;
  void set_max_scaffold_bonds_attached_to_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_scaffold_bonds_attached_to_ring() const;
  void _internal_set_max_scaffold_bonds_attached_to_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 preference_value = 68;
  bool has_preference_value() const;
  private:
  bool _internal_has_preference_value() const;
  public:
  void clear_preference_value();
  ::PROTOBUF_NAMESPACE_ID::int32 preference_value() const;
  void set_preference_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_preference_value() const;
  void _internal_set_preference_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 min_symmetry_degree = 70;
  bool has_min_symmetry_degree() const;
  private:
  bool _internal_has_min_symmetry_degree() const;
  public:
  void clear_min_symmetry_degree();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_symmetry_degree() const;
  void set_min_symmetry_degree(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_symmetry_degree() const;
  void _internal_set_min_symmetry_degree(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_symmetry_degree = 71;
  bool has_max_symmetry_degree() const;
  private:
  bool _internal_has_max_symmetry_degree() const;
  public:
  void clear_max_symmetry_degree();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_symmetry_degree() const;
  void set_max_symmetry_degree(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_symmetry_degree() const;
  void _internal_set_max_symmetry_degree(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 symmetry_group = 72;
  bool has_symmetry_group() const;
  private:
  bool _internal_has_symmetry_group() const;
  public:
  void clear_symmetry_group();
  ::PROTOBUF_NAMESPACE_ID::int32 symmetry_group() const;
  void set_symmetry_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_symmetry_group() const;
  void _internal_set_symmetry_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 user_atom_type = 77;
  bool has_user_atom_type() const;
  private:
  bool _internal_has_user_atom_type() const;
  public:
  void clear_user_atom_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_atom_type() const;
  void set_user_atom_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_atom_type() const;
  void _internal_set_user_atom_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 atom_type = 78;
  bool has_atom_type() const;
  private:
  bool _internal_has_atom_type() const;
  public:
  void clear_atom_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 atom_type() const;
  void set_atom_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_atom_type() const;
  void _internal_set_atom_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .SubstructureSearch.Operator logical_operator = 76;
  bool has_logical_operator() const;
  private:
  bool _internal_has_logical_operator() const;
  public:
  void clear_logical_operator();
  ::SubstructureSearch::Operator logical_operator() const;
  void set_logical_operator(::SubstructureSearch::Operator value);
  private:
  ::SubstructureSearch::Operator _internal_logical_operator() const;
  void _internal_set_logical_operator(::SubstructureSearch::Operator value);
  public:

  // @@protoc_insertion_point(class_scope:SubstructureSearch.SubstructureAtomSpecifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> atomic_symbol_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > atomic_number_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ncon_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ncon2_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > nbonds_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > formal_charge_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > nrings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ring_bond_count_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ring_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > hcount_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > aromatic_ring_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > aliphatic_ring_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > attached_heteroatom_count_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > lone_pair_count_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > unsaturation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > daylight_x_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > isotope_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > aryl_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > fused_system_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > vinyl_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > heteroatoms_in_ring_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > scaffold_bonds_attached_to_ring_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > symmetry_degree_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_ncon_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ncon_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_ncon2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ncon2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_nbonds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_nbonds_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_formal_charge_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_formal_charge_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_nrings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_nrings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_ring_bond_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ring_bond_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_ring_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ring_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_hcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_hcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_aromatic_ring_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_aromatic_ring_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_aliphatic_ring_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_aliphatic_ring_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_attached_heteroatom_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_attached_heteroatom_count_;
  bool aromatic_;
  bool chirality_;
  bool all_rings_kekule_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_lone_pair_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_lone_pair_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_unsaturation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_unsaturation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_daylight_x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_daylight_x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_isotope_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_isotope_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_aryl_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_aryl_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_fused_system_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_fused_system_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_vinyl_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_vinyl_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_heteroatoms_in_ring_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_heteroatoms_in_ring_;
  ::PROTOBUF_NAMESPACE_ID::int32 match_spinach_only_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_scaffold_bonds_attached_to_ring_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_scaffold_bonds_attached_to_ring_;
  ::PROTOBUF_NAMESPACE_ID::int32 preference_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_symmetry_degree_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_symmetry_degree_;
  ::PROTOBUF_NAMESPACE_ID::int32 symmetry_group_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_atom_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 atom_type_;
  int logical_operator_;
  friend struct ::TableStruct_Molecule_5fLib_2fsubstructure_2eproto;
};
// -------------------------------------------------------------------

class SubstructureAtomEnvironment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubstructureSearch.SubstructureAtomEnvironment) */ {
 public:
  inline SubstructureAtomEnvironment() : SubstructureAtomEnvironment(nullptr) {}
  virtual ~SubstructureAtomEnvironment();

  SubstructureAtomEnvironment(const SubstructureAtomEnvironment& from);
  SubstructureAtomEnvironment(SubstructureAtomEnvironment&& from) noexcept
    : SubstructureAtomEnvironment() {
    *this = ::std::move(from);
  }

  inline SubstructureAtomEnvironment& operator=(const SubstructureAtomEnvironment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstructureAtomEnvironment& operator=(SubstructureAtomEnvironment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstructureAtomEnvironment& default_instance();

  static inline const SubstructureAtomEnvironment* internal_default_instance() {
    return reinterpret_cast<const SubstructureAtomEnvironment*>(
               &_SubstructureAtomEnvironment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SubstructureAtomEnvironment& a, SubstructureAtomEnvironment& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstructureAtomEnvironment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstructureAtomEnvironment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstructureAtomEnvironment* New() const final {
    return CreateMaybeMessage<SubstructureAtomEnvironment>(nullptr);
  }

  SubstructureAtomEnvironment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstructureAtomEnvironment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstructureAtomEnvironment& from);
  void MergeFrom(const SubstructureAtomEnvironment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstructureAtomEnvironment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubstructureSearch.SubstructureAtomEnvironment";
  }
  protected:
  explicit SubstructureAtomEnvironment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
    return ::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubstructureAtomFieldNumber = 2,
    kOpFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .SubstructureSearch.SubstructureAtom substructure_atom = 2;
  int substructure_atom_size() const;
  private:
  int _internal_substructure_atom_size() const;
  public:
  void clear_substructure_atom();
  ::SubstructureSearch::SubstructureAtom* mutable_substructure_atom(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtom >*
      mutable_substructure_atom();
  private:
  const ::SubstructureSearch::SubstructureAtom& _internal_substructure_atom(int index) const;
  ::SubstructureSearch::SubstructureAtom* _internal_add_substructure_atom();
  public:
  const ::SubstructureSearch::SubstructureAtom& substructure_atom(int index) const;
  ::SubstructureSearch::SubstructureAtom* add_substructure_atom();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtom >&
      substructure_atom() const;

  // optional string op = 3;
  bool has_op() const;
  private:
  bool _internal_has_op() const;
  public:
  void clear_op();
  const std::string& op() const;
  void set_op(const std::string& value);
  void set_op(std::string&& value);
  void set_op(const char* value);
  void set_op(const char* value, size_t size);
  std::string* mutable_op();
  std::string* release_op();
  void set_allocated_op(std::string* op);
  private:
  const std::string& _internal_op() const;
  void _internal_set_op(const std::string& value);
  std::string* _internal_mutable_op();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SubstructureSearch.SubstructureAtomEnvironment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtom > substructure_atom_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_Molecule_5fLib_2fsubstructure_2eproto;
};
// -------------------------------------------------------------------

class SubstructureAtom PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubstructureSearch.SubstructureAtom) */ {
 public:
  inline SubstructureAtom() : SubstructureAtom(nullptr) {}
  virtual ~SubstructureAtom();

  SubstructureAtom(const SubstructureAtom& from);
  SubstructureAtom(SubstructureAtom&& from) noexcept
    : SubstructureAtom() {
    *this = ::std::move(from);
  }

  inline SubstructureAtom& operator=(const SubstructureAtom& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstructureAtom& operator=(SubstructureAtom&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstructureAtom& default_instance();

  enum SmilesOrSmartsCase {
    kSmarts = 14,
    kAtomSmarts = 15,
    kSmiles = 16,
    SMILESORSMARTS_NOT_SET = 0,
  };

  static inline const SubstructureAtom* internal_default_instance() {
    return reinterpret_cast<const SubstructureAtom*>(
               &_SubstructureAtom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SubstructureAtom& a, SubstructureAtom& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstructureAtom* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstructureAtom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstructureAtom* New() const final {
    return CreateMaybeMessage<SubstructureAtom>(nullptr);
  }

  SubstructureAtom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstructureAtom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstructureAtom& from);
  void MergeFrom(const SubstructureAtom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstructureAtom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubstructureSearch.SubstructureAtom";
  }
  protected:
  explicit SubstructureAtom(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
    return ::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAtomPropertiesFieldNumber = 7,
    kEnvironmentFieldNumber = 17,
    kQueryBondFieldNumber = 21,
    kPreferenceFieldNumber = 23,
    kSingleBondFieldNumber = 25,
    kDoubleBondFieldNumber = 26,
    kTripleBondFieldNumber = 27,
    kAromaticBondFieldNumber = 28,
    kBondFieldNumber = 29,
    kUnmatchedAtomsAttachedFieldNumber = 30,
    kTextIdentifierFieldNumber = 3,
    kBondSmartsFieldNumber = 22,
    kIdFieldNumber = 1,
    kAtomMapNumberFieldNumber = 4,
    kInitialAtomNumberFieldNumber = 5,
    kOrIdFieldNumber = 6,
    kOrOperatorFieldNumber = 8,
    kRingIdFieldNumber = 9,
    kFusedSystemIdFieldNumber = 10,
    kFragmentIdFieldNumber = 11,
    kNumericValueFieldNumber = 12,
    kMatchAsMatchFieldNumber = 2,
    kIncludeInEmbeddingFieldNumber = 13,
    kSumAllPreferenceHitsFieldNumber = 24,
    kMinUnmatchedAtomsAttachedFieldNumber = 31,
    kMaxUnmatchedAtomsAttachedFieldNumber = 32,
    kAtomTypeGroupFieldNumber = 33,
    kSmartsFieldNumber = 14,
    kAtomSmartsFieldNumber = 15,
    kSmilesFieldNumber = 16,
  };
  // repeated .SubstructureSearch.SubstructureAtomSpecifier atom_properties = 7;
  int atom_properties_size() const;
  private:
  int _internal_atom_properties_size() const;
  public:
  void clear_atom_properties();
  ::SubstructureSearch::SubstructureAtomSpecifier* mutable_atom_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtomSpecifier >*
      mutable_atom_properties();
  private:
  const ::SubstructureSearch::SubstructureAtomSpecifier& _internal_atom_properties(int index) const;
  ::SubstructureSearch::SubstructureAtomSpecifier* _internal_add_atom_properties();
  public:
  const ::SubstructureSearch::SubstructureAtomSpecifier& atom_properties(int index) const;
  ::SubstructureSearch::SubstructureAtomSpecifier* add_atom_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtomSpecifier >&
      atom_properties() const;

  // repeated .SubstructureSearch.SubstructureAtomEnvironment environment = 17;
  int environment_size() const;
  private:
  int _internal_environment_size() const;
  public:
  void clear_environment();
  ::SubstructureSearch::SubstructureAtomEnvironment* mutable_environment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtomEnvironment >*
      mutable_environment();
  private:
  const ::SubstructureSearch::SubstructureAtomEnvironment& _internal_environment(int index) const;
  ::SubstructureSearch::SubstructureAtomEnvironment* _internal_add_environment();
  public:
  const ::SubstructureSearch::SubstructureAtomEnvironment& environment(int index) const;
  ::SubstructureSearch::SubstructureAtomEnvironment* add_environment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtomEnvironment >&
      environment() const;

  // repeated .SubstructureSearch.SubstructureBond query_bond = 21;
  int query_bond_size() const;
  private:
  int _internal_query_bond_size() const;
  public:
  void clear_query_bond();
  ::SubstructureSearch::SubstructureBond* mutable_query_bond(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureBond >*
      mutable_query_bond();
  private:
  const ::SubstructureSearch::SubstructureBond& _internal_query_bond(int index) const;
  ::SubstructureSearch::SubstructureBond* _internal_add_query_bond();
  public:
  const ::SubstructureSearch::SubstructureBond& query_bond(int index) const;
  ::SubstructureSearch::SubstructureBond* add_query_bond();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureBond >&
      query_bond() const;

  // repeated .SubstructureSearch.SubstructureAtomSpecifier preference = 23;
  int preference_size() const;
  private:
  int _internal_preference_size() const;
  public:
  void clear_preference();
  ::SubstructureSearch::SubstructureAtomSpecifier* mutable_preference(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtomSpecifier >*
      mutable_preference();
  private:
  const ::SubstructureSearch::SubstructureAtomSpecifier& _internal_preference(int index) const;
  ::SubstructureSearch::SubstructureAtomSpecifier* _internal_add_preference();
  public:
  const ::SubstructureSearch::SubstructureAtomSpecifier& preference(int index) const;
  ::SubstructureSearch::SubstructureAtomSpecifier* add_preference();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtomSpecifier >&
      preference() const;

  // repeated uint32 single_bond = 25;
  int single_bond_size() const;
  private:
  int _internal_single_bond_size() const;
  public:
  void clear_single_bond();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_single_bond(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_single_bond() const;
  void _internal_add_single_bond(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_single_bond();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 single_bond(int index) const;
  void set_single_bond(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_single_bond(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      single_bond() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_single_bond();

  // repeated uint32 double_bond = 26;
  int double_bond_size() const;
  private:
  int _internal_double_bond_size() const;
  public:
  void clear_double_bond();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_double_bond(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_double_bond() const;
  void _internal_add_double_bond(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_double_bond();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 double_bond(int index) const;
  void set_double_bond(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_double_bond(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      double_bond() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_double_bond();

  // repeated uint32 triple_bond = 27;
  int triple_bond_size() const;
  private:
  int _internal_triple_bond_size() const;
  public:
  void clear_triple_bond();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_triple_bond(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_triple_bond() const;
  void _internal_add_triple_bond(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_triple_bond();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 triple_bond(int index) const;
  void set_triple_bond(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_triple_bond(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      triple_bond() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_triple_bond();

  // repeated uint32 aromatic_bond = 28;
  int aromatic_bond_size() const;
  private:
  int _internal_aromatic_bond_size() const;
  public:
  void clear_aromatic_bond();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_aromatic_bond(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_aromatic_bond() const;
  void _internal_add_aromatic_bond(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_aromatic_bond();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 aromatic_bond(int index) const;
  void set_aromatic_bond(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_aromatic_bond(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      aromatic_bond() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_aromatic_bond();

  // repeated uint32 bond = 29;
  int bond_size() const;
  private:
  int _internal_bond_size() const;
  public:
  void clear_bond();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bond(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_bond() const;
  void _internal_add_bond(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_bond();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 bond(int index) const;
  void set_bond(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_bond(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      bond() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_bond();

  // repeated uint32 unmatched_atoms_attached = 30;
  int unmatched_atoms_attached_size() const;
  private:
  int _internal_unmatched_atoms_attached_size() const;
  public:
  void clear_unmatched_atoms_attached();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unmatched_atoms_attached(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_unmatched_atoms_attached() const;
  void _internal_add_unmatched_atoms_attached(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_unmatched_atoms_attached();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 unmatched_atoms_attached(int index) const;
  void set_unmatched_atoms_attached(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_unmatched_atoms_attached(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      unmatched_atoms_attached() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_unmatched_atoms_attached();

  // optional string text_identifier = 3;
  bool has_text_identifier() const;
  private:
  bool _internal_has_text_identifier() const;
  public:
  void clear_text_identifier();
  const std::string& text_identifier() const;
  void set_text_identifier(const std::string& value);
  void set_text_identifier(std::string&& value);
  void set_text_identifier(const char* value);
  void set_text_identifier(const char* value, size_t size);
  std::string* mutable_text_identifier();
  std::string* release_text_identifier();
  void set_allocated_text_identifier(std::string* text_identifier);
  private:
  const std::string& _internal_text_identifier() const;
  void _internal_set_text_identifier(const std::string& value);
  std::string* _internal_mutable_text_identifier();
  public:

  // optional string bond_smarts = 22;
  bool has_bond_smarts() const;
  private:
  bool _internal_has_bond_smarts() const;
  public:
  void clear_bond_smarts();
  const std::string& bond_smarts() const;
  void set_bond_smarts(const std::string& value);
  void set_bond_smarts(std::string&& value);
  void set_bond_smarts(const char* value);
  void set_bond_smarts(const char* value, size_t size);
  std::string* mutable_bond_smarts();
  std::string* release_bond_smarts();
  void set_allocated_bond_smarts(std::string* bond_smarts);
  private:
  const std::string& _internal_bond_smarts() const;
  void _internal_set_bond_smarts(const std::string& value);
  std::string* _internal_mutable_bond_smarts();
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 atom_map_number = 4;
  bool has_atom_map_number() const;
  private:
  bool _internal_has_atom_map_number() const;
  public:
  void clear_atom_map_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 atom_map_number() const;
  void set_atom_map_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_atom_map_number() const;
  void _internal_set_atom_map_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 initial_atom_number = 5;
  bool has_initial_atom_number() const;
  private:
  bool _internal_has_initial_atom_number() const;
  public:
  void clear_initial_atom_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 initial_atom_number() const;
  void set_initial_atom_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_initial_atom_number() const;
  void _internal_set_initial_atom_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 or_id = 6;
  bool has_or_id() const;
  private:
  bool _internal_has_or_id() const;
  public:
  void clear_or_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 or_id() const;
  void set_or_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_or_id() const;
  void _internal_set_or_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 or_operator = 8;
  bool has_or_operator() const;
  private:
  bool _internal_has_or_operator() const;
  public:
  void clear_or_operator();
  ::PROTOBUF_NAMESPACE_ID::int32 or_operator() const;
  void set_or_operator(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_or_operator() const;
  void _internal_set_or_operator(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ring_id = 9;
  bool has_ring_id() const;
  private:
  bool _internal_has_ring_id() const;
  public:
  void clear_ring_id();
  ::PROTOBUF_NAMESPACE_ID::int32 ring_id() const;
  void set_ring_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ring_id() const;
  void _internal_set_ring_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 fused_system_id = 10;
  bool has_fused_system_id() const;
  private:
  bool _internal_has_fused_system_id() const;
  public:
  void clear_fused_system_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fused_system_id() const;
  void set_fused_system_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fused_system_id() const;
  void _internal_set_fused_system_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 fragment_id = 11;
  bool has_fragment_id() const;
  private:
  bool _internal_has_fragment_id() const;
  public:
  void clear_fragment_id();
  ::PROTOBUF_NAMESPACE_ID::int32 fragment_id() const;
  void set_fragment_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fragment_id() const;
  void _internal_set_fragment_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double numeric_value = 12;
  bool has_numeric_value() const;
  private:
  bool _internal_has_numeric_value() const;
  public:
  void clear_numeric_value();
  double numeric_value() const;
  void set_numeric_value(double value);
  private:
  double _internal_numeric_value() const;
  void _internal_set_numeric_value(double value);
  public:

  // optional bool match_as_match = 2;
  bool has_match_as_match() const;
  private:
  bool _internal_has_match_as_match() const;
  public:
  void clear_match_as_match();
  bool match_as_match() const;
  void set_match_as_match(bool value);
  private:
  bool _internal_match_as_match() const;
  void _internal_set_match_as_match(bool value);
  public:

  // optional bool include_in_embedding = 13;
  bool has_include_in_embedding() const;
  private:
  bool _internal_has_include_in_embedding() const;
  public:
  void clear_include_in_embedding();
  bool include_in_embedding() const;
  void set_include_in_embedding(bool value);
  private:
  bool _internal_include_in_embedding() const;
  void _internal_set_include_in_embedding(bool value);
  public:

  // optional bool sum_all_preference_hits = 24;
  bool has_sum_all_preference_hits() const;
  private:
  bool _internal_has_sum_all_preference_hits() const;
  public:
  void clear_sum_all_preference_hits();
  bool sum_all_preference_hits() const;
  void set_sum_all_preference_hits(bool value);
  private:
  bool _internal_sum_all_preference_hits() const;
  void _internal_set_sum_all_preference_hits(bool value);
  public:

  // optional uint32 min_unmatched_atoms_attached = 31;
  bool has_min_unmatched_atoms_attached() const;
  private:
  bool _internal_has_min_unmatched_atoms_attached() const;
  public:
  void clear_min_unmatched_atoms_attached();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_unmatched_atoms_attached() const;
  void set_min_unmatched_atoms_attached(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_unmatched_atoms_attached() const;
  void _internal_set_min_unmatched_atoms_attached(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_unmatched_atoms_attached = 32;
  bool has_max_unmatched_atoms_attached() const;
  private:
  bool _internal_has_max_unmatched_atoms_attached() const;
  public:
  void clear_max_unmatched_atoms_attached();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_unmatched_atoms_attached() const;
  void set_max_unmatched_atoms_attached(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_unmatched_atoms_attached() const;
  void _internal_set_max_unmatched_atoms_attached(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 atom_type_group = 33;
  bool has_atom_type_group() const;
  private:
  bool _internal_has_atom_type_group() const;
  public:
  void clear_atom_type_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 atom_type_group() const;
  void set_atom_type_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_atom_type_group() const;
  void _internal_set_atom_type_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // string smarts = 14;
  bool has_smarts() const;
  private:
  bool _internal_has_smarts() const;
  public:
  void clear_smarts();
  const std::string& smarts() const;
  void set_smarts(const std::string& value);
  void set_smarts(std::string&& value);
  void set_smarts(const char* value);
  void set_smarts(const char* value, size_t size);
  std::string* mutable_smarts();
  std::string* release_smarts();
  void set_allocated_smarts(std::string* smarts);
  private:
  const std::string& _internal_smarts() const;
  void _internal_set_smarts(const std::string& value);
  std::string* _internal_mutable_smarts();
  public:

  // string atom_smarts = 15;
  bool has_atom_smarts() const;
  private:
  bool _internal_has_atom_smarts() const;
  public:
  void clear_atom_smarts();
  const std::string& atom_smarts() const;
  void set_atom_smarts(const std::string& value);
  void set_atom_smarts(std::string&& value);
  void set_atom_smarts(const char* value);
  void set_atom_smarts(const char* value, size_t size);
  std::string* mutable_atom_smarts();
  std::string* release_atom_smarts();
  void set_allocated_atom_smarts(std::string* atom_smarts);
  private:
  const std::string& _internal_atom_smarts() const;
  void _internal_set_atom_smarts(const std::string& value);
  std::string* _internal_mutable_atom_smarts();
  public:

  // string smiles = 16;
  bool has_smiles() const;
  private:
  bool _internal_has_smiles() const;
  public:
  void clear_smiles();
  const std::string& smiles() const;
  void set_smiles(const std::string& value);
  void set_smiles(std::string&& value);
  void set_smiles(const char* value);
  void set_smiles(const char* value, size_t size);
  std::string* mutable_smiles();
  std::string* release_smiles();
  void set_allocated_smiles(std::string* smiles);
  private:
  const std::string& _internal_smiles() const;
  void _internal_set_smiles(const std::string& value);
  std::string* _internal_mutable_smiles();
  public:

  void clear_SmilesOrSmarts();
  SmilesOrSmartsCase SmilesOrSmarts_case() const;
  // @@protoc_insertion_point(class_scope:SubstructureSearch.SubstructureAtom)
 private:
  class _Internal;
  void set_has_smarts();
  void set_has_atom_smarts();
  void set_has_smiles();

  inline bool has_SmilesOrSmarts() const;
  inline void clear_has_SmilesOrSmarts();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtomSpecifier > atom_properties_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtomEnvironment > environment_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureBond > query_bond_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtomSpecifier > preference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > single_bond_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > double_bond_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > triple_bond_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > aromatic_bond_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > bond_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > unmatched_atoms_attached_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bond_smarts_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 atom_map_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 initial_atom_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 or_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 or_operator_;
  ::PROTOBUF_NAMESPACE_ID::int32 ring_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fused_system_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 fragment_id_;
  double numeric_value_;
  bool match_as_match_;
  bool include_in_embedding_;
  bool sum_all_preference_hits_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_unmatched_atoms_attached_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_unmatched_atoms_attached_;
  ::PROTOBUF_NAMESPACE_ID::uint32 atom_type_group_;
  union SmilesOrSmartsUnion {
    SmilesOrSmartsUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smarts_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr atom_smarts_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smiles_;
  } SmilesOrSmarts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Molecule_5fLib_2fsubstructure_2eproto;
};
// -------------------------------------------------------------------

class SubstructureEnvironment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubstructureSearch.SubstructureEnvironment) */ {
 public:
  inline SubstructureEnvironment() : SubstructureEnvironment(nullptr) {}
  virtual ~SubstructureEnvironment();

  SubstructureEnvironment(const SubstructureEnvironment& from);
  SubstructureEnvironment(SubstructureEnvironment&& from) noexcept
    : SubstructureEnvironment() {
    *this = ::std::move(from);
  }

  inline SubstructureEnvironment& operator=(const SubstructureEnvironment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstructureEnvironment& operator=(SubstructureEnvironment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstructureEnvironment& default_instance();

  static inline const SubstructureEnvironment* internal_default_instance() {
    return reinterpret_cast<const SubstructureEnvironment*>(
               &_SubstructureEnvironment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SubstructureEnvironment& a, SubstructureEnvironment& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstructureEnvironment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstructureEnvironment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstructureEnvironment* New() const final {
    return CreateMaybeMessage<SubstructureEnvironment>(nullptr);
  }

  SubstructureEnvironment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstructureEnvironment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstructureEnvironment& from);
  void MergeFrom(const SubstructureEnvironment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstructureEnvironment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubstructureSearch.SubstructureEnvironment";
  }
  protected:
  explicit SubstructureEnvironment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
    return ::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSmartsFieldNumber = 3,
    kSmilesFieldNumber = 4,
    kQueryAtomFieldNumber = 5,
    kBondFieldNumber = 7,
    kHitsNeededFieldNumber = 10,
    kAttachmentFieldNumber = 6,
    kIdFieldNumber = 1,
    kOrIdFieldNumber = 8,
    kAndIdFieldNumber = 9,
    kMinHitsNeededFieldNumber = 11,
    kMaxHitsNeededFieldNumber = 12,
    kNoOtherSubstituentsAllowedFieldNumber = 13,
    kEnvMatchesCanShareAttachmentPointsFieldNumber = 15,
    kHydrogenOkFieldNumber = 17,
    kMaxMatchesToFindFieldNumber = 16,
    kMaxEnvMatchesPerAnchorFieldNumber = 18,
  };
  // repeated string smarts = 3;
  int smarts_size() const;
  private:
  int _internal_smarts_size() const;
  public:
  void clear_smarts();
  const std::string& smarts(int index) const;
  std::string* mutable_smarts(int index);
  void set_smarts(int index, const std::string& value);
  void set_smarts(int index, std::string&& value);
  void set_smarts(int index, const char* value);
  void set_smarts(int index, const char* value, size_t size);
  std::string* add_smarts();
  void add_smarts(const std::string& value);
  void add_smarts(std::string&& value);
  void add_smarts(const char* value);
  void add_smarts(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& smarts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_smarts();
  private:
  const std::string& _internal_smarts(int index) const;
  std::string* _internal_add_smarts();
  public:

  // repeated string smiles = 4;
  int smiles_size() const;
  private:
  int _internal_smiles_size() const;
  public:
  void clear_smiles();
  const std::string& smiles(int index) const;
  std::string* mutable_smiles(int index);
  void set_smiles(int index, const std::string& value);
  void set_smiles(int index, std::string&& value);
  void set_smiles(int index, const char* value);
  void set_smiles(int index, const char* value, size_t size);
  std::string* add_smiles();
  void add_smiles(const std::string& value);
  void add_smiles(std::string&& value);
  void add_smiles(const char* value);
  void add_smiles(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& smiles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_smiles();
  private:
  const std::string& _internal_smiles(int index) const;
  std::string* _internal_add_smiles();
  public:

  // repeated .SubstructureSearch.SubstructureAtom query_atom = 5;
  int query_atom_size() const;
  private:
  int _internal_query_atom_size() const;
  public:
  void clear_query_atom();
  ::SubstructureSearch::SubstructureAtom* mutable_query_atom(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtom >*
      mutable_query_atom();
  private:
  const ::SubstructureSearch::SubstructureAtom& _internal_query_atom(int index) const;
  ::SubstructureSearch::SubstructureAtom* _internal_add_query_atom();
  public:
  const ::SubstructureSearch::SubstructureAtom& query_atom(int index) const;
  ::SubstructureSearch::SubstructureAtom* add_query_atom();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtom >&
      query_atom() const;

  // repeated string bond = 7;
  int bond_size() const;
  private:
  int _internal_bond_size() const;
  public:
  void clear_bond();
  const std::string& bond(int index) const;
  std::string* mutable_bond(int index);
  void set_bond(int index, const std::string& value);
  void set_bond(int index, std::string&& value);
  void set_bond(int index, const char* value);
  void set_bond(int index, const char* value, size_t size);
  std::string* add_bond();
  void add_bond(const std::string& value);
  void add_bond(std::string&& value);
  void add_bond(const char* value);
  void add_bond(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bond() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bond();
  private:
  const std::string& _internal_bond(int index) const;
  std::string* _internal_add_bond();
  public:

  // repeated uint32 hits_needed = 10;
  int hits_needed_size() const;
  private:
  int _internal_hits_needed_size() const;
  public:
  void clear_hits_needed();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hits_needed(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_hits_needed() const;
  void _internal_add_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_hits_needed();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 hits_needed(int index) const;
  void set_hits_needed(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      hits_needed() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_hits_needed();

  // optional .SubstructureSearch.EnvironmentAttachment attachment = 6;
  bool has_attachment() const;
  private:
  bool _internal_has_attachment() const;
  public:
  void clear_attachment();
  const ::SubstructureSearch::EnvironmentAttachment& attachment() const;
  ::SubstructureSearch::EnvironmentAttachment* release_attachment();
  ::SubstructureSearch::EnvironmentAttachment* mutable_attachment();
  void set_allocated_attachment(::SubstructureSearch::EnvironmentAttachment* attachment);
  private:
  const ::SubstructureSearch::EnvironmentAttachment& _internal_attachment() const;
  ::SubstructureSearch::EnvironmentAttachment* _internal_mutable_attachment();
  public:
  void unsafe_arena_set_allocated_attachment(
      ::SubstructureSearch::EnvironmentAttachment* attachment);
  ::SubstructureSearch::EnvironmentAttachment* unsafe_arena_release_attachment();

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 or_id = 8;
  bool has_or_id() const;
  private:
  bool _internal_has_or_id() const;
  public:
  void clear_or_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 or_id() const;
  void set_or_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_or_id() const;
  void _internal_set_or_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 and_id = 9;
  bool has_and_id() const;
  private:
  bool _internal_has_and_id() const;
  public:
  void clear_and_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 and_id() const;
  void set_and_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_and_id() const;
  void _internal_set_and_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_hits_needed = 11;
  bool has_min_hits_needed() const;
  private:
  bool _internal_has_min_hits_needed() const;
  public:
  void clear_min_hits_needed();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_hits_needed() const;
  void set_min_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_hits_needed() const;
  void _internal_set_min_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_hits_needed = 12;
  bool has_max_hits_needed() const;
  private:
  bool _internal_has_max_hits_needed() const;
  public:
  void clear_max_hits_needed();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_hits_needed() const;
  void set_max_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_hits_needed() const;
  void _internal_set_max_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool no_other_substituents_allowed = 13;
  bool has_no_other_substituents_allowed() const;
  private:
  bool _internal_has_no_other_substituents_allowed() const;
  public:
  void clear_no_other_substituents_allowed();
  bool no_other_substituents_allowed() const;
  void set_no_other_substituents_allowed(bool value);
  private:
  bool _internal_no_other_substituents_allowed() const;
  void _internal_set_no_other_substituents_allowed(bool value);
  public:

  // optional bool env_matches_can_share_attachment_points = 15;
  bool has_env_matches_can_share_attachment_points() const;
  private:
  bool _internal_has_env_matches_can_share_attachment_points() const;
  public:
  void clear_env_matches_can_share_attachment_points();
  bool env_matches_can_share_attachment_points() const;
  void set_env_matches_can_share_attachment_points(bool value);
  private:
  bool _internal_env_matches_can_share_attachment_points() const;
  void _internal_set_env_matches_can_share_attachment_points(bool value);
  public:

  // optional bool hydrogen_ok = 17;
  bool has_hydrogen_ok() const;
  private:
  bool _internal_has_hydrogen_ok() const;
  public:
  void clear_hydrogen_ok();
  bool hydrogen_ok() const;
  void set_hydrogen_ok(bool value);
  private:
  bool _internal_hydrogen_ok() const;
  void _internal_set_hydrogen_ok(bool value);
  public:

  // optional uint32 max_matches_to_find = 16;
  bool has_max_matches_to_find() const;
  private:
  bool _internal_has_max_matches_to_find() const;
  public:
  void clear_max_matches_to_find();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_matches_to_find() const;
  void set_max_matches_to_find(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_matches_to_find() const;
  void _internal_set_max_matches_to_find(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_env_matches_per_anchor = 18;
  bool has_max_env_matches_per_anchor() const;
  private:
  bool _internal_has_max_env_matches_per_anchor() const;
  public:
  void clear_max_env_matches_per_anchor();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_env_matches_per_anchor() const;
  void set_max_env_matches_per_anchor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_env_matches_per_anchor() const;
  void _internal_set_max_env_matches_per_anchor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SubstructureSearch.SubstructureEnvironment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> smarts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> smiles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtom > query_atom_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bond_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > hits_needed_;
  ::SubstructureSearch::EnvironmentAttachment* attachment_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 or_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 and_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_hits_needed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_hits_needed_;
  bool no_other_substituents_allowed_;
  bool env_matches_can_share_attachment_points_;
  bool hydrogen_ok_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_matches_to_find_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_env_matches_per_anchor_;
  friend struct ::TableStruct_Molecule_5fLib_2fsubstructure_2eproto;
};
// -------------------------------------------------------------------

class SingleSubstructureQuery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubstructureSearch.SingleSubstructureQuery) */ {
 public:
  inline SingleSubstructureQuery() : SingleSubstructureQuery(nullptr) {}
  virtual ~SingleSubstructureQuery();

  SingleSubstructureQuery(const SingleSubstructureQuery& from);
  SingleSubstructureQuery(SingleSubstructureQuery&& from) noexcept
    : SingleSubstructureQuery() {
    *this = ::std::move(from);
  }

  inline SingleSubstructureQuery& operator=(const SingleSubstructureQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleSubstructureQuery& operator=(SingleSubstructureQuery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleSubstructureQuery& default_instance();

  enum SmilesOrSmartsCase {
    kSmiles = 17,
    kSmarts = 18,
    SMILES_OR_SMARTS_NOT_SET = 0,
  };

  static inline const SingleSubstructureQuery* internal_default_instance() {
    return reinterpret_cast<const SingleSubstructureQuery*>(
               &_SingleSubstructureQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SingleSubstructureQuery& a, SingleSubstructureQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleSubstructureQuery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleSubstructureQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleSubstructureQuery* New() const final {
    return CreateMaybeMessage<SingleSubstructureQuery>(nullptr);
  }

  SingleSubstructureQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleSubstructureQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleSubstructureQuery& from);
  void MergeFrom(const SingleSubstructureQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleSubstructureQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubstructureSearch.SingleSubstructureQuery";
  }
  protected:
  explicit SingleSubstructureQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
    return ::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumericValueFieldNumber = 19,
    kNoMatchedAtomsBetweenFieldNumber = 20,
    kLinkAtomsFieldNumber = 22,
    kAttachedHeteroatomCountFieldNumber = 26,
    kHitsNeededFieldNumber = 29,
    kRingAtomsMatchedFieldNumber = 32,
    kHeteroatomsMatchedFieldNumber = 35,
    kHeteroatomsInMoleculeFieldNumber = 38,
    kNatomsFieldNumber = 41,
    kNringsFieldNumber = 44,
    kNconFieldNumber = 47,
    kFusedRingsFieldNumber = 50,
    kStronglyFusedRingsFieldNumber = 53,
    kIsolatedRingsFieldNumber = 56,
    kIsolatedRingObjectsFieldNumber = 59,
    kAromaticRingsFieldNumber = 62,
    kNonAromaticRingsFieldNumber = 65,
    kDistanceBetweenHitsFieldNumber = 68,
    kNumberIsotopicAtomsFieldNumber = 71,
    kNumberFragmentsFieldNumber = 74,
    kDistanceBetweenRootAtomsFieldNumber = 77,
    kAtomsInSpinachFieldNumber = 80,
    kInterRingAtomsFieldNumber = 83,
    kUnmatchedAtomsFieldNumber = 86,
    kNetFormalChargeFieldNumber = 89,
    kEnvironmentFieldNumber = 94,
    kEnvironmentNoMatchFieldNumber = 95,
    kRingSpecificationFieldNumber = 98,
    kRingSpecificationLogexpFieldNumber = 99,
    kRingSystemSpecifierFieldNumber = 100,
    kRingSystemSpecifierLogexpFieldNumber = 101,
    kElementHitsNeededFieldNumber = 102,
    kElementsNeededFieldNumber = 103,
    kAromaticAtomsFieldNumber = 104,
    kHeteroatomsFieldNumber = 112,
    kQueryAtomFieldNumber = 116,
    kChiralCentreFieldNumber = 117,
    kLabelFieldNumber = 2,
    kCommentFieldNumber = 3,
    kSortMatchesFieldNumber = 25,
    kAtomTypeFieldNumber = 119,
    kIdFieldNumber = 1,
    kNormaliseRcPerHitsNeededFieldNumber = 5,
    kSubtractFromRcFieldNumber = 6,
    kMaxMatchesToFindFieldNumber = 8,
    kOneEmbeddingPerStartAtomFieldNumber = 4,
    kSaveMatchedAtomsFieldNumber = 9,
    kNconIgnoreSinglyConnectedFieldNumber = 10,
    kPerceiveSymmetricEquivalentsFieldNumber = 11,
    kImplicitRingConditionFieldNumber = 12,
    kAllHitsInSameFragmentFieldNumber = 13,
    kOnlyMatchLargestFragmentFieldNumber = 14,
    kEmbeddingsDoNotOverlapFieldNumber = 15,
    kSortByPreferenceValueFieldNumber = 16,
    kDistanceBetweenHitsNcheckFieldNumber = 24,
    kMinAttachedHeteroatomCountFieldNumber = 27,
    kMaxAttachedHeteroatomCountFieldNumber = 28,
    kMinHitsNeededFieldNumber = 30,
    kMaxHitsNeededFieldNumber = 31,
    kMinRingAtomsMatchedFieldNumber = 33,
    kMaxRingAtomsMatchedFieldNumber = 34,
    kMinHeteroatomsMatchedFieldNumber = 36,
    kMaxHeteroatomsMatchedFieldNumber = 37,
    kMinHeteroatomsInMoleculeFieldNumber = 39,
    kMaxHeteroatomsInMoleculeFieldNumber = 40,
    kMinNatomsFieldNumber = 42,
    kMaxNatomsFieldNumber = 43,
    kMinNringsFieldNumber = 45,
    kMaxNringsFieldNumber = 46,
    kMinNconFieldNumber = 48,
    kMaxNconFieldNumber = 49,
    kMinFusedRingsFieldNumber = 51,
    kMaxFusedRingsFieldNumber = 52,
    kMinStronglyFusedRingsFieldNumber = 54,
    kMaxStronglyFusedRingsFieldNumber = 55,
    kMinIsolatedRingsFieldNumber = 57,
    kMaxIsolatedRingsFieldNumber = 58,
    kNoMatchedAtomsBetweenExhaustiveFieldNumber = 21,
    kFailIfEmbeddingsTooCloseFieldNumber = 23,
    kEnvironmentMustMatchUnmatchedAtomsFieldNumber = 96,
    kEnvMatchesCanShareAttachmentPointsFieldNumber = 97,
    kMinIsolatedRingObjectsFieldNumber = 60,
    kMaxIsolatedRingObjectsFieldNumber = 61,
    kMinAromaticRingsFieldNumber = 63,
    kMaxAromaticRingsFieldNumber = 64,
    kMinNonAromaticRingsFieldNumber = 66,
    kMaxNonAromaticRingsFieldNumber = 67,
    kMinDistanceBetweenHitsFieldNumber = 69,
    kMaxDistanceBetweenHitsFieldNumber = 70,
    kMinNumberIsotopicAtomsFieldNumber = 72,
    kMaxNumberIsotopicAtomsFieldNumber = 73,
    kMinNumberFragmentsFieldNumber = 75,
    kMaxNumberFragmentsFieldNumber = 76,
    kMinDistanceBetweenRootAtomsFieldNumber = 78,
    kMaxDistanceBetweenRootAtomsFieldNumber = 79,
    kMinAtomsInSpinachFieldNumber = 81,
    kMaxAtomsInSpinachFieldNumber = 82,
    kMinInterRingAtomsFieldNumber = 84,
    kMaxInterRingAtomsFieldNumber = 85,
    kMinUnmatchedAtomsFieldNumber = 87,
    kMaxUnmatchedAtomsFieldNumber = 88,
    kMinNetFormalChargeFieldNumber = 90,
    kMaxNetFormalChargeFieldNumber = 91,
    kMinFractionAtomsMatchedFieldNumber = 92,
    kMaxFractionAtomsMatchedFieldNumber = 93,
    kMinAromaticAtomsFieldNumber = 105,
    kMaxAromaticAtomsFieldNumber = 106,
    kUniqueEmbeddingsOnlyFieldNumber = 110,
    kRespectInitialAtomNumberingFieldNumber = 113,
    kCompressEmbeddingsFieldNumber = 114,
    kEnvironmentsCanShareAttachmentPointsFieldNumber = 115,
    kSmilesFieldNumber = 17,
    kSmartsFieldNumber = 18,
  };
  // repeated double numeric_value = 19;
  int numeric_value_size() const;
  private:
  int _internal_numeric_value_size() const;
  public:
  void clear_numeric_value();
  private:
  double _internal_numeric_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_numeric_value() const;
  void _internal_add_numeric_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_numeric_value();
  public:
  double numeric_value(int index) const;
  void set_numeric_value(int index, double value);
  void add_numeric_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      numeric_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_numeric_value();

  // repeated .SubstructureSearch.NoMatchedAtomsBetween no_matched_atoms_between = 20;
  int no_matched_atoms_between_size() const;
  private:
  int _internal_no_matched_atoms_between_size() const;
  public:
  void clear_no_matched_atoms_between();
  ::SubstructureSearch::NoMatchedAtomsBetween* mutable_no_matched_atoms_between(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::NoMatchedAtomsBetween >*
      mutable_no_matched_atoms_between();
  private:
  const ::SubstructureSearch::NoMatchedAtomsBetween& _internal_no_matched_atoms_between(int index) const;
  ::SubstructureSearch::NoMatchedAtomsBetween* _internal_add_no_matched_atoms_between();
  public:
  const ::SubstructureSearch::NoMatchedAtomsBetween& no_matched_atoms_between(int index) const;
  ::SubstructureSearch::NoMatchedAtomsBetween* add_no_matched_atoms_between();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::NoMatchedAtomsBetween >&
      no_matched_atoms_between() const;

  // repeated .SubstructureSearch.LinkAtoms link_atoms = 22;
  int link_atoms_size() const;
  private:
  int _internal_link_atoms_size() const;
  public:
  void clear_link_atoms();
  ::SubstructureSearch::LinkAtoms* mutable_link_atoms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::LinkAtoms >*
      mutable_link_atoms();
  private:
  const ::SubstructureSearch::LinkAtoms& _internal_link_atoms(int index) const;
  ::SubstructureSearch::LinkAtoms* _internal_add_link_atoms();
  public:
  const ::SubstructureSearch::LinkAtoms& link_atoms(int index) const;
  ::SubstructureSearch::LinkAtoms* add_link_atoms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::LinkAtoms >&
      link_atoms() const;

  // repeated uint32 attached_heteroatom_count = 26;
  int attached_heteroatom_count_size() const;
  private:
  int _internal_attached_heteroatom_count_size() const;
  public:
  void clear_attached_heteroatom_count();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attached_heteroatom_count(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_attached_heteroatom_count() const;
  void _internal_add_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_attached_heteroatom_count();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 attached_heteroatom_count(int index) const;
  void set_attached_heteroatom_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      attached_heteroatom_count() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_attached_heteroatom_count();

  // repeated uint32 hits_needed = 29;
  int hits_needed_size() const;
  private:
  int _internal_hits_needed_size() const;
  public:
  void clear_hits_needed();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hits_needed(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_hits_needed() const;
  void _internal_add_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_hits_needed();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 hits_needed(int index) const;
  void set_hits_needed(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      hits_needed() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_hits_needed();

  // repeated uint32 ring_atoms_matched = 32;
  int ring_atoms_matched_size() const;
  private:
  int _internal_ring_atoms_matched_size() const;
  public:
  void clear_ring_atoms_matched();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ring_atoms_matched(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ring_atoms_matched() const;
  void _internal_add_ring_atoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ring_atoms_matched();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ring_atoms_matched(int index) const;
  void set_ring_atoms_matched(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ring_atoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ring_atoms_matched() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ring_atoms_matched();

  // repeated uint32 heteroatoms_matched = 35;
  int heteroatoms_matched_size() const;
  private:
  int _internal_heteroatoms_matched_size() const;
  public:
  void clear_heteroatoms_matched();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heteroatoms_matched(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_heteroatoms_matched() const;
  void _internal_add_heteroatoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_heteroatoms_matched();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 heteroatoms_matched(int index) const;
  void set_heteroatoms_matched(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_heteroatoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      heteroatoms_matched() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_heteroatoms_matched();

  // repeated uint32 heteroatoms_in_molecule = 38;
  int heteroatoms_in_molecule_size() const;
  private:
  int _internal_heteroatoms_in_molecule_size() const;
  public:
  void clear_heteroatoms_in_molecule();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heteroatoms_in_molecule(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_heteroatoms_in_molecule() const;
  void _internal_add_heteroatoms_in_molecule(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_heteroatoms_in_molecule();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 heteroatoms_in_molecule(int index) const;
  void set_heteroatoms_in_molecule(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_heteroatoms_in_molecule(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      heteroatoms_in_molecule() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_heteroatoms_in_molecule();

  // repeated uint32 natoms = 41;
  int natoms_size() const;
  private:
  int _internal_natoms_size() const;
  public:
  void clear_natoms();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_natoms(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_natoms() const;
  void _internal_add_natoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_natoms();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 natoms(int index) const;
  void set_natoms(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_natoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      natoms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_natoms();

  // repeated uint32 nrings = 44;
  int nrings_size() const;
  private:
  int _internal_nrings_size() const;
  public:
  void clear_nrings();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nrings(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_nrings() const;
  void _internal_add_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_nrings();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 nrings(int index) const;
  void set_nrings(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      nrings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_nrings();

  // repeated uint32 ncon = 47;
  int ncon_size() const;
  private:
  int _internal_ncon_size() const;
  public:
  void clear_ncon();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ncon(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ncon() const;
  void _internal_add_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ncon();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ncon(int index) const;
  void set_ncon(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ncon() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ncon();

  // repeated uint32 fused_rings = 50;
  int fused_rings_size() const;
  private:
  int _internal_fused_rings_size() const;
  public:
  void clear_fused_rings();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fused_rings(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_fused_rings() const;
  void _internal_add_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_fused_rings();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 fused_rings(int index) const;
  void set_fused_rings(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      fused_rings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_fused_rings();

  // repeated uint32 strongly_fused_rings = 53;
  int strongly_fused_rings_size() const;
  private:
  int _internal_strongly_fused_rings_size() const;
  public:
  void clear_strongly_fused_rings();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_strongly_fused_rings(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_strongly_fused_rings() const;
  void _internal_add_strongly_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_strongly_fused_rings();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 strongly_fused_rings(int index) const;
  void set_strongly_fused_rings(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_strongly_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      strongly_fused_rings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_strongly_fused_rings();

  // repeated uint32 isolated_rings = 56;
  int isolated_rings_size() const;
  private:
  int _internal_isolated_rings_size() const;
  public:
  void clear_isolated_rings();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_isolated_rings(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_isolated_rings() const;
  void _internal_add_isolated_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_isolated_rings();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 isolated_rings(int index) const;
  void set_isolated_rings(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_isolated_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      isolated_rings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_isolated_rings();

  // repeated uint32 isolated_ring_objects = 59;
  int isolated_ring_objects_size() const;
  private:
  int _internal_isolated_ring_objects_size() const;
  public:
  void clear_isolated_ring_objects();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_isolated_ring_objects(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_isolated_ring_objects() const;
  void _internal_add_isolated_ring_objects(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_isolated_ring_objects();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 isolated_ring_objects(int index) const;
  void set_isolated_ring_objects(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_isolated_ring_objects(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      isolated_ring_objects() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_isolated_ring_objects();

  // repeated uint32 aromatic_rings = 62;
  int aromatic_rings_size() const;
  private:
  int _internal_aromatic_rings_size() const;
  public:
  void clear_aromatic_rings();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_aromatic_rings(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_aromatic_rings() const;
  void _internal_add_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_aromatic_rings();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 aromatic_rings(int index) const;
  void set_aromatic_rings(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      aromatic_rings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_aromatic_rings();

  // repeated uint32 non_aromatic_rings = 65;
  int non_aromatic_rings_size() const;
  private:
  int _internal_non_aromatic_rings_size() const;
  public:
  void clear_non_aromatic_rings();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_non_aromatic_rings(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_non_aromatic_rings() const;
  void _internal_add_non_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_non_aromatic_rings();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 non_aromatic_rings(int index) const;
  void set_non_aromatic_rings(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_non_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      non_aromatic_rings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_non_aromatic_rings();

  // repeated uint32 distance_between_hits = 68;
  int distance_between_hits_size() const;
  private:
  int _internal_distance_between_hits_size() const;
  public:
  void clear_distance_between_hits();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_distance_between_hits(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_distance_between_hits() const;
  void _internal_add_distance_between_hits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_distance_between_hits();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 distance_between_hits(int index) const;
  void set_distance_between_hits(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_distance_between_hits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      distance_between_hits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_distance_between_hits();

  // repeated uint32 number_isotopic_atoms = 71;
  int number_isotopic_atoms_size() const;
  private:
  int _internal_number_isotopic_atoms_size() const;
  public:
  void clear_number_isotopic_atoms();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_isotopic_atoms(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_number_isotopic_atoms() const;
  void _internal_add_number_isotopic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_number_isotopic_atoms();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 number_isotopic_atoms(int index) const;
  void set_number_isotopic_atoms(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_number_isotopic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      number_isotopic_atoms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_number_isotopic_atoms();

  // repeated uint32 number_fragments = 74;
  int number_fragments_size() const;
  private:
  int _internal_number_fragments_size() const;
  public:
  void clear_number_fragments();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_fragments(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_number_fragments() const;
  void _internal_add_number_fragments(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_number_fragments();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 number_fragments(int index) const;
  void set_number_fragments(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_number_fragments(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      number_fragments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_number_fragments();

  // repeated uint32 distance_between_root_atoms = 77;
  int distance_between_root_atoms_size() const;
  private:
  int _internal_distance_between_root_atoms_size() const;
  public:
  void clear_distance_between_root_atoms();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_distance_between_root_atoms(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_distance_between_root_atoms() const;
  void _internal_add_distance_between_root_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_distance_between_root_atoms();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 distance_between_root_atoms(int index) const;
  void set_distance_between_root_atoms(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_distance_between_root_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      distance_between_root_atoms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_distance_between_root_atoms();

  // repeated uint32 atoms_in_spinach = 80;
  int atoms_in_spinach_size() const;
  private:
  int _internal_atoms_in_spinach_size() const;
  public:
  void clear_atoms_in_spinach();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_atoms_in_spinach(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_atoms_in_spinach() const;
  void _internal_add_atoms_in_spinach(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_atoms_in_spinach();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 atoms_in_spinach(int index) const;
  void set_atoms_in_spinach(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_atoms_in_spinach(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      atoms_in_spinach() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_atoms_in_spinach();

  // repeated uint32 inter_ring_atoms = 83;
  int inter_ring_atoms_size() const;
  private:
  int _internal_inter_ring_atoms_size() const;
  public:
  void clear_inter_ring_atoms();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_inter_ring_atoms(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_inter_ring_atoms() const;
  void _internal_add_inter_ring_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_inter_ring_atoms();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 inter_ring_atoms(int index) const;
  void set_inter_ring_atoms(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_inter_ring_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      inter_ring_atoms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_inter_ring_atoms();

  // repeated uint32 unmatched_atoms = 86;
  int unmatched_atoms_size() const;
  private:
  int _internal_unmatched_atoms_size() const;
  public:
  void clear_unmatched_atoms();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unmatched_atoms(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_unmatched_atoms() const;
  void _internal_add_unmatched_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_unmatched_atoms();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 unmatched_atoms(int index) const;
  void set_unmatched_atoms(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_unmatched_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      unmatched_atoms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_unmatched_atoms();

  // repeated int32 net_formal_charge = 89;
  int net_formal_charge_size() const;
  private:
  int _internal_net_formal_charge_size() const;
  public:
  void clear_net_formal_charge();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_net_formal_charge(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_net_formal_charge() const;
  void _internal_add_net_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_net_formal_charge();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 net_formal_charge(int index) const;
  void set_net_formal_charge(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_net_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      net_formal_charge() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_net_formal_charge();

  // repeated .SubstructureSearch.SubstructureEnvironment environment = 94;
  int environment_size() const;
  private:
  int _internal_environment_size() const;
  public:
  void clear_environment();
  ::SubstructureSearch::SubstructureEnvironment* mutable_environment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureEnvironment >*
      mutable_environment();
  private:
  const ::SubstructureSearch::SubstructureEnvironment& _internal_environment(int index) const;
  ::SubstructureSearch::SubstructureEnvironment* _internal_add_environment();
  public:
  const ::SubstructureSearch::SubstructureEnvironment& environment(int index) const;
  ::SubstructureSearch::SubstructureEnvironment* add_environment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureEnvironment >&
      environment() const;

  // repeated .SubstructureSearch.SubstructureEnvironment environment_no_match = 95;
  int environment_no_match_size() const;
  private:
  int _internal_environment_no_match_size() const;
  public:
  void clear_environment_no_match();
  ::SubstructureSearch::SubstructureEnvironment* mutable_environment_no_match(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureEnvironment >*
      mutable_environment_no_match();
  private:
  const ::SubstructureSearch::SubstructureEnvironment& _internal_environment_no_match(int index) const;
  ::SubstructureSearch::SubstructureEnvironment* _internal_add_environment_no_match();
  public:
  const ::SubstructureSearch::SubstructureEnvironment& environment_no_match(int index) const;
  ::SubstructureSearch::SubstructureEnvironment* add_environment_no_match();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureEnvironment >&
      environment_no_match() const;

  // repeated .SubstructureSearch.SubstructureRingSpecification ring_specification = 98;
  int ring_specification_size() const;
  private:
  int _internal_ring_specification_size() const;
  public:
  void clear_ring_specification();
  ::SubstructureSearch::SubstructureRingSpecification* mutable_ring_specification(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureRingSpecification >*
      mutable_ring_specification();
  private:
  const ::SubstructureSearch::SubstructureRingSpecification& _internal_ring_specification(int index) const;
  ::SubstructureSearch::SubstructureRingSpecification* _internal_add_ring_specification();
  public:
  const ::SubstructureSearch::SubstructureRingSpecification& ring_specification(int index) const;
  ::SubstructureSearch::SubstructureRingSpecification* add_ring_specification();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureRingSpecification >&
      ring_specification() const;

  // repeated .SubstructureSearch.Operator ring_specification_logexp = 99;
  int ring_specification_logexp_size() const;
  private:
  int _internal_ring_specification_logexp_size() const;
  public:
  void clear_ring_specification_logexp();
  private:
  ::SubstructureSearch::Operator _internal_ring_specification_logexp(int index) const;
  void _internal_add_ring_specification_logexp(::SubstructureSearch::Operator value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_ring_specification_logexp();
  public:
  ::SubstructureSearch::Operator ring_specification_logexp(int index) const;
  void set_ring_specification_logexp(int index, ::SubstructureSearch::Operator value);
  void add_ring_specification_logexp(::SubstructureSearch::Operator value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& ring_specification_logexp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_ring_specification_logexp();

  // repeated .SubstructureSearch.SubstructureRingSystemSpecification ring_system_specifier = 100;
  int ring_system_specifier_size() const;
  private:
  int _internal_ring_system_specifier_size() const;
  public:
  void clear_ring_system_specifier();
  ::SubstructureSearch::SubstructureRingSystemSpecification* mutable_ring_system_specifier(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureRingSystemSpecification >*
      mutable_ring_system_specifier();
  private:
  const ::SubstructureSearch::SubstructureRingSystemSpecification& _internal_ring_system_specifier(int index) const;
  ::SubstructureSearch::SubstructureRingSystemSpecification* _internal_add_ring_system_specifier();
  public:
  const ::SubstructureSearch::SubstructureRingSystemSpecification& ring_system_specifier(int index) const;
  ::SubstructureSearch::SubstructureRingSystemSpecification* add_ring_system_specifier();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureRingSystemSpecification >&
      ring_system_specifier() const;

  // repeated .SubstructureSearch.Operator ring_system_specifier_logexp = 101;
  int ring_system_specifier_logexp_size() const;
  private:
  int _internal_ring_system_specifier_logexp_size() const;
  public:
  void clear_ring_system_specifier_logexp();
  private:
  ::SubstructureSearch::Operator _internal_ring_system_specifier_logexp(int index) const;
  void _internal_add_ring_system_specifier_logexp(::SubstructureSearch::Operator value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_ring_system_specifier_logexp();
  public:
  ::SubstructureSearch::Operator ring_system_specifier_logexp(int index) const;
  void set_ring_system_specifier_logexp(int index, ::SubstructureSearch::Operator value);
  void add_ring_system_specifier_logexp(::SubstructureSearch::Operator value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& ring_system_specifier_logexp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_ring_system_specifier_logexp();

  // repeated .SubstructureSearch.ElementsNeeded element_hits_needed = 102;
  int element_hits_needed_size() const;
  private:
  int _internal_element_hits_needed_size() const;
  public:
  void clear_element_hits_needed();
  ::SubstructureSearch::ElementsNeeded* mutable_element_hits_needed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::ElementsNeeded >*
      mutable_element_hits_needed();
  private:
  const ::SubstructureSearch::ElementsNeeded& _internal_element_hits_needed(int index) const;
  ::SubstructureSearch::ElementsNeeded* _internal_add_element_hits_needed();
  public:
  const ::SubstructureSearch::ElementsNeeded& element_hits_needed(int index) const;
  ::SubstructureSearch::ElementsNeeded* add_element_hits_needed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::ElementsNeeded >&
      element_hits_needed() const;

  // repeated .SubstructureSearch.ElementsNeeded elements_needed = 103;
  int elements_needed_size() const;
  private:
  int _internal_elements_needed_size() const;
  public:
  void clear_elements_needed();
  ::SubstructureSearch::ElementsNeeded* mutable_elements_needed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::ElementsNeeded >*
      mutable_elements_needed();
  private:
  const ::SubstructureSearch::ElementsNeeded& _internal_elements_needed(int index) const;
  ::SubstructureSearch::ElementsNeeded* _internal_add_elements_needed();
  public:
  const ::SubstructureSearch::ElementsNeeded& elements_needed(int index) const;
  ::SubstructureSearch::ElementsNeeded* add_elements_needed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::ElementsNeeded >&
      elements_needed() const;

  // repeated uint32 aromatic_atoms = 104;
  int aromatic_atoms_size() const;
  private:
  int _internal_aromatic_atoms_size() const;
  public:
  void clear_aromatic_atoms();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_aromatic_atoms(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_aromatic_atoms() const;
  void _internal_add_aromatic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_aromatic_atoms();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 aromatic_atoms(int index) const;
  void set_aromatic_atoms(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_aromatic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      aromatic_atoms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_aromatic_atoms();

  // repeated uint32 heteroatoms = 112;
  int heteroatoms_size() const;
  private:
  int _internal_heteroatoms_size() const;
  public:
  void clear_heteroatoms();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heteroatoms(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_heteroatoms() const;
  void _internal_add_heteroatoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_heteroatoms();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 heteroatoms(int index) const;
  void set_heteroatoms(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_heteroatoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      heteroatoms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_heteroatoms();

  // repeated .SubstructureSearch.SubstructureAtom query_atom = 116;
  int query_atom_size() const;
  private:
  int _internal_query_atom_size() const;
  public:
  void clear_query_atom();
  ::SubstructureSearch::SubstructureAtom* mutable_query_atom(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtom >*
      mutable_query_atom();
  private:
  const ::SubstructureSearch::SubstructureAtom& _internal_query_atom(int index) const;
  ::SubstructureSearch::SubstructureAtom* _internal_add_query_atom();
  public:
  const ::SubstructureSearch::SubstructureAtom& query_atom(int index) const;
  ::SubstructureSearch::SubstructureAtom* add_query_atom();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtom >&
      query_atom() const;

  // repeated .SubstructureSearch.SubstructureChiralCenter chiral_centre = 117;
  int chiral_centre_size() const;
  private:
  int _internal_chiral_centre_size() const;
  public:
  void clear_chiral_centre();
  ::SubstructureSearch::SubstructureChiralCenter* mutable_chiral_centre(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureChiralCenter >*
      mutable_chiral_centre();
  private:
  const ::SubstructureSearch::SubstructureChiralCenter& _internal_chiral_centre(int index) const;
  ::SubstructureSearch::SubstructureChiralCenter* _internal_add_chiral_centre();
  public:
  const ::SubstructureSearch::SubstructureChiralCenter& chiral_centre(int index) const;
  ::SubstructureSearch::SubstructureChiralCenter* add_chiral_centre();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureChiralCenter >&
      chiral_centre() const;

  // optional string label = 2;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional string comment = 3;
  bool has_comment() const;
  private:
  bool _internal_has_comment() const;
  public:
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // optional string sort_matches = 25;
  bool has_sort_matches() const;
  private:
  bool _internal_has_sort_matches() const;
  public:
  void clear_sort_matches();
  const std::string& sort_matches() const;
  void set_sort_matches(const std::string& value);
  void set_sort_matches(std::string&& value);
  void set_sort_matches(const char* value);
  void set_sort_matches(const char* value, size_t size);
  std::string* mutable_sort_matches();
  std::string* release_sort_matches();
  void set_allocated_sort_matches(std::string* sort_matches);
  private:
  const std::string& _internal_sort_matches() const;
  void _internal_set_sort_matches(const std::string& value);
  std::string* _internal_mutable_sort_matches();
  public:

  // optional string atom_type = 119;
  bool has_atom_type() const;
  private:
  bool _internal_has_atom_type() const;
  public:
  void clear_atom_type();
  const std::string& atom_type() const;
  void set_atom_type(const std::string& value);
  void set_atom_type(std::string&& value);
  void set_atom_type(const char* value);
  void set_atom_type(const char* value, size_t size);
  std::string* mutable_atom_type();
  std::string* release_atom_type();
  void set_allocated_atom_type(std::string* atom_type);
  private:
  const std::string& _internal_atom_type() const;
  void _internal_set_atom_type(const std::string& value);
  std::string* _internal_mutable_atom_type();
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 normalise_rc_per_hits_needed = 5;
  bool has_normalise_rc_per_hits_needed() const;
  private:
  bool _internal_has_normalise_rc_per_hits_needed() const;
  public:
  void clear_normalise_rc_per_hits_needed();
  ::PROTOBUF_NAMESPACE_ID::uint32 normalise_rc_per_hits_needed() const;
  void set_normalise_rc_per_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_normalise_rc_per_hits_needed() const;
  void _internal_set_normalise_rc_per_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 subtract_from_rc = 6;
  bool has_subtract_from_rc() const;
  private:
  bool _internal_has_subtract_from_rc() const;
  public:
  void clear_subtract_from_rc();
  ::PROTOBUF_NAMESPACE_ID::uint32 subtract_from_rc() const;
  void set_subtract_from_rc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_subtract_from_rc() const;
  void _internal_set_subtract_from_rc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_matches_to_find = 8;
  bool has_max_matches_to_find() const;
  private:
  bool _internal_has_max_matches_to_find() const;
  public:
  void clear_max_matches_to_find();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_matches_to_find() const;
  void set_max_matches_to_find(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_matches_to_find() const;
  void _internal_set_max_matches_to_find(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool one_embedding_per_start_atom = 4;
  bool has_one_embedding_per_start_atom() const;
  private:
  bool _internal_has_one_embedding_per_start_atom() const;
  public:
  void clear_one_embedding_per_start_atom();
  bool one_embedding_per_start_atom() const;
  void set_one_embedding_per_start_atom(bool value);
  private:
  bool _internal_one_embedding_per_start_atom() const;
  void _internal_set_one_embedding_per_start_atom(bool value);
  public:

  // optional bool save_matched_atoms = 9;
  bool has_save_matched_atoms() const;
  private:
  bool _internal_has_save_matched_atoms() const;
  public:
  void clear_save_matched_atoms();
  bool save_matched_atoms() const;
  void set_save_matched_atoms(bool value);
  private:
  bool _internal_save_matched_atoms() const;
  void _internal_set_save_matched_atoms(bool value);
  public:

  // optional bool ncon_ignore_singly_connected = 10;
  bool has_ncon_ignore_singly_connected() const;
  private:
  bool _internal_has_ncon_ignore_singly_connected() const;
  public:
  void clear_ncon_ignore_singly_connected();
  bool ncon_ignore_singly_connected() const;
  void set_ncon_ignore_singly_connected(bool value);
  private:
  bool _internal_ncon_ignore_singly_connected() const;
  void _internal_set_ncon_ignore_singly_connected(bool value);
  public:

  // optional bool perceive_symmetric_equivalents = 11;
  bool has_perceive_symmetric_equivalents() const;
  private:
  bool _internal_has_perceive_symmetric_equivalents() const;
  public:
  void clear_perceive_symmetric_equivalents();
  bool perceive_symmetric_equivalents() const;
  void set_perceive_symmetric_equivalents(bool value);
  private:
  bool _internal_perceive_symmetric_equivalents() const;
  void _internal_set_perceive_symmetric_equivalents(bool value);
  public:

  // optional uint32 implicit_ring_condition = 12;
  bool has_implicit_ring_condition() const;
  private:
  bool _internal_has_implicit_ring_condition() const;
  public:
  void clear_implicit_ring_condition();
  ::PROTOBUF_NAMESPACE_ID::uint32 implicit_ring_condition() const;
  void set_implicit_ring_condition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_implicit_ring_condition() const;
  void _internal_set_implicit_ring_condition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool all_hits_in_same_fragment = 13;
  bool has_all_hits_in_same_fragment() const;
  private:
  bool _internal_has_all_hits_in_same_fragment() const;
  public:
  void clear_all_hits_in_same_fragment();
  bool all_hits_in_same_fragment() const;
  void set_all_hits_in_same_fragment(bool value);
  private:
  bool _internal_all_hits_in_same_fragment() const;
  void _internal_set_all_hits_in_same_fragment(bool value);
  public:

  // optional bool only_match_largest_fragment = 14;
  bool has_only_match_largest_fragment() const;
  private:
  bool _internal_has_only_match_largest_fragment() const;
  public:
  void clear_only_match_largest_fragment();
  bool only_match_largest_fragment() const;
  void set_only_match_largest_fragment(bool value);
  private:
  bool _internal_only_match_largest_fragment() const;
  void _internal_set_only_match_largest_fragment(bool value);
  public:

  // optional bool embeddings_do_not_overlap = 15;
  bool has_embeddings_do_not_overlap() const;
  private:
  bool _internal_has_embeddings_do_not_overlap() const;
  public:
  void clear_embeddings_do_not_overlap();
  bool embeddings_do_not_overlap() const;
  void set_embeddings_do_not_overlap(bool value);
  private:
  bool _internal_embeddings_do_not_overlap() const;
  void _internal_set_embeddings_do_not_overlap(bool value);
  public:

  // optional bool sort_by_preference_value = 16;
  bool has_sort_by_preference_value() const;
  private:
  bool _internal_has_sort_by_preference_value() const;
  public:
  void clear_sort_by_preference_value();
  bool sort_by_preference_value() const;
  void set_sort_by_preference_value(bool value);
  private:
  bool _internal_sort_by_preference_value() const;
  void _internal_set_sort_by_preference_value(bool value);
  public:

  // optional uint32 distance_between_hits_ncheck = 24;
  bool has_distance_between_hits_ncheck() const;
  private:
  bool _internal_has_distance_between_hits_ncheck() const;
  public:
  void clear_distance_between_hits_ncheck();
  ::PROTOBUF_NAMESPACE_ID::uint32 distance_between_hits_ncheck() const;
  void set_distance_between_hits_ncheck(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_distance_between_hits_ncheck() const;
  void _internal_set_distance_between_hits_ncheck(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_attached_heteroatom_count = 27;
  bool has_min_attached_heteroatom_count() const;
  private:
  bool _internal_has_min_attached_heteroatom_count() const;
  public:
  void clear_min_attached_heteroatom_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_attached_heteroatom_count() const;
  void set_min_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_attached_heteroatom_count() const;
  void _internal_set_min_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_attached_heteroatom_count = 28;
  bool has_max_attached_heteroatom_count() const;
  private:
  bool _internal_has_max_attached_heteroatom_count() const;
  public:
  void clear_max_attached_heteroatom_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_attached_heteroatom_count() const;
  void set_max_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_attached_heteroatom_count() const;
  void _internal_set_max_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_hits_needed = 30;
  bool has_min_hits_needed() const;
  private:
  bool _internal_has_min_hits_needed() const;
  public:
  void clear_min_hits_needed();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_hits_needed() const;
  void set_min_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_hits_needed() const;
  void _internal_set_min_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_hits_needed = 31;
  bool has_max_hits_needed() const;
  private:
  bool _internal_has_max_hits_needed() const;
  public:
  void clear_max_hits_needed();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_hits_needed() const;
  void set_max_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_hits_needed() const;
  void _internal_set_max_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_ring_atoms_matched = 33;
  bool has_min_ring_atoms_matched() const;
  private:
  bool _internal_has_min_ring_atoms_matched() const;
  public:
  void clear_min_ring_atoms_matched();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_ring_atoms_matched() const;
  void set_min_ring_atoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_ring_atoms_matched() const;
  void _internal_set_min_ring_atoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_ring_atoms_matched = 34;
  bool has_max_ring_atoms_matched() const;
  private:
  bool _internal_has_max_ring_atoms_matched() const;
  public:
  void clear_max_ring_atoms_matched();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ring_atoms_matched() const;
  void set_max_ring_atoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_ring_atoms_matched() const;
  void _internal_set_max_ring_atoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_heteroatoms_matched = 36;
  bool has_min_heteroatoms_matched() const;
  private:
  bool _internal_has_min_heteroatoms_matched() const;
  public:
  void clear_min_heteroatoms_matched();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_heteroatoms_matched() const;
  void set_min_heteroatoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_heteroatoms_matched() const;
  void _internal_set_min_heteroatoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_heteroatoms_matched = 37;
  bool has_max_heteroatoms_matched() const;
  private:
  bool _internal_has_max_heteroatoms_matched() const;
  public:
  void clear_max_heteroatoms_matched();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_heteroatoms_matched() const;
  void set_max_heteroatoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_heteroatoms_matched() const;
  void _internal_set_max_heteroatoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_heteroatoms_in_molecule = 39;
  bool has_min_heteroatoms_in_molecule() const;
  private:
  bool _internal_has_min_heteroatoms_in_molecule() const;
  public:
  void clear_min_heteroatoms_in_molecule();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_heteroatoms_in_molecule() const;
  void set_min_heteroatoms_in_molecule(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_heteroatoms_in_molecule() const;
  void _internal_set_min_heteroatoms_in_molecule(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_heteroatoms_in_molecule = 40;
  bool has_max_heteroatoms_in_molecule() const;
  private:
  bool _internal_has_max_heteroatoms_in_molecule() const;
  public:
  void clear_max_heteroatoms_in_molecule();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_heteroatoms_in_molecule() const;
  void set_max_heteroatoms_in_molecule(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_heteroatoms_in_molecule() const;
  void _internal_set_max_heteroatoms_in_molecule(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_natoms = 42;
  bool has_min_natoms() const;
  private:
  bool _internal_has_min_natoms() const;
  public:
  void clear_min_natoms();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_natoms() const;
  void set_min_natoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_natoms() const;
  void _internal_set_min_natoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_natoms = 43;
  bool has_max_natoms() const;
  private:
  bool _internal_has_max_natoms() const;
  public:
  void clear_max_natoms();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_natoms() const;
  void set_max_natoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_natoms() const;
  void _internal_set_max_natoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_nrings = 45;
  bool has_min_nrings() const;
  private:
  bool _internal_has_min_nrings() const;
  public:
  void clear_min_nrings();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_nrings() const;
  void set_min_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_nrings() const;
  void _internal_set_min_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_nrings = 46;
  bool has_max_nrings() const;
  private:
  bool _internal_has_max_nrings() const;
  public:
  void clear_max_nrings();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_nrings() const;
  void set_max_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_nrings() const;
  void _internal_set_max_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_ncon = 48;
  bool has_min_ncon() const;
  private:
  bool _internal_has_min_ncon() const;
  public:
  void clear_min_ncon();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_ncon() const;
  void set_min_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_ncon() const;
  void _internal_set_min_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_ncon = 49;
  bool has_max_ncon() const;
  private:
  bool _internal_has_max_ncon() const;
  public:
  void clear_max_ncon();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ncon() const;
  void set_max_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_ncon() const;
  void _internal_set_max_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_fused_rings = 51;
  bool has_min_fused_rings() const;
  private:
  bool _internal_has_min_fused_rings() const;
  public:
  void clear_min_fused_rings();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_fused_rings() const;
  void set_min_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_fused_rings() const;
  void _internal_set_min_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_fused_rings = 52;
  bool has_max_fused_rings() const;
  private:
  bool _internal_has_max_fused_rings() const;
  public:
  void clear_max_fused_rings();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_fused_rings() const;
  void set_max_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_fused_rings() const;
  void _internal_set_max_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_strongly_fused_rings = 54;
  bool has_min_strongly_fused_rings() const;
  private:
  bool _internal_has_min_strongly_fused_rings() const;
  public:
  void clear_min_strongly_fused_rings();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_strongly_fused_rings() const;
  void set_min_strongly_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_strongly_fused_rings() const;
  void _internal_set_min_strongly_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_strongly_fused_rings = 55;
  bool has_max_strongly_fused_rings() const;
  private:
  bool _internal_has_max_strongly_fused_rings() const;
  public:
  void clear_max_strongly_fused_rings();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_strongly_fused_rings() const;
  void set_max_strongly_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_strongly_fused_rings() const;
  void _internal_set_max_strongly_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_isolated_rings = 57;
  bool has_min_isolated_rings() const;
  private:
  bool _internal_has_min_isolated_rings() const;
  public:
  void clear_min_isolated_rings();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_isolated_rings() const;
  void set_min_isolated_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_isolated_rings() const;
  void _internal_set_min_isolated_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_isolated_rings = 58;
  bool has_max_isolated_rings() const;
  private:
  bool _internal_has_max_isolated_rings() const;
  public:
  void clear_max_isolated_rings();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_isolated_rings() const;
  void set_max_isolated_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_isolated_rings() const;
  void _internal_set_max_isolated_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool no_matched_atoms_between_exhaustive = 21;
  bool has_no_matched_atoms_between_exhaustive() const;
  private:
  bool _internal_has_no_matched_atoms_between_exhaustive() const;
  public:
  void clear_no_matched_atoms_between_exhaustive();
  bool no_matched_atoms_between_exhaustive() const;
  void set_no_matched_atoms_between_exhaustive(bool value);
  private:
  bool _internal_no_matched_atoms_between_exhaustive() const;
  void _internal_set_no_matched_atoms_between_exhaustive(bool value);
  public:

  // optional bool fail_if_embeddings_too_close = 23;
  bool has_fail_if_embeddings_too_close() const;
  private:
  bool _internal_has_fail_if_embeddings_too_close() const;
  public:
  void clear_fail_if_embeddings_too_close();
  bool fail_if_embeddings_too_close() const;
  void set_fail_if_embeddings_too_close(bool value);
  private:
  bool _internal_fail_if_embeddings_too_close() const;
  void _internal_set_fail_if_embeddings_too_close(bool value);
  public:

  // optional bool environment_must_match_unmatched_atoms = 96;
  bool has_environment_must_match_unmatched_atoms() const;
  private:
  bool _internal_has_environment_must_match_unmatched_atoms() const;
  public:
  void clear_environment_must_match_unmatched_atoms();
  bool environment_must_match_unmatched_atoms() const;
  void set_environment_must_match_unmatched_atoms(bool value);
  private:
  bool _internal_environment_must_match_unmatched_atoms() const;
  void _internal_set_environment_must_match_unmatched_atoms(bool value);
  public:

  // optional bool env_matches_can_share_attachment_points = 97;
  bool has_env_matches_can_share_attachment_points() const;
  private:
  bool _internal_has_env_matches_can_share_attachment_points() const;
  public:
  void clear_env_matches_can_share_attachment_points();
  bool env_matches_can_share_attachment_points() const;
  void set_env_matches_can_share_attachment_points(bool value);
  private:
  bool _internal_env_matches_can_share_attachment_points() const;
  void _internal_set_env_matches_can_share_attachment_points(bool value);
  public:

  // optional uint32 min_isolated_ring_objects = 60;
  bool has_min_isolated_ring_objects() const;
  private:
  bool _internal_has_min_isolated_ring_objects() const;
  public:
  void clear_min_isolated_ring_objects();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_isolated_ring_objects() const;
  void set_min_isolated_ring_objects(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_isolated_ring_objects() const;
  void _internal_set_min_isolated_ring_objects(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_isolated_ring_objects = 61;
  bool has_max_isolated_ring_objects() const;
  private:
  bool _internal_has_max_isolated_ring_objects() const;
  public:
  void clear_max_isolated_ring_objects();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_isolated_ring_objects() const;
  void set_max_isolated_ring_objects(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_isolated_ring_objects() const;
  void _internal_set_max_isolated_ring_objects(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_aromatic_rings = 63;
  bool has_min_aromatic_rings() const;
  private:
  bool _internal_has_min_aromatic_rings() const;
  public:
  void clear_min_aromatic_rings();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_aromatic_rings() const;
  void set_min_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_aromatic_rings() const;
  void _internal_set_min_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_aromatic_rings = 64;
  bool has_max_aromatic_rings() const;
  private:
  bool _internal_has_max_aromatic_rings() const;
  public:
  void clear_max_aromatic_rings();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_aromatic_rings() const;
  void set_max_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_aromatic_rings() const;
  void _internal_set_max_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_non_aromatic_rings = 66;
  bool has_min_non_aromatic_rings() const;
  private:
  bool _internal_has_min_non_aromatic_rings() const;
  public:
  void clear_min_non_aromatic_rings();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_non_aromatic_rings() const;
  void set_min_non_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_non_aromatic_rings() const;
  void _internal_set_min_non_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_non_aromatic_rings = 67;
  bool has_max_non_aromatic_rings() const;
  private:
  bool _internal_has_max_non_aromatic_rings() const;
  public:
  void clear_max_non_aromatic_rings();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_non_aromatic_rings() const;
  void set_max_non_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_non_aromatic_rings() const;
  void _internal_set_max_non_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_distance_between_hits = 69;
  bool has_min_distance_between_hits() const;
  private:
  bool _internal_has_min_distance_between_hits() const;
  public:
  void clear_min_distance_between_hits();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_distance_between_hits() const;
  void set_min_distance_between_hits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_distance_between_hits() const;
  void _internal_set_min_distance_between_hits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_distance_between_hits = 70;
  bool has_max_distance_between_hits() const;
  private:
  bool _internal_has_max_distance_between_hits() const;
  public:
  void clear_max_distance_between_hits();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_distance_between_hits() const;
  void set_max_distance_between_hits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_distance_between_hits() const;
  void _internal_set_max_distance_between_hits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_number_isotopic_atoms = 72;
  bool has_min_number_isotopic_atoms() const;
  private:
  bool _internal_has_min_number_isotopic_atoms() const;
  public:
  void clear_min_number_isotopic_atoms();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_number_isotopic_atoms() const;
  void set_min_number_isotopic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_number_isotopic_atoms() const;
  void _internal_set_min_number_isotopic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_number_isotopic_atoms = 73;
  bool has_max_number_isotopic_atoms() const;
  private:
  bool _internal_has_max_number_isotopic_atoms() const;
  public:
  void clear_max_number_isotopic_atoms();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_number_isotopic_atoms() const;
  void set_max_number_isotopic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_number_isotopic_atoms() const;
  void _internal_set_max_number_isotopic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_number_fragments = 75;
  bool has_min_number_fragments() const;
  private:
  bool _internal_has_min_number_fragments() const;
  public:
  void clear_min_number_fragments();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_number_fragments() const;
  void set_min_number_fragments(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_number_fragments() const;
  void _internal_set_min_number_fragments(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_number_fragments = 76;
  bool has_max_number_fragments() const;
  private:
  bool _internal_has_max_number_fragments() const;
  public:
  void clear_max_number_fragments();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_number_fragments() const;
  void set_max_number_fragments(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_number_fragments() const;
  void _internal_set_max_number_fragments(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_distance_between_root_atoms = 78;
  bool has_min_distance_between_root_atoms() const;
  private:
  bool _internal_has_min_distance_between_root_atoms() const;
  public:
  void clear_min_distance_between_root_atoms();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_distance_between_root_atoms() const;
  void set_min_distance_between_root_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_distance_between_root_atoms() const;
  void _internal_set_min_distance_between_root_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_distance_between_root_atoms = 79;
  bool has_max_distance_between_root_atoms() const;
  private:
  bool _internal_has_max_distance_between_root_atoms() const;
  public:
  void clear_max_distance_between_root_atoms();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_distance_between_root_atoms() const;
  void set_max_distance_between_root_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_distance_between_root_atoms() const;
  void _internal_set_max_distance_between_root_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_atoms_in_spinach = 81;
  bool has_min_atoms_in_spinach() const;
  private:
  bool _internal_has_min_atoms_in_spinach() const;
  public:
  void clear_min_atoms_in_spinach();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_atoms_in_spinach() const;
  void set_min_atoms_in_spinach(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_atoms_in_spinach() const;
  void _internal_set_min_atoms_in_spinach(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_atoms_in_spinach = 82;
  bool has_max_atoms_in_spinach() const;
  private:
  bool _internal_has_max_atoms_in_spinach() const;
  public:
  void clear_max_atoms_in_spinach();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_atoms_in_spinach() const;
  void set_max_atoms_in_spinach(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_atoms_in_spinach() const;
  void _internal_set_max_atoms_in_spinach(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_inter_ring_atoms = 84;
  bool has_min_inter_ring_atoms() const;
  private:
  bool _internal_has_min_inter_ring_atoms() const;
  public:
  void clear_min_inter_ring_atoms();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_inter_ring_atoms() const;
  void set_min_inter_ring_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_inter_ring_atoms() const;
  void _internal_set_min_inter_ring_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_inter_ring_atoms = 85;
  bool has_max_inter_ring_atoms() const;
  private:
  bool _internal_has_max_inter_ring_atoms() const;
  public:
  void clear_max_inter_ring_atoms();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_inter_ring_atoms() const;
  void set_max_inter_ring_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_inter_ring_atoms() const;
  void _internal_set_max_inter_ring_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_unmatched_atoms = 87;
  bool has_min_unmatched_atoms() const;
  private:
  bool _internal_has_min_unmatched_atoms() const;
  public:
  void clear_min_unmatched_atoms();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_unmatched_atoms() const;
  void set_min_unmatched_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_unmatched_atoms() const;
  void _internal_set_min_unmatched_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_unmatched_atoms = 88;
  bool has_max_unmatched_atoms() const;
  private:
  bool _internal_has_max_unmatched_atoms() const;
  public:
  void clear_max_unmatched_atoms();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_unmatched_atoms() const;
  void set_max_unmatched_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_unmatched_atoms() const;
  void _internal_set_max_unmatched_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 min_net_formal_charge = 90;
  bool has_min_net_formal_charge() const;
  private:
  bool _internal_has_min_net_formal_charge() const;
  public:
  void clear_min_net_formal_charge();
  ::PROTOBUF_NAMESPACE_ID::int32 min_net_formal_charge() const;
  void set_min_net_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_net_formal_charge() const;
  void _internal_set_min_net_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 max_net_formal_charge = 91;
  bool has_max_net_formal_charge() const;
  private:
  bool _internal_has_max_net_formal_charge() const;
  public:
  void clear_max_net_formal_charge();
  ::PROTOBUF_NAMESPACE_ID::int32 max_net_formal_charge() const;
  void set_max_net_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_net_formal_charge() const;
  void _internal_set_max_net_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float min_fraction_atoms_matched = 92;
  bool has_min_fraction_atoms_matched() const;
  private:
  bool _internal_has_min_fraction_atoms_matched() const;
  public:
  void clear_min_fraction_atoms_matched();
  float min_fraction_atoms_matched() const;
  void set_min_fraction_atoms_matched(float value);
  private:
  float _internal_min_fraction_atoms_matched() const;
  void _internal_set_min_fraction_atoms_matched(float value);
  public:

  // optional float max_fraction_atoms_matched = 93;
  bool has_max_fraction_atoms_matched() const;
  private:
  bool _internal_has_max_fraction_atoms_matched() const;
  public:
  void clear_max_fraction_atoms_matched();
  float max_fraction_atoms_matched() const;
  void set_max_fraction_atoms_matched(float value);
  private:
  float _internal_max_fraction_atoms_matched() const;
  void _internal_set_max_fraction_atoms_matched(float value);
  public:

  // optional uint32 min_aromatic_atoms = 105;
  bool has_min_aromatic_atoms() const;
  private:
  bool _internal_has_min_aromatic_atoms() const;
  public:
  void clear_min_aromatic_atoms();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_aromatic_atoms() const;
  void set_min_aromatic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_aromatic_atoms() const;
  void _internal_set_min_aromatic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_aromatic_atoms = 106;
  bool has_max_aromatic_atoms() const;
  private:
  bool _internal_has_max_aromatic_atoms() const;
  public:
  void clear_max_aromatic_atoms();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_aromatic_atoms() const;
  void set_max_aromatic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_aromatic_atoms() const;
  void _internal_set_max_aromatic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool unique_embeddings_only = 110;
  bool has_unique_embeddings_only() const;
  private:
  bool _internal_has_unique_embeddings_only() const;
  public:
  void clear_unique_embeddings_only();
  bool unique_embeddings_only() const;
  void set_unique_embeddings_only(bool value);
  private:
  bool _internal_unique_embeddings_only() const;
  void _internal_set_unique_embeddings_only(bool value);
  public:

  // optional bool respect_initial_atom_numbering = 113;
  bool has_respect_initial_atom_numbering() const;
  private:
  bool _internal_has_respect_initial_atom_numbering() const;
  public:
  void clear_respect_initial_atom_numbering();
  bool respect_initial_atom_numbering() const;
  void set_respect_initial_atom_numbering(bool value);
  private:
  bool _internal_respect_initial_atom_numbering() const;
  void _internal_set_respect_initial_atom_numbering(bool value);
  public:

  // optional bool compress_embeddings = 114;
  bool has_compress_embeddings() const;
  private:
  bool _internal_has_compress_embeddings() const;
  public:
  void clear_compress_embeddings();
  bool compress_embeddings() const;
  void set_compress_embeddings(bool value);
  private:
  bool _internal_compress_embeddings() const;
  void _internal_set_compress_embeddings(bool value);
  public:

  // optional bool environments_can_share_attachment_points = 115;
  bool has_environments_can_share_attachment_points() const;
  private:
  bool _internal_has_environments_can_share_attachment_points() const;
  public:
  void clear_environments_can_share_attachment_points();
  bool environments_can_share_attachment_points() const;
  void set_environments_can_share_attachment_points(bool value);
  private:
  bool _internal_environments_can_share_attachment_points() const;
  void _internal_set_environments_can_share_attachment_points(bool value);
  public:

  // string smiles = 17;
  bool has_smiles() const;
  private:
  bool _internal_has_smiles() const;
  public:
  void clear_smiles();
  const std::string& smiles() const;
  void set_smiles(const std::string& value);
  void set_smiles(std::string&& value);
  void set_smiles(const char* value);
  void set_smiles(const char* value, size_t size);
  std::string* mutable_smiles();
  std::string* release_smiles();
  void set_allocated_smiles(std::string* smiles);
  private:
  const std::string& _internal_smiles() const;
  void _internal_set_smiles(const std::string& value);
  std::string* _internal_mutable_smiles();
  public:

  // string smarts = 18;
  bool has_smarts() const;
  private:
  bool _internal_has_smarts() const;
  public:
  void clear_smarts();
  const std::string& smarts() const;
  void set_smarts(const std::string& value);
  void set_smarts(std::string&& value);
  void set_smarts(const char* value);
  void set_smarts(const char* value, size_t size);
  std::string* mutable_smarts();
  std::string* release_smarts();
  void set_allocated_smarts(std::string* smarts);
  private:
  const std::string& _internal_smarts() const;
  void _internal_set_smarts(const std::string& value);
  std::string* _internal_mutable_smarts();
  public:

  void clear_smiles_or_smarts();
  SmilesOrSmartsCase smiles_or_smarts_case() const;
  // @@protoc_insertion_point(class_scope:SubstructureSearch.SingleSubstructureQuery)
 private:
  class _Internal;
  void set_has_smiles();
  void set_has_smarts();

  inline bool has_smiles_or_smarts() const;
  inline void clear_has_smiles_or_smarts();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<3> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > numeric_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::NoMatchedAtomsBetween > no_matched_atoms_between_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::LinkAtoms > link_atoms_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > attached_heteroatom_count_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > hits_needed_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ring_atoms_matched_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > heteroatoms_matched_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > heteroatoms_in_molecule_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > natoms_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > nrings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ncon_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > fused_rings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > strongly_fused_rings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > isolated_rings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > isolated_ring_objects_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > aromatic_rings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > non_aromatic_rings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > distance_between_hits_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > number_isotopic_atoms_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > number_fragments_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > distance_between_root_atoms_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > atoms_in_spinach_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > inter_ring_atoms_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > unmatched_atoms_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > net_formal_charge_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureEnvironment > environment_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureEnvironment > environment_no_match_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureRingSpecification > ring_specification_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> ring_specification_logexp_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureRingSystemSpecification > ring_system_specifier_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> ring_system_specifier_logexp_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::ElementsNeeded > element_hits_needed_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::ElementsNeeded > elements_needed_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > aromatic_atoms_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > heteroatoms_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtom > query_atom_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureChiralCenter > chiral_centre_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sort_matches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr atom_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 normalise_rc_per_hits_needed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 subtract_from_rc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_matches_to_find_;
  bool one_embedding_per_start_atom_;
  bool save_matched_atoms_;
  bool ncon_ignore_singly_connected_;
  bool perceive_symmetric_equivalents_;
  ::PROTOBUF_NAMESPACE_ID::uint32 implicit_ring_condition_;
  bool all_hits_in_same_fragment_;
  bool only_match_largest_fragment_;
  bool embeddings_do_not_overlap_;
  bool sort_by_preference_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 distance_between_hits_ncheck_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_attached_heteroatom_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_attached_heteroatom_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_hits_needed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_hits_needed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_ring_atoms_matched_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ring_atoms_matched_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_heteroatoms_matched_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_heteroatoms_matched_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_heteroatoms_in_molecule_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_heteroatoms_in_molecule_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_natoms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_natoms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_nrings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_nrings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_ncon_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ncon_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_fused_rings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_fused_rings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_strongly_fused_rings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_strongly_fused_rings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_isolated_rings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_isolated_rings_;
  bool no_matched_atoms_between_exhaustive_;
  bool fail_if_embeddings_too_close_;
  bool environment_must_match_unmatched_atoms_;
  bool env_matches_can_share_attachment_points_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_isolated_ring_objects_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_isolated_ring_objects_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_aromatic_rings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_aromatic_rings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_non_aromatic_rings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_non_aromatic_rings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_distance_between_hits_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_distance_between_hits_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_number_isotopic_atoms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_number_isotopic_atoms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_number_fragments_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_number_fragments_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_distance_between_root_atoms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_distance_between_root_atoms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_atoms_in_spinach_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_atoms_in_spinach_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_inter_ring_atoms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_inter_ring_atoms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_unmatched_atoms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_unmatched_atoms_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_net_formal_charge_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_net_formal_charge_;
  float min_fraction_atoms_matched_;
  float max_fraction_atoms_matched_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_aromatic_atoms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_aromatic_atoms_;
  bool unique_embeddings_only_;
  bool respect_initial_atom_numbering_;
  bool compress_embeddings_;
  bool environments_can_share_attachment_points_;
  union SmilesOrSmartsUnion {
    SmilesOrSmartsUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smiles_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smarts_;
  } smiles_or_smarts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Molecule_5fLib_2fsubstructure_2eproto;
};
// -------------------------------------------------------------------

class SubstructureQuery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubstructureSearch.SubstructureQuery) */ {
 public:
  inline SubstructureQuery() : SubstructureQuery(nullptr) {}
  virtual ~SubstructureQuery();

  SubstructureQuery(const SubstructureQuery& from);
  SubstructureQuery(SubstructureQuery&& from) noexcept
    : SubstructureQuery() {
    *this = ::std::move(from);
  }

  inline SubstructureQuery& operator=(const SubstructureQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstructureQuery& operator=(SubstructureQuery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstructureQuery& default_instance();

  static inline const SubstructureQuery* internal_default_instance() {
    return reinterpret_cast<const SubstructureQuery*>(
               &_SubstructureQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SubstructureQuery& a, SubstructureQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstructureQuery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstructureQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstructureQuery* New() const final {
    return CreateMaybeMessage<SubstructureQuery>(nullptr);
  }

  SubstructureQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstructureQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstructureQuery& from);
  void MergeFrom(const SubstructureQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstructureQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubstructureSearch.SubstructureQuery";
  }
  protected:
  explicit SubstructureQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
    return ::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 2,
    kLogexpFieldNumber = 3,
    kCommentFieldNumber = 1,
    kMatchEachComponentFieldNumber = 4,
  };
  // repeated .SubstructureSearch.SingleSubstructureQuery query = 2;
  int query_size() const;
  private:
  int _internal_query_size() const;
  public:
  void clear_query();
  ::SubstructureSearch::SingleSubstructureQuery* mutable_query(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SingleSubstructureQuery >*
      mutable_query();
  private:
  const ::SubstructureSearch::SingleSubstructureQuery& _internal_query(int index) const;
  ::SubstructureSearch::SingleSubstructureQuery* _internal_add_query();
  public:
  const ::SubstructureSearch::SingleSubstructureQuery& query(int index) const;
  ::SubstructureSearch::SingleSubstructureQuery* add_query();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SingleSubstructureQuery >&
      query() const;

  // repeated .SubstructureSearch.Operator logexp = 3;
  int logexp_size() const;
  private:
  int _internal_logexp_size() const;
  public:
  void clear_logexp();
  private:
  ::SubstructureSearch::Operator _internal_logexp(int index) const;
  void _internal_add_logexp(::SubstructureSearch::Operator value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_logexp();
  public:
  ::SubstructureSearch::Operator logexp(int index) const;
  void set_logexp(int index, ::SubstructureSearch::Operator value);
  void add_logexp(::SubstructureSearch::Operator value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& logexp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_logexp();

  // optional string comment = 1;
  bool has_comment() const;
  private:
  bool _internal_has_comment() const;
  public:
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // optional int32 match_each_component = 4;
  bool has_match_each_component() const;
  private:
  bool _internal_has_match_each_component() const;
  public:
  void clear_match_each_component();
  ::PROTOBUF_NAMESPACE_ID::int32 match_each_component() const;
  void set_match_each_component(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_match_each_component() const;
  void _internal_set_match_each_component(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SubstructureSearch.SubstructureQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SingleSubstructureQuery > query_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> logexp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::PROTOBUF_NAMESPACE_ID::int32 match_each_component_;
  friend struct ::TableStruct_Molecule_5fLib_2fsubstructure_2eproto;
};
// -------------------------------------------------------------------

class MinMaxSpecifierInt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubstructureSearch.MinMaxSpecifierInt) */ {
 public:
  inline MinMaxSpecifierInt() : MinMaxSpecifierInt(nullptr) {}
  virtual ~MinMaxSpecifierInt();

  MinMaxSpecifierInt(const MinMaxSpecifierInt& from);
  MinMaxSpecifierInt(MinMaxSpecifierInt&& from) noexcept
    : MinMaxSpecifierInt() {
    *this = ::std::move(from);
  }

  inline MinMaxSpecifierInt& operator=(const MinMaxSpecifierInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline MinMaxSpecifierInt& operator=(MinMaxSpecifierInt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MinMaxSpecifierInt& default_instance();

  static inline const MinMaxSpecifierInt* internal_default_instance() {
    return reinterpret_cast<const MinMaxSpecifierInt*>(
               &_MinMaxSpecifierInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MinMaxSpecifierInt& a, MinMaxSpecifierInt& b) {
    a.Swap(&b);
  }
  inline void Swap(MinMaxSpecifierInt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MinMaxSpecifierInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MinMaxSpecifierInt* New() const final {
    return CreateMaybeMessage<MinMaxSpecifierInt>(nullptr);
  }

  MinMaxSpecifierInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MinMaxSpecifierInt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MinMaxSpecifierInt& from);
  void MergeFrom(const MinMaxSpecifierInt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MinMaxSpecifierInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubstructureSearch.MinMaxSpecifierInt";
  }
  protected:
  explicit MinMaxSpecifierInt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
    return ::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kMinFieldNumber = 2,
    kMaxFieldNumber = 3,
  };
  // repeated int32 value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_value() const;
  void _internal_add_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_value();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 value(int index) const;
  void set_value(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_value();

  // optional int32 min = 2;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  ::PROTOBUF_NAMESPACE_ID::int32 min() const;
  void set_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min() const;
  void _internal_set_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 max = 3;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  ::PROTOBUF_NAMESPACE_ID::int32 max() const;
  void set_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max() const;
  void _internal_set_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SubstructureSearch.MinMaxSpecifierInt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > value_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_;
  friend struct ::TableStruct_Molecule_5fLib_2fsubstructure_2eproto;
};
// -------------------------------------------------------------------

class MinMaxSpecifierUInt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubstructureSearch.MinMaxSpecifierUInt) */ {
 public:
  inline MinMaxSpecifierUInt() : MinMaxSpecifierUInt(nullptr) {}
  virtual ~MinMaxSpecifierUInt();

  MinMaxSpecifierUInt(const MinMaxSpecifierUInt& from);
  MinMaxSpecifierUInt(MinMaxSpecifierUInt&& from) noexcept
    : MinMaxSpecifierUInt() {
    *this = ::std::move(from);
  }

  inline MinMaxSpecifierUInt& operator=(const MinMaxSpecifierUInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline MinMaxSpecifierUInt& operator=(MinMaxSpecifierUInt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MinMaxSpecifierUInt& default_instance();

  static inline const MinMaxSpecifierUInt* internal_default_instance() {
    return reinterpret_cast<const MinMaxSpecifierUInt*>(
               &_MinMaxSpecifierUInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(MinMaxSpecifierUInt& a, MinMaxSpecifierUInt& b) {
    a.Swap(&b);
  }
  inline void Swap(MinMaxSpecifierUInt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MinMaxSpecifierUInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MinMaxSpecifierUInt* New() const final {
    return CreateMaybeMessage<MinMaxSpecifierUInt>(nullptr);
  }

  MinMaxSpecifierUInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MinMaxSpecifierUInt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MinMaxSpecifierUInt& from);
  void MergeFrom(const MinMaxSpecifierUInt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MinMaxSpecifierUInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubstructureSearch.MinMaxSpecifierUInt";
  }
  protected:
  explicit MinMaxSpecifierUInt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
    return ::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kMinFieldNumber = 2,
    kMaxFieldNumber = 3,
  };
  // repeated uint32 value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_value() const;
  void _internal_add_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_value();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 value(int index) const;
  void set_value(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_value();

  // optional uint32 min = 2;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  ::PROTOBUF_NAMESPACE_ID::uint32 min() const;
  void set_min(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min() const;
  void _internal_set_min(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max = 3;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  ::PROTOBUF_NAMESPACE_ID::uint32 max() const;
  void set_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max() const;
  void _internal_set_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SubstructureSearch.MinMaxSpecifierUInt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_;
  friend struct ::TableStruct_Molecule_5fLib_2fsubstructure_2eproto;
};
// -------------------------------------------------------------------

class QueryMatchResults_Matches PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubstructureSearch.QueryMatchResults.Matches) */ {
 public:
  inline QueryMatchResults_Matches() : QueryMatchResults_Matches(nullptr) {}
  virtual ~QueryMatchResults_Matches();

  QueryMatchResults_Matches(const QueryMatchResults_Matches& from);
  QueryMatchResults_Matches(QueryMatchResults_Matches&& from) noexcept
    : QueryMatchResults_Matches() {
    *this = ::std::move(from);
  }

  inline QueryMatchResults_Matches& operator=(const QueryMatchResults_Matches& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryMatchResults_Matches& operator=(QueryMatchResults_Matches&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryMatchResults_Matches& default_instance();

  static inline const QueryMatchResults_Matches* internal_default_instance() {
    return reinterpret_cast<const QueryMatchResults_Matches*>(
               &_QueryMatchResults_Matches_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(QueryMatchResults_Matches& a, QueryMatchResults_Matches& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryMatchResults_Matches* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryMatchResults_Matches* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryMatchResults_Matches* New() const final {
    return CreateMaybeMessage<QueryMatchResults_Matches>(nullptr);
  }

  QueryMatchResults_Matches* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryMatchResults_Matches>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryMatchResults_Matches& from);
  void MergeFrom(const QueryMatchResults_Matches& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryMatchResults_Matches* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubstructureSearch.QueryMatchResults.Matches";
  }
  protected:
  explicit QueryMatchResults_Matches(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
    return ::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kNhitsFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 nhits = 2;
  bool has_nhits() const;
  private:
  bool _internal_has_nhits() const;
  public:
  void clear_nhits();
  ::PROTOBUF_NAMESPACE_ID::uint32 nhits() const;
  void set_nhits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nhits() const;
  void _internal_set_nhits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SubstructureSearch.QueryMatchResults.Matches)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nhits_;
  friend struct ::TableStruct_Molecule_5fLib_2fsubstructure_2eproto;
};
// -------------------------------------------------------------------

class QueryMatchResults PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubstructureSearch.QueryMatchResults) */ {
 public:
  inline QueryMatchResults() : QueryMatchResults(nullptr) {}
  virtual ~QueryMatchResults();

  QueryMatchResults(const QueryMatchResults& from);
  QueryMatchResults(QueryMatchResults&& from) noexcept
    : QueryMatchResults() {
    *this = ::std::move(from);
  }

  inline QueryMatchResults& operator=(const QueryMatchResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryMatchResults& operator=(QueryMatchResults&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryMatchResults& default_instance();

  static inline const QueryMatchResults* internal_default_instance() {
    return reinterpret_cast<const QueryMatchResults*>(
               &_QueryMatchResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(QueryMatchResults& a, QueryMatchResults& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryMatchResults* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryMatchResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryMatchResults* New() const final {
    return CreateMaybeMessage<QueryMatchResults>(nullptr);
  }

  QueryMatchResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryMatchResults>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryMatchResults& from);
  void MergeFrom(const QueryMatchResults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryMatchResults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubstructureSearch.QueryMatchResults";
  }
  protected:
  explicit QueryMatchResults(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
    return ::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef QueryMatchResults_Matches Matches;

  // accessors -------------------------------------------------------

  enum : int {
    kMatchesFieldNumber = 3,
    kSmilesFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // repeated .SubstructureSearch.QueryMatchResults.Matches matches = 3;
  int matches_size() const;
  private:
  int _internal_matches_size() const;
  public:
  void clear_matches();
  ::SubstructureSearch::QueryMatchResults_Matches* mutable_matches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::QueryMatchResults_Matches >*
      mutable_matches();
  private:
  const ::SubstructureSearch::QueryMatchResults_Matches& _internal_matches(int index) const;
  ::SubstructureSearch::QueryMatchResults_Matches* _internal_add_matches();
  public:
  const ::SubstructureSearch::QueryMatchResults_Matches& matches(int index) const;
  ::SubstructureSearch::QueryMatchResults_Matches* add_matches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::QueryMatchResults_Matches >&
      matches() const;

  // optional string smiles = 1;
  bool has_smiles() const;
  private:
  bool _internal_has_smiles() const;
  public:
  void clear_smiles();
  const std::string& smiles() const;
  void set_smiles(const std::string& value);
  void set_smiles(std::string&& value);
  void set_smiles(const char* value);
  void set_smiles(const char* value, size_t size);
  std::string* mutable_smiles();
  std::string* release_smiles();
  void set_allocated_smiles(std::string* smiles);
  private:
  const std::string& _internal_smiles() const;
  void _internal_set_smiles(const std::string& value);
  std::string* _internal_mutable_smiles();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:SubstructureSearch.QueryMatchResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::QueryMatchResults_Matches > matches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smiles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_Molecule_5fLib_2fsubstructure_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AtomNumberOrHLp

// uint32 atom_number = 1;
inline bool AtomNumberOrHLp::_internal_has_atom_number() const {
  return AtomNumberOr_case() == kAtomNumber;
}
inline bool AtomNumberOrHLp::has_atom_number() const {
  return _internal_has_atom_number();
}
inline void AtomNumberOrHLp::set_has_atom_number() {
  _oneof_case_[0] = kAtomNumber;
}
inline void AtomNumberOrHLp::clear_atom_number() {
  if (_internal_has_atom_number()) {
    AtomNumberOr_.atom_number_ = 0u;
    clear_has_AtomNumberOr();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AtomNumberOrHLp::_internal_atom_number() const {
  if (_internal_has_atom_number()) {
    return AtomNumberOr_.atom_number_;
  }
  return 0u;
}
inline void AtomNumberOrHLp::_internal_set_atom_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_atom_number()) {
    clear_AtomNumberOr();
    set_has_atom_number();
  }
  AtomNumberOr_.atom_number_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AtomNumberOrHLp::atom_number() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.AtomNumberOrHLp.atom_number)
  return _internal_atom_number();
}
inline void AtomNumberOrHLp::set_atom_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_atom_number(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.AtomNumberOrHLp.atom_number)
}

// string h_or_lp = 2;
inline bool AtomNumberOrHLp::_internal_has_h_or_lp() const {
  return AtomNumberOr_case() == kHOrLp;
}
inline bool AtomNumberOrHLp::has_h_or_lp() const {
  return _internal_has_h_or_lp();
}
inline void AtomNumberOrHLp::set_has_h_or_lp() {
  _oneof_case_[0] = kHOrLp;
}
inline void AtomNumberOrHLp::clear_h_or_lp() {
  if (_internal_has_h_or_lp()) {
    AtomNumberOr_.h_or_lp_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_AtomNumberOr();
  }
}
inline const std::string& AtomNumberOrHLp::h_or_lp() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.AtomNumberOrHLp.h_or_lp)
  return _internal_h_or_lp();
}
inline void AtomNumberOrHLp::set_h_or_lp(const std::string& value) {
  _internal_set_h_or_lp(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.AtomNumberOrHLp.h_or_lp)
}
inline std::string* AtomNumberOrHLp::mutable_h_or_lp() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.AtomNumberOrHLp.h_or_lp)
  return _internal_mutable_h_or_lp();
}
inline const std::string& AtomNumberOrHLp::_internal_h_or_lp() const {
  if (_internal_has_h_or_lp()) {
    return AtomNumberOr_.h_or_lp_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AtomNumberOrHLp::_internal_set_h_or_lp(const std::string& value) {
  if (!_internal_has_h_or_lp()) {
    clear_AtomNumberOr();
    set_has_h_or_lp();
    AtomNumberOr_.h_or_lp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  AtomNumberOr_.h_or_lp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AtomNumberOrHLp::set_h_or_lp(std::string&& value) {
  // @@protoc_insertion_point(field_set:SubstructureSearch.AtomNumberOrHLp.h_or_lp)
  if (!_internal_has_h_or_lp()) {
    clear_AtomNumberOr();
    set_has_h_or_lp();
    AtomNumberOr_.h_or_lp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  AtomNumberOr_.h_or_lp_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubstructureSearch.AtomNumberOrHLp.h_or_lp)
}
inline void AtomNumberOrHLp::set_h_or_lp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_h_or_lp()) {
    clear_AtomNumberOr();
    set_has_h_or_lp();
    AtomNumberOr_.h_or_lp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  AtomNumberOr_.h_or_lp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.AtomNumberOrHLp.h_or_lp)
}
inline void AtomNumberOrHLp::set_h_or_lp(const char* value,
                             size_t size) {
  if (!_internal_has_h_or_lp()) {
    clear_AtomNumberOr();
    set_has_h_or_lp();
    AtomNumberOr_.h_or_lp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  AtomNumberOr_.h_or_lp_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.AtomNumberOrHLp.h_or_lp)
}
inline std::string* AtomNumberOrHLp::_internal_mutable_h_or_lp() {
  if (!_internal_has_h_or_lp()) {
    clear_AtomNumberOr();
    set_has_h_or_lp();
    AtomNumberOr_.h_or_lp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return AtomNumberOr_.h_or_lp_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AtomNumberOrHLp::release_h_or_lp() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.AtomNumberOrHLp.h_or_lp)
  if (_internal_has_h_or_lp()) {
    clear_has_AtomNumberOr();
    return AtomNumberOr_.h_or_lp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void AtomNumberOrHLp::set_allocated_h_or_lp(std::string* h_or_lp) {
  if (has_AtomNumberOr()) {
    clear_AtomNumberOr();
  }
  if (h_or_lp != nullptr) {
    set_has_h_or_lp();
    AtomNumberOr_.h_or_lp_.UnsafeSetDefault(h_or_lp);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(h_or_lp);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.AtomNumberOrHLp.h_or_lp)
}

inline bool AtomNumberOrHLp::has_AtomNumberOr() const {
  return AtomNumberOr_case() != ATOMNUMBEROR_NOT_SET;
}
inline void AtomNumberOrHLp::clear_has_AtomNumberOr() {
  _oneof_case_[0] = ATOMNUMBEROR_NOT_SET;
}
inline AtomNumberOrHLp::AtomNumberOrCase AtomNumberOrHLp::AtomNumberOr_case() const {
  return AtomNumberOrHLp::AtomNumberOrCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SubstructureChiralCenter

// optional uint32 center = 1;
inline bool SubstructureChiralCenter::_internal_has_center() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SubstructureChiralCenter::has_center() const {
  return _internal_has_center();
}
inline void SubstructureChiralCenter::clear_center() {
  center_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureChiralCenter::_internal_center() const {
  return center_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureChiralCenter::center() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureChiralCenter.center)
  return _internal_center();
}
inline void SubstructureChiralCenter::_internal_set_center(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  center_ = value;
}
inline void SubstructureChiralCenter::set_center(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_center(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureChiralCenter.center)
}

// optional .SubstructureSearch.AtomNumberOrHLp top_front = 2;
inline bool SubstructureChiralCenter::_internal_has_top_front() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || top_front_ != nullptr);
  return value;
}
inline bool SubstructureChiralCenter::has_top_front() const {
  return _internal_has_top_front();
}
inline void SubstructureChiralCenter::clear_top_front() {
  if (top_front_ != nullptr) top_front_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::SubstructureSearch::AtomNumberOrHLp& SubstructureChiralCenter::_internal_top_front() const {
  const ::SubstructureSearch::AtomNumberOrHLp* p = top_front_;
  return p != nullptr ? *p : reinterpret_cast<const ::SubstructureSearch::AtomNumberOrHLp&>(
      ::SubstructureSearch::_AtomNumberOrHLp_default_instance_);
}
inline const ::SubstructureSearch::AtomNumberOrHLp& SubstructureChiralCenter::top_front() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureChiralCenter.top_front)
  return _internal_top_front();
}
inline void SubstructureChiralCenter::unsafe_arena_set_allocated_top_front(
    ::SubstructureSearch::AtomNumberOrHLp* top_front) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_front_);
  }
  top_front_ = top_front;
  if (top_front) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SubstructureSearch.SubstructureChiralCenter.top_front)
}
inline ::SubstructureSearch::AtomNumberOrHLp* SubstructureChiralCenter::release_top_front() {
  _has_bits_[0] &= ~0x00000001u;
  ::SubstructureSearch::AtomNumberOrHLp* temp = top_front_;
  top_front_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SubstructureSearch::AtomNumberOrHLp* SubstructureChiralCenter::unsafe_arena_release_top_front() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.SubstructureChiralCenter.top_front)
  _has_bits_[0] &= ~0x00000001u;
  ::SubstructureSearch::AtomNumberOrHLp* temp = top_front_;
  top_front_ = nullptr;
  return temp;
}
inline ::SubstructureSearch::AtomNumberOrHLp* SubstructureChiralCenter::_internal_mutable_top_front() {
  _has_bits_[0] |= 0x00000001u;
  if (top_front_ == nullptr) {
    auto* p = CreateMaybeMessage<::SubstructureSearch::AtomNumberOrHLp>(GetArena());
    top_front_ = p;
  }
  return top_front_;
}
inline ::SubstructureSearch::AtomNumberOrHLp* SubstructureChiralCenter::mutable_top_front() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureChiralCenter.top_front)
  return _internal_mutable_top_front();
}
inline void SubstructureChiralCenter::set_allocated_top_front(::SubstructureSearch::AtomNumberOrHLp* top_front) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete top_front_;
  }
  if (top_front) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(top_front);
    if (message_arena != submessage_arena) {
      top_front = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_front, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  top_front_ = top_front;
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.SubstructureChiralCenter.top_front)
}

// optional .SubstructureSearch.AtomNumberOrHLp top_back = 3;
inline bool SubstructureChiralCenter::_internal_has_top_back() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || top_back_ != nullptr);
  return value;
}
inline bool SubstructureChiralCenter::has_top_back() const {
  return _internal_has_top_back();
}
inline void SubstructureChiralCenter::clear_top_back() {
  if (top_back_ != nullptr) top_back_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::SubstructureSearch::AtomNumberOrHLp& SubstructureChiralCenter::_internal_top_back() const {
  const ::SubstructureSearch::AtomNumberOrHLp* p = top_back_;
  return p != nullptr ? *p : reinterpret_cast<const ::SubstructureSearch::AtomNumberOrHLp&>(
      ::SubstructureSearch::_AtomNumberOrHLp_default_instance_);
}
inline const ::SubstructureSearch::AtomNumberOrHLp& SubstructureChiralCenter::top_back() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureChiralCenter.top_back)
  return _internal_top_back();
}
inline void SubstructureChiralCenter::unsafe_arena_set_allocated_top_back(
    ::SubstructureSearch::AtomNumberOrHLp* top_back) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_back_);
  }
  top_back_ = top_back;
  if (top_back) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SubstructureSearch.SubstructureChiralCenter.top_back)
}
inline ::SubstructureSearch::AtomNumberOrHLp* SubstructureChiralCenter::release_top_back() {
  _has_bits_[0] &= ~0x00000002u;
  ::SubstructureSearch::AtomNumberOrHLp* temp = top_back_;
  top_back_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SubstructureSearch::AtomNumberOrHLp* SubstructureChiralCenter::unsafe_arena_release_top_back() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.SubstructureChiralCenter.top_back)
  _has_bits_[0] &= ~0x00000002u;
  ::SubstructureSearch::AtomNumberOrHLp* temp = top_back_;
  top_back_ = nullptr;
  return temp;
}
inline ::SubstructureSearch::AtomNumberOrHLp* SubstructureChiralCenter::_internal_mutable_top_back() {
  _has_bits_[0] |= 0x00000002u;
  if (top_back_ == nullptr) {
    auto* p = CreateMaybeMessage<::SubstructureSearch::AtomNumberOrHLp>(GetArena());
    top_back_ = p;
  }
  return top_back_;
}
inline ::SubstructureSearch::AtomNumberOrHLp* SubstructureChiralCenter::mutable_top_back() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureChiralCenter.top_back)
  return _internal_mutable_top_back();
}
inline void SubstructureChiralCenter::set_allocated_top_back(::SubstructureSearch::AtomNumberOrHLp* top_back) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete top_back_;
  }
  if (top_back) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(top_back);
    if (message_arena != submessage_arena) {
      top_back = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_back, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  top_back_ = top_back;
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.SubstructureChiralCenter.top_back)
}

// optional .SubstructureSearch.AtomNumberOrHLp left_down = 4;
inline bool SubstructureChiralCenter::_internal_has_left_down() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || left_down_ != nullptr);
  return value;
}
inline bool SubstructureChiralCenter::has_left_down() const {
  return _internal_has_left_down();
}
inline void SubstructureChiralCenter::clear_left_down() {
  if (left_down_ != nullptr) left_down_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::SubstructureSearch::AtomNumberOrHLp& SubstructureChiralCenter::_internal_left_down() const {
  const ::SubstructureSearch::AtomNumberOrHLp* p = left_down_;
  return p != nullptr ? *p : reinterpret_cast<const ::SubstructureSearch::AtomNumberOrHLp&>(
      ::SubstructureSearch::_AtomNumberOrHLp_default_instance_);
}
inline const ::SubstructureSearch::AtomNumberOrHLp& SubstructureChiralCenter::left_down() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureChiralCenter.left_down)
  return _internal_left_down();
}
inline void SubstructureChiralCenter::unsafe_arena_set_allocated_left_down(
    ::SubstructureSearch::AtomNumberOrHLp* left_down) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_down_);
  }
  left_down_ = left_down;
  if (left_down) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SubstructureSearch.SubstructureChiralCenter.left_down)
}
inline ::SubstructureSearch::AtomNumberOrHLp* SubstructureChiralCenter::release_left_down() {
  _has_bits_[0] &= ~0x00000004u;
  ::SubstructureSearch::AtomNumberOrHLp* temp = left_down_;
  left_down_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SubstructureSearch::AtomNumberOrHLp* SubstructureChiralCenter::unsafe_arena_release_left_down() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.SubstructureChiralCenter.left_down)
  _has_bits_[0] &= ~0x00000004u;
  ::SubstructureSearch::AtomNumberOrHLp* temp = left_down_;
  left_down_ = nullptr;
  return temp;
}
inline ::SubstructureSearch::AtomNumberOrHLp* SubstructureChiralCenter::_internal_mutable_left_down() {
  _has_bits_[0] |= 0x00000004u;
  if (left_down_ == nullptr) {
    auto* p = CreateMaybeMessage<::SubstructureSearch::AtomNumberOrHLp>(GetArena());
    left_down_ = p;
  }
  return left_down_;
}
inline ::SubstructureSearch::AtomNumberOrHLp* SubstructureChiralCenter::mutable_left_down() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureChiralCenter.left_down)
  return _internal_mutable_left_down();
}
inline void SubstructureChiralCenter::set_allocated_left_down(::SubstructureSearch::AtomNumberOrHLp* left_down) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete left_down_;
  }
  if (left_down) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(left_down);
    if (message_arena != submessage_arena) {
      left_down = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_down, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  left_down_ = left_down;
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.SubstructureChiralCenter.left_down)
}

// optional .SubstructureSearch.AtomNumberOrHLp right_down = 5;
inline bool SubstructureChiralCenter::_internal_has_right_down() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || right_down_ != nullptr);
  return value;
}
inline bool SubstructureChiralCenter::has_right_down() const {
  return _internal_has_right_down();
}
inline void SubstructureChiralCenter::clear_right_down() {
  if (right_down_ != nullptr) right_down_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::SubstructureSearch::AtomNumberOrHLp& SubstructureChiralCenter::_internal_right_down() const {
  const ::SubstructureSearch::AtomNumberOrHLp* p = right_down_;
  return p != nullptr ? *p : reinterpret_cast<const ::SubstructureSearch::AtomNumberOrHLp&>(
      ::SubstructureSearch::_AtomNumberOrHLp_default_instance_);
}
inline const ::SubstructureSearch::AtomNumberOrHLp& SubstructureChiralCenter::right_down() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureChiralCenter.right_down)
  return _internal_right_down();
}
inline void SubstructureChiralCenter::unsafe_arena_set_allocated_right_down(
    ::SubstructureSearch::AtomNumberOrHLp* right_down) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_down_);
  }
  right_down_ = right_down;
  if (right_down) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SubstructureSearch.SubstructureChiralCenter.right_down)
}
inline ::SubstructureSearch::AtomNumberOrHLp* SubstructureChiralCenter::release_right_down() {
  _has_bits_[0] &= ~0x00000008u;
  ::SubstructureSearch::AtomNumberOrHLp* temp = right_down_;
  right_down_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SubstructureSearch::AtomNumberOrHLp* SubstructureChiralCenter::unsafe_arena_release_right_down() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.SubstructureChiralCenter.right_down)
  _has_bits_[0] &= ~0x00000008u;
  ::SubstructureSearch::AtomNumberOrHLp* temp = right_down_;
  right_down_ = nullptr;
  return temp;
}
inline ::SubstructureSearch::AtomNumberOrHLp* SubstructureChiralCenter::_internal_mutable_right_down() {
  _has_bits_[0] |= 0x00000008u;
  if (right_down_ == nullptr) {
    auto* p = CreateMaybeMessage<::SubstructureSearch::AtomNumberOrHLp>(GetArena());
    right_down_ = p;
  }
  return right_down_;
}
inline ::SubstructureSearch::AtomNumberOrHLp* SubstructureChiralCenter::mutable_right_down() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureChiralCenter.right_down)
  return _internal_mutable_right_down();
}
inline void SubstructureChiralCenter::set_allocated_right_down(::SubstructureSearch::AtomNumberOrHLp* right_down) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete right_down_;
  }
  if (right_down) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(right_down);
    if (message_arena != submessage_arena) {
      right_down = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_down, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  right_down_ = right_down;
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.SubstructureChiralCenter.right_down)
}

// -------------------------------------------------------------------

// SubstructureBond

// repeated .SubstructureSearch.BondType bond_type = 1;
inline int SubstructureBond::_internal_bond_type_size() const {
  return bond_type_.size();
}
inline int SubstructureBond::bond_type_size() const {
  return _internal_bond_type_size();
}
inline void SubstructureBond::clear_bond_type() {
  bond_type_.Clear();
}
inline ::SubstructureSearch::BondType SubstructureBond::_internal_bond_type(int index) const {
  return static_cast< ::SubstructureSearch::BondType >(bond_type_.Get(index));
}
inline ::SubstructureSearch::BondType SubstructureBond::bond_type(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureBond.bond_type)
  return _internal_bond_type(index);
}
inline void SubstructureBond::set_bond_type(int index, ::SubstructureSearch::BondType value) {
  assert(::SubstructureSearch::BondType_IsValid(value));
  bond_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureBond.bond_type)
}
inline void SubstructureBond::_internal_add_bond_type(::SubstructureSearch::BondType value) {
  assert(::SubstructureSearch::BondType_IsValid(value));
  bond_type_.Add(value);
}
inline void SubstructureBond::add_bond_type(::SubstructureSearch::BondType value) {
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureBond.bond_type)
  _internal_add_bond_type(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SubstructureBond::bond_type() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureBond.bond_type)
  return bond_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SubstructureBond::_internal_mutable_bond_type() {
  return &bond_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SubstructureBond::mutable_bond_type() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureBond.bond_type)
  return _internal_mutable_bond_type();
}

// optional uint32 other_end = 2;
inline bool SubstructureBond::_internal_has_other_end() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SubstructureBond::has_other_end() const {
  return _internal_has_other_end();
}
inline void SubstructureBond::clear_other_end() {
  other_end_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureBond::_internal_other_end() const {
  return other_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureBond::other_end() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureBond.other_end)
  return _internal_other_end();
}
inline void SubstructureBond::_internal_set_other_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  other_end_ = value;
}
inline void SubstructureBond::set_other_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_other_end(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureBond.other_end)
}

// -------------------------------------------------------------------

// SubstructureEnvironmentBond

// repeated .SubstructureSearch.BondType bond_type = 1;
inline int SubstructureEnvironmentBond::_internal_bond_type_size() const {
  return bond_type_.size();
}
inline int SubstructureEnvironmentBond::bond_type_size() const {
  return _internal_bond_type_size();
}
inline void SubstructureEnvironmentBond::clear_bond_type() {
  bond_type_.Clear();
}
inline ::SubstructureSearch::BondType SubstructureEnvironmentBond::_internal_bond_type(int index) const {
  return static_cast< ::SubstructureSearch::BondType >(bond_type_.Get(index));
}
inline ::SubstructureSearch::BondType SubstructureEnvironmentBond::bond_type(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureEnvironmentBond.bond_type)
  return _internal_bond_type(index);
}
inline void SubstructureEnvironmentBond::set_bond_type(int index, ::SubstructureSearch::BondType value) {
  assert(::SubstructureSearch::BondType_IsValid(value));
  bond_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureEnvironmentBond.bond_type)
}
inline void SubstructureEnvironmentBond::_internal_add_bond_type(::SubstructureSearch::BondType value) {
  assert(::SubstructureSearch::BondType_IsValid(value));
  bond_type_.Add(value);
}
inline void SubstructureEnvironmentBond::add_bond_type(::SubstructureSearch::BondType value) {
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureEnvironmentBond.bond_type)
  _internal_add_bond_type(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SubstructureEnvironmentBond::bond_type() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureEnvironmentBond.bond_type)
  return bond_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SubstructureEnvironmentBond::_internal_mutable_bond_type() {
  return &bond_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SubstructureEnvironmentBond::mutable_bond_type() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureEnvironmentBond.bond_type)
  return _internal_mutable_bond_type();
}

// repeated uint32 other_end = 2;
inline int SubstructureEnvironmentBond::_internal_other_end_size() const {
  return other_end_.size();
}
inline int SubstructureEnvironmentBond::other_end_size() const {
  return _internal_other_end_size();
}
inline void SubstructureEnvironmentBond::clear_other_end() {
  other_end_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureEnvironmentBond::_internal_other_end(int index) const {
  return other_end_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureEnvironmentBond::other_end(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureEnvironmentBond.other_end)
  return _internal_other_end(index);
}
inline void SubstructureEnvironmentBond::set_other_end(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  other_end_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureEnvironmentBond.other_end)
}
inline void SubstructureEnvironmentBond::_internal_add_other_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  other_end_.Add(value);
}
inline void SubstructureEnvironmentBond::add_other_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_other_end(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureEnvironmentBond.other_end)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureEnvironmentBond::_internal_other_end() const {
  return other_end_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureEnvironmentBond::other_end() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureEnvironmentBond.other_end)
  return _internal_other_end();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureEnvironmentBond::_internal_mutable_other_end() {
  return &other_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureEnvironmentBond::mutable_other_end() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureEnvironmentBond.other_end)
  return _internal_mutable_other_end();
}

// -------------------------------------------------------------------

// ElementsNeeded

// uint32 atomic_number = 1;
inline bool ElementsNeeded::_internal_has_atomic_number() const {
  return ElementSpecifier_case() == kAtomicNumber;
}
inline bool ElementsNeeded::has_atomic_number() const {
  return _internal_has_atomic_number();
}
inline void ElementsNeeded::set_has_atomic_number() {
  _oneof_case_[0] = kAtomicNumber;
}
inline void ElementsNeeded::clear_atomic_number() {
  if (_internal_has_atomic_number()) {
    ElementSpecifier_.atomic_number_ = 0u;
    clear_has_ElementSpecifier();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ElementsNeeded::_internal_atomic_number() const {
  if (_internal_has_atomic_number()) {
    return ElementSpecifier_.atomic_number_;
  }
  return 0u;
}
inline void ElementsNeeded::_internal_set_atomic_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_atomic_number()) {
    clear_ElementSpecifier();
    set_has_atomic_number();
  }
  ElementSpecifier_.atomic_number_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ElementsNeeded::atomic_number() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.ElementsNeeded.atomic_number)
  return _internal_atomic_number();
}
inline void ElementsNeeded::set_atomic_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_atomic_number(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.ElementsNeeded.atomic_number)
}

// string atomic_symbol = 2;
inline bool ElementsNeeded::_internal_has_atomic_symbol() const {
  return ElementSpecifier_case() == kAtomicSymbol;
}
inline bool ElementsNeeded::has_atomic_symbol() const {
  return _internal_has_atomic_symbol();
}
inline void ElementsNeeded::set_has_atomic_symbol() {
  _oneof_case_[0] = kAtomicSymbol;
}
inline void ElementsNeeded::clear_atomic_symbol() {
  if (_internal_has_atomic_symbol()) {
    ElementSpecifier_.atomic_symbol_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_ElementSpecifier();
  }
}
inline const std::string& ElementsNeeded::atomic_symbol() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.ElementsNeeded.atomic_symbol)
  return _internal_atomic_symbol();
}
inline void ElementsNeeded::set_atomic_symbol(const std::string& value) {
  _internal_set_atomic_symbol(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.ElementsNeeded.atomic_symbol)
}
inline std::string* ElementsNeeded::mutable_atomic_symbol() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.ElementsNeeded.atomic_symbol)
  return _internal_mutable_atomic_symbol();
}
inline const std::string& ElementsNeeded::_internal_atomic_symbol() const {
  if (_internal_has_atomic_symbol()) {
    return ElementSpecifier_.atomic_symbol_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ElementsNeeded::_internal_set_atomic_symbol(const std::string& value) {
  if (!_internal_has_atomic_symbol()) {
    clear_ElementSpecifier();
    set_has_atomic_symbol();
    ElementSpecifier_.atomic_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ElementSpecifier_.atomic_symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ElementsNeeded::set_atomic_symbol(std::string&& value) {
  // @@protoc_insertion_point(field_set:SubstructureSearch.ElementsNeeded.atomic_symbol)
  if (!_internal_has_atomic_symbol()) {
    clear_ElementSpecifier();
    set_has_atomic_symbol();
    ElementSpecifier_.atomic_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ElementSpecifier_.atomic_symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubstructureSearch.ElementsNeeded.atomic_symbol)
}
inline void ElementsNeeded::set_atomic_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_atomic_symbol()) {
    clear_ElementSpecifier();
    set_has_atomic_symbol();
    ElementSpecifier_.atomic_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ElementSpecifier_.atomic_symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.ElementsNeeded.atomic_symbol)
}
inline void ElementsNeeded::set_atomic_symbol(const char* value,
                             size_t size) {
  if (!_internal_has_atomic_symbol()) {
    clear_ElementSpecifier();
    set_has_atomic_symbol();
    ElementSpecifier_.atomic_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ElementSpecifier_.atomic_symbol_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.ElementsNeeded.atomic_symbol)
}
inline std::string* ElementsNeeded::_internal_mutable_atomic_symbol() {
  if (!_internal_has_atomic_symbol()) {
    clear_ElementSpecifier();
    set_has_atomic_symbol();
    ElementSpecifier_.atomic_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return ElementSpecifier_.atomic_symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ElementsNeeded::release_atomic_symbol() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.ElementsNeeded.atomic_symbol)
  if (_internal_has_atomic_symbol()) {
    clear_has_ElementSpecifier();
    return ElementSpecifier_.atomic_symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ElementsNeeded::set_allocated_atomic_symbol(std::string* atomic_symbol) {
  if (has_ElementSpecifier()) {
    clear_ElementSpecifier();
  }
  if (atomic_symbol != nullptr) {
    set_has_atomic_symbol();
    ElementSpecifier_.atomic_symbol_.UnsafeSetDefault(atomic_symbol);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(atomic_symbol);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.ElementsNeeded.atomic_symbol)
}

// repeated uint32 hits_needed = 3;
inline int ElementsNeeded::_internal_hits_needed_size() const {
  return hits_needed_.size();
}
inline int ElementsNeeded::hits_needed_size() const {
  return _internal_hits_needed_size();
}
inline void ElementsNeeded::clear_hits_needed() {
  hits_needed_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ElementsNeeded::_internal_hits_needed(int index) const {
  return hits_needed_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ElementsNeeded::hits_needed(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.ElementsNeeded.hits_needed)
  return _internal_hits_needed(index);
}
inline void ElementsNeeded::set_hits_needed(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  hits_needed_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.ElementsNeeded.hits_needed)
}
inline void ElementsNeeded::_internal_add_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  hits_needed_.Add(value);
}
inline void ElementsNeeded::add_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_hits_needed(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.ElementsNeeded.hits_needed)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ElementsNeeded::_internal_hits_needed() const {
  return hits_needed_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ElementsNeeded::hits_needed() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.ElementsNeeded.hits_needed)
  return _internal_hits_needed();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ElementsNeeded::_internal_mutable_hits_needed() {
  return &hits_needed_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ElementsNeeded::mutable_hits_needed() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.ElementsNeeded.hits_needed)
  return _internal_mutable_hits_needed();
}

// optional uint32 min_hits_needed = 4;
inline bool ElementsNeeded::_internal_has_min_hits_needed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ElementsNeeded::has_min_hits_needed() const {
  return _internal_has_min_hits_needed();
}
inline void ElementsNeeded::clear_min_hits_needed() {
  min_hits_needed_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ElementsNeeded::_internal_min_hits_needed() const {
  return min_hits_needed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ElementsNeeded::min_hits_needed() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.ElementsNeeded.min_hits_needed)
  return _internal_min_hits_needed();
}
inline void ElementsNeeded::_internal_set_min_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  min_hits_needed_ = value;
}
inline void ElementsNeeded::set_min_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_hits_needed(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.ElementsNeeded.min_hits_needed)
}

// optional uint32 max_hits_needed = 5;
inline bool ElementsNeeded::_internal_has_max_hits_needed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ElementsNeeded::has_max_hits_needed() const {
  return _internal_has_max_hits_needed();
}
inline void ElementsNeeded::clear_max_hits_needed() {
  max_hits_needed_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ElementsNeeded::_internal_max_hits_needed() const {
  return max_hits_needed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ElementsNeeded::max_hits_needed() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.ElementsNeeded.max_hits_needed)
  return _internal_max_hits_needed();
}
inline void ElementsNeeded::_internal_set_max_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  max_hits_needed_ = value;
}
inline void ElementsNeeded::set_max_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_hits_needed(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.ElementsNeeded.max_hits_needed)
}

inline bool ElementsNeeded::has_ElementSpecifier() const {
  return ElementSpecifier_case() != ELEMENTSPECIFIER_NOT_SET;
}
inline void ElementsNeeded::clear_has_ElementSpecifier() {
  _oneof_case_[0] = ELEMENTSPECIFIER_NOT_SET;
}
inline ElementsNeeded::ElementSpecifierCase ElementsNeeded::ElementSpecifier_case() const {
  return ElementsNeeded::ElementSpecifierCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NoMatchedAtomsBetween

// optional uint32 a1 = 1;
inline bool NoMatchedAtomsBetween::_internal_has_a1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NoMatchedAtomsBetween::has_a1() const {
  return _internal_has_a1();
}
inline void NoMatchedAtomsBetween::clear_a1() {
  a1_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NoMatchedAtomsBetween::_internal_a1() const {
  return a1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NoMatchedAtomsBetween::a1() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.NoMatchedAtomsBetween.a1)
  return _internal_a1();
}
inline void NoMatchedAtomsBetween::_internal_set_a1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  a1_ = value;
}
inline void NoMatchedAtomsBetween::set_a1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_a1(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.NoMatchedAtomsBetween.a1)
}

// optional uint32 a2 = 2;
inline bool NoMatchedAtomsBetween::_internal_has_a2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NoMatchedAtomsBetween::has_a2() const {
  return _internal_has_a2();
}
inline void NoMatchedAtomsBetween::clear_a2() {
  a2_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NoMatchedAtomsBetween::_internal_a2() const {
  return a2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NoMatchedAtomsBetween::a2() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.NoMatchedAtomsBetween.a2)
  return _internal_a2();
}
inline void NoMatchedAtomsBetween::_internal_set_a2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  a2_ = value;
}
inline void NoMatchedAtomsBetween::set_a2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_a2(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.NoMatchedAtomsBetween.a2)
}

// optional string qualifier = 3;
inline bool NoMatchedAtomsBetween::_internal_has_qualifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NoMatchedAtomsBetween::has_qualifier() const {
  return _internal_has_qualifier();
}
inline void NoMatchedAtomsBetween::clear_qualifier() {
  qualifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NoMatchedAtomsBetween::qualifier() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.NoMatchedAtomsBetween.qualifier)
  return _internal_qualifier();
}
inline void NoMatchedAtomsBetween::set_qualifier(const std::string& value) {
  _internal_set_qualifier(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.NoMatchedAtomsBetween.qualifier)
}
inline std::string* NoMatchedAtomsBetween::mutable_qualifier() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.NoMatchedAtomsBetween.qualifier)
  return _internal_mutable_qualifier();
}
inline const std::string& NoMatchedAtomsBetween::_internal_qualifier() const {
  return qualifier_.Get();
}
inline void NoMatchedAtomsBetween::_internal_set_qualifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  qualifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NoMatchedAtomsBetween::set_qualifier(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  qualifier_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubstructureSearch.NoMatchedAtomsBetween.qualifier)
}
inline void NoMatchedAtomsBetween::set_qualifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  qualifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.NoMatchedAtomsBetween.qualifier)
}
inline void NoMatchedAtomsBetween::set_qualifier(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  qualifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.NoMatchedAtomsBetween.qualifier)
}
inline std::string* NoMatchedAtomsBetween::_internal_mutable_qualifier() {
  _has_bits_[0] |= 0x00000001u;
  return qualifier_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NoMatchedAtomsBetween::release_qualifier() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.NoMatchedAtomsBetween.qualifier)
  if (!_internal_has_qualifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return qualifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NoMatchedAtomsBetween::set_allocated_qualifier(std::string* qualifier) {
  if (qualifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  qualifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), qualifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.NoMatchedAtomsBetween.qualifier)
}

// -------------------------------------------------------------------

// LinkAtoms

// optional uint32 a1 = 1;
inline bool LinkAtoms::_internal_has_a1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LinkAtoms::has_a1() const {
  return _internal_has_a1();
}
inline void LinkAtoms::clear_a1() {
  a1_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LinkAtoms::_internal_a1() const {
  return a1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LinkAtoms::a1() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.LinkAtoms.a1)
  return _internal_a1();
}
inline void LinkAtoms::_internal_set_a1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  a1_ = value;
}
inline void LinkAtoms::set_a1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_a1(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.LinkAtoms.a1)
}

// optional uint32 a2 = 2;
inline bool LinkAtoms::_internal_has_a2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LinkAtoms::has_a2() const {
  return _internal_has_a2();
}
inline void LinkAtoms::clear_a2() {
  a2_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LinkAtoms::_internal_a2() const {
  return a2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LinkAtoms::a2() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.LinkAtoms.a2)
  return _internal_a2();
}
inline void LinkAtoms::_internal_set_a2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  a2_ = value;
}
inline void LinkAtoms::set_a2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_a2(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.LinkAtoms.a2)
}

// repeated uint32 distance = 3;
inline int LinkAtoms::_internal_distance_size() const {
  return distance_.size();
}
inline int LinkAtoms::distance_size() const {
  return _internal_distance_size();
}
inline void LinkAtoms::clear_distance() {
  distance_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LinkAtoms::_internal_distance(int index) const {
  return distance_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LinkAtoms::distance(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.LinkAtoms.distance)
  return _internal_distance(index);
}
inline void LinkAtoms::set_distance(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  distance_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.LinkAtoms.distance)
}
inline void LinkAtoms::_internal_add_distance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  distance_.Add(value);
}
inline void LinkAtoms::add_distance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_distance(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.LinkAtoms.distance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
LinkAtoms::_internal_distance() const {
  return distance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
LinkAtoms::distance() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.LinkAtoms.distance)
  return _internal_distance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
LinkAtoms::_internal_mutable_distance() {
  return &distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
LinkAtoms::mutable_distance() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.LinkAtoms.distance)
  return _internal_mutable_distance();
}

// optional uint32 min_distance = 4;
inline bool LinkAtoms::_internal_has_min_distance() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LinkAtoms::has_min_distance() const {
  return _internal_has_min_distance();
}
inline void LinkAtoms::clear_min_distance() {
  min_distance_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LinkAtoms::_internal_min_distance() const {
  return min_distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LinkAtoms::min_distance() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.LinkAtoms.min_distance)
  return _internal_min_distance();
}
inline void LinkAtoms::_internal_set_min_distance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  min_distance_ = value;
}
inline void LinkAtoms::set_min_distance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_distance(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.LinkAtoms.min_distance)
}

// optional uint32 max_distance = 5;
inline bool LinkAtoms::_internal_has_max_distance() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LinkAtoms::has_max_distance() const {
  return _internal_has_max_distance();
}
inline void LinkAtoms::clear_max_distance() {
  max_distance_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LinkAtoms::_internal_max_distance() const {
  return max_distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LinkAtoms::max_distance() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.LinkAtoms.max_distance)
  return _internal_max_distance();
}
inline void LinkAtoms::_internal_set_max_distance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  max_distance_ = value;
}
inline void LinkAtoms::set_max_distance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_distance(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.LinkAtoms.max_distance)
}

// -------------------------------------------------------------------

// EnvironmentAttachment

// repeated uint32 attachment_point = 1;
inline int EnvironmentAttachment::_internal_attachment_point_size() const {
  return attachment_point_.size();
}
inline int EnvironmentAttachment::attachment_point_size() const {
  return _internal_attachment_point_size();
}
inline void EnvironmentAttachment::clear_attachment_point() {
  attachment_point_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnvironmentAttachment::_internal_attachment_point(int index) const {
  return attachment_point_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnvironmentAttachment::attachment_point(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.EnvironmentAttachment.attachment_point)
  return _internal_attachment_point(index);
}
inline void EnvironmentAttachment::set_attachment_point(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  attachment_point_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.EnvironmentAttachment.attachment_point)
}
inline void EnvironmentAttachment::_internal_add_attachment_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  attachment_point_.Add(value);
}
inline void EnvironmentAttachment::add_attachment_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_attachment_point(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.EnvironmentAttachment.attachment_point)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
EnvironmentAttachment::_internal_attachment_point() const {
  return attachment_point_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
EnvironmentAttachment::attachment_point() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.EnvironmentAttachment.attachment_point)
  return _internal_attachment_point();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
EnvironmentAttachment::_internal_mutable_attachment_point() {
  return &attachment_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
EnvironmentAttachment::mutable_attachment_point() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.EnvironmentAttachment.attachment_point)
  return _internal_mutable_attachment_point();
}

// repeated .SubstructureSearch.BondType bond = 2;
inline int EnvironmentAttachment::_internal_bond_size() const {
  return bond_.size();
}
inline int EnvironmentAttachment::bond_size() const {
  return _internal_bond_size();
}
inline void EnvironmentAttachment::clear_bond() {
  bond_.Clear();
}
inline ::SubstructureSearch::BondType EnvironmentAttachment::_internal_bond(int index) const {
  return static_cast< ::SubstructureSearch::BondType >(bond_.Get(index));
}
inline ::SubstructureSearch::BondType EnvironmentAttachment::bond(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.EnvironmentAttachment.bond)
  return _internal_bond(index);
}
inline void EnvironmentAttachment::set_bond(int index, ::SubstructureSearch::BondType value) {
  assert(::SubstructureSearch::BondType_IsValid(value));
  bond_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.EnvironmentAttachment.bond)
}
inline void EnvironmentAttachment::_internal_add_bond(::SubstructureSearch::BondType value) {
  assert(::SubstructureSearch::BondType_IsValid(value));
  bond_.Add(value);
}
inline void EnvironmentAttachment::add_bond(::SubstructureSearch::BondType value) {
  // @@protoc_insertion_point(field_add:SubstructureSearch.EnvironmentAttachment.bond)
  _internal_add_bond(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
EnvironmentAttachment::bond() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.EnvironmentAttachment.bond)
  return bond_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
EnvironmentAttachment::_internal_mutable_bond() {
  return &bond_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
EnvironmentAttachment::mutable_bond() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.EnvironmentAttachment.bond)
  return _internal_mutable_bond();
}

// optional string substructure_bond = 3;
inline bool EnvironmentAttachment::_internal_has_substructure_bond() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EnvironmentAttachment::has_substructure_bond() const {
  return _internal_has_substructure_bond();
}
inline void EnvironmentAttachment::clear_substructure_bond() {
  substructure_bond_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EnvironmentAttachment::substructure_bond() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.EnvironmentAttachment.substructure_bond)
  return _internal_substructure_bond();
}
inline void EnvironmentAttachment::set_substructure_bond(const std::string& value) {
  _internal_set_substructure_bond(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.EnvironmentAttachment.substructure_bond)
}
inline std::string* EnvironmentAttachment::mutable_substructure_bond() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.EnvironmentAttachment.substructure_bond)
  return _internal_mutable_substructure_bond();
}
inline const std::string& EnvironmentAttachment::_internal_substructure_bond() const {
  return substructure_bond_.Get();
}
inline void EnvironmentAttachment::_internal_set_substructure_bond(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  substructure_bond_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EnvironmentAttachment::set_substructure_bond(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  substructure_bond_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubstructureSearch.EnvironmentAttachment.substructure_bond)
}
inline void EnvironmentAttachment::set_substructure_bond(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  substructure_bond_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.EnvironmentAttachment.substructure_bond)
}
inline void EnvironmentAttachment::set_substructure_bond(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  substructure_bond_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.EnvironmentAttachment.substructure_bond)
}
inline std::string* EnvironmentAttachment::_internal_mutable_substructure_bond() {
  _has_bits_[0] |= 0x00000001u;
  return substructure_bond_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EnvironmentAttachment::release_substructure_bond() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.EnvironmentAttachment.substructure_bond)
  if (!_internal_has_substructure_bond()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return substructure_bond_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EnvironmentAttachment::set_allocated_substructure_bond(std::string* substructure_bond) {
  if (substructure_bond != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  substructure_bond_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), substructure_bond,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.EnvironmentAttachment.substructure_bond)
}

// -------------------------------------------------------------------

// SubstructureRingEnvironment

// optional .SubstructureSearch.SubstructureAtom substructure_atom = 1;
inline bool SubstructureRingEnvironment::_internal_has_substructure_atom() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || substructure_atom_ != nullptr);
  return value;
}
inline bool SubstructureRingEnvironment::has_substructure_atom() const {
  return _internal_has_substructure_atom();
}
inline void SubstructureRingEnvironment::clear_substructure_atom() {
  if (substructure_atom_ != nullptr) substructure_atom_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::SubstructureSearch::SubstructureAtom& SubstructureRingEnvironment::_internal_substructure_atom() const {
  const ::SubstructureSearch::SubstructureAtom* p = substructure_atom_;
  return p != nullptr ? *p : reinterpret_cast<const ::SubstructureSearch::SubstructureAtom&>(
      ::SubstructureSearch::_SubstructureAtom_default_instance_);
}
inline const ::SubstructureSearch::SubstructureAtom& SubstructureRingEnvironment::substructure_atom() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingEnvironment.substructure_atom)
  return _internal_substructure_atom();
}
inline void SubstructureRingEnvironment::unsafe_arena_set_allocated_substructure_atom(
    ::SubstructureSearch::SubstructureAtom* substructure_atom) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(substructure_atom_);
  }
  substructure_atom_ = substructure_atom;
  if (substructure_atom) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SubstructureSearch.SubstructureRingEnvironment.substructure_atom)
}
inline ::SubstructureSearch::SubstructureAtom* SubstructureRingEnvironment::release_substructure_atom() {
  _has_bits_[0] &= ~0x00000001u;
  ::SubstructureSearch::SubstructureAtom* temp = substructure_atom_;
  substructure_atom_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SubstructureSearch::SubstructureAtom* SubstructureRingEnvironment::unsafe_arena_release_substructure_atom() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.SubstructureRingEnvironment.substructure_atom)
  _has_bits_[0] &= ~0x00000001u;
  ::SubstructureSearch::SubstructureAtom* temp = substructure_atom_;
  substructure_atom_ = nullptr;
  return temp;
}
inline ::SubstructureSearch::SubstructureAtom* SubstructureRingEnvironment::_internal_mutable_substructure_atom() {
  _has_bits_[0] |= 0x00000001u;
  if (substructure_atom_ == nullptr) {
    auto* p = CreateMaybeMessage<::SubstructureSearch::SubstructureAtom>(GetArena());
    substructure_atom_ = p;
  }
  return substructure_atom_;
}
inline ::SubstructureSearch::SubstructureAtom* SubstructureRingEnvironment::mutable_substructure_atom() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureRingEnvironment.substructure_atom)
  return _internal_mutable_substructure_atom();
}
inline void SubstructureRingEnvironment::set_allocated_substructure_atom(::SubstructureSearch::SubstructureAtom* substructure_atom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete substructure_atom_;
  }
  if (substructure_atom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(substructure_atom);
    if (message_arena != submessage_arena) {
      substructure_atom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, substructure_atom, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  substructure_atom_ = substructure_atom;
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.SubstructureRingEnvironment.substructure_atom)
}

// optional uint32 min_hits_needed = 2;
inline bool SubstructureRingEnvironment::_internal_has_min_hits_needed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SubstructureRingEnvironment::has_min_hits_needed() const {
  return _internal_has_min_hits_needed();
}
inline void SubstructureRingEnvironment::clear_min_hits_needed() {
  min_hits_needed_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingEnvironment::_internal_min_hits_needed() const {
  return min_hits_needed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingEnvironment::min_hits_needed() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingEnvironment.min_hits_needed)
  return _internal_min_hits_needed();
}
inline void SubstructureRingEnvironment::_internal_set_min_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  min_hits_needed_ = value;
}
inline void SubstructureRingEnvironment::set_min_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_hits_needed(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingEnvironment.min_hits_needed)
}

// optional uint32 max_hits_needed = 3;
inline bool SubstructureRingEnvironment::_internal_has_max_hits_needed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SubstructureRingEnvironment::has_max_hits_needed() const {
  return _internal_has_max_hits_needed();
}
inline void SubstructureRingEnvironment::clear_max_hits_needed() {
  max_hits_needed_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingEnvironment::_internal_max_hits_needed() const {
  return max_hits_needed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingEnvironment::max_hits_needed() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingEnvironment.max_hits_needed)
  return _internal_max_hits_needed();
}
inline void SubstructureRingEnvironment::_internal_set_max_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_hits_needed_ = value;
}
inline void SubstructureRingEnvironment::set_max_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_hits_needed(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingEnvironment.max_hits_needed)
}

// -------------------------------------------------------------------

// SubstructureRingBase

// optional bool match_as_match = 1;
inline bool SubstructureRingBase::_internal_has_match_as_match() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SubstructureRingBase::has_match_as_match() const {
  return _internal_has_match_as_match();
}
inline void SubstructureRingBase::clear_match_as_match() {
  match_as_match_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool SubstructureRingBase::_internal_match_as_match() const {
  return match_as_match_;
}
inline bool SubstructureRingBase::match_as_match() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.match_as_match)
  return _internal_match_as_match();
}
inline void SubstructureRingBase::_internal_set_match_as_match(bool value) {
  _has_bits_[0] |= 0x00000100u;
  match_as_match_ = value;
}
inline void SubstructureRingBase::set_match_as_match(bool value) {
  _internal_set_match_as_match(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.match_as_match)
}

// repeated uint32 hits_needed = 2;
inline int SubstructureRingBase::_internal_hits_needed_size() const {
  return hits_needed_.size();
}
inline int SubstructureRingBase::hits_needed_size() const {
  return _internal_hits_needed_size();
}
inline void SubstructureRingBase::clear_hits_needed() {
  hits_needed_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_hits_needed(int index) const {
  return hits_needed_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::hits_needed(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.hits_needed)
  return _internal_hits_needed(index);
}
inline void SubstructureRingBase::set_hits_needed(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  hits_needed_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.hits_needed)
}
inline void SubstructureRingBase::_internal_add_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  hits_needed_.Add(value);
}
inline void SubstructureRingBase::add_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_hits_needed(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingBase.hits_needed)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingBase::_internal_hits_needed() const {
  return hits_needed_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingBase::hits_needed() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingBase.hits_needed)
  return _internal_hits_needed();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingBase::_internal_mutable_hits_needed() {
  return &hits_needed_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingBase::mutable_hits_needed() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingBase.hits_needed)
  return _internal_mutable_hits_needed();
}

// optional uint32 min_hits_needed = 3;
inline bool SubstructureRingBase::_internal_has_min_hits_needed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SubstructureRingBase::has_min_hits_needed() const {
  return _internal_has_min_hits_needed();
}
inline void SubstructureRingBase::clear_min_hits_needed() {
  min_hits_needed_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_min_hits_needed() const {
  return min_hits_needed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::min_hits_needed() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.min_hits_needed)
  return _internal_min_hits_needed();
}
inline void SubstructureRingBase::_internal_set_min_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  min_hits_needed_ = value;
}
inline void SubstructureRingBase::set_min_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_hits_needed(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.min_hits_needed)
}

// optional uint32 max_hits_needed = 4;
inline bool SubstructureRingBase::_internal_has_max_hits_needed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SubstructureRingBase::has_max_hits_needed() const {
  return _internal_has_max_hits_needed();
}
inline void SubstructureRingBase::clear_max_hits_needed() {
  max_hits_needed_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_max_hits_needed() const {
  return max_hits_needed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::max_hits_needed() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.max_hits_needed)
  return _internal_max_hits_needed();
}
inline void SubstructureRingBase::_internal_set_max_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_hits_needed_ = value;
}
inline void SubstructureRingBase::set_max_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_hits_needed(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.max_hits_needed)
}

// repeated uint32 attached_heteroatom_count = 5;
inline int SubstructureRingBase::_internal_attached_heteroatom_count_size() const {
  return attached_heteroatom_count_.size();
}
inline int SubstructureRingBase::attached_heteroatom_count_size() const {
  return _internal_attached_heteroatom_count_size();
}
inline void SubstructureRingBase::clear_attached_heteroatom_count() {
  attached_heteroatom_count_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_attached_heteroatom_count(int index) const {
  return attached_heteroatom_count_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::attached_heteroatom_count(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.attached_heteroatom_count)
  return _internal_attached_heteroatom_count(index);
}
inline void SubstructureRingBase::set_attached_heteroatom_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  attached_heteroatom_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.attached_heteroatom_count)
}
inline void SubstructureRingBase::_internal_add_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  attached_heteroatom_count_.Add(value);
}
inline void SubstructureRingBase::add_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_attached_heteroatom_count(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingBase.attached_heteroatom_count)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingBase::_internal_attached_heteroatom_count() const {
  return attached_heteroatom_count_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingBase::attached_heteroatom_count() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingBase.attached_heteroatom_count)
  return _internal_attached_heteroatom_count();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingBase::_internal_mutable_attached_heteroatom_count() {
  return &attached_heteroatom_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingBase::mutable_attached_heteroatom_count() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingBase.attached_heteroatom_count)
  return _internal_mutable_attached_heteroatom_count();
}

// optional uint32 min_attached_heteroatom_count = 6;
inline bool SubstructureRingBase::_internal_has_min_attached_heteroatom_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SubstructureRingBase::has_min_attached_heteroatom_count() const {
  return _internal_has_min_attached_heteroatom_count();
}
inline void SubstructureRingBase::clear_min_attached_heteroatom_count() {
  min_attached_heteroatom_count_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_min_attached_heteroatom_count() const {
  return min_attached_heteroatom_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::min_attached_heteroatom_count() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.min_attached_heteroatom_count)
  return _internal_min_attached_heteroatom_count();
}
inline void SubstructureRingBase::_internal_set_min_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  min_attached_heteroatom_count_ = value;
}
inline void SubstructureRingBase::set_min_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_attached_heteroatom_count(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.min_attached_heteroatom_count)
}

// optional uint32 max_attached_heteroatom_count = 7;
inline bool SubstructureRingBase::_internal_has_max_attached_heteroatom_count() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SubstructureRingBase::has_max_attached_heteroatom_count() const {
  return _internal_has_max_attached_heteroatom_count();
}
inline void SubstructureRingBase::clear_max_attached_heteroatom_count() {
  max_attached_heteroatom_count_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_max_attached_heteroatom_count() const {
  return max_attached_heteroatom_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::max_attached_heteroatom_count() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.max_attached_heteroatom_count)
  return _internal_max_attached_heteroatom_count();
}
inline void SubstructureRingBase::_internal_set_max_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  max_attached_heteroatom_count_ = value;
}
inline void SubstructureRingBase::set_max_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_attached_heteroatom_count(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.max_attached_heteroatom_count)
}

// repeated uint32 heteroatom_count = 8;
inline int SubstructureRingBase::_internal_heteroatom_count_size() const {
  return heteroatom_count_.size();
}
inline int SubstructureRingBase::heteroatom_count_size() const {
  return _internal_heteroatom_count_size();
}
inline void SubstructureRingBase::clear_heteroatom_count() {
  heteroatom_count_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_heteroatom_count(int index) const {
  return heteroatom_count_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::heteroatom_count(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.heteroatom_count)
  return _internal_heteroatom_count(index);
}
inline void SubstructureRingBase::set_heteroatom_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  heteroatom_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.heteroatom_count)
}
inline void SubstructureRingBase::_internal_add_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  heteroatom_count_.Add(value);
}
inline void SubstructureRingBase::add_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_heteroatom_count(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingBase.heteroatom_count)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingBase::_internal_heteroatom_count() const {
  return heteroatom_count_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingBase::heteroatom_count() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingBase.heteroatom_count)
  return _internal_heteroatom_count();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingBase::_internal_mutable_heteroatom_count() {
  return &heteroatom_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingBase::mutable_heteroatom_count() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingBase.heteroatom_count)
  return _internal_mutable_heteroatom_count();
}

// optional uint32 min_heteroatom_count = 9;
inline bool SubstructureRingBase::_internal_has_min_heteroatom_count() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SubstructureRingBase::has_min_heteroatom_count() const {
  return _internal_has_min_heteroatom_count();
}
inline void SubstructureRingBase::clear_min_heteroatom_count() {
  min_heteroatom_count_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_min_heteroatom_count() const {
  return min_heteroatom_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::min_heteroatom_count() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.min_heteroatom_count)
  return _internal_min_heteroatom_count();
}
inline void SubstructureRingBase::_internal_set_min_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  min_heteroatom_count_ = value;
}
inline void SubstructureRingBase::set_min_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_heteroatom_count(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.min_heteroatom_count)
}

// optional uint32 max_heteroatom_count = 10;
inline bool SubstructureRingBase::_internal_has_max_heteroatom_count() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SubstructureRingBase::has_max_heteroatom_count() const {
  return _internal_has_max_heteroatom_count();
}
inline void SubstructureRingBase::clear_max_heteroatom_count() {
  max_heteroatom_count_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_max_heteroatom_count() const {
  return max_heteroatom_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::max_heteroatom_count() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.max_heteroatom_count)
  return _internal_max_heteroatom_count();
}
inline void SubstructureRingBase::_internal_set_max_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  max_heteroatom_count_ = value;
}
inline void SubstructureRingBase::set_max_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_heteroatom_count(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.max_heteroatom_count)
}

// repeated uint32 ncon = 11;
inline int SubstructureRingBase::_internal_ncon_size() const {
  return ncon_.size();
}
inline int SubstructureRingBase::ncon_size() const {
  return _internal_ncon_size();
}
inline void SubstructureRingBase::clear_ncon() {
  ncon_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_ncon(int index) const {
  return ncon_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::ncon(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.ncon)
  return _internal_ncon(index);
}
inline void SubstructureRingBase::set_ncon(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ncon_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.ncon)
}
inline void SubstructureRingBase::_internal_add_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ncon_.Add(value);
}
inline void SubstructureRingBase::add_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ncon(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingBase.ncon)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingBase::_internal_ncon() const {
  return ncon_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingBase::ncon() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingBase.ncon)
  return _internal_ncon();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingBase::_internal_mutable_ncon() {
  return &ncon_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingBase::mutable_ncon() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingBase.ncon)
  return _internal_mutable_ncon();
}

// optional uint32 min_ncon = 12;
inline bool SubstructureRingBase::_internal_has_min_ncon() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SubstructureRingBase::has_min_ncon() const {
  return _internal_has_min_ncon();
}
inline void SubstructureRingBase::clear_min_ncon() {
  min_ncon_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_min_ncon() const {
  return min_ncon_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::min_ncon() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.min_ncon)
  return _internal_min_ncon();
}
inline void SubstructureRingBase::_internal_set_min_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  min_ncon_ = value;
}
inline void SubstructureRingBase::set_min_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_ncon(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.min_ncon)
}

// optional uint32 max_ncon = 13;
inline bool SubstructureRingBase::_internal_has_max_ncon() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SubstructureRingBase::has_max_ncon() const {
  return _internal_has_max_ncon();
}
inline void SubstructureRingBase::clear_max_ncon() {
  max_ncon_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_max_ncon() const {
  return max_ncon_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::max_ncon() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.max_ncon)
  return _internal_max_ncon();
}
inline void SubstructureRingBase::_internal_set_max_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  max_ncon_ = value;
}
inline void SubstructureRingBase::set_max_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_ncon(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.max_ncon)
}

// optional bool all_hits_in_same_fragment = 14;
inline bool SubstructureRingBase::_internal_has_all_hits_in_same_fragment() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SubstructureRingBase::has_all_hits_in_same_fragment() const {
  return _internal_has_all_hits_in_same_fragment();
}
inline void SubstructureRingBase::clear_all_hits_in_same_fragment() {
  all_hits_in_same_fragment_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool SubstructureRingBase::_internal_all_hits_in_same_fragment() const {
  return all_hits_in_same_fragment_;
}
inline bool SubstructureRingBase::all_hits_in_same_fragment() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.all_hits_in_same_fragment)
  return _internal_all_hits_in_same_fragment();
}
inline void SubstructureRingBase::_internal_set_all_hits_in_same_fragment(bool value) {
  _has_bits_[0] |= 0x00000200u;
  all_hits_in_same_fragment_ = value;
}
inline void SubstructureRingBase::set_all_hits_in_same_fragment(bool value) {
  _internal_set_all_hits_in_same_fragment(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.all_hits_in_same_fragment)
}

// repeated uint32 within_ring_unsaturation = 16;
inline int SubstructureRingBase::_internal_within_ring_unsaturation_size() const {
  return within_ring_unsaturation_.size();
}
inline int SubstructureRingBase::within_ring_unsaturation_size() const {
  return _internal_within_ring_unsaturation_size();
}
inline void SubstructureRingBase::clear_within_ring_unsaturation() {
  within_ring_unsaturation_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_within_ring_unsaturation(int index) const {
  return within_ring_unsaturation_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::within_ring_unsaturation(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.within_ring_unsaturation)
  return _internal_within_ring_unsaturation(index);
}
inline void SubstructureRingBase::set_within_ring_unsaturation(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  within_ring_unsaturation_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.within_ring_unsaturation)
}
inline void SubstructureRingBase::_internal_add_within_ring_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  within_ring_unsaturation_.Add(value);
}
inline void SubstructureRingBase::add_within_ring_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_within_ring_unsaturation(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingBase.within_ring_unsaturation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingBase::_internal_within_ring_unsaturation() const {
  return within_ring_unsaturation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingBase::within_ring_unsaturation() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingBase.within_ring_unsaturation)
  return _internal_within_ring_unsaturation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingBase::_internal_mutable_within_ring_unsaturation() {
  return &within_ring_unsaturation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingBase::mutable_within_ring_unsaturation() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingBase.within_ring_unsaturation)
  return _internal_mutable_within_ring_unsaturation();
}

// optional uint32 min_within_ring_unsaturation = 17;
inline bool SubstructureRingBase::_internal_has_min_within_ring_unsaturation() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SubstructureRingBase::has_min_within_ring_unsaturation() const {
  return _internal_has_min_within_ring_unsaturation();
}
inline void SubstructureRingBase::clear_min_within_ring_unsaturation() {
  min_within_ring_unsaturation_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_min_within_ring_unsaturation() const {
  return min_within_ring_unsaturation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::min_within_ring_unsaturation() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.min_within_ring_unsaturation)
  return _internal_min_within_ring_unsaturation();
}
inline void SubstructureRingBase::_internal_set_min_within_ring_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  min_within_ring_unsaturation_ = value;
}
inline void SubstructureRingBase::set_min_within_ring_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_within_ring_unsaturation(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.min_within_ring_unsaturation)
}

// optional uint32 max_within_ring_unsaturation = 18;
inline bool SubstructureRingBase::_internal_has_max_within_ring_unsaturation() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SubstructureRingBase::has_max_within_ring_unsaturation() const {
  return _internal_has_max_within_ring_unsaturation();
}
inline void SubstructureRingBase::clear_max_within_ring_unsaturation() {
  max_within_ring_unsaturation_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_max_within_ring_unsaturation() const {
  return max_within_ring_unsaturation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::max_within_ring_unsaturation() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.max_within_ring_unsaturation)
  return _internal_max_within_ring_unsaturation();
}
inline void SubstructureRingBase::_internal_set_max_within_ring_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  max_within_ring_unsaturation_ = value;
}
inline void SubstructureRingBase::set_max_within_ring_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_within_ring_unsaturation(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.max_within_ring_unsaturation)
}

// repeated uint32 largest_number_of_bonds_shared_with_another_ring = 19;
inline int SubstructureRingBase::_internal_largest_number_of_bonds_shared_with_another_ring_size() const {
  return largest_number_of_bonds_shared_with_another_ring_.size();
}
inline int SubstructureRingBase::largest_number_of_bonds_shared_with_another_ring_size() const {
  return _internal_largest_number_of_bonds_shared_with_another_ring_size();
}
inline void SubstructureRingBase::clear_largest_number_of_bonds_shared_with_another_ring() {
  largest_number_of_bonds_shared_with_another_ring_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_largest_number_of_bonds_shared_with_another_ring(int index) const {
  return largest_number_of_bonds_shared_with_another_ring_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::largest_number_of_bonds_shared_with_another_ring(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.largest_number_of_bonds_shared_with_another_ring)
  return _internal_largest_number_of_bonds_shared_with_another_ring(index);
}
inline void SubstructureRingBase::set_largest_number_of_bonds_shared_with_another_ring(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  largest_number_of_bonds_shared_with_another_ring_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.largest_number_of_bonds_shared_with_another_ring)
}
inline void SubstructureRingBase::_internal_add_largest_number_of_bonds_shared_with_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  largest_number_of_bonds_shared_with_another_ring_.Add(value);
}
inline void SubstructureRingBase::add_largest_number_of_bonds_shared_with_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_largest_number_of_bonds_shared_with_another_ring(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingBase.largest_number_of_bonds_shared_with_another_ring)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingBase::_internal_largest_number_of_bonds_shared_with_another_ring() const {
  return largest_number_of_bonds_shared_with_another_ring_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingBase::largest_number_of_bonds_shared_with_another_ring() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingBase.largest_number_of_bonds_shared_with_another_ring)
  return _internal_largest_number_of_bonds_shared_with_another_ring();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingBase::_internal_mutable_largest_number_of_bonds_shared_with_another_ring() {
  return &largest_number_of_bonds_shared_with_another_ring_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingBase::mutable_largest_number_of_bonds_shared_with_another_ring() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingBase.largest_number_of_bonds_shared_with_another_ring)
  return _internal_mutable_largest_number_of_bonds_shared_with_another_ring();
}

// optional uint32 min_largest_number_of_bonds_shared_with_another_ring = 20;
inline bool SubstructureRingBase::_internal_has_min_largest_number_of_bonds_shared_with_another_ring() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SubstructureRingBase::has_min_largest_number_of_bonds_shared_with_another_ring() const {
  return _internal_has_min_largest_number_of_bonds_shared_with_another_ring();
}
inline void SubstructureRingBase::clear_min_largest_number_of_bonds_shared_with_another_ring() {
  min_largest_number_of_bonds_shared_with_another_ring_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_min_largest_number_of_bonds_shared_with_another_ring() const {
  return min_largest_number_of_bonds_shared_with_another_ring_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::min_largest_number_of_bonds_shared_with_another_ring() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.min_largest_number_of_bonds_shared_with_another_ring)
  return _internal_min_largest_number_of_bonds_shared_with_another_ring();
}
inline void SubstructureRingBase::_internal_set_min_largest_number_of_bonds_shared_with_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  min_largest_number_of_bonds_shared_with_another_ring_ = value;
}
inline void SubstructureRingBase::set_min_largest_number_of_bonds_shared_with_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_largest_number_of_bonds_shared_with_another_ring(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.min_largest_number_of_bonds_shared_with_another_ring)
}

// optional uint32 max_largest_number_of_bonds_shared_with_another_ring = 21;
inline bool SubstructureRingBase::_internal_has_max_largest_number_of_bonds_shared_with_another_ring() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SubstructureRingBase::has_max_largest_number_of_bonds_shared_with_another_ring() const {
  return _internal_has_max_largest_number_of_bonds_shared_with_another_ring();
}
inline void SubstructureRingBase::clear_max_largest_number_of_bonds_shared_with_another_ring() {
  max_largest_number_of_bonds_shared_with_another_ring_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_max_largest_number_of_bonds_shared_with_another_ring() const {
  return max_largest_number_of_bonds_shared_with_another_ring_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::max_largest_number_of_bonds_shared_with_another_ring() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.max_largest_number_of_bonds_shared_with_another_ring)
  return _internal_max_largest_number_of_bonds_shared_with_another_ring();
}
inline void SubstructureRingBase::_internal_set_max_largest_number_of_bonds_shared_with_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  max_largest_number_of_bonds_shared_with_another_ring_ = value;
}
inline void SubstructureRingBase::set_max_largest_number_of_bonds_shared_with_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_largest_number_of_bonds_shared_with_another_ring(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.max_largest_number_of_bonds_shared_with_another_ring)
}

// repeated uint32 atoms_with_pi_electrons = 26;
inline int SubstructureRingBase::_internal_atoms_with_pi_electrons_size() const {
  return atoms_with_pi_electrons_.size();
}
inline int SubstructureRingBase::atoms_with_pi_electrons_size() const {
  return _internal_atoms_with_pi_electrons_size();
}
inline void SubstructureRingBase::clear_atoms_with_pi_electrons() {
  atoms_with_pi_electrons_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_atoms_with_pi_electrons(int index) const {
  return atoms_with_pi_electrons_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::atoms_with_pi_electrons(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.atoms_with_pi_electrons)
  return _internal_atoms_with_pi_electrons(index);
}
inline void SubstructureRingBase::set_atoms_with_pi_electrons(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  atoms_with_pi_electrons_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.atoms_with_pi_electrons)
}
inline void SubstructureRingBase::_internal_add_atoms_with_pi_electrons(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  atoms_with_pi_electrons_.Add(value);
}
inline void SubstructureRingBase::add_atoms_with_pi_electrons(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_atoms_with_pi_electrons(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingBase.atoms_with_pi_electrons)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingBase::_internal_atoms_with_pi_electrons() const {
  return atoms_with_pi_electrons_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingBase::atoms_with_pi_electrons() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingBase.atoms_with_pi_electrons)
  return _internal_atoms_with_pi_electrons();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingBase::_internal_mutable_atoms_with_pi_electrons() {
  return &atoms_with_pi_electrons_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingBase::mutable_atoms_with_pi_electrons() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingBase.atoms_with_pi_electrons)
  return _internal_mutable_atoms_with_pi_electrons();
}

// optional uint32 min_atoms_with_pi_electrons = 27;
inline bool SubstructureRingBase::_internal_has_min_atoms_with_pi_electrons() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SubstructureRingBase::has_min_atoms_with_pi_electrons() const {
  return _internal_has_min_atoms_with_pi_electrons();
}
inline void SubstructureRingBase::clear_min_atoms_with_pi_electrons() {
  min_atoms_with_pi_electrons_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_min_atoms_with_pi_electrons() const {
  return min_atoms_with_pi_electrons_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::min_atoms_with_pi_electrons() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.min_atoms_with_pi_electrons)
  return _internal_min_atoms_with_pi_electrons();
}
inline void SubstructureRingBase::_internal_set_min_atoms_with_pi_electrons(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  min_atoms_with_pi_electrons_ = value;
}
inline void SubstructureRingBase::set_min_atoms_with_pi_electrons(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_atoms_with_pi_electrons(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.min_atoms_with_pi_electrons)
}

// optional uint32 max_atoms_with_pi_electrons = 28;
inline bool SubstructureRingBase::_internal_has_max_atoms_with_pi_electrons() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool SubstructureRingBase::has_max_atoms_with_pi_electrons() const {
  return _internal_has_max_atoms_with_pi_electrons();
}
inline void SubstructureRingBase::clear_max_atoms_with_pi_electrons() {
  max_atoms_with_pi_electrons_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_max_atoms_with_pi_electrons() const {
  return max_atoms_with_pi_electrons_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::max_atoms_with_pi_electrons() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.max_atoms_with_pi_electrons)
  return _internal_max_atoms_with_pi_electrons();
}
inline void SubstructureRingBase::_internal_set_max_atoms_with_pi_electrons(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  max_atoms_with_pi_electrons_ = value;
}
inline void SubstructureRingBase::set_max_atoms_with_pi_electrons(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_atoms_with_pi_electrons(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.max_atoms_with_pi_electrons)
}

// repeated uint32 strongly_fused_ring_neighbours = 29;
inline int SubstructureRingBase::_internal_strongly_fused_ring_neighbours_size() const {
  return strongly_fused_ring_neighbours_.size();
}
inline int SubstructureRingBase::strongly_fused_ring_neighbours_size() const {
  return _internal_strongly_fused_ring_neighbours_size();
}
inline void SubstructureRingBase::clear_strongly_fused_ring_neighbours() {
  strongly_fused_ring_neighbours_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_strongly_fused_ring_neighbours(int index) const {
  return strongly_fused_ring_neighbours_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::strongly_fused_ring_neighbours(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.strongly_fused_ring_neighbours)
  return _internal_strongly_fused_ring_neighbours(index);
}
inline void SubstructureRingBase::set_strongly_fused_ring_neighbours(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  strongly_fused_ring_neighbours_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.strongly_fused_ring_neighbours)
}
inline void SubstructureRingBase::_internal_add_strongly_fused_ring_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  strongly_fused_ring_neighbours_.Add(value);
}
inline void SubstructureRingBase::add_strongly_fused_ring_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_strongly_fused_ring_neighbours(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingBase.strongly_fused_ring_neighbours)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingBase::_internal_strongly_fused_ring_neighbours() const {
  return strongly_fused_ring_neighbours_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingBase::strongly_fused_ring_neighbours() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingBase.strongly_fused_ring_neighbours)
  return _internal_strongly_fused_ring_neighbours();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingBase::_internal_mutable_strongly_fused_ring_neighbours() {
  return &strongly_fused_ring_neighbours_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingBase::mutable_strongly_fused_ring_neighbours() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingBase.strongly_fused_ring_neighbours)
  return _internal_mutable_strongly_fused_ring_neighbours();
}

// optional uint32 min_strongly_fused_ring_neighbours = 30;
inline bool SubstructureRingBase::_internal_has_min_strongly_fused_ring_neighbours() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool SubstructureRingBase::has_min_strongly_fused_ring_neighbours() const {
  return _internal_has_min_strongly_fused_ring_neighbours();
}
inline void SubstructureRingBase::clear_min_strongly_fused_ring_neighbours() {
  min_strongly_fused_ring_neighbours_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_min_strongly_fused_ring_neighbours() const {
  return min_strongly_fused_ring_neighbours_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::min_strongly_fused_ring_neighbours() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.min_strongly_fused_ring_neighbours)
  return _internal_min_strongly_fused_ring_neighbours();
}
inline void SubstructureRingBase::_internal_set_min_strongly_fused_ring_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  min_strongly_fused_ring_neighbours_ = value;
}
inline void SubstructureRingBase::set_min_strongly_fused_ring_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_strongly_fused_ring_neighbours(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.min_strongly_fused_ring_neighbours)
}

// optional uint32 max_strongly_fused_ring_neighbours = 31;
inline bool SubstructureRingBase::_internal_has_max_strongly_fused_ring_neighbours() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool SubstructureRingBase::has_max_strongly_fused_ring_neighbours() const {
  return _internal_has_max_strongly_fused_ring_neighbours();
}
inline void SubstructureRingBase::clear_max_strongly_fused_ring_neighbours() {
  max_strongly_fused_ring_neighbours_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::_internal_max_strongly_fused_ring_neighbours() const {
  return max_strongly_fused_ring_neighbours_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingBase::max_strongly_fused_ring_neighbours() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.max_strongly_fused_ring_neighbours)
  return _internal_max_strongly_fused_ring_neighbours();
}
inline void SubstructureRingBase::_internal_set_max_strongly_fused_ring_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  max_strongly_fused_ring_neighbours_ = value;
}
inline void SubstructureRingBase::set_max_strongly_fused_ring_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_strongly_fused_ring_neighbours(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.max_strongly_fused_ring_neighbours)
}

// optional string environment = 22;
inline bool SubstructureRingBase::_internal_has_environment() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SubstructureRingBase::has_environment() const {
  return _internal_has_environment();
}
inline void SubstructureRingBase::clear_environment() {
  environment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SubstructureRingBase::environment() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.environment)
  return _internal_environment();
}
inline void SubstructureRingBase::set_environment(const std::string& value) {
  _internal_set_environment(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.environment)
}
inline std::string* SubstructureRingBase::mutable_environment() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureRingBase.environment)
  return _internal_mutable_environment();
}
inline const std::string& SubstructureRingBase::_internal_environment() const {
  return environment_.Get();
}
inline void SubstructureRingBase::_internal_set_environment(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  environment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubstructureRingBase::set_environment(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  environment_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubstructureSearch.SubstructureRingBase.environment)
}
inline void SubstructureRingBase::set_environment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  environment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.SubstructureRingBase.environment)
}
inline void SubstructureRingBase::set_environment(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  environment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.SubstructureRingBase.environment)
}
inline std::string* SubstructureRingBase::_internal_mutable_environment() {
  _has_bits_[0] |= 0x00000001u;
  return environment_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubstructureRingBase::release_environment() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.SubstructureRingBase.environment)
  if (!_internal_has_environment()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return environment_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubstructureRingBase::set_allocated_environment(std::string* environment) {
  if (environment != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  environment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), environment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.SubstructureRingBase.environment)
}

// optional bool environment_can_match_in_ring_atoms = 23;
inline bool SubstructureRingBase::_internal_has_environment_can_match_in_ring_atoms() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SubstructureRingBase::has_environment_can_match_in_ring_atoms() const {
  return _internal_has_environment_can_match_in_ring_atoms();
}
inline void SubstructureRingBase::clear_environment_can_match_in_ring_atoms() {
  environment_can_match_in_ring_atoms_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool SubstructureRingBase::_internal_environment_can_match_in_ring_atoms() const {
  return environment_can_match_in_ring_atoms_;
}
inline bool SubstructureRingBase::environment_can_match_in_ring_atoms() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingBase.environment_can_match_in_ring_atoms)
  return _internal_environment_can_match_in_ring_atoms();
}
inline void SubstructureRingBase::_internal_set_environment_can_match_in_ring_atoms(bool value) {
  _has_bits_[0] |= 0x00000400u;
  environment_can_match_in_ring_atoms_ = value;
}
inline void SubstructureRingBase::set_environment_can_match_in_ring_atoms(bool value) {
  _internal_set_environment_can_match_in_ring_atoms(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingBase.environment_can_match_in_ring_atoms)
}

// -------------------------------------------------------------------

// SubstructureRingSpecification

// optional .SubstructureSearch.SubstructureRingBase base = 1;
inline bool SubstructureRingSpecification::_internal_has_base() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || base_ != nullptr);
  return value;
}
inline bool SubstructureRingSpecification::has_base() const {
  return _internal_has_base();
}
inline void SubstructureRingSpecification::clear_base() {
  if (base_ != nullptr) base_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::SubstructureSearch::SubstructureRingBase& SubstructureRingSpecification::_internal_base() const {
  const ::SubstructureSearch::SubstructureRingBase* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::SubstructureSearch::SubstructureRingBase&>(
      ::SubstructureSearch::_SubstructureRingBase_default_instance_);
}
inline const ::SubstructureSearch::SubstructureRingBase& SubstructureRingSpecification::base() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSpecification.base)
  return _internal_base();
}
inline void SubstructureRingSpecification::unsafe_arena_set_allocated_base(
    ::SubstructureSearch::SubstructureRingBase* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SubstructureSearch.SubstructureRingSpecification.base)
}
inline ::SubstructureSearch::SubstructureRingBase* SubstructureRingSpecification::release_base() {
  _has_bits_[0] &= ~0x00000001u;
  ::SubstructureSearch::SubstructureRingBase* temp = base_;
  base_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SubstructureSearch::SubstructureRingBase* SubstructureRingSpecification::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.SubstructureRingSpecification.base)
  _has_bits_[0] &= ~0x00000001u;
  ::SubstructureSearch::SubstructureRingBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::SubstructureSearch::SubstructureRingBase* SubstructureRingSpecification::_internal_mutable_base() {
  _has_bits_[0] |= 0x00000001u;
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::SubstructureSearch::SubstructureRingBase>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::SubstructureSearch::SubstructureRingBase* SubstructureRingSpecification::mutable_base() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureRingSpecification.base)
  return _internal_mutable_base();
}
inline void SubstructureRingSpecification::set_allocated_base(::SubstructureSearch::SubstructureRingBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.SubstructureRingSpecification.base)
}

// repeated uint32 ring_size = 2;
inline int SubstructureRingSpecification::_internal_ring_size_size() const {
  return ring_size_.size();
}
inline int SubstructureRingSpecification::ring_size_size() const {
  return _internal_ring_size_size();
}
inline void SubstructureRingSpecification::clear_ring_size() {
  ring_size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::_internal_ring_size(int index) const {
  return ring_size_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::ring_size(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSpecification.ring_size)
  return _internal_ring_size(index);
}
inline void SubstructureRingSpecification::set_ring_size(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ring_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSpecification.ring_size)
}
inline void SubstructureRingSpecification::_internal_add_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ring_size_.Add(value);
}
inline void SubstructureRingSpecification::add_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ring_size(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingSpecification.ring_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSpecification::_internal_ring_size() const {
  return ring_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSpecification::ring_size() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingSpecification.ring_size)
  return _internal_ring_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSpecification::_internal_mutable_ring_size() {
  return &ring_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSpecification::mutable_ring_size() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingSpecification.ring_size)
  return _internal_mutable_ring_size();
}

// optional uint32 min_ring_size = 3;
inline bool SubstructureRingSpecification::_internal_has_min_ring_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SubstructureRingSpecification::has_min_ring_size() const {
  return _internal_has_min_ring_size();
}
inline void SubstructureRingSpecification::clear_min_ring_size() {
  min_ring_size_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::_internal_min_ring_size() const {
  return min_ring_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::min_ring_size() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSpecification.min_ring_size)
  return _internal_min_ring_size();
}
inline void SubstructureRingSpecification::_internal_set_min_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  min_ring_size_ = value;
}
inline void SubstructureRingSpecification::set_min_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_ring_size(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSpecification.min_ring_size)
}

// optional uint32 max_ring_size = 4;
inline bool SubstructureRingSpecification::_internal_has_max_ring_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SubstructureRingSpecification::has_max_ring_size() const {
  return _internal_has_max_ring_size();
}
inline void SubstructureRingSpecification::clear_max_ring_size() {
  max_ring_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::_internal_max_ring_size() const {
  return max_ring_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::max_ring_size() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSpecification.max_ring_size)
  return _internal_max_ring_size();
}
inline void SubstructureRingSpecification::_internal_set_max_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_ring_size_ = value;
}
inline void SubstructureRingSpecification::set_max_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_ring_size(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSpecification.max_ring_size)
}

// optional bool aromatic = 5;
inline bool SubstructureRingSpecification::_internal_has_aromatic() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SubstructureRingSpecification::has_aromatic() const {
  return _internal_has_aromatic();
}
inline void SubstructureRingSpecification::clear_aromatic() {
  aromatic_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SubstructureRingSpecification::_internal_aromatic() const {
  return aromatic_;
}
inline bool SubstructureRingSpecification::aromatic() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSpecification.aromatic)
  return _internal_aromatic();
}
inline void SubstructureRingSpecification::_internal_set_aromatic(bool value) {
  _has_bits_[0] |= 0x00000008u;
  aromatic_ = value;
}
inline void SubstructureRingSpecification::set_aromatic(bool value) {
  _internal_set_aromatic(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSpecification.aromatic)
}

// repeated uint32 fused = 6;
inline int SubstructureRingSpecification::_internal_fused_size() const {
  return fused_.size();
}
inline int SubstructureRingSpecification::fused_size() const {
  return _internal_fused_size();
}
inline void SubstructureRingSpecification::clear_fused() {
  fused_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::_internal_fused(int index) const {
  return fused_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::fused(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSpecification.fused)
  return _internal_fused(index);
}
inline void SubstructureRingSpecification::set_fused(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  fused_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSpecification.fused)
}
inline void SubstructureRingSpecification::_internal_add_fused(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  fused_.Add(value);
}
inline void SubstructureRingSpecification::add_fused(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_fused(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingSpecification.fused)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSpecification::_internal_fused() const {
  return fused_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSpecification::fused() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingSpecification.fused)
  return _internal_fused();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSpecification::_internal_mutable_fused() {
  return &fused_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSpecification::mutable_fused() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingSpecification.fused)
  return _internal_mutable_fused();
}

// optional uint32 min_fused = 7;
inline bool SubstructureRingSpecification::_internal_has_min_fused() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SubstructureRingSpecification::has_min_fused() const {
  return _internal_has_min_fused();
}
inline void SubstructureRingSpecification::clear_min_fused() {
  min_fused_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::_internal_min_fused() const {
  return min_fused_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::min_fused() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSpecification.min_fused)
  return _internal_min_fused();
}
inline void SubstructureRingSpecification::_internal_set_min_fused(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  min_fused_ = value;
}
inline void SubstructureRingSpecification::set_min_fused(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_fused(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSpecification.min_fused)
}

// optional uint32 max_fused = 8;
inline bool SubstructureRingSpecification::_internal_has_max_fused() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SubstructureRingSpecification::has_max_fused() const {
  return _internal_has_max_fused();
}
inline void SubstructureRingSpecification::clear_max_fused() {
  max_fused_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::_internal_max_fused() const {
  return max_fused_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::max_fused() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSpecification.max_fused)
  return _internal_max_fused();
}
inline void SubstructureRingSpecification::_internal_set_max_fused(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  max_fused_ = value;
}
inline void SubstructureRingSpecification::set_max_fused(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_fused(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSpecification.max_fused)
}

// repeated uint32 fused_aromatic_neighbours = 9;
inline int SubstructureRingSpecification::_internal_fused_aromatic_neighbours_size() const {
  return fused_aromatic_neighbours_.size();
}
inline int SubstructureRingSpecification::fused_aromatic_neighbours_size() const {
  return _internal_fused_aromatic_neighbours_size();
}
inline void SubstructureRingSpecification::clear_fused_aromatic_neighbours() {
  fused_aromatic_neighbours_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::_internal_fused_aromatic_neighbours(int index) const {
  return fused_aromatic_neighbours_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::fused_aromatic_neighbours(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSpecification.fused_aromatic_neighbours)
  return _internal_fused_aromatic_neighbours(index);
}
inline void SubstructureRingSpecification::set_fused_aromatic_neighbours(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  fused_aromatic_neighbours_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSpecification.fused_aromatic_neighbours)
}
inline void SubstructureRingSpecification::_internal_add_fused_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  fused_aromatic_neighbours_.Add(value);
}
inline void SubstructureRingSpecification::add_fused_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_fused_aromatic_neighbours(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingSpecification.fused_aromatic_neighbours)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSpecification::_internal_fused_aromatic_neighbours() const {
  return fused_aromatic_neighbours_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSpecification::fused_aromatic_neighbours() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingSpecification.fused_aromatic_neighbours)
  return _internal_fused_aromatic_neighbours();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSpecification::_internal_mutable_fused_aromatic_neighbours() {
  return &fused_aromatic_neighbours_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSpecification::mutable_fused_aromatic_neighbours() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingSpecification.fused_aromatic_neighbours)
  return _internal_mutable_fused_aromatic_neighbours();
}

// optional uint32 min_fused_aromatic_neighbours = 10;
inline bool SubstructureRingSpecification::_internal_has_min_fused_aromatic_neighbours() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SubstructureRingSpecification::has_min_fused_aromatic_neighbours() const {
  return _internal_has_min_fused_aromatic_neighbours();
}
inline void SubstructureRingSpecification::clear_min_fused_aromatic_neighbours() {
  min_fused_aromatic_neighbours_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::_internal_min_fused_aromatic_neighbours() const {
  return min_fused_aromatic_neighbours_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::min_fused_aromatic_neighbours() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSpecification.min_fused_aromatic_neighbours)
  return _internal_min_fused_aromatic_neighbours();
}
inline void SubstructureRingSpecification::_internal_set_min_fused_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  min_fused_aromatic_neighbours_ = value;
}
inline void SubstructureRingSpecification::set_min_fused_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_fused_aromatic_neighbours(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSpecification.min_fused_aromatic_neighbours)
}

// optional uint32 max_fused_aromatic_neighbours = 11;
inline bool SubstructureRingSpecification::_internal_has_max_fused_aromatic_neighbours() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SubstructureRingSpecification::has_max_fused_aromatic_neighbours() const {
  return _internal_has_max_fused_aromatic_neighbours();
}
inline void SubstructureRingSpecification::clear_max_fused_aromatic_neighbours() {
  max_fused_aromatic_neighbours_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::_internal_max_fused_aromatic_neighbours() const {
  return max_fused_aromatic_neighbours_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::max_fused_aromatic_neighbours() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSpecification.max_fused_aromatic_neighbours)
  return _internal_max_fused_aromatic_neighbours();
}
inline void SubstructureRingSpecification::_internal_set_max_fused_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  max_fused_aromatic_neighbours_ = value;
}
inline void SubstructureRingSpecification::set_max_fused_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_fused_aromatic_neighbours(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSpecification.max_fused_aromatic_neighbours)
}

// repeated uint32 fused_non_aromatic_neighbours = 12;
inline int SubstructureRingSpecification::_internal_fused_non_aromatic_neighbours_size() const {
  return fused_non_aromatic_neighbours_.size();
}
inline int SubstructureRingSpecification::fused_non_aromatic_neighbours_size() const {
  return _internal_fused_non_aromatic_neighbours_size();
}
inline void SubstructureRingSpecification::clear_fused_non_aromatic_neighbours() {
  fused_non_aromatic_neighbours_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::_internal_fused_non_aromatic_neighbours(int index) const {
  return fused_non_aromatic_neighbours_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::fused_non_aromatic_neighbours(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSpecification.fused_non_aromatic_neighbours)
  return _internal_fused_non_aromatic_neighbours(index);
}
inline void SubstructureRingSpecification::set_fused_non_aromatic_neighbours(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  fused_non_aromatic_neighbours_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSpecification.fused_non_aromatic_neighbours)
}
inline void SubstructureRingSpecification::_internal_add_fused_non_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  fused_non_aromatic_neighbours_.Add(value);
}
inline void SubstructureRingSpecification::add_fused_non_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_fused_non_aromatic_neighbours(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingSpecification.fused_non_aromatic_neighbours)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSpecification::_internal_fused_non_aromatic_neighbours() const {
  return fused_non_aromatic_neighbours_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSpecification::fused_non_aromatic_neighbours() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingSpecification.fused_non_aromatic_neighbours)
  return _internal_fused_non_aromatic_neighbours();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSpecification::_internal_mutable_fused_non_aromatic_neighbours() {
  return &fused_non_aromatic_neighbours_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSpecification::mutable_fused_non_aromatic_neighbours() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingSpecification.fused_non_aromatic_neighbours)
  return _internal_mutable_fused_non_aromatic_neighbours();
}

// optional uint32 min_fused_non_aromatic_neighbours = 13;
inline bool SubstructureRingSpecification::_internal_has_min_fused_non_aromatic_neighbours() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SubstructureRingSpecification::has_min_fused_non_aromatic_neighbours() const {
  return _internal_has_min_fused_non_aromatic_neighbours();
}
inline void SubstructureRingSpecification::clear_min_fused_non_aromatic_neighbours() {
  min_fused_non_aromatic_neighbours_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::_internal_min_fused_non_aromatic_neighbours() const {
  return min_fused_non_aromatic_neighbours_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::min_fused_non_aromatic_neighbours() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSpecification.min_fused_non_aromatic_neighbours)
  return _internal_min_fused_non_aromatic_neighbours();
}
inline void SubstructureRingSpecification::_internal_set_min_fused_non_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  min_fused_non_aromatic_neighbours_ = value;
}
inline void SubstructureRingSpecification::set_min_fused_non_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_fused_non_aromatic_neighbours(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSpecification.min_fused_non_aromatic_neighbours)
}

// optional uint32 max_fused_non_aromatic_neighbours = 14;
inline bool SubstructureRingSpecification::_internal_has_max_fused_non_aromatic_neighbours() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SubstructureRingSpecification::has_max_fused_non_aromatic_neighbours() const {
  return _internal_has_max_fused_non_aromatic_neighbours();
}
inline void SubstructureRingSpecification::clear_max_fused_non_aromatic_neighbours() {
  max_fused_non_aromatic_neighbours_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::_internal_max_fused_non_aromatic_neighbours() const {
  return max_fused_non_aromatic_neighbours_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSpecification::max_fused_non_aromatic_neighbours() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSpecification.max_fused_non_aromatic_neighbours)
  return _internal_max_fused_non_aromatic_neighbours();
}
inline void SubstructureRingSpecification::_internal_set_max_fused_non_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  max_fused_non_aromatic_neighbours_ = value;
}
inline void SubstructureRingSpecification::set_max_fused_non_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_fused_non_aromatic_neighbours(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSpecification.max_fused_non_aromatic_neighbours)
}

// -------------------------------------------------------------------

// RingSizeRequirement

// optional uint32 ring_size = 1;
inline bool RingSizeRequirement::_internal_has_ring_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RingSizeRequirement::has_ring_size() const {
  return _internal_has_ring_size();
}
inline void RingSizeRequirement::clear_ring_size() {
  ring_size_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RingSizeRequirement::_internal_ring_size() const {
  return ring_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RingSizeRequirement::ring_size() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.RingSizeRequirement.ring_size)
  return _internal_ring_size();
}
inline void RingSizeRequirement::_internal_set_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  ring_size_ = value;
}
inline void RingSizeRequirement::set_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ring_size(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.RingSizeRequirement.ring_size)
}

// repeated uint32 count = 2;
inline int RingSizeRequirement::_internal_count_size() const {
  return count_.size();
}
inline int RingSizeRequirement::count_size() const {
  return _internal_count_size();
}
inline void RingSizeRequirement::clear_count() {
  count_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RingSizeRequirement::_internal_count(int index) const {
  return count_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RingSizeRequirement::count(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.RingSizeRequirement.count)
  return _internal_count(index);
}
inline void RingSizeRequirement::set_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  count_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.RingSizeRequirement.count)
}
inline void RingSizeRequirement::_internal_add_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  count_.Add(value);
}
inline void RingSizeRequirement::add_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_count(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.RingSizeRequirement.count)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RingSizeRequirement::_internal_count() const {
  return count_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RingSizeRequirement::count() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.RingSizeRequirement.count)
  return _internal_count();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RingSizeRequirement::_internal_mutable_count() {
  return &count_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RingSizeRequirement::mutable_count() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.RingSizeRequirement.count)
  return _internal_mutable_count();
}

// optional uint32 min_count = 3;
inline bool RingSizeRequirement::_internal_has_min_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RingSizeRequirement::has_min_count() const {
  return _internal_has_min_count();
}
inline void RingSizeRequirement::clear_min_count() {
  min_count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RingSizeRequirement::_internal_min_count() const {
  return min_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RingSizeRequirement::min_count() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.RingSizeRequirement.min_count)
  return _internal_min_count();
}
inline void RingSizeRequirement::_internal_set_min_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  min_count_ = value;
}
inline void RingSizeRequirement::set_min_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_count(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.RingSizeRequirement.min_count)
}

// optional uint32 max_count = 4;
inline bool RingSizeRequirement::_internal_has_max_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RingSizeRequirement::has_max_count() const {
  return _internal_has_max_count();
}
inline void RingSizeRequirement::clear_max_count() {
  max_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RingSizeRequirement::_internal_max_count() const {
  return max_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RingSizeRequirement::max_count() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.RingSizeRequirement.max_count)
  return _internal_max_count();
}
inline void RingSizeRequirement::_internal_set_max_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_count_ = value;
}
inline void RingSizeRequirement::set_max_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_count(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.RingSizeRequirement.max_count)
}

// -------------------------------------------------------------------

// SubstructureRingSystemSpecification

// optional .SubstructureSearch.SubstructureRingBase base = 1;
inline bool SubstructureRingSystemSpecification::_internal_has_base() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || base_ != nullptr);
  return value;
}
inline bool SubstructureRingSystemSpecification::has_base() const {
  return _internal_has_base();
}
inline void SubstructureRingSystemSpecification::clear_base() {
  if (base_ != nullptr) base_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::SubstructureSearch::SubstructureRingBase& SubstructureRingSystemSpecification::_internal_base() const {
  const ::SubstructureSearch::SubstructureRingBase* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::SubstructureSearch::SubstructureRingBase&>(
      ::SubstructureSearch::_SubstructureRingBase_default_instance_);
}
inline const ::SubstructureSearch::SubstructureRingBase& SubstructureRingSystemSpecification::base() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.base)
  return _internal_base();
}
inline void SubstructureRingSystemSpecification::unsafe_arena_set_allocated_base(
    ::SubstructureSearch::SubstructureRingBase* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SubstructureSearch.SubstructureRingSystemSpecification.base)
}
inline ::SubstructureSearch::SubstructureRingBase* SubstructureRingSystemSpecification::release_base() {
  _has_bits_[0] &= ~0x00000001u;
  ::SubstructureSearch::SubstructureRingBase* temp = base_;
  base_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SubstructureSearch::SubstructureRingBase* SubstructureRingSystemSpecification::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.SubstructureRingSystemSpecification.base)
  _has_bits_[0] &= ~0x00000001u;
  ::SubstructureSearch::SubstructureRingBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::SubstructureSearch::SubstructureRingBase* SubstructureRingSystemSpecification::_internal_mutable_base() {
  _has_bits_[0] |= 0x00000001u;
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::SubstructureSearch::SubstructureRingBase>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::SubstructureSearch::SubstructureRingBase* SubstructureRingSystemSpecification::mutable_base() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureRingSystemSpecification.base)
  return _internal_mutable_base();
}
inline void SubstructureRingSystemSpecification::set_allocated_base(::SubstructureSearch::SubstructureRingBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.SubstructureRingSystemSpecification.base)
}

// repeated uint32 rings_in_system = 2;
inline int SubstructureRingSystemSpecification::_internal_rings_in_system_size() const {
  return rings_in_system_.size();
}
inline int SubstructureRingSystemSpecification::rings_in_system_size() const {
  return _internal_rings_in_system_size();
}
inline void SubstructureRingSystemSpecification::clear_rings_in_system() {
  rings_in_system_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_rings_in_system(int index) const {
  return rings_in_system_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::rings_in_system(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.rings_in_system)
  return _internal_rings_in_system(index);
}
inline void SubstructureRingSystemSpecification::set_rings_in_system(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  rings_in_system_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.rings_in_system)
}
inline void SubstructureRingSystemSpecification::_internal_add_rings_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  rings_in_system_.Add(value);
}
inline void SubstructureRingSystemSpecification::add_rings_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_rings_in_system(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingSystemSpecification.rings_in_system)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::_internal_rings_in_system() const {
  return rings_in_system_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::rings_in_system() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingSystemSpecification.rings_in_system)
  return _internal_rings_in_system();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::_internal_mutable_rings_in_system() {
  return &rings_in_system_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::mutable_rings_in_system() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingSystemSpecification.rings_in_system)
  return _internal_mutable_rings_in_system();
}

// optional uint32 min_rings_in_system = 3;
inline bool SubstructureRingSystemSpecification::_internal_has_min_rings_in_system() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_min_rings_in_system() const {
  return _internal_has_min_rings_in_system();
}
inline void SubstructureRingSystemSpecification::clear_min_rings_in_system() {
  min_rings_in_system_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_min_rings_in_system() const {
  return min_rings_in_system_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::min_rings_in_system() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.min_rings_in_system)
  return _internal_min_rings_in_system();
}
inline void SubstructureRingSystemSpecification::_internal_set_min_rings_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  min_rings_in_system_ = value;
}
inline void SubstructureRingSystemSpecification::set_min_rings_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_rings_in_system(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.min_rings_in_system)
}

// optional uint32 max_rings_in_system = 4;
inline bool SubstructureRingSystemSpecification::_internal_has_max_rings_in_system() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_max_rings_in_system() const {
  return _internal_has_max_rings_in_system();
}
inline void SubstructureRingSystemSpecification::clear_max_rings_in_system() {
  max_rings_in_system_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_max_rings_in_system() const {
  return max_rings_in_system_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::max_rings_in_system() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.max_rings_in_system)
  return _internal_max_rings_in_system();
}
inline void SubstructureRingSystemSpecification::_internal_set_max_rings_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_rings_in_system_ = value;
}
inline void SubstructureRingSystemSpecification::set_max_rings_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_rings_in_system(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.max_rings_in_system)
}

// repeated uint32 ring_sizes = 5;
inline int SubstructureRingSystemSpecification::_internal_ring_sizes_size() const {
  return ring_sizes_.size();
}
inline int SubstructureRingSystemSpecification::ring_sizes_size() const {
  return _internal_ring_sizes_size();
}
inline void SubstructureRingSystemSpecification::clear_ring_sizes() {
  ring_sizes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_ring_sizes(int index) const {
  return ring_sizes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::ring_sizes(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.ring_sizes)
  return _internal_ring_sizes(index);
}
inline void SubstructureRingSystemSpecification::set_ring_sizes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ring_sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.ring_sizes)
}
inline void SubstructureRingSystemSpecification::_internal_add_ring_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ring_sizes_.Add(value);
}
inline void SubstructureRingSystemSpecification::add_ring_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ring_sizes(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingSystemSpecification.ring_sizes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::_internal_ring_sizes() const {
  return ring_sizes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::ring_sizes() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingSystemSpecification.ring_sizes)
  return _internal_ring_sizes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::_internal_mutable_ring_sizes() {
  return &ring_sizes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::mutable_ring_sizes() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingSystemSpecification.ring_sizes)
  return _internal_mutable_ring_sizes();
}

// optional uint32 min_ring_sizes = 6;
inline bool SubstructureRingSystemSpecification::_internal_has_min_ring_sizes() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_min_ring_sizes() const {
  return _internal_has_min_ring_sizes();
}
inline void SubstructureRingSystemSpecification::clear_min_ring_sizes() {
  min_ring_sizes_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_min_ring_sizes() const {
  return min_ring_sizes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::min_ring_sizes() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.min_ring_sizes)
  return _internal_min_ring_sizes();
}
inline void SubstructureRingSystemSpecification::_internal_set_min_ring_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  min_ring_sizes_ = value;
}
inline void SubstructureRingSystemSpecification::set_min_ring_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_ring_sizes(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.min_ring_sizes)
}

// optional uint32 max_ring_sizes = 7;
inline bool SubstructureRingSystemSpecification::_internal_has_max_ring_sizes() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_max_ring_sizes() const {
  return _internal_has_max_ring_sizes();
}
inline void SubstructureRingSystemSpecification::clear_max_ring_sizes() {
  max_ring_sizes_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_max_ring_sizes() const {
  return max_ring_sizes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::max_ring_sizes() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.max_ring_sizes)
  return _internal_max_ring_sizes();
}
inline void SubstructureRingSystemSpecification::_internal_set_max_ring_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  max_ring_sizes_ = value;
}
inline void SubstructureRingSystemSpecification::set_max_ring_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_ring_sizes(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.max_ring_sizes)
}

// repeated .SubstructureSearch.RingSizeRequirement ring_size_count = 8;
inline int SubstructureRingSystemSpecification::_internal_ring_size_count_size() const {
  return ring_size_count_.size();
}
inline int SubstructureRingSystemSpecification::ring_size_count_size() const {
  return _internal_ring_size_count_size();
}
inline void SubstructureRingSystemSpecification::clear_ring_size_count() {
  ring_size_count_.Clear();
}
inline ::SubstructureSearch::RingSizeRequirement* SubstructureRingSystemSpecification::mutable_ring_size_count(int index) {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureRingSystemSpecification.ring_size_count)
  return ring_size_count_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::RingSizeRequirement >*
SubstructureRingSystemSpecification::mutable_ring_size_count() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingSystemSpecification.ring_size_count)
  return &ring_size_count_;
}
inline const ::SubstructureSearch::RingSizeRequirement& SubstructureRingSystemSpecification::_internal_ring_size_count(int index) const {
  return ring_size_count_.Get(index);
}
inline const ::SubstructureSearch::RingSizeRequirement& SubstructureRingSystemSpecification::ring_size_count(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.ring_size_count)
  return _internal_ring_size_count(index);
}
inline ::SubstructureSearch::RingSizeRequirement* SubstructureRingSystemSpecification::_internal_add_ring_size_count() {
  return ring_size_count_.Add();
}
inline ::SubstructureSearch::RingSizeRequirement* SubstructureRingSystemSpecification::add_ring_size_count() {
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingSystemSpecification.ring_size_count)
  return _internal_add_ring_size_count();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::RingSizeRequirement >&
SubstructureRingSystemSpecification::ring_size_count() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingSystemSpecification.ring_size_count)
  return ring_size_count_;
}

// repeated uint32 aromatic_ring_count = 11;
inline int SubstructureRingSystemSpecification::_internal_aromatic_ring_count_size() const {
  return aromatic_ring_count_.size();
}
inline int SubstructureRingSystemSpecification::aromatic_ring_count_size() const {
  return _internal_aromatic_ring_count_size();
}
inline void SubstructureRingSystemSpecification::clear_aromatic_ring_count() {
  aromatic_ring_count_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_aromatic_ring_count(int index) const {
  return aromatic_ring_count_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::aromatic_ring_count(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.aromatic_ring_count)
  return _internal_aromatic_ring_count(index);
}
inline void SubstructureRingSystemSpecification::set_aromatic_ring_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  aromatic_ring_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.aromatic_ring_count)
}
inline void SubstructureRingSystemSpecification::_internal_add_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  aromatic_ring_count_.Add(value);
}
inline void SubstructureRingSystemSpecification::add_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_aromatic_ring_count(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingSystemSpecification.aromatic_ring_count)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::_internal_aromatic_ring_count() const {
  return aromatic_ring_count_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::aromatic_ring_count() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingSystemSpecification.aromatic_ring_count)
  return _internal_aromatic_ring_count();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::_internal_mutable_aromatic_ring_count() {
  return &aromatic_ring_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::mutable_aromatic_ring_count() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingSystemSpecification.aromatic_ring_count)
  return _internal_mutable_aromatic_ring_count();
}

// optional uint32 min_aromatic_ring_count = 12;
inline bool SubstructureRingSystemSpecification::_internal_has_min_aromatic_ring_count() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_min_aromatic_ring_count() const {
  return _internal_has_min_aromatic_ring_count();
}
inline void SubstructureRingSystemSpecification::clear_min_aromatic_ring_count() {
  min_aromatic_ring_count_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_min_aromatic_ring_count() const {
  return min_aromatic_ring_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::min_aromatic_ring_count() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.min_aromatic_ring_count)
  return _internal_min_aromatic_ring_count();
}
inline void SubstructureRingSystemSpecification::_internal_set_min_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  min_aromatic_ring_count_ = value;
}
inline void SubstructureRingSystemSpecification::set_min_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_aromatic_ring_count(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.min_aromatic_ring_count)
}

// optional uint32 max_aromatic_ring_count = 13;
inline bool SubstructureRingSystemSpecification::_internal_has_max_aromatic_ring_count() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_max_aromatic_ring_count() const {
  return _internal_has_max_aromatic_ring_count();
}
inline void SubstructureRingSystemSpecification::clear_max_aromatic_ring_count() {
  max_aromatic_ring_count_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_max_aromatic_ring_count() const {
  return max_aromatic_ring_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::max_aromatic_ring_count() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.max_aromatic_ring_count)
  return _internal_max_aromatic_ring_count();
}
inline void SubstructureRingSystemSpecification::_internal_set_max_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  max_aromatic_ring_count_ = value;
}
inline void SubstructureRingSystemSpecification::set_max_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_aromatic_ring_count(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.max_aromatic_ring_count)
}

// repeated uint32 non_aromatic_ring_count = 14;
inline int SubstructureRingSystemSpecification::_internal_non_aromatic_ring_count_size() const {
  return non_aromatic_ring_count_.size();
}
inline int SubstructureRingSystemSpecification::non_aromatic_ring_count_size() const {
  return _internal_non_aromatic_ring_count_size();
}
inline void SubstructureRingSystemSpecification::clear_non_aromatic_ring_count() {
  non_aromatic_ring_count_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_non_aromatic_ring_count(int index) const {
  return non_aromatic_ring_count_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::non_aromatic_ring_count(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.non_aromatic_ring_count)
  return _internal_non_aromatic_ring_count(index);
}
inline void SubstructureRingSystemSpecification::set_non_aromatic_ring_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  non_aromatic_ring_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.non_aromatic_ring_count)
}
inline void SubstructureRingSystemSpecification::_internal_add_non_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  non_aromatic_ring_count_.Add(value);
}
inline void SubstructureRingSystemSpecification::add_non_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_non_aromatic_ring_count(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingSystemSpecification.non_aromatic_ring_count)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::_internal_non_aromatic_ring_count() const {
  return non_aromatic_ring_count_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::non_aromatic_ring_count() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingSystemSpecification.non_aromatic_ring_count)
  return _internal_non_aromatic_ring_count();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::_internal_mutable_non_aromatic_ring_count() {
  return &non_aromatic_ring_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::mutable_non_aromatic_ring_count() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingSystemSpecification.non_aromatic_ring_count)
  return _internal_mutable_non_aromatic_ring_count();
}

// optional uint32 min_non_aromatic_ring_count = 15;
inline bool SubstructureRingSystemSpecification::_internal_has_min_non_aromatic_ring_count() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_min_non_aromatic_ring_count() const {
  return _internal_has_min_non_aromatic_ring_count();
}
inline void SubstructureRingSystemSpecification::clear_min_non_aromatic_ring_count() {
  min_non_aromatic_ring_count_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_min_non_aromatic_ring_count() const {
  return min_non_aromatic_ring_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::min_non_aromatic_ring_count() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.min_non_aromatic_ring_count)
  return _internal_min_non_aromatic_ring_count();
}
inline void SubstructureRingSystemSpecification::_internal_set_min_non_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  min_non_aromatic_ring_count_ = value;
}
inline void SubstructureRingSystemSpecification::set_min_non_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_non_aromatic_ring_count(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.min_non_aromatic_ring_count)
}

// optional uint32 max_non_aromatic_ring_count = 16;
inline bool SubstructureRingSystemSpecification::_internal_has_max_non_aromatic_ring_count() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_max_non_aromatic_ring_count() const {
  return _internal_has_max_non_aromatic_ring_count();
}
inline void SubstructureRingSystemSpecification::clear_max_non_aromatic_ring_count() {
  max_non_aromatic_ring_count_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_max_non_aromatic_ring_count() const {
  return max_non_aromatic_ring_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::max_non_aromatic_ring_count() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.max_non_aromatic_ring_count)
  return _internal_max_non_aromatic_ring_count();
}
inline void SubstructureRingSystemSpecification::_internal_set_max_non_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  max_non_aromatic_ring_count_ = value;
}
inline void SubstructureRingSystemSpecification::set_max_non_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_non_aromatic_ring_count(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.max_non_aromatic_ring_count)
}

// repeated uint32 degree_of_fusion = 17;
inline int SubstructureRingSystemSpecification::_internal_degree_of_fusion_size() const {
  return degree_of_fusion_.size();
}
inline int SubstructureRingSystemSpecification::degree_of_fusion_size() const {
  return _internal_degree_of_fusion_size();
}
inline void SubstructureRingSystemSpecification::clear_degree_of_fusion() {
  degree_of_fusion_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_degree_of_fusion(int index) const {
  return degree_of_fusion_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::degree_of_fusion(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.degree_of_fusion)
  return _internal_degree_of_fusion(index);
}
inline void SubstructureRingSystemSpecification::set_degree_of_fusion(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  degree_of_fusion_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.degree_of_fusion)
}
inline void SubstructureRingSystemSpecification::_internal_add_degree_of_fusion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  degree_of_fusion_.Add(value);
}
inline void SubstructureRingSystemSpecification::add_degree_of_fusion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_degree_of_fusion(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingSystemSpecification.degree_of_fusion)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::_internal_degree_of_fusion() const {
  return degree_of_fusion_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::degree_of_fusion() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingSystemSpecification.degree_of_fusion)
  return _internal_degree_of_fusion();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::_internal_mutable_degree_of_fusion() {
  return &degree_of_fusion_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::mutable_degree_of_fusion() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingSystemSpecification.degree_of_fusion)
  return _internal_mutable_degree_of_fusion();
}

// optional uint32 min_degree_of_fusion = 18;
inline bool SubstructureRingSystemSpecification::_internal_has_min_degree_of_fusion() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_min_degree_of_fusion() const {
  return _internal_has_min_degree_of_fusion();
}
inline void SubstructureRingSystemSpecification::clear_min_degree_of_fusion() {
  min_degree_of_fusion_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_min_degree_of_fusion() const {
  return min_degree_of_fusion_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::min_degree_of_fusion() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.min_degree_of_fusion)
  return _internal_min_degree_of_fusion();
}
inline void SubstructureRingSystemSpecification::_internal_set_min_degree_of_fusion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  min_degree_of_fusion_ = value;
}
inline void SubstructureRingSystemSpecification::set_min_degree_of_fusion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_degree_of_fusion(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.min_degree_of_fusion)
}

// optional uint32 max_degree_of_fusion = 19;
inline bool SubstructureRingSystemSpecification::_internal_has_max_degree_of_fusion() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_max_degree_of_fusion() const {
  return _internal_has_max_degree_of_fusion();
}
inline void SubstructureRingSystemSpecification::clear_max_degree_of_fusion() {
  max_degree_of_fusion_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_max_degree_of_fusion() const {
  return max_degree_of_fusion_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::max_degree_of_fusion() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.max_degree_of_fusion)
  return _internal_max_degree_of_fusion();
}
inline void SubstructureRingSystemSpecification::_internal_set_max_degree_of_fusion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  max_degree_of_fusion_ = value;
}
inline void SubstructureRingSystemSpecification::set_max_degree_of_fusion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_degree_of_fusion(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.max_degree_of_fusion)
}

// repeated uint32 atoms_in_system = 20;
inline int SubstructureRingSystemSpecification::_internal_atoms_in_system_size() const {
  return atoms_in_system_.size();
}
inline int SubstructureRingSystemSpecification::atoms_in_system_size() const {
  return _internal_atoms_in_system_size();
}
inline void SubstructureRingSystemSpecification::clear_atoms_in_system() {
  atoms_in_system_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_atoms_in_system(int index) const {
  return atoms_in_system_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::atoms_in_system(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.atoms_in_system)
  return _internal_atoms_in_system(index);
}
inline void SubstructureRingSystemSpecification::set_atoms_in_system(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  atoms_in_system_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.atoms_in_system)
}
inline void SubstructureRingSystemSpecification::_internal_add_atoms_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  atoms_in_system_.Add(value);
}
inline void SubstructureRingSystemSpecification::add_atoms_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_atoms_in_system(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingSystemSpecification.atoms_in_system)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::_internal_atoms_in_system() const {
  return atoms_in_system_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::atoms_in_system() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingSystemSpecification.atoms_in_system)
  return _internal_atoms_in_system();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::_internal_mutable_atoms_in_system() {
  return &atoms_in_system_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::mutable_atoms_in_system() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingSystemSpecification.atoms_in_system)
  return _internal_mutable_atoms_in_system();
}

// optional uint32 min_atoms_in_system = 21;
inline bool SubstructureRingSystemSpecification::_internal_has_min_atoms_in_system() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_min_atoms_in_system() const {
  return _internal_has_min_atoms_in_system();
}
inline void SubstructureRingSystemSpecification::clear_min_atoms_in_system() {
  min_atoms_in_system_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_min_atoms_in_system() const {
  return min_atoms_in_system_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::min_atoms_in_system() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.min_atoms_in_system)
  return _internal_min_atoms_in_system();
}
inline void SubstructureRingSystemSpecification::_internal_set_min_atoms_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  min_atoms_in_system_ = value;
}
inline void SubstructureRingSystemSpecification::set_min_atoms_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_atoms_in_system(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.min_atoms_in_system)
}

// optional uint32 max_atoms_in_system = 22;
inline bool SubstructureRingSystemSpecification::_internal_has_max_atoms_in_system() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_max_atoms_in_system() const {
  return _internal_has_max_atoms_in_system();
}
inline void SubstructureRingSystemSpecification::clear_max_atoms_in_system() {
  max_atoms_in_system_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_max_atoms_in_system() const {
  return max_atoms_in_system_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::max_atoms_in_system() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.max_atoms_in_system)
  return _internal_max_atoms_in_system();
}
inline void SubstructureRingSystemSpecification::_internal_set_max_atoms_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  max_atoms_in_system_ = value;
}
inline void SubstructureRingSystemSpecification::set_max_atoms_in_system(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_atoms_in_system(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.max_atoms_in_system)
}

// repeated uint32 number_spinach_groups = 23;
inline int SubstructureRingSystemSpecification::_internal_number_spinach_groups_size() const {
  return number_spinach_groups_.size();
}
inline int SubstructureRingSystemSpecification::number_spinach_groups_size() const {
  return _internal_number_spinach_groups_size();
}
inline void SubstructureRingSystemSpecification::clear_number_spinach_groups() {
  number_spinach_groups_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_number_spinach_groups(int index) const {
  return number_spinach_groups_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::number_spinach_groups(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.number_spinach_groups)
  return _internal_number_spinach_groups(index);
}
inline void SubstructureRingSystemSpecification::set_number_spinach_groups(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  number_spinach_groups_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.number_spinach_groups)
}
inline void SubstructureRingSystemSpecification::_internal_add_number_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  number_spinach_groups_.Add(value);
}
inline void SubstructureRingSystemSpecification::add_number_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_number_spinach_groups(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingSystemSpecification.number_spinach_groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::_internal_number_spinach_groups() const {
  return number_spinach_groups_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::number_spinach_groups() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingSystemSpecification.number_spinach_groups)
  return _internal_number_spinach_groups();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::_internal_mutable_number_spinach_groups() {
  return &number_spinach_groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::mutable_number_spinach_groups() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingSystemSpecification.number_spinach_groups)
  return _internal_mutable_number_spinach_groups();
}

// optional uint32 min_number_spinach_groups = 24;
inline bool SubstructureRingSystemSpecification::_internal_has_min_number_spinach_groups() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_min_number_spinach_groups() const {
  return _internal_has_min_number_spinach_groups();
}
inline void SubstructureRingSystemSpecification::clear_min_number_spinach_groups() {
  min_number_spinach_groups_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_min_number_spinach_groups() const {
  return min_number_spinach_groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::min_number_spinach_groups() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.min_number_spinach_groups)
  return _internal_min_number_spinach_groups();
}
inline void SubstructureRingSystemSpecification::_internal_set_min_number_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  min_number_spinach_groups_ = value;
}
inline void SubstructureRingSystemSpecification::set_min_number_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_number_spinach_groups(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.min_number_spinach_groups)
}

// optional uint32 max_number_spinach_groups = 25;
inline bool SubstructureRingSystemSpecification::_internal_has_max_number_spinach_groups() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_max_number_spinach_groups() const {
  return _internal_has_max_number_spinach_groups();
}
inline void SubstructureRingSystemSpecification::clear_max_number_spinach_groups() {
  max_number_spinach_groups_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_max_number_spinach_groups() const {
  return max_number_spinach_groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::max_number_spinach_groups() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.max_number_spinach_groups)
  return _internal_max_number_spinach_groups();
}
inline void SubstructureRingSystemSpecification::_internal_set_max_number_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  max_number_spinach_groups_ = value;
}
inline void SubstructureRingSystemSpecification::set_max_number_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_number_spinach_groups(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.max_number_spinach_groups)
}

// repeated uint32 number_non_spinach_groups = 26;
inline int SubstructureRingSystemSpecification::_internal_number_non_spinach_groups_size() const {
  return number_non_spinach_groups_.size();
}
inline int SubstructureRingSystemSpecification::number_non_spinach_groups_size() const {
  return _internal_number_non_spinach_groups_size();
}
inline void SubstructureRingSystemSpecification::clear_number_non_spinach_groups() {
  number_non_spinach_groups_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_number_non_spinach_groups(int index) const {
  return number_non_spinach_groups_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::number_non_spinach_groups(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.number_non_spinach_groups)
  return _internal_number_non_spinach_groups(index);
}
inline void SubstructureRingSystemSpecification::set_number_non_spinach_groups(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  number_non_spinach_groups_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.number_non_spinach_groups)
}
inline void SubstructureRingSystemSpecification::_internal_add_number_non_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  number_non_spinach_groups_.Add(value);
}
inline void SubstructureRingSystemSpecification::add_number_non_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_number_non_spinach_groups(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingSystemSpecification.number_non_spinach_groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::_internal_number_non_spinach_groups() const {
  return number_non_spinach_groups_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::number_non_spinach_groups() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingSystemSpecification.number_non_spinach_groups)
  return _internal_number_non_spinach_groups();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::_internal_mutable_number_non_spinach_groups() {
  return &number_non_spinach_groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::mutable_number_non_spinach_groups() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingSystemSpecification.number_non_spinach_groups)
  return _internal_mutable_number_non_spinach_groups();
}

// optional uint32 min_number_non_spinach_groups = 27;
inline bool SubstructureRingSystemSpecification::_internal_has_min_number_non_spinach_groups() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_min_number_non_spinach_groups() const {
  return _internal_has_min_number_non_spinach_groups();
}
inline void SubstructureRingSystemSpecification::clear_min_number_non_spinach_groups() {
  min_number_non_spinach_groups_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_min_number_non_spinach_groups() const {
  return min_number_non_spinach_groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::min_number_non_spinach_groups() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.min_number_non_spinach_groups)
  return _internal_min_number_non_spinach_groups();
}
inline void SubstructureRingSystemSpecification::_internal_set_min_number_non_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  min_number_non_spinach_groups_ = value;
}
inline void SubstructureRingSystemSpecification::set_min_number_non_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_number_non_spinach_groups(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.min_number_non_spinach_groups)
}

// optional uint32 max_number_non_spinach_groups = 28;
inline bool SubstructureRingSystemSpecification::_internal_has_max_number_non_spinach_groups() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_max_number_non_spinach_groups() const {
  return _internal_has_max_number_non_spinach_groups();
}
inline void SubstructureRingSystemSpecification::clear_max_number_non_spinach_groups() {
  max_number_non_spinach_groups_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_max_number_non_spinach_groups() const {
  return max_number_non_spinach_groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::max_number_non_spinach_groups() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.max_number_non_spinach_groups)
  return _internal_max_number_non_spinach_groups();
}
inline void SubstructureRingSystemSpecification::_internal_set_max_number_non_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  max_number_non_spinach_groups_ = value;
}
inline void SubstructureRingSystemSpecification::set_max_number_non_spinach_groups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_number_non_spinach_groups(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.max_number_non_spinach_groups)
}

// repeated uint32 atoms_in_spinach_group = 29;
inline int SubstructureRingSystemSpecification::_internal_atoms_in_spinach_group_size() const {
  return atoms_in_spinach_group_.size();
}
inline int SubstructureRingSystemSpecification::atoms_in_spinach_group_size() const {
  return _internal_atoms_in_spinach_group_size();
}
inline void SubstructureRingSystemSpecification::clear_atoms_in_spinach_group() {
  atoms_in_spinach_group_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_atoms_in_spinach_group(int index) const {
  return atoms_in_spinach_group_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::atoms_in_spinach_group(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.atoms_in_spinach_group)
  return _internal_atoms_in_spinach_group(index);
}
inline void SubstructureRingSystemSpecification::set_atoms_in_spinach_group(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  atoms_in_spinach_group_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.atoms_in_spinach_group)
}
inline void SubstructureRingSystemSpecification::_internal_add_atoms_in_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  atoms_in_spinach_group_.Add(value);
}
inline void SubstructureRingSystemSpecification::add_atoms_in_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_atoms_in_spinach_group(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingSystemSpecification.atoms_in_spinach_group)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::_internal_atoms_in_spinach_group() const {
  return atoms_in_spinach_group_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::atoms_in_spinach_group() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingSystemSpecification.atoms_in_spinach_group)
  return _internal_atoms_in_spinach_group();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::_internal_mutable_atoms_in_spinach_group() {
  return &atoms_in_spinach_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::mutable_atoms_in_spinach_group() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingSystemSpecification.atoms_in_spinach_group)
  return _internal_mutable_atoms_in_spinach_group();
}

// optional uint32 min_atoms_in_spinach_group = 30;
inline bool SubstructureRingSystemSpecification::_internal_has_min_atoms_in_spinach_group() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_min_atoms_in_spinach_group() const {
  return _internal_has_min_atoms_in_spinach_group();
}
inline void SubstructureRingSystemSpecification::clear_min_atoms_in_spinach_group() {
  min_atoms_in_spinach_group_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_min_atoms_in_spinach_group() const {
  return min_atoms_in_spinach_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::min_atoms_in_spinach_group() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.min_atoms_in_spinach_group)
  return _internal_min_atoms_in_spinach_group();
}
inline void SubstructureRingSystemSpecification::_internal_set_min_atoms_in_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  min_atoms_in_spinach_group_ = value;
}
inline void SubstructureRingSystemSpecification::set_min_atoms_in_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_atoms_in_spinach_group(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.min_atoms_in_spinach_group)
}

// optional uint32 max_atoms_in_spinach_group = 31;
inline bool SubstructureRingSystemSpecification::_internal_has_max_atoms_in_spinach_group() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_max_atoms_in_spinach_group() const {
  return _internal_has_max_atoms_in_spinach_group();
}
inline void SubstructureRingSystemSpecification::clear_max_atoms_in_spinach_group() {
  max_atoms_in_spinach_group_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_max_atoms_in_spinach_group() const {
  return max_atoms_in_spinach_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::max_atoms_in_spinach_group() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.max_atoms_in_spinach_group)
  return _internal_max_atoms_in_spinach_group();
}
inline void SubstructureRingSystemSpecification::_internal_set_max_atoms_in_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  max_atoms_in_spinach_group_ = value;
}
inline void SubstructureRingSystemSpecification::set_max_atoms_in_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_atoms_in_spinach_group(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.max_atoms_in_spinach_group)
}

// repeated uint32 length_of_spinach_group = 32;
inline int SubstructureRingSystemSpecification::_internal_length_of_spinach_group_size() const {
  return length_of_spinach_group_.size();
}
inline int SubstructureRingSystemSpecification::length_of_spinach_group_size() const {
  return _internal_length_of_spinach_group_size();
}
inline void SubstructureRingSystemSpecification::clear_length_of_spinach_group() {
  length_of_spinach_group_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_length_of_spinach_group(int index) const {
  return length_of_spinach_group_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::length_of_spinach_group(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.length_of_spinach_group)
  return _internal_length_of_spinach_group(index);
}
inline void SubstructureRingSystemSpecification::set_length_of_spinach_group(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  length_of_spinach_group_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.length_of_spinach_group)
}
inline void SubstructureRingSystemSpecification::_internal_add_length_of_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  length_of_spinach_group_.Add(value);
}
inline void SubstructureRingSystemSpecification::add_length_of_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_length_of_spinach_group(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingSystemSpecification.length_of_spinach_group)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::_internal_length_of_spinach_group() const {
  return length_of_spinach_group_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::length_of_spinach_group() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingSystemSpecification.length_of_spinach_group)
  return _internal_length_of_spinach_group();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::_internal_mutable_length_of_spinach_group() {
  return &length_of_spinach_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::mutable_length_of_spinach_group() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingSystemSpecification.length_of_spinach_group)
  return _internal_mutable_length_of_spinach_group();
}

// optional uint32 min_length_of_spinach_group = 33;
inline bool SubstructureRingSystemSpecification::_internal_has_min_length_of_spinach_group() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_min_length_of_spinach_group() const {
  return _internal_has_min_length_of_spinach_group();
}
inline void SubstructureRingSystemSpecification::clear_min_length_of_spinach_group() {
  min_length_of_spinach_group_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_min_length_of_spinach_group() const {
  return min_length_of_spinach_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::min_length_of_spinach_group() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.min_length_of_spinach_group)
  return _internal_min_length_of_spinach_group();
}
inline void SubstructureRingSystemSpecification::_internal_set_min_length_of_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  min_length_of_spinach_group_ = value;
}
inline void SubstructureRingSystemSpecification::set_min_length_of_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_length_of_spinach_group(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.min_length_of_spinach_group)
}

// optional uint32 max_length_of_spinach_group = 34;
inline bool SubstructureRingSystemSpecification::_internal_has_max_length_of_spinach_group() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_max_length_of_spinach_group() const {
  return _internal_has_max_length_of_spinach_group();
}
inline void SubstructureRingSystemSpecification::clear_max_length_of_spinach_group() {
  max_length_of_spinach_group_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_max_length_of_spinach_group() const {
  return max_length_of_spinach_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::max_length_of_spinach_group() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.max_length_of_spinach_group)
  return _internal_max_length_of_spinach_group();
}
inline void SubstructureRingSystemSpecification::_internal_set_max_length_of_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  max_length_of_spinach_group_ = value;
}
inline void SubstructureRingSystemSpecification::set_max_length_of_spinach_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_length_of_spinach_group(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.max_length_of_spinach_group)
}

// repeated uint32 distance_to_another_ring = 35;
inline int SubstructureRingSystemSpecification::_internal_distance_to_another_ring_size() const {
  return distance_to_another_ring_.size();
}
inline int SubstructureRingSystemSpecification::distance_to_another_ring_size() const {
  return _internal_distance_to_another_ring_size();
}
inline void SubstructureRingSystemSpecification::clear_distance_to_another_ring() {
  distance_to_another_ring_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_distance_to_another_ring(int index) const {
  return distance_to_another_ring_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::distance_to_another_ring(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.distance_to_another_ring)
  return _internal_distance_to_another_ring(index);
}
inline void SubstructureRingSystemSpecification::set_distance_to_another_ring(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  distance_to_another_ring_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.distance_to_another_ring)
}
inline void SubstructureRingSystemSpecification::_internal_add_distance_to_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  distance_to_another_ring_.Add(value);
}
inline void SubstructureRingSystemSpecification::add_distance_to_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_distance_to_another_ring(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingSystemSpecification.distance_to_another_ring)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::_internal_distance_to_another_ring() const {
  return distance_to_another_ring_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::distance_to_another_ring() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingSystemSpecification.distance_to_another_ring)
  return _internal_distance_to_another_ring();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::_internal_mutable_distance_to_another_ring() {
  return &distance_to_another_ring_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::mutable_distance_to_another_ring() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingSystemSpecification.distance_to_another_ring)
  return _internal_mutable_distance_to_another_ring();
}

// optional uint32 min_distance_to_another_ring = 36;
inline bool SubstructureRingSystemSpecification::_internal_has_min_distance_to_another_ring() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_min_distance_to_another_ring() const {
  return _internal_has_min_distance_to_another_ring();
}
inline void SubstructureRingSystemSpecification::clear_min_distance_to_another_ring() {
  min_distance_to_another_ring_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_min_distance_to_another_ring() const {
  return min_distance_to_another_ring_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::min_distance_to_another_ring() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.min_distance_to_another_ring)
  return _internal_min_distance_to_another_ring();
}
inline void SubstructureRingSystemSpecification::_internal_set_min_distance_to_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  min_distance_to_another_ring_ = value;
}
inline void SubstructureRingSystemSpecification::set_min_distance_to_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_distance_to_another_ring(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.min_distance_to_another_ring)
}

// optional uint32 max_distance_to_another_ring = 37;
inline bool SubstructureRingSystemSpecification::_internal_has_max_distance_to_another_ring() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_max_distance_to_another_ring() const {
  return _internal_has_max_distance_to_another_ring();
}
inline void SubstructureRingSystemSpecification::clear_max_distance_to_another_ring() {
  max_distance_to_another_ring_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_max_distance_to_another_ring() const {
  return max_distance_to_another_ring_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::max_distance_to_another_ring() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.max_distance_to_another_ring)
  return _internal_max_distance_to_another_ring();
}
inline void SubstructureRingSystemSpecification::_internal_set_max_distance_to_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  max_distance_to_another_ring_ = value;
}
inline void SubstructureRingSystemSpecification::set_max_distance_to_another_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_distance_to_another_ring(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.max_distance_to_another_ring)
}

// repeated uint32 strongly_fused_ring_count = 38;
inline int SubstructureRingSystemSpecification::_internal_strongly_fused_ring_count_size() const {
  return strongly_fused_ring_count_.size();
}
inline int SubstructureRingSystemSpecification::strongly_fused_ring_count_size() const {
  return _internal_strongly_fused_ring_count_size();
}
inline void SubstructureRingSystemSpecification::clear_strongly_fused_ring_count() {
  strongly_fused_ring_count_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_strongly_fused_ring_count(int index) const {
  return strongly_fused_ring_count_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::strongly_fused_ring_count(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.strongly_fused_ring_count)
  return _internal_strongly_fused_ring_count(index);
}
inline void SubstructureRingSystemSpecification::set_strongly_fused_ring_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  strongly_fused_ring_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.strongly_fused_ring_count)
}
inline void SubstructureRingSystemSpecification::_internal_add_strongly_fused_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  strongly_fused_ring_count_.Add(value);
}
inline void SubstructureRingSystemSpecification::add_strongly_fused_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_strongly_fused_ring_count(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureRingSystemSpecification.strongly_fused_ring_count)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::_internal_strongly_fused_ring_count() const {
  return strongly_fused_ring_count_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureRingSystemSpecification::strongly_fused_ring_count() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureRingSystemSpecification.strongly_fused_ring_count)
  return _internal_strongly_fused_ring_count();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::_internal_mutable_strongly_fused_ring_count() {
  return &strongly_fused_ring_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureRingSystemSpecification::mutable_strongly_fused_ring_count() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureRingSystemSpecification.strongly_fused_ring_count)
  return _internal_mutable_strongly_fused_ring_count();
}

// optional uint32 min_strongly_fused_ring_count = 39;
inline bool SubstructureRingSystemSpecification::_internal_has_min_strongly_fused_ring_count() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_min_strongly_fused_ring_count() const {
  return _internal_has_min_strongly_fused_ring_count();
}
inline void SubstructureRingSystemSpecification::clear_min_strongly_fused_ring_count() {
  min_strongly_fused_ring_count_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_min_strongly_fused_ring_count() const {
  return min_strongly_fused_ring_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::min_strongly_fused_ring_count() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.min_strongly_fused_ring_count)
  return _internal_min_strongly_fused_ring_count();
}
inline void SubstructureRingSystemSpecification::_internal_set_min_strongly_fused_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  min_strongly_fused_ring_count_ = value;
}
inline void SubstructureRingSystemSpecification::set_min_strongly_fused_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_strongly_fused_ring_count(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.min_strongly_fused_ring_count)
}

// optional uint32 max_strongly_fused_ring_count = 40;
inline bool SubstructureRingSystemSpecification::_internal_has_max_strongly_fused_ring_count() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool SubstructureRingSystemSpecification::has_max_strongly_fused_ring_count() const {
  return _internal_has_max_strongly_fused_ring_count();
}
inline void SubstructureRingSystemSpecification::clear_max_strongly_fused_ring_count() {
  max_strongly_fused_ring_count_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::_internal_max_strongly_fused_ring_count() const {
  return max_strongly_fused_ring_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureRingSystemSpecification::max_strongly_fused_ring_count() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureRingSystemSpecification.max_strongly_fused_ring_count)
  return _internal_max_strongly_fused_ring_count();
}
inline void SubstructureRingSystemSpecification::_internal_set_max_strongly_fused_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  max_strongly_fused_ring_count_ = value;
}
inline void SubstructureRingSystemSpecification::set_max_strongly_fused_ring_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_strongly_fused_ring_count(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureRingSystemSpecification.max_strongly_fused_ring_count)
}

// -------------------------------------------------------------------

// SubstructureAtomSpecifier

// repeated string atomic_symbol = 1;
inline int SubstructureAtomSpecifier::_internal_atomic_symbol_size() const {
  return atomic_symbol_.size();
}
inline int SubstructureAtomSpecifier::atomic_symbol_size() const {
  return _internal_atomic_symbol_size();
}
inline void SubstructureAtomSpecifier::clear_atomic_symbol() {
  atomic_symbol_.Clear();
}
inline std::string* SubstructureAtomSpecifier::add_atomic_symbol() {
  // @@protoc_insertion_point(field_add_mutable:SubstructureSearch.SubstructureAtomSpecifier.atomic_symbol)
  return _internal_add_atomic_symbol();
}
inline const std::string& SubstructureAtomSpecifier::_internal_atomic_symbol(int index) const {
  return atomic_symbol_.Get(index);
}
inline const std::string& SubstructureAtomSpecifier::atomic_symbol(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.atomic_symbol)
  return _internal_atomic_symbol(index);
}
inline std::string* SubstructureAtomSpecifier::mutable_atomic_symbol(int index) {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureAtomSpecifier.atomic_symbol)
  return atomic_symbol_.Mutable(index);
}
inline void SubstructureAtomSpecifier::set_atomic_symbol(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.atomic_symbol)
  atomic_symbol_.Mutable(index)->assign(value);
}
inline void SubstructureAtomSpecifier::set_atomic_symbol(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.atomic_symbol)
  atomic_symbol_.Mutable(index)->assign(std::move(value));
}
inline void SubstructureAtomSpecifier::set_atomic_symbol(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  atomic_symbol_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.SubstructureAtomSpecifier.atomic_symbol)
}
inline void SubstructureAtomSpecifier::set_atomic_symbol(int index, const char* value, size_t size) {
  atomic_symbol_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.SubstructureAtomSpecifier.atomic_symbol)
}
inline std::string* SubstructureAtomSpecifier::_internal_add_atomic_symbol() {
  return atomic_symbol_.Add();
}
inline void SubstructureAtomSpecifier::add_atomic_symbol(const std::string& value) {
  atomic_symbol_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.atomic_symbol)
}
inline void SubstructureAtomSpecifier::add_atomic_symbol(std::string&& value) {
  atomic_symbol_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.atomic_symbol)
}
inline void SubstructureAtomSpecifier::add_atomic_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  atomic_symbol_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SubstructureSearch.SubstructureAtomSpecifier.atomic_symbol)
}
inline void SubstructureAtomSpecifier::add_atomic_symbol(const char* value, size_t size) {
  atomic_symbol_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SubstructureSearch.SubstructureAtomSpecifier.atomic_symbol)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SubstructureAtomSpecifier::atomic_symbol() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomSpecifier.atomic_symbol)
  return atomic_symbol_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SubstructureAtomSpecifier::mutable_atomic_symbol() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomSpecifier.atomic_symbol)
  return &atomic_symbol_;
}

// repeated uint32 atomic_number = 2;
inline int SubstructureAtomSpecifier::_internal_atomic_number_size() const {
  return atomic_number_.size();
}
inline int SubstructureAtomSpecifier::atomic_number_size() const {
  return _internal_atomic_number_size();
}
inline void SubstructureAtomSpecifier::clear_atomic_number() {
  atomic_number_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_atomic_number(int index) const {
  return atomic_number_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::atomic_number(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.atomic_number)
  return _internal_atomic_number(index);
}
inline void SubstructureAtomSpecifier::set_atomic_number(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  atomic_number_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.atomic_number)
}
inline void SubstructureAtomSpecifier::_internal_add_atomic_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  atomic_number_.Add(value);
}
inline void SubstructureAtomSpecifier::add_atomic_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_atomic_number(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.atomic_number)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::_internal_atomic_number() const {
  return atomic_number_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::atomic_number() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomSpecifier.atomic_number)
  return _internal_atomic_number();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::_internal_mutable_atomic_number() {
  return &atomic_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::mutable_atomic_number() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomSpecifier.atomic_number)
  return _internal_mutable_atomic_number();
}

// repeated uint32 ncon = 3;
inline int SubstructureAtomSpecifier::_internal_ncon_size() const {
  return ncon_.size();
}
inline int SubstructureAtomSpecifier::ncon_size() const {
  return _internal_ncon_size();
}
inline void SubstructureAtomSpecifier::clear_ncon() {
  ncon_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_ncon(int index) const {
  return ncon_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::ncon(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.ncon)
  return _internal_ncon(index);
}
inline void SubstructureAtomSpecifier::set_ncon(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ncon_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.ncon)
}
inline void SubstructureAtomSpecifier::_internal_add_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ncon_.Add(value);
}
inline void SubstructureAtomSpecifier::add_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ncon(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.ncon)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::_internal_ncon() const {
  return ncon_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::ncon() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomSpecifier.ncon)
  return _internal_ncon();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::_internal_mutable_ncon() {
  return &ncon_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::mutable_ncon() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomSpecifier.ncon)
  return _internal_mutable_ncon();
}

// optional uint32 min_ncon = 4;
inline bool SubstructureAtomSpecifier::_internal_has_min_ncon() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_min_ncon() const {
  return _internal_has_min_ncon();
}
inline void SubstructureAtomSpecifier::clear_min_ncon() {
  min_ncon_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_min_ncon() const {
  return min_ncon_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::min_ncon() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.min_ncon)
  return _internal_min_ncon();
}
inline void SubstructureAtomSpecifier::_internal_set_min_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  min_ncon_ = value;
}
inline void SubstructureAtomSpecifier::set_min_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_ncon(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.min_ncon)
}

// optional uint32 max_ncon = 5;
inline bool SubstructureAtomSpecifier::_internal_has_max_ncon() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_max_ncon() const {
  return _internal_has_max_ncon();
}
inline void SubstructureAtomSpecifier::clear_max_ncon() {
  max_ncon_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_max_ncon() const {
  return max_ncon_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::max_ncon() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.max_ncon)
  return _internal_max_ncon();
}
inline void SubstructureAtomSpecifier::_internal_set_max_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  max_ncon_ = value;
}
inline void SubstructureAtomSpecifier::set_max_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_ncon(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.max_ncon)
}

// repeated uint32 ncon2 = 6;
inline int SubstructureAtomSpecifier::_internal_ncon2_size() const {
  return ncon2_.size();
}
inline int SubstructureAtomSpecifier::ncon2_size() const {
  return _internal_ncon2_size();
}
inline void SubstructureAtomSpecifier::clear_ncon2() {
  ncon2_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_ncon2(int index) const {
  return ncon2_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::ncon2(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.ncon2)
  return _internal_ncon2(index);
}
inline void SubstructureAtomSpecifier::set_ncon2(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ncon2_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.ncon2)
}
inline void SubstructureAtomSpecifier::_internal_add_ncon2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ncon2_.Add(value);
}
inline void SubstructureAtomSpecifier::add_ncon2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ncon2(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.ncon2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::_internal_ncon2() const {
  return ncon2_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::ncon2() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomSpecifier.ncon2)
  return _internal_ncon2();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::_internal_mutable_ncon2() {
  return &ncon2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::mutable_ncon2() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomSpecifier.ncon2)
  return _internal_mutable_ncon2();
}

// optional uint32 min_ncon2 = 7;
inline bool SubstructureAtomSpecifier::_internal_has_min_ncon2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_min_ncon2() const {
  return _internal_has_min_ncon2();
}
inline void SubstructureAtomSpecifier::clear_min_ncon2() {
  min_ncon2_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_min_ncon2() const {
  return min_ncon2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::min_ncon2() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.min_ncon2)
  return _internal_min_ncon2();
}
inline void SubstructureAtomSpecifier::_internal_set_min_ncon2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  min_ncon2_ = value;
}
inline void SubstructureAtomSpecifier::set_min_ncon2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_ncon2(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.min_ncon2)
}

// optional uint32 max_ncon2 = 8;
inline bool SubstructureAtomSpecifier::_internal_has_max_ncon2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_max_ncon2() const {
  return _internal_has_max_ncon2();
}
inline void SubstructureAtomSpecifier::clear_max_ncon2() {
  max_ncon2_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_max_ncon2() const {
  return max_ncon2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::max_ncon2() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.max_ncon2)
  return _internal_max_ncon2();
}
inline void SubstructureAtomSpecifier::_internal_set_max_ncon2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  max_ncon2_ = value;
}
inline void SubstructureAtomSpecifier::set_max_ncon2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_ncon2(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.max_ncon2)
}

// repeated uint32 nbonds = 9;
inline int SubstructureAtomSpecifier::_internal_nbonds_size() const {
  return nbonds_.size();
}
inline int SubstructureAtomSpecifier::nbonds_size() const {
  return _internal_nbonds_size();
}
inline void SubstructureAtomSpecifier::clear_nbonds() {
  nbonds_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_nbonds(int index) const {
  return nbonds_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::nbonds(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.nbonds)
  return _internal_nbonds(index);
}
inline void SubstructureAtomSpecifier::set_nbonds(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  nbonds_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.nbonds)
}
inline void SubstructureAtomSpecifier::_internal_add_nbonds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  nbonds_.Add(value);
}
inline void SubstructureAtomSpecifier::add_nbonds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_nbonds(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.nbonds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::_internal_nbonds() const {
  return nbonds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::nbonds() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomSpecifier.nbonds)
  return _internal_nbonds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::_internal_mutable_nbonds() {
  return &nbonds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::mutable_nbonds() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomSpecifier.nbonds)
  return _internal_mutable_nbonds();
}

// optional uint32 min_nbonds = 10;
inline bool SubstructureAtomSpecifier::_internal_has_min_nbonds() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_min_nbonds() const {
  return _internal_has_min_nbonds();
}
inline void SubstructureAtomSpecifier::clear_min_nbonds() {
  min_nbonds_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_min_nbonds() const {
  return min_nbonds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::min_nbonds() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.min_nbonds)
  return _internal_min_nbonds();
}
inline void SubstructureAtomSpecifier::_internal_set_min_nbonds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  min_nbonds_ = value;
}
inline void SubstructureAtomSpecifier::set_min_nbonds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_nbonds(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.min_nbonds)
}

// optional uint32 max_nbonds = 11;
inline bool SubstructureAtomSpecifier::_internal_has_max_nbonds() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_max_nbonds() const {
  return _internal_has_max_nbonds();
}
inline void SubstructureAtomSpecifier::clear_max_nbonds() {
  max_nbonds_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_max_nbonds() const {
  return max_nbonds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::max_nbonds() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.max_nbonds)
  return _internal_max_nbonds();
}
inline void SubstructureAtomSpecifier::_internal_set_max_nbonds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  max_nbonds_ = value;
}
inline void SubstructureAtomSpecifier::set_max_nbonds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_nbonds(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.max_nbonds)
}

// repeated int32 formal_charge = 12;
inline int SubstructureAtomSpecifier::_internal_formal_charge_size() const {
  return formal_charge_.size();
}
inline int SubstructureAtomSpecifier::formal_charge_size() const {
  return _internal_formal_charge_size();
}
inline void SubstructureAtomSpecifier::clear_formal_charge() {
  formal_charge_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubstructureAtomSpecifier::_internal_formal_charge(int index) const {
  return formal_charge_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubstructureAtomSpecifier::formal_charge(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.formal_charge)
  return _internal_formal_charge(index);
}
inline void SubstructureAtomSpecifier::set_formal_charge(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  formal_charge_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.formal_charge)
}
inline void SubstructureAtomSpecifier::_internal_add_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  formal_charge_.Add(value);
}
inline void SubstructureAtomSpecifier::add_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_formal_charge(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.formal_charge)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SubstructureAtomSpecifier::_internal_formal_charge() const {
  return formal_charge_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SubstructureAtomSpecifier::formal_charge() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomSpecifier.formal_charge)
  return _internal_formal_charge();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SubstructureAtomSpecifier::_internal_mutable_formal_charge() {
  return &formal_charge_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SubstructureAtomSpecifier::mutable_formal_charge() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomSpecifier.formal_charge)
  return _internal_mutable_formal_charge();
}

// optional int32 min_formal_charge = 13;
inline bool SubstructureAtomSpecifier::_internal_has_min_formal_charge() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_min_formal_charge() const {
  return _internal_has_min_formal_charge();
}
inline void SubstructureAtomSpecifier::clear_min_formal_charge() {
  min_formal_charge_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubstructureAtomSpecifier::_internal_min_formal_charge() const {
  return min_formal_charge_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubstructureAtomSpecifier::min_formal_charge() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.min_formal_charge)
  return _internal_min_formal_charge();
}
inline void SubstructureAtomSpecifier::_internal_set_min_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  min_formal_charge_ = value;
}
inline void SubstructureAtomSpecifier::set_min_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_formal_charge(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.min_formal_charge)
}

// optional int32 max_formal_charge = 14;
inline bool SubstructureAtomSpecifier::_internal_has_max_formal_charge() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_max_formal_charge() const {
  return _internal_has_max_formal_charge();
}
inline void SubstructureAtomSpecifier::clear_max_formal_charge() {
  max_formal_charge_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubstructureAtomSpecifier::_internal_max_formal_charge() const {
  return max_formal_charge_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubstructureAtomSpecifier::max_formal_charge() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.max_formal_charge)
  return _internal_max_formal_charge();
}
inline void SubstructureAtomSpecifier::_internal_set_max_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  max_formal_charge_ = value;
}
inline void SubstructureAtomSpecifier::set_max_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_formal_charge(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.max_formal_charge)
}

// repeated uint32 nrings = 15;
inline int SubstructureAtomSpecifier::_internal_nrings_size() const {
  return nrings_.size();
}
inline int SubstructureAtomSpecifier::nrings_size() const {
  return _internal_nrings_size();
}
inline void SubstructureAtomSpecifier::clear_nrings() {
  nrings_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_nrings(int index) const {
  return nrings_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::nrings(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.nrings)
  return _internal_nrings(index);
}
inline void SubstructureAtomSpecifier::set_nrings(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  nrings_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.nrings)
}
inline void SubstructureAtomSpecifier::_internal_add_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  nrings_.Add(value);
}
inline void SubstructureAtomSpecifier::add_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_nrings(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.nrings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::_internal_nrings() const {
  return nrings_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::nrings() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomSpecifier.nrings)
  return _internal_nrings();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::_internal_mutable_nrings() {
  return &nrings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::mutable_nrings() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomSpecifier.nrings)
  return _internal_mutable_nrings();
}

// optional uint32 min_nrings = 16;
inline bool SubstructureAtomSpecifier::_internal_has_min_nrings() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_min_nrings() const {
  return _internal_has_min_nrings();
}
inline void SubstructureAtomSpecifier::clear_min_nrings() {
  min_nrings_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_min_nrings() const {
  return min_nrings_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::min_nrings() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.min_nrings)
  return _internal_min_nrings();
}
inline void SubstructureAtomSpecifier::_internal_set_min_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  min_nrings_ = value;
}
inline void SubstructureAtomSpecifier::set_min_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_nrings(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.min_nrings)
}

// optional uint32 max_nrings = 17;
inline bool SubstructureAtomSpecifier::_internal_has_max_nrings() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_max_nrings() const {
  return _internal_has_max_nrings();
}
inline void SubstructureAtomSpecifier::clear_max_nrings() {
  max_nrings_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_max_nrings() const {
  return max_nrings_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::max_nrings() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.max_nrings)
  return _internal_max_nrings();
}
inline void SubstructureAtomSpecifier::_internal_set_max_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  max_nrings_ = value;
}
inline void SubstructureAtomSpecifier::set_max_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_nrings(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.max_nrings)
}

// repeated uint32 ring_bond_count = 18;
inline int SubstructureAtomSpecifier::_internal_ring_bond_count_size() const {
  return ring_bond_count_.size();
}
inline int SubstructureAtomSpecifier::ring_bond_count_size() const {
  return _internal_ring_bond_count_size();
}
inline void SubstructureAtomSpecifier::clear_ring_bond_count() {
  ring_bond_count_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_ring_bond_count(int index) const {
  return ring_bond_count_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::ring_bond_count(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.ring_bond_count)
  return _internal_ring_bond_count(index);
}
inline void SubstructureAtomSpecifier::set_ring_bond_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ring_bond_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.ring_bond_count)
}
inline void SubstructureAtomSpecifier::_internal_add_ring_bond_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ring_bond_count_.Add(value);
}
inline void SubstructureAtomSpecifier::add_ring_bond_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ring_bond_count(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.ring_bond_count)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::_internal_ring_bond_count() const {
  return ring_bond_count_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::ring_bond_count() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomSpecifier.ring_bond_count)
  return _internal_ring_bond_count();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::_internal_mutable_ring_bond_count() {
  return &ring_bond_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::mutable_ring_bond_count() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomSpecifier.ring_bond_count)
  return _internal_mutable_ring_bond_count();
}

// optional uint32 min_ring_bond_count = 19;
inline bool SubstructureAtomSpecifier::_internal_has_min_ring_bond_count() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_min_ring_bond_count() const {
  return _internal_has_min_ring_bond_count();
}
inline void SubstructureAtomSpecifier::clear_min_ring_bond_count() {
  min_ring_bond_count_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_min_ring_bond_count() const {
  return min_ring_bond_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::min_ring_bond_count() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.min_ring_bond_count)
  return _internal_min_ring_bond_count();
}
inline void SubstructureAtomSpecifier::_internal_set_min_ring_bond_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  min_ring_bond_count_ = value;
}
inline void SubstructureAtomSpecifier::set_min_ring_bond_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_ring_bond_count(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.min_ring_bond_count)
}

// optional uint32 max_ring_bond_count = 20;
inline bool SubstructureAtomSpecifier::_internal_has_max_ring_bond_count() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_max_ring_bond_count() const {
  return _internal_has_max_ring_bond_count();
}
inline void SubstructureAtomSpecifier::clear_max_ring_bond_count() {
  max_ring_bond_count_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_max_ring_bond_count() const {
  return max_ring_bond_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::max_ring_bond_count() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.max_ring_bond_count)
  return _internal_max_ring_bond_count();
}
inline void SubstructureAtomSpecifier::_internal_set_max_ring_bond_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  max_ring_bond_count_ = value;
}
inline void SubstructureAtomSpecifier::set_max_ring_bond_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_ring_bond_count(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.max_ring_bond_count)
}

// repeated uint32 ring_size = 21;
inline int SubstructureAtomSpecifier::_internal_ring_size_size() const {
  return ring_size_.size();
}
inline int SubstructureAtomSpecifier::ring_size_size() const {
  return _internal_ring_size_size();
}
inline void SubstructureAtomSpecifier::clear_ring_size() {
  ring_size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_ring_size(int index) const {
  return ring_size_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::ring_size(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.ring_size)
  return _internal_ring_size(index);
}
inline void SubstructureAtomSpecifier::set_ring_size(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ring_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.ring_size)
}
inline void SubstructureAtomSpecifier::_internal_add_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ring_size_.Add(value);
}
inline void SubstructureAtomSpecifier::add_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ring_size(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.ring_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::_internal_ring_size() const {
  return ring_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::ring_size() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomSpecifier.ring_size)
  return _internal_ring_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::_internal_mutable_ring_size() {
  return &ring_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::mutable_ring_size() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomSpecifier.ring_size)
  return _internal_mutable_ring_size();
}

// optional uint32 min_ring_size = 22;
inline bool SubstructureAtomSpecifier::_internal_has_min_ring_size() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_min_ring_size() const {
  return _internal_has_min_ring_size();
}
inline void SubstructureAtomSpecifier::clear_min_ring_size() {
  min_ring_size_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_min_ring_size() const {
  return min_ring_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::min_ring_size() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.min_ring_size)
  return _internal_min_ring_size();
}
inline void SubstructureAtomSpecifier::_internal_set_min_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  min_ring_size_ = value;
}
inline void SubstructureAtomSpecifier::set_min_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_ring_size(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.min_ring_size)
}

// optional uint32 max_ring_size = 23;
inline bool SubstructureAtomSpecifier::_internal_has_max_ring_size() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_max_ring_size() const {
  return _internal_has_max_ring_size();
}
inline void SubstructureAtomSpecifier::clear_max_ring_size() {
  max_ring_size_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_max_ring_size() const {
  return max_ring_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::max_ring_size() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.max_ring_size)
  return _internal_max_ring_size();
}
inline void SubstructureAtomSpecifier::_internal_set_max_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  max_ring_size_ = value;
}
inline void SubstructureAtomSpecifier::set_max_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_ring_size(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.max_ring_size)
}

// repeated uint32 hcount = 24;
inline int SubstructureAtomSpecifier::_internal_hcount_size() const {
  return hcount_.size();
}
inline int SubstructureAtomSpecifier::hcount_size() const {
  return _internal_hcount_size();
}
inline void SubstructureAtomSpecifier::clear_hcount() {
  hcount_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_hcount(int index) const {
  return hcount_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::hcount(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.hcount)
  return _internal_hcount(index);
}
inline void SubstructureAtomSpecifier::set_hcount(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  hcount_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.hcount)
}
inline void SubstructureAtomSpecifier::_internal_add_hcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  hcount_.Add(value);
}
inline void SubstructureAtomSpecifier::add_hcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_hcount(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.hcount)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::_internal_hcount() const {
  return hcount_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::hcount() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomSpecifier.hcount)
  return _internal_hcount();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::_internal_mutable_hcount() {
  return &hcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::mutable_hcount() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomSpecifier.hcount)
  return _internal_mutable_hcount();
}

// optional uint32 min_hcount = 25;
inline bool SubstructureAtomSpecifier::_internal_has_min_hcount() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_min_hcount() const {
  return _internal_has_min_hcount();
}
inline void SubstructureAtomSpecifier::clear_min_hcount() {
  min_hcount_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_min_hcount() const {
  return min_hcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::min_hcount() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.min_hcount)
  return _internal_min_hcount();
}
inline void SubstructureAtomSpecifier::_internal_set_min_hcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  min_hcount_ = value;
}
inline void SubstructureAtomSpecifier::set_min_hcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_hcount(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.min_hcount)
}

// optional uint32 max_hcount = 26;
inline bool SubstructureAtomSpecifier::_internal_has_max_hcount() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_max_hcount() const {
  return _internal_has_max_hcount();
}
inline void SubstructureAtomSpecifier::clear_max_hcount() {
  max_hcount_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_max_hcount() const {
  return max_hcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::max_hcount() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.max_hcount)
  return _internal_max_hcount();
}
inline void SubstructureAtomSpecifier::_internal_set_max_hcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  max_hcount_ = value;
}
inline void SubstructureAtomSpecifier::set_max_hcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_hcount(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.max_hcount)
}

// optional bool aromatic = 27;
inline bool SubstructureAtomSpecifier::_internal_has_aromatic() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_aromatic() const {
  return _internal_has_aromatic();
}
inline void SubstructureAtomSpecifier::clear_aromatic() {
  aromatic_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool SubstructureAtomSpecifier::_internal_aromatic() const {
  return aromatic_;
}
inline bool SubstructureAtomSpecifier::aromatic() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.aromatic)
  return _internal_aromatic();
}
inline void SubstructureAtomSpecifier::_internal_set_aromatic(bool value) {
  _has_bits_[0] |= 0x00400000u;
  aromatic_ = value;
}
inline void SubstructureAtomSpecifier::set_aromatic(bool value) {
  _internal_set_aromatic(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.aromatic)
}

// optional bool chirality = 28;
inline bool SubstructureAtomSpecifier::_internal_has_chirality() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_chirality() const {
  return _internal_has_chirality();
}
inline void SubstructureAtomSpecifier::clear_chirality() {
  chirality_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool SubstructureAtomSpecifier::_internal_chirality() const {
  return chirality_;
}
inline bool SubstructureAtomSpecifier::chirality() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.chirality)
  return _internal_chirality();
}
inline void SubstructureAtomSpecifier::_internal_set_chirality(bool value) {
  _has_bits_[0] |= 0x00800000u;
  chirality_ = value;
}
inline void SubstructureAtomSpecifier::set_chirality(bool value) {
  _internal_set_chirality(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.chirality)
}

// repeated uint32 aromatic_ring_size = 30;
inline int SubstructureAtomSpecifier::_internal_aromatic_ring_size_size() const {
  return aromatic_ring_size_.size();
}
inline int SubstructureAtomSpecifier::aromatic_ring_size_size() const {
  return _internal_aromatic_ring_size_size();
}
inline void SubstructureAtomSpecifier::clear_aromatic_ring_size() {
  aromatic_ring_size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_aromatic_ring_size(int index) const {
  return aromatic_ring_size_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::aromatic_ring_size(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.aromatic_ring_size)
  return _internal_aromatic_ring_size(index);
}
inline void SubstructureAtomSpecifier::set_aromatic_ring_size(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  aromatic_ring_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.aromatic_ring_size)
}
inline void SubstructureAtomSpecifier::_internal_add_aromatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  aromatic_ring_size_.Add(value);
}
inline void SubstructureAtomSpecifier::add_aromatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_aromatic_ring_size(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.aromatic_ring_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::_internal_aromatic_ring_size() const {
  return aromatic_ring_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::aromatic_ring_size() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomSpecifier.aromatic_ring_size)
  return _internal_aromatic_ring_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::_internal_mutable_aromatic_ring_size() {
  return &aromatic_ring_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::mutable_aromatic_ring_size() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomSpecifier.aromatic_ring_size)
  return _internal_mutable_aromatic_ring_size();
}

// optional uint32 min_aromatic_ring_size = 31;
inline bool SubstructureAtomSpecifier::_internal_has_min_aromatic_ring_size() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_min_aromatic_ring_size() const {
  return _internal_has_min_aromatic_ring_size();
}
inline void SubstructureAtomSpecifier::clear_min_aromatic_ring_size() {
  min_aromatic_ring_size_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_min_aromatic_ring_size() const {
  return min_aromatic_ring_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::min_aromatic_ring_size() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.min_aromatic_ring_size)
  return _internal_min_aromatic_ring_size();
}
inline void SubstructureAtomSpecifier::_internal_set_min_aromatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  min_aromatic_ring_size_ = value;
}
inline void SubstructureAtomSpecifier::set_min_aromatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_aromatic_ring_size(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.min_aromatic_ring_size)
}

// optional uint32 max_aromatic_ring_size = 32;
inline bool SubstructureAtomSpecifier::_internal_has_max_aromatic_ring_size() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_max_aromatic_ring_size() const {
  return _internal_has_max_aromatic_ring_size();
}
inline void SubstructureAtomSpecifier::clear_max_aromatic_ring_size() {
  max_aromatic_ring_size_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_max_aromatic_ring_size() const {
  return max_aromatic_ring_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::max_aromatic_ring_size() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.max_aromatic_ring_size)
  return _internal_max_aromatic_ring_size();
}
inline void SubstructureAtomSpecifier::_internal_set_max_aromatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  max_aromatic_ring_size_ = value;
}
inline void SubstructureAtomSpecifier::set_max_aromatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_aromatic_ring_size(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.max_aromatic_ring_size)
}

// repeated uint32 aliphatic_ring_size = 33;
inline int SubstructureAtomSpecifier::_internal_aliphatic_ring_size_size() const {
  return aliphatic_ring_size_.size();
}
inline int SubstructureAtomSpecifier::aliphatic_ring_size_size() const {
  return _internal_aliphatic_ring_size_size();
}
inline void SubstructureAtomSpecifier::clear_aliphatic_ring_size() {
  aliphatic_ring_size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_aliphatic_ring_size(int index) const {
  return aliphatic_ring_size_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::aliphatic_ring_size(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.aliphatic_ring_size)
  return _internal_aliphatic_ring_size(index);
}
inline void SubstructureAtomSpecifier::set_aliphatic_ring_size(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  aliphatic_ring_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.aliphatic_ring_size)
}
inline void SubstructureAtomSpecifier::_internal_add_aliphatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  aliphatic_ring_size_.Add(value);
}
inline void SubstructureAtomSpecifier::add_aliphatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_aliphatic_ring_size(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.aliphatic_ring_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::_internal_aliphatic_ring_size() const {
  return aliphatic_ring_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::aliphatic_ring_size() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomSpecifier.aliphatic_ring_size)
  return _internal_aliphatic_ring_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::_internal_mutable_aliphatic_ring_size() {
  return &aliphatic_ring_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::mutable_aliphatic_ring_size() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomSpecifier.aliphatic_ring_size)
  return _internal_mutable_aliphatic_ring_size();
}

// optional uint32 min_aliphatic_ring_size = 34;
inline bool SubstructureAtomSpecifier::_internal_has_min_aliphatic_ring_size() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_min_aliphatic_ring_size() const {
  return _internal_has_min_aliphatic_ring_size();
}
inline void SubstructureAtomSpecifier::clear_min_aliphatic_ring_size() {
  min_aliphatic_ring_size_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_min_aliphatic_ring_size() const {
  return min_aliphatic_ring_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::min_aliphatic_ring_size() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.min_aliphatic_ring_size)
  return _internal_min_aliphatic_ring_size();
}
inline void SubstructureAtomSpecifier::_internal_set_min_aliphatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  min_aliphatic_ring_size_ = value;
}
inline void SubstructureAtomSpecifier::set_min_aliphatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_aliphatic_ring_size(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.min_aliphatic_ring_size)
}

// optional uint32 max_aliphatic_ring_size = 35;
inline bool SubstructureAtomSpecifier::_internal_has_max_aliphatic_ring_size() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_max_aliphatic_ring_size() const {
  return _internal_has_max_aliphatic_ring_size();
}
inline void SubstructureAtomSpecifier::clear_max_aliphatic_ring_size() {
  max_aliphatic_ring_size_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_max_aliphatic_ring_size() const {
  return max_aliphatic_ring_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::max_aliphatic_ring_size() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.max_aliphatic_ring_size)
  return _internal_max_aliphatic_ring_size();
}
inline void SubstructureAtomSpecifier::_internal_set_max_aliphatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  max_aliphatic_ring_size_ = value;
}
inline void SubstructureAtomSpecifier::set_max_aliphatic_ring_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_aliphatic_ring_size(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.max_aliphatic_ring_size)
}

// repeated uint32 attached_heteroatom_count = 36;
inline int SubstructureAtomSpecifier::_internal_attached_heteroatom_count_size() const {
  return attached_heteroatom_count_.size();
}
inline int SubstructureAtomSpecifier::attached_heteroatom_count_size() const {
  return _internal_attached_heteroatom_count_size();
}
inline void SubstructureAtomSpecifier::clear_attached_heteroatom_count() {
  attached_heteroatom_count_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_attached_heteroatom_count(int index) const {
  return attached_heteroatom_count_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::attached_heteroatom_count(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.attached_heteroatom_count)
  return _internal_attached_heteroatom_count(index);
}
inline void SubstructureAtomSpecifier::set_attached_heteroatom_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  attached_heteroatom_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.attached_heteroatom_count)
}
inline void SubstructureAtomSpecifier::_internal_add_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  attached_heteroatom_count_.Add(value);
}
inline void SubstructureAtomSpecifier::add_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_attached_heteroatom_count(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.attached_heteroatom_count)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::_internal_attached_heteroatom_count() const {
  return attached_heteroatom_count_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::attached_heteroatom_count() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomSpecifier.attached_heteroatom_count)
  return _internal_attached_heteroatom_count();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::_internal_mutable_attached_heteroatom_count() {
  return &attached_heteroatom_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::mutable_attached_heteroatom_count() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomSpecifier.attached_heteroatom_count)
  return _internal_mutable_attached_heteroatom_count();
}

// optional uint32 min_attached_heteroatom_count = 37;
inline bool SubstructureAtomSpecifier::_internal_has_min_attached_heteroatom_count() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_min_attached_heteroatom_count() const {
  return _internal_has_min_attached_heteroatom_count();
}
inline void SubstructureAtomSpecifier::clear_min_attached_heteroatom_count() {
  min_attached_heteroatom_count_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_min_attached_heteroatom_count() const {
  return min_attached_heteroatom_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::min_attached_heteroatom_count() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.min_attached_heteroatom_count)
  return _internal_min_attached_heteroatom_count();
}
inline void SubstructureAtomSpecifier::_internal_set_min_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  min_attached_heteroatom_count_ = value;
}
inline void SubstructureAtomSpecifier::set_min_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_attached_heteroatom_count(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.min_attached_heteroatom_count)
}

// optional uint32 max_attached_heteroatom_count = 38;
inline bool SubstructureAtomSpecifier::_internal_has_max_attached_heteroatom_count() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_max_attached_heteroatom_count() const {
  return _internal_has_max_attached_heteroatom_count();
}
inline void SubstructureAtomSpecifier::clear_max_attached_heteroatom_count() {
  max_attached_heteroatom_count_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_max_attached_heteroatom_count() const {
  return max_attached_heteroatom_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::max_attached_heteroatom_count() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.max_attached_heteroatom_count)
  return _internal_max_attached_heteroatom_count();
}
inline void SubstructureAtomSpecifier::_internal_set_max_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  max_attached_heteroatom_count_ = value;
}
inline void SubstructureAtomSpecifier::set_max_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_attached_heteroatom_count(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.max_attached_heteroatom_count)
}

// repeated uint32 lone_pair_count = 39;
inline int SubstructureAtomSpecifier::_internal_lone_pair_count_size() const {
  return lone_pair_count_.size();
}
inline int SubstructureAtomSpecifier::lone_pair_count_size() const {
  return _internal_lone_pair_count_size();
}
inline void SubstructureAtomSpecifier::clear_lone_pair_count() {
  lone_pair_count_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_lone_pair_count(int index) const {
  return lone_pair_count_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::lone_pair_count(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.lone_pair_count)
  return _internal_lone_pair_count(index);
}
inline void SubstructureAtomSpecifier::set_lone_pair_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  lone_pair_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.lone_pair_count)
}
inline void SubstructureAtomSpecifier::_internal_add_lone_pair_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  lone_pair_count_.Add(value);
}
inline void SubstructureAtomSpecifier::add_lone_pair_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_lone_pair_count(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.lone_pair_count)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::_internal_lone_pair_count() const {
  return lone_pair_count_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::lone_pair_count() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomSpecifier.lone_pair_count)
  return _internal_lone_pair_count();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::_internal_mutable_lone_pair_count() {
  return &lone_pair_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::mutable_lone_pair_count() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomSpecifier.lone_pair_count)
  return _internal_mutable_lone_pair_count();
}

// optional uint32 min_lone_pair_count = 40;
inline bool SubstructureAtomSpecifier::_internal_has_min_lone_pair_count() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_min_lone_pair_count() const {
  return _internal_has_min_lone_pair_count();
}
inline void SubstructureAtomSpecifier::clear_min_lone_pair_count() {
  min_lone_pair_count_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_min_lone_pair_count() const {
  return min_lone_pair_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::min_lone_pair_count() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.min_lone_pair_count)
  return _internal_min_lone_pair_count();
}
inline void SubstructureAtomSpecifier::_internal_set_min_lone_pair_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  min_lone_pair_count_ = value;
}
inline void SubstructureAtomSpecifier::set_min_lone_pair_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_lone_pair_count(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.min_lone_pair_count)
}

// optional uint32 max_lone_pair_count = 41;
inline bool SubstructureAtomSpecifier::_internal_has_max_lone_pair_count() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_max_lone_pair_count() const {
  return _internal_has_max_lone_pair_count();
}
inline void SubstructureAtomSpecifier::clear_max_lone_pair_count() {
  max_lone_pair_count_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_max_lone_pair_count() const {
  return max_lone_pair_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::max_lone_pair_count() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.max_lone_pair_count)
  return _internal_max_lone_pair_count();
}
inline void SubstructureAtomSpecifier::_internal_set_max_lone_pair_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  max_lone_pair_count_ = value;
}
inline void SubstructureAtomSpecifier::set_max_lone_pair_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_lone_pair_count(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.max_lone_pair_count)
}

// repeated uint32 unsaturation = 42;
inline int SubstructureAtomSpecifier::_internal_unsaturation_size() const {
  return unsaturation_.size();
}
inline int SubstructureAtomSpecifier::unsaturation_size() const {
  return _internal_unsaturation_size();
}
inline void SubstructureAtomSpecifier::clear_unsaturation() {
  unsaturation_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_unsaturation(int index) const {
  return unsaturation_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::unsaturation(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.unsaturation)
  return _internal_unsaturation(index);
}
inline void SubstructureAtomSpecifier::set_unsaturation(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  unsaturation_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.unsaturation)
}
inline void SubstructureAtomSpecifier::_internal_add_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  unsaturation_.Add(value);
}
inline void SubstructureAtomSpecifier::add_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_unsaturation(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.unsaturation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::_internal_unsaturation() const {
  return unsaturation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::unsaturation() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomSpecifier.unsaturation)
  return _internal_unsaturation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::_internal_mutable_unsaturation() {
  return &unsaturation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::mutable_unsaturation() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomSpecifier.unsaturation)
  return _internal_mutable_unsaturation();
}

// optional uint32 min_unsaturation = 43;
inline bool SubstructureAtomSpecifier::_internal_has_min_unsaturation() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_min_unsaturation() const {
  return _internal_has_min_unsaturation();
}
inline void SubstructureAtomSpecifier::clear_min_unsaturation() {
  min_unsaturation_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_min_unsaturation() const {
  return min_unsaturation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::min_unsaturation() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.min_unsaturation)
  return _internal_min_unsaturation();
}
inline void SubstructureAtomSpecifier::_internal_set_min_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  min_unsaturation_ = value;
}
inline void SubstructureAtomSpecifier::set_min_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_unsaturation(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.min_unsaturation)
}

// optional uint32 max_unsaturation = 44;
inline bool SubstructureAtomSpecifier::_internal_has_max_unsaturation() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_max_unsaturation() const {
  return _internal_has_max_unsaturation();
}
inline void SubstructureAtomSpecifier::clear_max_unsaturation() {
  max_unsaturation_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_max_unsaturation() const {
  return max_unsaturation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::max_unsaturation() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.max_unsaturation)
  return _internal_max_unsaturation();
}
inline void SubstructureAtomSpecifier::_internal_set_max_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  max_unsaturation_ = value;
}
inline void SubstructureAtomSpecifier::set_max_unsaturation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_unsaturation(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.max_unsaturation)
}

// repeated uint32 daylight_x = 45;
inline int SubstructureAtomSpecifier::_internal_daylight_x_size() const {
  return daylight_x_.size();
}
inline int SubstructureAtomSpecifier::daylight_x_size() const {
  return _internal_daylight_x_size();
}
inline void SubstructureAtomSpecifier::clear_daylight_x() {
  daylight_x_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_daylight_x(int index) const {
  return daylight_x_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::daylight_x(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.daylight_x)
  return _internal_daylight_x(index);
}
inline void SubstructureAtomSpecifier::set_daylight_x(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  daylight_x_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.daylight_x)
}
inline void SubstructureAtomSpecifier::_internal_add_daylight_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  daylight_x_.Add(value);
}
inline void SubstructureAtomSpecifier::add_daylight_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_daylight_x(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.daylight_x)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::_internal_daylight_x() const {
  return daylight_x_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::daylight_x() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomSpecifier.daylight_x)
  return _internal_daylight_x();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::_internal_mutable_daylight_x() {
  return &daylight_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::mutable_daylight_x() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomSpecifier.daylight_x)
  return _internal_mutable_daylight_x();
}

// optional uint32 min_daylight_x = 46;
inline bool SubstructureAtomSpecifier::_internal_has_min_daylight_x() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_min_daylight_x() const {
  return _internal_has_min_daylight_x();
}
inline void SubstructureAtomSpecifier::clear_min_daylight_x() {
  min_daylight_x_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_min_daylight_x() const {
  return min_daylight_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::min_daylight_x() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.min_daylight_x)
  return _internal_min_daylight_x();
}
inline void SubstructureAtomSpecifier::_internal_set_min_daylight_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  min_daylight_x_ = value;
}
inline void SubstructureAtomSpecifier::set_min_daylight_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_daylight_x(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.min_daylight_x)
}

// optional uint32 max_daylight_x = 47;
inline bool SubstructureAtomSpecifier::_internal_has_max_daylight_x() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_max_daylight_x() const {
  return _internal_has_max_daylight_x();
}
inline void SubstructureAtomSpecifier::clear_max_daylight_x() {
  max_daylight_x_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_max_daylight_x() const {
  return max_daylight_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::max_daylight_x() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.max_daylight_x)
  return _internal_max_daylight_x();
}
inline void SubstructureAtomSpecifier::_internal_set_max_daylight_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  max_daylight_x_ = value;
}
inline void SubstructureAtomSpecifier::set_max_daylight_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_daylight_x(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.max_daylight_x)
}

// repeated uint32 isotope = 48;
inline int SubstructureAtomSpecifier::_internal_isotope_size() const {
  return isotope_.size();
}
inline int SubstructureAtomSpecifier::isotope_size() const {
  return _internal_isotope_size();
}
inline void SubstructureAtomSpecifier::clear_isotope() {
  isotope_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_isotope(int index) const {
  return isotope_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::isotope(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.isotope)
  return _internal_isotope(index);
}
inline void SubstructureAtomSpecifier::set_isotope(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  isotope_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.isotope)
}
inline void SubstructureAtomSpecifier::_internal_add_isotope(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  isotope_.Add(value);
}
inline void SubstructureAtomSpecifier::add_isotope(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_isotope(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.isotope)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::_internal_isotope() const {
  return isotope_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::isotope() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomSpecifier.isotope)
  return _internal_isotope();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::_internal_mutable_isotope() {
  return &isotope_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::mutable_isotope() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomSpecifier.isotope)
  return _internal_mutable_isotope();
}

// optional uint32 min_isotope = 49;
inline bool SubstructureAtomSpecifier::_internal_has_min_isotope() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_min_isotope() const {
  return _internal_has_min_isotope();
}
inline void SubstructureAtomSpecifier::clear_min_isotope() {
  min_isotope_ = 0u;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_min_isotope() const {
  return min_isotope_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::min_isotope() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.min_isotope)
  return _internal_min_isotope();
}
inline void SubstructureAtomSpecifier::_internal_set_min_isotope(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x80000000u;
  min_isotope_ = value;
}
inline void SubstructureAtomSpecifier::set_min_isotope(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_isotope(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.min_isotope)
}

// optional uint32 max_isotope = 50;
inline bool SubstructureAtomSpecifier::_internal_has_max_isotope() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_max_isotope() const {
  return _internal_has_max_isotope();
}
inline void SubstructureAtomSpecifier::clear_max_isotope() {
  max_isotope_ = 0u;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_max_isotope() const {
  return max_isotope_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::max_isotope() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.max_isotope)
  return _internal_max_isotope();
}
inline void SubstructureAtomSpecifier::_internal_set_max_isotope(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000001u;
  max_isotope_ = value;
}
inline void SubstructureAtomSpecifier::set_max_isotope(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_isotope(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.max_isotope)
}

// repeated uint32 aryl = 51;
inline int SubstructureAtomSpecifier::_internal_aryl_size() const {
  return aryl_.size();
}
inline int SubstructureAtomSpecifier::aryl_size() const {
  return _internal_aryl_size();
}
inline void SubstructureAtomSpecifier::clear_aryl() {
  aryl_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_aryl(int index) const {
  return aryl_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::aryl(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.aryl)
  return _internal_aryl(index);
}
inline void SubstructureAtomSpecifier::set_aryl(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  aryl_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.aryl)
}
inline void SubstructureAtomSpecifier::_internal_add_aryl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  aryl_.Add(value);
}
inline void SubstructureAtomSpecifier::add_aryl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_aryl(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.aryl)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::_internal_aryl() const {
  return aryl_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::aryl() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomSpecifier.aryl)
  return _internal_aryl();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::_internal_mutable_aryl() {
  return &aryl_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::mutable_aryl() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomSpecifier.aryl)
  return _internal_mutable_aryl();
}

// optional uint32 min_aryl = 52;
inline bool SubstructureAtomSpecifier::_internal_has_min_aryl() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_min_aryl() const {
  return _internal_has_min_aryl();
}
inline void SubstructureAtomSpecifier::clear_min_aryl() {
  min_aryl_ = 0u;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_min_aryl() const {
  return min_aryl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::min_aryl() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.min_aryl)
  return _internal_min_aryl();
}
inline void SubstructureAtomSpecifier::_internal_set_min_aryl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000002u;
  min_aryl_ = value;
}
inline void SubstructureAtomSpecifier::set_min_aryl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_aryl(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.min_aryl)
}

// optional uint32 max_aryl = 53;
inline bool SubstructureAtomSpecifier::_internal_has_max_aryl() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_max_aryl() const {
  return _internal_has_max_aryl();
}
inline void SubstructureAtomSpecifier::clear_max_aryl() {
  max_aryl_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_max_aryl() const {
  return max_aryl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::max_aryl() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.max_aryl)
  return _internal_max_aryl();
}
inline void SubstructureAtomSpecifier::_internal_set_max_aryl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000004u;
  max_aryl_ = value;
}
inline void SubstructureAtomSpecifier::set_max_aryl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_aryl(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.max_aryl)
}

// repeated uint32 fused_system_size = 54;
inline int SubstructureAtomSpecifier::_internal_fused_system_size_size() const {
  return fused_system_size_.size();
}
inline int SubstructureAtomSpecifier::fused_system_size_size() const {
  return _internal_fused_system_size_size();
}
inline void SubstructureAtomSpecifier::clear_fused_system_size() {
  fused_system_size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_fused_system_size(int index) const {
  return fused_system_size_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::fused_system_size(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.fused_system_size)
  return _internal_fused_system_size(index);
}
inline void SubstructureAtomSpecifier::set_fused_system_size(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  fused_system_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.fused_system_size)
}
inline void SubstructureAtomSpecifier::_internal_add_fused_system_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  fused_system_size_.Add(value);
}
inline void SubstructureAtomSpecifier::add_fused_system_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_fused_system_size(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.fused_system_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::_internal_fused_system_size() const {
  return fused_system_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::fused_system_size() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomSpecifier.fused_system_size)
  return _internal_fused_system_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::_internal_mutable_fused_system_size() {
  return &fused_system_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::mutable_fused_system_size() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomSpecifier.fused_system_size)
  return _internal_mutable_fused_system_size();
}

// optional uint32 min_fused_system_size = 55;
inline bool SubstructureAtomSpecifier::_internal_has_min_fused_system_size() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_min_fused_system_size() const {
  return _internal_has_min_fused_system_size();
}
inline void SubstructureAtomSpecifier::clear_min_fused_system_size() {
  min_fused_system_size_ = 0u;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_min_fused_system_size() const {
  return min_fused_system_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::min_fused_system_size() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.min_fused_system_size)
  return _internal_min_fused_system_size();
}
inline void SubstructureAtomSpecifier::_internal_set_min_fused_system_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000008u;
  min_fused_system_size_ = value;
}
inline void SubstructureAtomSpecifier::set_min_fused_system_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_fused_system_size(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.min_fused_system_size)
}

// optional uint32 max_fused_system_size = 56;
inline bool SubstructureAtomSpecifier::_internal_has_max_fused_system_size() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_max_fused_system_size() const {
  return _internal_has_max_fused_system_size();
}
inline void SubstructureAtomSpecifier::clear_max_fused_system_size() {
  max_fused_system_size_ = 0u;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_max_fused_system_size() const {
  return max_fused_system_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::max_fused_system_size() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.max_fused_system_size)
  return _internal_max_fused_system_size();
}
inline void SubstructureAtomSpecifier::_internal_set_max_fused_system_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000010u;
  max_fused_system_size_ = value;
}
inline void SubstructureAtomSpecifier::set_max_fused_system_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_fused_system_size(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.max_fused_system_size)
}

// repeated uint32 vinyl = 57;
inline int SubstructureAtomSpecifier::_internal_vinyl_size() const {
  return vinyl_.size();
}
inline int SubstructureAtomSpecifier::vinyl_size() const {
  return _internal_vinyl_size();
}
inline void SubstructureAtomSpecifier::clear_vinyl() {
  vinyl_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_vinyl(int index) const {
  return vinyl_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::vinyl(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.vinyl)
  return _internal_vinyl(index);
}
inline void SubstructureAtomSpecifier::set_vinyl(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  vinyl_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.vinyl)
}
inline void SubstructureAtomSpecifier::_internal_add_vinyl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  vinyl_.Add(value);
}
inline void SubstructureAtomSpecifier::add_vinyl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_vinyl(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.vinyl)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::_internal_vinyl() const {
  return vinyl_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::vinyl() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomSpecifier.vinyl)
  return _internal_vinyl();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::_internal_mutable_vinyl() {
  return &vinyl_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::mutable_vinyl() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomSpecifier.vinyl)
  return _internal_mutable_vinyl();
}

// optional uint32 min_vinyl = 58;
inline bool SubstructureAtomSpecifier::_internal_has_min_vinyl() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_min_vinyl() const {
  return _internal_has_min_vinyl();
}
inline void SubstructureAtomSpecifier::clear_min_vinyl() {
  min_vinyl_ = 0u;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_min_vinyl() const {
  return min_vinyl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::min_vinyl() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.min_vinyl)
  return _internal_min_vinyl();
}
inline void SubstructureAtomSpecifier::_internal_set_min_vinyl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000020u;
  min_vinyl_ = value;
}
inline void SubstructureAtomSpecifier::set_min_vinyl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_vinyl(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.min_vinyl)
}

// optional uint32 max_vinyl = 59;
inline bool SubstructureAtomSpecifier::_internal_has_max_vinyl() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_max_vinyl() const {
  return _internal_has_max_vinyl();
}
inline void SubstructureAtomSpecifier::clear_max_vinyl() {
  max_vinyl_ = 0u;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_max_vinyl() const {
  return max_vinyl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::max_vinyl() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.max_vinyl)
  return _internal_max_vinyl();
}
inline void SubstructureAtomSpecifier::_internal_set_max_vinyl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000040u;
  max_vinyl_ = value;
}
inline void SubstructureAtomSpecifier::set_max_vinyl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_vinyl(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.max_vinyl)
}

// optional bool all_rings_kekule = 60;
inline bool SubstructureAtomSpecifier::_internal_has_all_rings_kekule() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_all_rings_kekule() const {
  return _internal_has_all_rings_kekule();
}
inline void SubstructureAtomSpecifier::clear_all_rings_kekule() {
  all_rings_kekule_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool SubstructureAtomSpecifier::_internal_all_rings_kekule() const {
  return all_rings_kekule_;
}
inline bool SubstructureAtomSpecifier::all_rings_kekule() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.all_rings_kekule)
  return _internal_all_rings_kekule();
}
inline void SubstructureAtomSpecifier::_internal_set_all_rings_kekule(bool value) {
  _has_bits_[0] |= 0x01000000u;
  all_rings_kekule_ = value;
}
inline void SubstructureAtomSpecifier::set_all_rings_kekule(bool value) {
  _internal_set_all_rings_kekule(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.all_rings_kekule)
}

// repeated uint32 heteroatoms_in_ring = 61;
inline int SubstructureAtomSpecifier::_internal_heteroatoms_in_ring_size() const {
  return heteroatoms_in_ring_.size();
}
inline int SubstructureAtomSpecifier::heteroatoms_in_ring_size() const {
  return _internal_heteroatoms_in_ring_size();
}
inline void SubstructureAtomSpecifier::clear_heteroatoms_in_ring() {
  heteroatoms_in_ring_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_heteroatoms_in_ring(int index) const {
  return heteroatoms_in_ring_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::heteroatoms_in_ring(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.heteroatoms_in_ring)
  return _internal_heteroatoms_in_ring(index);
}
inline void SubstructureAtomSpecifier::set_heteroatoms_in_ring(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  heteroatoms_in_ring_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.heteroatoms_in_ring)
}
inline void SubstructureAtomSpecifier::_internal_add_heteroatoms_in_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  heteroatoms_in_ring_.Add(value);
}
inline void SubstructureAtomSpecifier::add_heteroatoms_in_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_heteroatoms_in_ring(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.heteroatoms_in_ring)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::_internal_heteroatoms_in_ring() const {
  return heteroatoms_in_ring_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::heteroatoms_in_ring() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomSpecifier.heteroatoms_in_ring)
  return _internal_heteroatoms_in_ring();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::_internal_mutable_heteroatoms_in_ring() {
  return &heteroatoms_in_ring_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::mutable_heteroatoms_in_ring() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomSpecifier.heteroatoms_in_ring)
  return _internal_mutable_heteroatoms_in_ring();
}

// optional uint32 min_heteroatoms_in_ring = 62;
inline bool SubstructureAtomSpecifier::_internal_has_min_heteroatoms_in_ring() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_min_heteroatoms_in_ring() const {
  return _internal_has_min_heteroatoms_in_ring();
}
inline void SubstructureAtomSpecifier::clear_min_heteroatoms_in_ring() {
  min_heteroatoms_in_ring_ = 0u;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_min_heteroatoms_in_ring() const {
  return min_heteroatoms_in_ring_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::min_heteroatoms_in_ring() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.min_heteroatoms_in_ring)
  return _internal_min_heteroatoms_in_ring();
}
inline void SubstructureAtomSpecifier::_internal_set_min_heteroatoms_in_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000080u;
  min_heteroatoms_in_ring_ = value;
}
inline void SubstructureAtomSpecifier::set_min_heteroatoms_in_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_heteroatoms_in_ring(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.min_heteroatoms_in_ring)
}

// optional uint32 max_heteroatoms_in_ring = 63;
inline bool SubstructureAtomSpecifier::_internal_has_max_heteroatoms_in_ring() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_max_heteroatoms_in_ring() const {
  return _internal_has_max_heteroatoms_in_ring();
}
inline void SubstructureAtomSpecifier::clear_max_heteroatoms_in_ring() {
  max_heteroatoms_in_ring_ = 0u;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_max_heteroatoms_in_ring() const {
  return max_heteroatoms_in_ring_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::max_heteroatoms_in_ring() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.max_heteroatoms_in_ring)
  return _internal_max_heteroatoms_in_ring();
}
inline void SubstructureAtomSpecifier::_internal_set_max_heteroatoms_in_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000100u;
  max_heteroatoms_in_ring_ = value;
}
inline void SubstructureAtomSpecifier::set_max_heteroatoms_in_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_heteroatoms_in_ring(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.max_heteroatoms_in_ring)
}

// optional int32 match_spinach_only = 64;
inline bool SubstructureAtomSpecifier::_internal_has_match_spinach_only() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_match_spinach_only() const {
  return _internal_has_match_spinach_only();
}
inline void SubstructureAtomSpecifier::clear_match_spinach_only() {
  match_spinach_only_ = 0;
  _has_bits_[1] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubstructureAtomSpecifier::_internal_match_spinach_only() const {
  return match_spinach_only_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubstructureAtomSpecifier::match_spinach_only() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.match_spinach_only)
  return _internal_match_spinach_only();
}
inline void SubstructureAtomSpecifier::_internal_set_match_spinach_only(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000200u;
  match_spinach_only_ = value;
}
inline void SubstructureAtomSpecifier::set_match_spinach_only(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_match_spinach_only(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.match_spinach_only)
}

// repeated uint32 scaffold_bonds_attached_to_ring = 65;
inline int SubstructureAtomSpecifier::_internal_scaffold_bonds_attached_to_ring_size() const {
  return scaffold_bonds_attached_to_ring_.size();
}
inline int SubstructureAtomSpecifier::scaffold_bonds_attached_to_ring_size() const {
  return _internal_scaffold_bonds_attached_to_ring_size();
}
inline void SubstructureAtomSpecifier::clear_scaffold_bonds_attached_to_ring() {
  scaffold_bonds_attached_to_ring_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_scaffold_bonds_attached_to_ring(int index) const {
  return scaffold_bonds_attached_to_ring_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::scaffold_bonds_attached_to_ring(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.scaffold_bonds_attached_to_ring)
  return _internal_scaffold_bonds_attached_to_ring(index);
}
inline void SubstructureAtomSpecifier::set_scaffold_bonds_attached_to_ring(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  scaffold_bonds_attached_to_ring_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.scaffold_bonds_attached_to_ring)
}
inline void SubstructureAtomSpecifier::_internal_add_scaffold_bonds_attached_to_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  scaffold_bonds_attached_to_ring_.Add(value);
}
inline void SubstructureAtomSpecifier::add_scaffold_bonds_attached_to_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_scaffold_bonds_attached_to_ring(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.scaffold_bonds_attached_to_ring)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::_internal_scaffold_bonds_attached_to_ring() const {
  return scaffold_bonds_attached_to_ring_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::scaffold_bonds_attached_to_ring() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomSpecifier.scaffold_bonds_attached_to_ring)
  return _internal_scaffold_bonds_attached_to_ring();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::_internal_mutable_scaffold_bonds_attached_to_ring() {
  return &scaffold_bonds_attached_to_ring_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::mutable_scaffold_bonds_attached_to_ring() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomSpecifier.scaffold_bonds_attached_to_ring)
  return _internal_mutable_scaffold_bonds_attached_to_ring();
}

// optional uint32 min_scaffold_bonds_attached_to_ring = 66;
inline bool SubstructureAtomSpecifier::_internal_has_min_scaffold_bonds_attached_to_ring() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_min_scaffold_bonds_attached_to_ring() const {
  return _internal_has_min_scaffold_bonds_attached_to_ring();
}
inline void SubstructureAtomSpecifier::clear_min_scaffold_bonds_attached_to_ring() {
  min_scaffold_bonds_attached_to_ring_ = 0u;
  _has_bits_[1] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_min_scaffold_bonds_attached_to_ring() const {
  return min_scaffold_bonds_attached_to_ring_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::min_scaffold_bonds_attached_to_ring() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.min_scaffold_bonds_attached_to_ring)
  return _internal_min_scaffold_bonds_attached_to_ring();
}
inline void SubstructureAtomSpecifier::_internal_set_min_scaffold_bonds_attached_to_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000400u;
  min_scaffold_bonds_attached_to_ring_ = value;
}
inline void SubstructureAtomSpecifier::set_min_scaffold_bonds_attached_to_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_scaffold_bonds_attached_to_ring(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.min_scaffold_bonds_attached_to_ring)
}

// optional uint32 max_scaffold_bonds_attached_to_ring = 67;
inline bool SubstructureAtomSpecifier::_internal_has_max_scaffold_bonds_attached_to_ring() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_max_scaffold_bonds_attached_to_ring() const {
  return _internal_has_max_scaffold_bonds_attached_to_ring();
}
inline void SubstructureAtomSpecifier::clear_max_scaffold_bonds_attached_to_ring() {
  max_scaffold_bonds_attached_to_ring_ = 0u;
  _has_bits_[1] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_max_scaffold_bonds_attached_to_ring() const {
  return max_scaffold_bonds_attached_to_ring_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::max_scaffold_bonds_attached_to_ring() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.max_scaffold_bonds_attached_to_ring)
  return _internal_max_scaffold_bonds_attached_to_ring();
}
inline void SubstructureAtomSpecifier::_internal_set_max_scaffold_bonds_attached_to_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000800u;
  max_scaffold_bonds_attached_to_ring_ = value;
}
inline void SubstructureAtomSpecifier::set_max_scaffold_bonds_attached_to_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_scaffold_bonds_attached_to_ring(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.max_scaffold_bonds_attached_to_ring)
}

// optional int32 preference_value = 68;
inline bool SubstructureAtomSpecifier::_internal_has_preference_value() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_preference_value() const {
  return _internal_has_preference_value();
}
inline void SubstructureAtomSpecifier::clear_preference_value() {
  preference_value_ = 0;
  _has_bits_[1] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubstructureAtomSpecifier::_internal_preference_value() const {
  return preference_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubstructureAtomSpecifier::preference_value() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.preference_value)
  return _internal_preference_value();
}
inline void SubstructureAtomSpecifier::_internal_set_preference_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00001000u;
  preference_value_ = value;
}
inline void SubstructureAtomSpecifier::set_preference_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_preference_value(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.preference_value)
}

// repeated uint32 symmetry_degree = 69;
inline int SubstructureAtomSpecifier::_internal_symmetry_degree_size() const {
  return symmetry_degree_.size();
}
inline int SubstructureAtomSpecifier::symmetry_degree_size() const {
  return _internal_symmetry_degree_size();
}
inline void SubstructureAtomSpecifier::clear_symmetry_degree() {
  symmetry_degree_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_symmetry_degree(int index) const {
  return symmetry_degree_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::symmetry_degree(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.symmetry_degree)
  return _internal_symmetry_degree(index);
}
inline void SubstructureAtomSpecifier::set_symmetry_degree(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  symmetry_degree_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.symmetry_degree)
}
inline void SubstructureAtomSpecifier::_internal_add_symmetry_degree(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  symmetry_degree_.Add(value);
}
inline void SubstructureAtomSpecifier::add_symmetry_degree(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_symmetry_degree(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomSpecifier.symmetry_degree)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::_internal_symmetry_degree() const {
  return symmetry_degree_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtomSpecifier::symmetry_degree() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomSpecifier.symmetry_degree)
  return _internal_symmetry_degree();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::_internal_mutable_symmetry_degree() {
  return &symmetry_degree_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtomSpecifier::mutable_symmetry_degree() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomSpecifier.symmetry_degree)
  return _internal_mutable_symmetry_degree();
}

// optional uint32 min_symmetry_degree = 70;
inline bool SubstructureAtomSpecifier::_internal_has_min_symmetry_degree() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_min_symmetry_degree() const {
  return _internal_has_min_symmetry_degree();
}
inline void SubstructureAtomSpecifier::clear_min_symmetry_degree() {
  min_symmetry_degree_ = 0u;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_min_symmetry_degree() const {
  return min_symmetry_degree_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::min_symmetry_degree() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.min_symmetry_degree)
  return _internal_min_symmetry_degree();
}
inline void SubstructureAtomSpecifier::_internal_set_min_symmetry_degree(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00002000u;
  min_symmetry_degree_ = value;
}
inline void SubstructureAtomSpecifier::set_min_symmetry_degree(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_symmetry_degree(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.min_symmetry_degree)
}

// optional uint32 max_symmetry_degree = 71;
inline bool SubstructureAtomSpecifier::_internal_has_max_symmetry_degree() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_max_symmetry_degree() const {
  return _internal_has_max_symmetry_degree();
}
inline void SubstructureAtomSpecifier::clear_max_symmetry_degree() {
  max_symmetry_degree_ = 0u;
  _has_bits_[1] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_max_symmetry_degree() const {
  return max_symmetry_degree_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::max_symmetry_degree() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.max_symmetry_degree)
  return _internal_max_symmetry_degree();
}
inline void SubstructureAtomSpecifier::_internal_set_max_symmetry_degree(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00004000u;
  max_symmetry_degree_ = value;
}
inline void SubstructureAtomSpecifier::set_max_symmetry_degree(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_symmetry_degree(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.max_symmetry_degree)
}

// optional int32 symmetry_group = 72;
inline bool SubstructureAtomSpecifier::_internal_has_symmetry_group() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_symmetry_group() const {
  return _internal_has_symmetry_group();
}
inline void SubstructureAtomSpecifier::clear_symmetry_group() {
  symmetry_group_ = 0;
  _has_bits_[1] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubstructureAtomSpecifier::_internal_symmetry_group() const {
  return symmetry_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubstructureAtomSpecifier::symmetry_group() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.symmetry_group)
  return _internal_symmetry_group();
}
inline void SubstructureAtomSpecifier::_internal_set_symmetry_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00008000u;
  symmetry_group_ = value;
}
inline void SubstructureAtomSpecifier::set_symmetry_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_symmetry_group(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.symmetry_group)
}

// optional .SubstructureSearch.Operator logical_operator = 76;
inline bool SubstructureAtomSpecifier::_internal_has_logical_operator() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_logical_operator() const {
  return _internal_has_logical_operator();
}
inline void SubstructureAtomSpecifier::clear_logical_operator() {
  logical_operator_ = 8;
  _has_bits_[1] &= ~0x00040000u;
}
inline ::SubstructureSearch::Operator SubstructureAtomSpecifier::_internal_logical_operator() const {
  return static_cast< ::SubstructureSearch::Operator >(logical_operator_);
}
inline ::SubstructureSearch::Operator SubstructureAtomSpecifier::logical_operator() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.logical_operator)
  return _internal_logical_operator();
}
inline void SubstructureAtomSpecifier::_internal_set_logical_operator(::SubstructureSearch::Operator value) {
  assert(::SubstructureSearch::Operator_IsValid(value));
  _has_bits_[1] |= 0x00040000u;
  logical_operator_ = value;
}
inline void SubstructureAtomSpecifier::set_logical_operator(::SubstructureSearch::Operator value) {
  _internal_set_logical_operator(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.logical_operator)
}

// optional uint32 user_atom_type = 77;
inline bool SubstructureAtomSpecifier::_internal_has_user_atom_type() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_user_atom_type() const {
  return _internal_has_user_atom_type();
}
inline void SubstructureAtomSpecifier::clear_user_atom_type() {
  user_atom_type_ = 0u;
  _has_bits_[1] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_user_atom_type() const {
  return user_atom_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::user_atom_type() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.user_atom_type)
  return _internal_user_atom_type();
}
inline void SubstructureAtomSpecifier::_internal_set_user_atom_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00010000u;
  user_atom_type_ = value;
}
inline void SubstructureAtomSpecifier::set_user_atom_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_atom_type(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.user_atom_type)
}

// optional uint32 atom_type = 78;
inline bool SubstructureAtomSpecifier::_internal_has_atom_type() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool SubstructureAtomSpecifier::has_atom_type() const {
  return _internal_has_atom_type();
}
inline void SubstructureAtomSpecifier::clear_atom_type() {
  atom_type_ = 0u;
  _has_bits_[1] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::_internal_atom_type() const {
  return atom_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomSpecifier::atom_type() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomSpecifier.atom_type)
  return _internal_atom_type();
}
inline void SubstructureAtomSpecifier::_internal_set_atom_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00020000u;
  atom_type_ = value;
}
inline void SubstructureAtomSpecifier::set_atom_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_atom_type(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomSpecifier.atom_type)
}

// -------------------------------------------------------------------

// SubstructureAtomEnvironment

// optional uint32 id = 1;
inline bool SubstructureAtomEnvironment::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SubstructureAtomEnvironment::has_id() const {
  return _internal_has_id();
}
inline void SubstructureAtomEnvironment::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomEnvironment::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtomEnvironment::id() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomEnvironment.id)
  return _internal_id();
}
inline void SubstructureAtomEnvironment::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void SubstructureAtomEnvironment::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomEnvironment.id)
}

// repeated .SubstructureSearch.SubstructureAtom substructure_atom = 2;
inline int SubstructureAtomEnvironment::_internal_substructure_atom_size() const {
  return substructure_atom_.size();
}
inline int SubstructureAtomEnvironment::substructure_atom_size() const {
  return _internal_substructure_atom_size();
}
inline void SubstructureAtomEnvironment::clear_substructure_atom() {
  substructure_atom_.Clear();
}
inline ::SubstructureSearch::SubstructureAtom* SubstructureAtomEnvironment::mutable_substructure_atom(int index) {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureAtomEnvironment.substructure_atom)
  return substructure_atom_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtom >*
SubstructureAtomEnvironment::mutable_substructure_atom() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtomEnvironment.substructure_atom)
  return &substructure_atom_;
}
inline const ::SubstructureSearch::SubstructureAtom& SubstructureAtomEnvironment::_internal_substructure_atom(int index) const {
  return substructure_atom_.Get(index);
}
inline const ::SubstructureSearch::SubstructureAtom& SubstructureAtomEnvironment::substructure_atom(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomEnvironment.substructure_atom)
  return _internal_substructure_atom(index);
}
inline ::SubstructureSearch::SubstructureAtom* SubstructureAtomEnvironment::_internal_add_substructure_atom() {
  return substructure_atom_.Add();
}
inline ::SubstructureSearch::SubstructureAtom* SubstructureAtomEnvironment::add_substructure_atom() {
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtomEnvironment.substructure_atom)
  return _internal_add_substructure_atom();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtom >&
SubstructureAtomEnvironment::substructure_atom() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtomEnvironment.substructure_atom)
  return substructure_atom_;
}

// optional string op = 3;
inline bool SubstructureAtomEnvironment::_internal_has_op() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SubstructureAtomEnvironment::has_op() const {
  return _internal_has_op();
}
inline void SubstructureAtomEnvironment::clear_op() {
  op_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SubstructureAtomEnvironment::op() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtomEnvironment.op)
  return _internal_op();
}
inline void SubstructureAtomEnvironment::set_op(const std::string& value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtomEnvironment.op)
}
inline std::string* SubstructureAtomEnvironment::mutable_op() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureAtomEnvironment.op)
  return _internal_mutable_op();
}
inline const std::string& SubstructureAtomEnvironment::_internal_op() const {
  return op_.Get();
}
inline void SubstructureAtomEnvironment::_internal_set_op(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubstructureAtomEnvironment::set_op(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  op_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubstructureSearch.SubstructureAtomEnvironment.op)
}
inline void SubstructureAtomEnvironment::set_op(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.SubstructureAtomEnvironment.op)
}
inline void SubstructureAtomEnvironment::set_op(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.SubstructureAtomEnvironment.op)
}
inline std::string* SubstructureAtomEnvironment::_internal_mutable_op() {
  _has_bits_[0] |= 0x00000001u;
  return op_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubstructureAtomEnvironment::release_op() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.SubstructureAtomEnvironment.op)
  if (!_internal_has_op()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return op_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubstructureAtomEnvironment::set_allocated_op(std::string* op) {
  if (op != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  op_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.SubstructureAtomEnvironment.op)
}

// -------------------------------------------------------------------

// SubstructureAtom

// optional int32 id = 1;
inline bool SubstructureAtom::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SubstructureAtom::has_id() const {
  return _internal_has_id();
}
inline void SubstructureAtom::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubstructureAtom::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubstructureAtom::id() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.id)
  return _internal_id();
}
inline void SubstructureAtom::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void SubstructureAtom::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.id)
}

// optional bool match_as_match = 2;
inline bool SubstructureAtom::_internal_has_match_as_match() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SubstructureAtom::has_match_as_match() const {
  return _internal_has_match_as_match();
}
inline void SubstructureAtom::clear_match_as_match() {
  match_as_match_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool SubstructureAtom::_internal_match_as_match() const {
  return match_as_match_;
}
inline bool SubstructureAtom::match_as_match() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.match_as_match)
  return _internal_match_as_match();
}
inline void SubstructureAtom::_internal_set_match_as_match(bool value) {
  _has_bits_[0] |= 0x00000800u;
  match_as_match_ = value;
}
inline void SubstructureAtom::set_match_as_match(bool value) {
  _internal_set_match_as_match(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.match_as_match)
}

// optional string text_identifier = 3;
inline bool SubstructureAtom::_internal_has_text_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SubstructureAtom::has_text_identifier() const {
  return _internal_has_text_identifier();
}
inline void SubstructureAtom::clear_text_identifier() {
  text_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SubstructureAtom::text_identifier() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.text_identifier)
  return _internal_text_identifier();
}
inline void SubstructureAtom::set_text_identifier(const std::string& value) {
  _internal_set_text_identifier(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.text_identifier)
}
inline std::string* SubstructureAtom::mutable_text_identifier() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureAtom.text_identifier)
  return _internal_mutable_text_identifier();
}
inline const std::string& SubstructureAtom::_internal_text_identifier() const {
  return text_identifier_.Get();
}
inline void SubstructureAtom::_internal_set_text_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubstructureAtom::set_text_identifier(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_identifier_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubstructureSearch.SubstructureAtom.text_identifier)
}
inline void SubstructureAtom::set_text_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.SubstructureAtom.text_identifier)
}
inline void SubstructureAtom::set_text_identifier(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.SubstructureAtom.text_identifier)
}
inline std::string* SubstructureAtom::_internal_mutable_text_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return text_identifier_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubstructureAtom::release_text_identifier() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.SubstructureAtom.text_identifier)
  if (!_internal_has_text_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubstructureAtom::set_allocated_text_identifier(std::string* text_identifier) {
  if (text_identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.SubstructureAtom.text_identifier)
}

// optional uint32 atom_map_number = 4;
inline bool SubstructureAtom::_internal_has_atom_map_number() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SubstructureAtom::has_atom_map_number() const {
  return _internal_has_atom_map_number();
}
inline void SubstructureAtom::clear_atom_map_number() {
  atom_map_number_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::_internal_atom_map_number() const {
  return atom_map_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::atom_map_number() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.atom_map_number)
  return _internal_atom_map_number();
}
inline void SubstructureAtom::_internal_set_atom_map_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  atom_map_number_ = value;
}
inline void SubstructureAtom::set_atom_map_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_atom_map_number(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.atom_map_number)
}

// optional uint32 initial_atom_number = 5;
inline bool SubstructureAtom::_internal_has_initial_atom_number() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SubstructureAtom::has_initial_atom_number() const {
  return _internal_has_initial_atom_number();
}
inline void SubstructureAtom::clear_initial_atom_number() {
  initial_atom_number_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::_internal_initial_atom_number() const {
  return initial_atom_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::initial_atom_number() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.initial_atom_number)
  return _internal_initial_atom_number();
}
inline void SubstructureAtom::_internal_set_initial_atom_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  initial_atom_number_ = value;
}
inline void SubstructureAtom::set_initial_atom_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_initial_atom_number(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.initial_atom_number)
}

// optional uint32 or_id = 6;
inline bool SubstructureAtom::_internal_has_or_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SubstructureAtom::has_or_id() const {
  return _internal_has_or_id();
}
inline void SubstructureAtom::clear_or_id() {
  or_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::_internal_or_id() const {
  return or_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::or_id() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.or_id)
  return _internal_or_id();
}
inline void SubstructureAtom::_internal_set_or_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  or_id_ = value;
}
inline void SubstructureAtom::set_or_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_or_id(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.or_id)
}

// repeated .SubstructureSearch.SubstructureAtomSpecifier atom_properties = 7;
inline int SubstructureAtom::_internal_atom_properties_size() const {
  return atom_properties_.size();
}
inline int SubstructureAtom::atom_properties_size() const {
  return _internal_atom_properties_size();
}
inline void SubstructureAtom::clear_atom_properties() {
  atom_properties_.Clear();
}
inline ::SubstructureSearch::SubstructureAtomSpecifier* SubstructureAtom::mutable_atom_properties(int index) {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureAtom.atom_properties)
  return atom_properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtomSpecifier >*
SubstructureAtom::mutable_atom_properties() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtom.atom_properties)
  return &atom_properties_;
}
inline const ::SubstructureSearch::SubstructureAtomSpecifier& SubstructureAtom::_internal_atom_properties(int index) const {
  return atom_properties_.Get(index);
}
inline const ::SubstructureSearch::SubstructureAtomSpecifier& SubstructureAtom::atom_properties(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.atom_properties)
  return _internal_atom_properties(index);
}
inline ::SubstructureSearch::SubstructureAtomSpecifier* SubstructureAtom::_internal_add_atom_properties() {
  return atom_properties_.Add();
}
inline ::SubstructureSearch::SubstructureAtomSpecifier* SubstructureAtom::add_atom_properties() {
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtom.atom_properties)
  return _internal_add_atom_properties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtomSpecifier >&
SubstructureAtom::atom_properties() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtom.atom_properties)
  return atom_properties_;
}

// optional int32 or_operator = 8;
inline bool SubstructureAtom::_internal_has_or_operator() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SubstructureAtom::has_or_operator() const {
  return _internal_has_or_operator();
}
inline void SubstructureAtom::clear_or_operator() {
  or_operator_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubstructureAtom::_internal_or_operator() const {
  return or_operator_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubstructureAtom::or_operator() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.or_operator)
  return _internal_or_operator();
}
inline void SubstructureAtom::_internal_set_or_operator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  or_operator_ = value;
}
inline void SubstructureAtom::set_or_operator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_or_operator(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.or_operator)
}

// optional int32 ring_id = 9;
inline bool SubstructureAtom::_internal_has_ring_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SubstructureAtom::has_ring_id() const {
  return _internal_has_ring_id();
}
inline void SubstructureAtom::clear_ring_id() {
  ring_id_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubstructureAtom::_internal_ring_id() const {
  return ring_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubstructureAtom::ring_id() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.ring_id)
  return _internal_ring_id();
}
inline void SubstructureAtom::_internal_set_ring_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  ring_id_ = value;
}
inline void SubstructureAtom::set_ring_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ring_id(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.ring_id)
}

// optional uint32 fused_system_id = 10;
inline bool SubstructureAtom::_internal_has_fused_system_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SubstructureAtom::has_fused_system_id() const {
  return _internal_has_fused_system_id();
}
inline void SubstructureAtom::clear_fused_system_id() {
  fused_system_id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::_internal_fused_system_id() const {
  return fused_system_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::fused_system_id() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.fused_system_id)
  return _internal_fused_system_id();
}
inline void SubstructureAtom::_internal_set_fused_system_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  fused_system_id_ = value;
}
inline void SubstructureAtom::set_fused_system_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fused_system_id(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.fused_system_id)
}

// optional int32 fragment_id = 11;
inline bool SubstructureAtom::_internal_has_fragment_id() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SubstructureAtom::has_fragment_id() const {
  return _internal_has_fragment_id();
}
inline void SubstructureAtom::clear_fragment_id() {
  fragment_id_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubstructureAtom::_internal_fragment_id() const {
  return fragment_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubstructureAtom::fragment_id() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.fragment_id)
  return _internal_fragment_id();
}
inline void SubstructureAtom::_internal_set_fragment_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  fragment_id_ = value;
}
inline void SubstructureAtom::set_fragment_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fragment_id(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.fragment_id)
}

// optional double numeric_value = 12;
inline bool SubstructureAtom::_internal_has_numeric_value() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SubstructureAtom::has_numeric_value() const {
  return _internal_has_numeric_value();
}
inline void SubstructureAtom::clear_numeric_value() {
  numeric_value_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double SubstructureAtom::_internal_numeric_value() const {
  return numeric_value_;
}
inline double SubstructureAtom::numeric_value() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.numeric_value)
  return _internal_numeric_value();
}
inline void SubstructureAtom::_internal_set_numeric_value(double value) {
  _has_bits_[0] |= 0x00000400u;
  numeric_value_ = value;
}
inline void SubstructureAtom::set_numeric_value(double value) {
  _internal_set_numeric_value(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.numeric_value)
}

// optional bool include_in_embedding = 13;
inline bool SubstructureAtom::_internal_has_include_in_embedding() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SubstructureAtom::has_include_in_embedding() const {
  return _internal_has_include_in_embedding();
}
inline void SubstructureAtom::clear_include_in_embedding() {
  include_in_embedding_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool SubstructureAtom::_internal_include_in_embedding() const {
  return include_in_embedding_;
}
inline bool SubstructureAtom::include_in_embedding() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.include_in_embedding)
  return _internal_include_in_embedding();
}
inline void SubstructureAtom::_internal_set_include_in_embedding(bool value) {
  _has_bits_[0] |= 0x00001000u;
  include_in_embedding_ = value;
}
inline void SubstructureAtom::set_include_in_embedding(bool value) {
  _internal_set_include_in_embedding(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.include_in_embedding)
}

// string smarts = 14;
inline bool SubstructureAtom::_internal_has_smarts() const {
  return SmilesOrSmarts_case() == kSmarts;
}
inline bool SubstructureAtom::has_smarts() const {
  return _internal_has_smarts();
}
inline void SubstructureAtom::set_has_smarts() {
  _oneof_case_[0] = kSmarts;
}
inline void SubstructureAtom::clear_smarts() {
  if (_internal_has_smarts()) {
    SmilesOrSmarts_.smarts_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_SmilesOrSmarts();
  }
}
inline const std::string& SubstructureAtom::smarts() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.smarts)
  return _internal_smarts();
}
inline void SubstructureAtom::set_smarts(const std::string& value) {
  _internal_set_smarts(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.smarts)
}
inline std::string* SubstructureAtom::mutable_smarts() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureAtom.smarts)
  return _internal_mutable_smarts();
}
inline const std::string& SubstructureAtom::_internal_smarts() const {
  if (_internal_has_smarts()) {
    return SmilesOrSmarts_.smarts_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SubstructureAtom::_internal_set_smarts(const std::string& value) {
  if (!_internal_has_smarts()) {
    clear_SmilesOrSmarts();
    set_has_smarts();
    SmilesOrSmarts_.smarts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  SmilesOrSmarts_.smarts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubstructureAtom::set_smarts(std::string&& value) {
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.smarts)
  if (!_internal_has_smarts()) {
    clear_SmilesOrSmarts();
    set_has_smarts();
    SmilesOrSmarts_.smarts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  SmilesOrSmarts_.smarts_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubstructureSearch.SubstructureAtom.smarts)
}
inline void SubstructureAtom::set_smarts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_smarts()) {
    clear_SmilesOrSmarts();
    set_has_smarts();
    SmilesOrSmarts_.smarts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  SmilesOrSmarts_.smarts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.SubstructureAtom.smarts)
}
inline void SubstructureAtom::set_smarts(const char* value,
                             size_t size) {
  if (!_internal_has_smarts()) {
    clear_SmilesOrSmarts();
    set_has_smarts();
    SmilesOrSmarts_.smarts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  SmilesOrSmarts_.smarts_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.SubstructureAtom.smarts)
}
inline std::string* SubstructureAtom::_internal_mutable_smarts() {
  if (!_internal_has_smarts()) {
    clear_SmilesOrSmarts();
    set_has_smarts();
    SmilesOrSmarts_.smarts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return SmilesOrSmarts_.smarts_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubstructureAtom::release_smarts() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.SubstructureAtom.smarts)
  if (_internal_has_smarts()) {
    clear_has_SmilesOrSmarts();
    return SmilesOrSmarts_.smarts_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void SubstructureAtom::set_allocated_smarts(std::string* smarts) {
  if (has_SmilesOrSmarts()) {
    clear_SmilesOrSmarts();
  }
  if (smarts != nullptr) {
    set_has_smarts();
    SmilesOrSmarts_.smarts_.UnsafeSetDefault(smarts);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(smarts);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.SubstructureAtom.smarts)
}

// string atom_smarts = 15;
inline bool SubstructureAtom::_internal_has_atom_smarts() const {
  return SmilesOrSmarts_case() == kAtomSmarts;
}
inline bool SubstructureAtom::has_atom_smarts() const {
  return _internal_has_atom_smarts();
}
inline void SubstructureAtom::set_has_atom_smarts() {
  _oneof_case_[0] = kAtomSmarts;
}
inline void SubstructureAtom::clear_atom_smarts() {
  if (_internal_has_atom_smarts()) {
    SmilesOrSmarts_.atom_smarts_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_SmilesOrSmarts();
  }
}
inline const std::string& SubstructureAtom::atom_smarts() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.atom_smarts)
  return _internal_atom_smarts();
}
inline void SubstructureAtom::set_atom_smarts(const std::string& value) {
  _internal_set_atom_smarts(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.atom_smarts)
}
inline std::string* SubstructureAtom::mutable_atom_smarts() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureAtom.atom_smarts)
  return _internal_mutable_atom_smarts();
}
inline const std::string& SubstructureAtom::_internal_atom_smarts() const {
  if (_internal_has_atom_smarts()) {
    return SmilesOrSmarts_.atom_smarts_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SubstructureAtom::_internal_set_atom_smarts(const std::string& value) {
  if (!_internal_has_atom_smarts()) {
    clear_SmilesOrSmarts();
    set_has_atom_smarts();
    SmilesOrSmarts_.atom_smarts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  SmilesOrSmarts_.atom_smarts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubstructureAtom::set_atom_smarts(std::string&& value) {
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.atom_smarts)
  if (!_internal_has_atom_smarts()) {
    clear_SmilesOrSmarts();
    set_has_atom_smarts();
    SmilesOrSmarts_.atom_smarts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  SmilesOrSmarts_.atom_smarts_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubstructureSearch.SubstructureAtom.atom_smarts)
}
inline void SubstructureAtom::set_atom_smarts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_atom_smarts()) {
    clear_SmilesOrSmarts();
    set_has_atom_smarts();
    SmilesOrSmarts_.atom_smarts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  SmilesOrSmarts_.atom_smarts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.SubstructureAtom.atom_smarts)
}
inline void SubstructureAtom::set_atom_smarts(const char* value,
                             size_t size) {
  if (!_internal_has_atom_smarts()) {
    clear_SmilesOrSmarts();
    set_has_atom_smarts();
    SmilesOrSmarts_.atom_smarts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  SmilesOrSmarts_.atom_smarts_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.SubstructureAtom.atom_smarts)
}
inline std::string* SubstructureAtom::_internal_mutable_atom_smarts() {
  if (!_internal_has_atom_smarts()) {
    clear_SmilesOrSmarts();
    set_has_atom_smarts();
    SmilesOrSmarts_.atom_smarts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return SmilesOrSmarts_.atom_smarts_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubstructureAtom::release_atom_smarts() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.SubstructureAtom.atom_smarts)
  if (_internal_has_atom_smarts()) {
    clear_has_SmilesOrSmarts();
    return SmilesOrSmarts_.atom_smarts_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void SubstructureAtom::set_allocated_atom_smarts(std::string* atom_smarts) {
  if (has_SmilesOrSmarts()) {
    clear_SmilesOrSmarts();
  }
  if (atom_smarts != nullptr) {
    set_has_atom_smarts();
    SmilesOrSmarts_.atom_smarts_.UnsafeSetDefault(atom_smarts);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(atom_smarts);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.SubstructureAtom.atom_smarts)
}

// string smiles = 16;
inline bool SubstructureAtom::_internal_has_smiles() const {
  return SmilesOrSmarts_case() == kSmiles;
}
inline bool SubstructureAtom::has_smiles() const {
  return _internal_has_smiles();
}
inline void SubstructureAtom::set_has_smiles() {
  _oneof_case_[0] = kSmiles;
}
inline void SubstructureAtom::clear_smiles() {
  if (_internal_has_smiles()) {
    SmilesOrSmarts_.smiles_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_SmilesOrSmarts();
  }
}
inline const std::string& SubstructureAtom::smiles() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.smiles)
  return _internal_smiles();
}
inline void SubstructureAtom::set_smiles(const std::string& value) {
  _internal_set_smiles(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.smiles)
}
inline std::string* SubstructureAtom::mutable_smiles() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureAtom.smiles)
  return _internal_mutable_smiles();
}
inline const std::string& SubstructureAtom::_internal_smiles() const {
  if (_internal_has_smiles()) {
    return SmilesOrSmarts_.smiles_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SubstructureAtom::_internal_set_smiles(const std::string& value) {
  if (!_internal_has_smiles()) {
    clear_SmilesOrSmarts();
    set_has_smiles();
    SmilesOrSmarts_.smiles_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  SmilesOrSmarts_.smiles_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubstructureAtom::set_smiles(std::string&& value) {
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.smiles)
  if (!_internal_has_smiles()) {
    clear_SmilesOrSmarts();
    set_has_smiles();
    SmilesOrSmarts_.smiles_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  SmilesOrSmarts_.smiles_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubstructureSearch.SubstructureAtom.smiles)
}
inline void SubstructureAtom::set_smiles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_smiles()) {
    clear_SmilesOrSmarts();
    set_has_smiles();
    SmilesOrSmarts_.smiles_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  SmilesOrSmarts_.smiles_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.SubstructureAtom.smiles)
}
inline void SubstructureAtom::set_smiles(const char* value,
                             size_t size) {
  if (!_internal_has_smiles()) {
    clear_SmilesOrSmarts();
    set_has_smiles();
    SmilesOrSmarts_.smiles_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  SmilesOrSmarts_.smiles_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.SubstructureAtom.smiles)
}
inline std::string* SubstructureAtom::_internal_mutable_smiles() {
  if (!_internal_has_smiles()) {
    clear_SmilesOrSmarts();
    set_has_smiles();
    SmilesOrSmarts_.smiles_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return SmilesOrSmarts_.smiles_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubstructureAtom::release_smiles() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.SubstructureAtom.smiles)
  if (_internal_has_smiles()) {
    clear_has_SmilesOrSmarts();
    return SmilesOrSmarts_.smiles_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void SubstructureAtom::set_allocated_smiles(std::string* smiles) {
  if (has_SmilesOrSmarts()) {
    clear_SmilesOrSmarts();
  }
  if (smiles != nullptr) {
    set_has_smiles();
    SmilesOrSmarts_.smiles_.UnsafeSetDefault(smiles);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(smiles);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.SubstructureAtom.smiles)
}

// repeated .SubstructureSearch.SubstructureAtomEnvironment environment = 17;
inline int SubstructureAtom::_internal_environment_size() const {
  return environment_.size();
}
inline int SubstructureAtom::environment_size() const {
  return _internal_environment_size();
}
inline void SubstructureAtom::clear_environment() {
  environment_.Clear();
}
inline ::SubstructureSearch::SubstructureAtomEnvironment* SubstructureAtom::mutable_environment(int index) {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureAtom.environment)
  return environment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtomEnvironment >*
SubstructureAtom::mutable_environment() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtom.environment)
  return &environment_;
}
inline const ::SubstructureSearch::SubstructureAtomEnvironment& SubstructureAtom::_internal_environment(int index) const {
  return environment_.Get(index);
}
inline const ::SubstructureSearch::SubstructureAtomEnvironment& SubstructureAtom::environment(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.environment)
  return _internal_environment(index);
}
inline ::SubstructureSearch::SubstructureAtomEnvironment* SubstructureAtom::_internal_add_environment() {
  return environment_.Add();
}
inline ::SubstructureSearch::SubstructureAtomEnvironment* SubstructureAtom::add_environment() {
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtom.environment)
  return _internal_add_environment();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtomEnvironment >&
SubstructureAtom::environment() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtom.environment)
  return environment_;
}

// repeated .SubstructureSearch.SubstructureBond query_bond = 21;
inline int SubstructureAtom::_internal_query_bond_size() const {
  return query_bond_.size();
}
inline int SubstructureAtom::query_bond_size() const {
  return _internal_query_bond_size();
}
inline void SubstructureAtom::clear_query_bond() {
  query_bond_.Clear();
}
inline ::SubstructureSearch::SubstructureBond* SubstructureAtom::mutable_query_bond(int index) {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureAtom.query_bond)
  return query_bond_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureBond >*
SubstructureAtom::mutable_query_bond() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtom.query_bond)
  return &query_bond_;
}
inline const ::SubstructureSearch::SubstructureBond& SubstructureAtom::_internal_query_bond(int index) const {
  return query_bond_.Get(index);
}
inline const ::SubstructureSearch::SubstructureBond& SubstructureAtom::query_bond(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.query_bond)
  return _internal_query_bond(index);
}
inline ::SubstructureSearch::SubstructureBond* SubstructureAtom::_internal_add_query_bond() {
  return query_bond_.Add();
}
inline ::SubstructureSearch::SubstructureBond* SubstructureAtom::add_query_bond() {
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtom.query_bond)
  return _internal_add_query_bond();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureBond >&
SubstructureAtom::query_bond() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtom.query_bond)
  return query_bond_;
}

// optional string bond_smarts = 22;
inline bool SubstructureAtom::_internal_has_bond_smarts() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SubstructureAtom::has_bond_smarts() const {
  return _internal_has_bond_smarts();
}
inline void SubstructureAtom::clear_bond_smarts() {
  bond_smarts_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SubstructureAtom::bond_smarts() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.bond_smarts)
  return _internal_bond_smarts();
}
inline void SubstructureAtom::set_bond_smarts(const std::string& value) {
  _internal_set_bond_smarts(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.bond_smarts)
}
inline std::string* SubstructureAtom::mutable_bond_smarts() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureAtom.bond_smarts)
  return _internal_mutable_bond_smarts();
}
inline const std::string& SubstructureAtom::_internal_bond_smarts() const {
  return bond_smarts_.Get();
}
inline void SubstructureAtom::_internal_set_bond_smarts(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  bond_smarts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubstructureAtom::set_bond_smarts(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  bond_smarts_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubstructureSearch.SubstructureAtom.bond_smarts)
}
inline void SubstructureAtom::set_bond_smarts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  bond_smarts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.SubstructureAtom.bond_smarts)
}
inline void SubstructureAtom::set_bond_smarts(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  bond_smarts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.SubstructureAtom.bond_smarts)
}
inline std::string* SubstructureAtom::_internal_mutable_bond_smarts() {
  _has_bits_[0] |= 0x00000002u;
  return bond_smarts_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubstructureAtom::release_bond_smarts() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.SubstructureAtom.bond_smarts)
  if (!_internal_has_bond_smarts()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return bond_smarts_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubstructureAtom::set_allocated_bond_smarts(std::string* bond_smarts) {
  if (bond_smarts != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bond_smarts_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bond_smarts,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.SubstructureAtom.bond_smarts)
}

// repeated uint32 single_bond = 25;
inline int SubstructureAtom::_internal_single_bond_size() const {
  return single_bond_.size();
}
inline int SubstructureAtom::single_bond_size() const {
  return _internal_single_bond_size();
}
inline void SubstructureAtom::clear_single_bond() {
  single_bond_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::_internal_single_bond(int index) const {
  return single_bond_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::single_bond(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.single_bond)
  return _internal_single_bond(index);
}
inline void SubstructureAtom::set_single_bond(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  single_bond_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.single_bond)
}
inline void SubstructureAtom::_internal_add_single_bond(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  single_bond_.Add(value);
}
inline void SubstructureAtom::add_single_bond(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_single_bond(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtom.single_bond)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtom::_internal_single_bond() const {
  return single_bond_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtom::single_bond() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtom.single_bond)
  return _internal_single_bond();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtom::_internal_mutable_single_bond() {
  return &single_bond_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtom::mutable_single_bond() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtom.single_bond)
  return _internal_mutable_single_bond();
}

// repeated uint32 double_bond = 26;
inline int SubstructureAtom::_internal_double_bond_size() const {
  return double_bond_.size();
}
inline int SubstructureAtom::double_bond_size() const {
  return _internal_double_bond_size();
}
inline void SubstructureAtom::clear_double_bond() {
  double_bond_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::_internal_double_bond(int index) const {
  return double_bond_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::double_bond(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.double_bond)
  return _internal_double_bond(index);
}
inline void SubstructureAtom::set_double_bond(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  double_bond_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.double_bond)
}
inline void SubstructureAtom::_internal_add_double_bond(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  double_bond_.Add(value);
}
inline void SubstructureAtom::add_double_bond(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_double_bond(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtom.double_bond)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtom::_internal_double_bond() const {
  return double_bond_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtom::double_bond() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtom.double_bond)
  return _internal_double_bond();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtom::_internal_mutable_double_bond() {
  return &double_bond_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtom::mutable_double_bond() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtom.double_bond)
  return _internal_mutable_double_bond();
}

// repeated uint32 triple_bond = 27;
inline int SubstructureAtom::_internal_triple_bond_size() const {
  return triple_bond_.size();
}
inline int SubstructureAtom::triple_bond_size() const {
  return _internal_triple_bond_size();
}
inline void SubstructureAtom::clear_triple_bond() {
  triple_bond_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::_internal_triple_bond(int index) const {
  return triple_bond_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::triple_bond(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.triple_bond)
  return _internal_triple_bond(index);
}
inline void SubstructureAtom::set_triple_bond(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  triple_bond_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.triple_bond)
}
inline void SubstructureAtom::_internal_add_triple_bond(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  triple_bond_.Add(value);
}
inline void SubstructureAtom::add_triple_bond(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_triple_bond(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtom.triple_bond)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtom::_internal_triple_bond() const {
  return triple_bond_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtom::triple_bond() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtom.triple_bond)
  return _internal_triple_bond();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtom::_internal_mutable_triple_bond() {
  return &triple_bond_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtom::mutable_triple_bond() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtom.triple_bond)
  return _internal_mutable_triple_bond();
}

// repeated uint32 aromatic_bond = 28;
inline int SubstructureAtom::_internal_aromatic_bond_size() const {
  return aromatic_bond_.size();
}
inline int SubstructureAtom::aromatic_bond_size() const {
  return _internal_aromatic_bond_size();
}
inline void SubstructureAtom::clear_aromatic_bond() {
  aromatic_bond_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::_internal_aromatic_bond(int index) const {
  return aromatic_bond_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::aromatic_bond(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.aromatic_bond)
  return _internal_aromatic_bond(index);
}
inline void SubstructureAtom::set_aromatic_bond(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  aromatic_bond_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.aromatic_bond)
}
inline void SubstructureAtom::_internal_add_aromatic_bond(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  aromatic_bond_.Add(value);
}
inline void SubstructureAtom::add_aromatic_bond(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_aromatic_bond(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtom.aromatic_bond)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtom::_internal_aromatic_bond() const {
  return aromatic_bond_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtom::aromatic_bond() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtom.aromatic_bond)
  return _internal_aromatic_bond();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtom::_internal_mutable_aromatic_bond() {
  return &aromatic_bond_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtom::mutable_aromatic_bond() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtom.aromatic_bond)
  return _internal_mutable_aromatic_bond();
}

// repeated uint32 bond = 29;
inline int SubstructureAtom::_internal_bond_size() const {
  return bond_.size();
}
inline int SubstructureAtom::bond_size() const {
  return _internal_bond_size();
}
inline void SubstructureAtom::clear_bond() {
  bond_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::_internal_bond(int index) const {
  return bond_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::bond(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.bond)
  return _internal_bond(index);
}
inline void SubstructureAtom::set_bond(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  bond_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.bond)
}
inline void SubstructureAtom::_internal_add_bond(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  bond_.Add(value);
}
inline void SubstructureAtom::add_bond(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_bond(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtom.bond)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtom::_internal_bond() const {
  return bond_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtom::bond() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtom.bond)
  return _internal_bond();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtom::_internal_mutable_bond() {
  return &bond_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtom::mutable_bond() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtom.bond)
  return _internal_mutable_bond();
}

// repeated .SubstructureSearch.SubstructureAtomSpecifier preference = 23;
inline int SubstructureAtom::_internal_preference_size() const {
  return preference_.size();
}
inline int SubstructureAtom::preference_size() const {
  return _internal_preference_size();
}
inline void SubstructureAtom::clear_preference() {
  preference_.Clear();
}
inline ::SubstructureSearch::SubstructureAtomSpecifier* SubstructureAtom::mutable_preference(int index) {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureAtom.preference)
  return preference_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtomSpecifier >*
SubstructureAtom::mutable_preference() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtom.preference)
  return &preference_;
}
inline const ::SubstructureSearch::SubstructureAtomSpecifier& SubstructureAtom::_internal_preference(int index) const {
  return preference_.Get(index);
}
inline const ::SubstructureSearch::SubstructureAtomSpecifier& SubstructureAtom::preference(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.preference)
  return _internal_preference(index);
}
inline ::SubstructureSearch::SubstructureAtomSpecifier* SubstructureAtom::_internal_add_preference() {
  return preference_.Add();
}
inline ::SubstructureSearch::SubstructureAtomSpecifier* SubstructureAtom::add_preference() {
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtom.preference)
  return _internal_add_preference();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtomSpecifier >&
SubstructureAtom::preference() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtom.preference)
  return preference_;
}

// optional bool sum_all_preference_hits = 24;
inline bool SubstructureAtom::_internal_has_sum_all_preference_hits() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SubstructureAtom::has_sum_all_preference_hits() const {
  return _internal_has_sum_all_preference_hits();
}
inline void SubstructureAtom::clear_sum_all_preference_hits() {
  sum_all_preference_hits_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool SubstructureAtom::_internal_sum_all_preference_hits() const {
  return sum_all_preference_hits_;
}
inline bool SubstructureAtom::sum_all_preference_hits() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.sum_all_preference_hits)
  return _internal_sum_all_preference_hits();
}
inline void SubstructureAtom::_internal_set_sum_all_preference_hits(bool value) {
  _has_bits_[0] |= 0x00002000u;
  sum_all_preference_hits_ = value;
}
inline void SubstructureAtom::set_sum_all_preference_hits(bool value) {
  _internal_set_sum_all_preference_hits(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.sum_all_preference_hits)
}

// repeated uint32 unmatched_atoms_attached = 30;
inline int SubstructureAtom::_internal_unmatched_atoms_attached_size() const {
  return unmatched_atoms_attached_.size();
}
inline int SubstructureAtom::unmatched_atoms_attached_size() const {
  return _internal_unmatched_atoms_attached_size();
}
inline void SubstructureAtom::clear_unmatched_atoms_attached() {
  unmatched_atoms_attached_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::_internal_unmatched_atoms_attached(int index) const {
  return unmatched_atoms_attached_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::unmatched_atoms_attached(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.unmatched_atoms_attached)
  return _internal_unmatched_atoms_attached(index);
}
inline void SubstructureAtom::set_unmatched_atoms_attached(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  unmatched_atoms_attached_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.unmatched_atoms_attached)
}
inline void SubstructureAtom::_internal_add_unmatched_atoms_attached(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  unmatched_atoms_attached_.Add(value);
}
inline void SubstructureAtom::add_unmatched_atoms_attached(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_unmatched_atoms_attached(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureAtom.unmatched_atoms_attached)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtom::_internal_unmatched_atoms_attached() const {
  return unmatched_atoms_attached_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureAtom::unmatched_atoms_attached() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureAtom.unmatched_atoms_attached)
  return _internal_unmatched_atoms_attached();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtom::_internal_mutable_unmatched_atoms_attached() {
  return &unmatched_atoms_attached_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureAtom::mutable_unmatched_atoms_attached() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureAtom.unmatched_atoms_attached)
  return _internal_mutable_unmatched_atoms_attached();
}

// optional uint32 min_unmatched_atoms_attached = 31;
inline bool SubstructureAtom::_internal_has_min_unmatched_atoms_attached() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SubstructureAtom::has_min_unmatched_atoms_attached() const {
  return _internal_has_min_unmatched_atoms_attached();
}
inline void SubstructureAtom::clear_min_unmatched_atoms_attached() {
  min_unmatched_atoms_attached_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::_internal_min_unmatched_atoms_attached() const {
  return min_unmatched_atoms_attached_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::min_unmatched_atoms_attached() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.min_unmatched_atoms_attached)
  return _internal_min_unmatched_atoms_attached();
}
inline void SubstructureAtom::_internal_set_min_unmatched_atoms_attached(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  min_unmatched_atoms_attached_ = value;
}
inline void SubstructureAtom::set_min_unmatched_atoms_attached(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_unmatched_atoms_attached(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.min_unmatched_atoms_attached)
}

// optional uint32 max_unmatched_atoms_attached = 32;
inline bool SubstructureAtom::_internal_has_max_unmatched_atoms_attached() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SubstructureAtom::has_max_unmatched_atoms_attached() const {
  return _internal_has_max_unmatched_atoms_attached();
}
inline void SubstructureAtom::clear_max_unmatched_atoms_attached() {
  max_unmatched_atoms_attached_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::_internal_max_unmatched_atoms_attached() const {
  return max_unmatched_atoms_attached_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::max_unmatched_atoms_attached() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.max_unmatched_atoms_attached)
  return _internal_max_unmatched_atoms_attached();
}
inline void SubstructureAtom::_internal_set_max_unmatched_atoms_attached(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  max_unmatched_atoms_attached_ = value;
}
inline void SubstructureAtom::set_max_unmatched_atoms_attached(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_unmatched_atoms_attached(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.max_unmatched_atoms_attached)
}

// optional uint32 atom_type_group = 33;
inline bool SubstructureAtom::_internal_has_atom_type_group() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SubstructureAtom::has_atom_type_group() const {
  return _internal_has_atom_type_group();
}
inline void SubstructureAtom::clear_atom_type_group() {
  atom_type_group_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::_internal_atom_type_group() const {
  return atom_type_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureAtom::atom_type_group() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureAtom.atom_type_group)
  return _internal_atom_type_group();
}
inline void SubstructureAtom::_internal_set_atom_type_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  atom_type_group_ = value;
}
inline void SubstructureAtom::set_atom_type_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_atom_type_group(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureAtom.atom_type_group)
}

inline bool SubstructureAtom::has_SmilesOrSmarts() const {
  return SmilesOrSmarts_case() != SMILESORSMARTS_NOT_SET;
}
inline void SubstructureAtom::clear_has_SmilesOrSmarts() {
  _oneof_case_[0] = SMILESORSMARTS_NOT_SET;
}
inline SubstructureAtom::SmilesOrSmartsCase SubstructureAtom::SmilesOrSmarts_case() const {
  return SubstructureAtom::SmilesOrSmartsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SubstructureEnvironment

// optional uint32 id = 1;
inline bool SubstructureEnvironment::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SubstructureEnvironment::has_id() const {
  return _internal_has_id();
}
inline void SubstructureEnvironment::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureEnvironment::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureEnvironment::id() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureEnvironment.id)
  return _internal_id();
}
inline void SubstructureEnvironment::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void SubstructureEnvironment::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureEnvironment.id)
}

// repeated string smarts = 3;
inline int SubstructureEnvironment::_internal_smarts_size() const {
  return smarts_.size();
}
inline int SubstructureEnvironment::smarts_size() const {
  return _internal_smarts_size();
}
inline void SubstructureEnvironment::clear_smarts() {
  smarts_.Clear();
}
inline std::string* SubstructureEnvironment::add_smarts() {
  // @@protoc_insertion_point(field_add_mutable:SubstructureSearch.SubstructureEnvironment.smarts)
  return _internal_add_smarts();
}
inline const std::string& SubstructureEnvironment::_internal_smarts(int index) const {
  return smarts_.Get(index);
}
inline const std::string& SubstructureEnvironment::smarts(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureEnvironment.smarts)
  return _internal_smarts(index);
}
inline std::string* SubstructureEnvironment::mutable_smarts(int index) {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureEnvironment.smarts)
  return smarts_.Mutable(index);
}
inline void SubstructureEnvironment::set_smarts(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureEnvironment.smarts)
  smarts_.Mutable(index)->assign(value);
}
inline void SubstructureEnvironment::set_smarts(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureEnvironment.smarts)
  smarts_.Mutable(index)->assign(std::move(value));
}
inline void SubstructureEnvironment::set_smarts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  smarts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.SubstructureEnvironment.smarts)
}
inline void SubstructureEnvironment::set_smarts(int index, const char* value, size_t size) {
  smarts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.SubstructureEnvironment.smarts)
}
inline std::string* SubstructureEnvironment::_internal_add_smarts() {
  return smarts_.Add();
}
inline void SubstructureEnvironment::add_smarts(const std::string& value) {
  smarts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureEnvironment.smarts)
}
inline void SubstructureEnvironment::add_smarts(std::string&& value) {
  smarts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureEnvironment.smarts)
}
inline void SubstructureEnvironment::add_smarts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  smarts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SubstructureSearch.SubstructureEnvironment.smarts)
}
inline void SubstructureEnvironment::add_smarts(const char* value, size_t size) {
  smarts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SubstructureSearch.SubstructureEnvironment.smarts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SubstructureEnvironment::smarts() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureEnvironment.smarts)
  return smarts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SubstructureEnvironment::mutable_smarts() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureEnvironment.smarts)
  return &smarts_;
}

// repeated string smiles = 4;
inline int SubstructureEnvironment::_internal_smiles_size() const {
  return smiles_.size();
}
inline int SubstructureEnvironment::smiles_size() const {
  return _internal_smiles_size();
}
inline void SubstructureEnvironment::clear_smiles() {
  smiles_.Clear();
}
inline std::string* SubstructureEnvironment::add_smiles() {
  // @@protoc_insertion_point(field_add_mutable:SubstructureSearch.SubstructureEnvironment.smiles)
  return _internal_add_smiles();
}
inline const std::string& SubstructureEnvironment::_internal_smiles(int index) const {
  return smiles_.Get(index);
}
inline const std::string& SubstructureEnvironment::smiles(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureEnvironment.smiles)
  return _internal_smiles(index);
}
inline std::string* SubstructureEnvironment::mutable_smiles(int index) {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureEnvironment.smiles)
  return smiles_.Mutable(index);
}
inline void SubstructureEnvironment::set_smiles(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureEnvironment.smiles)
  smiles_.Mutable(index)->assign(value);
}
inline void SubstructureEnvironment::set_smiles(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureEnvironment.smiles)
  smiles_.Mutable(index)->assign(std::move(value));
}
inline void SubstructureEnvironment::set_smiles(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  smiles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.SubstructureEnvironment.smiles)
}
inline void SubstructureEnvironment::set_smiles(int index, const char* value, size_t size) {
  smiles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.SubstructureEnvironment.smiles)
}
inline std::string* SubstructureEnvironment::_internal_add_smiles() {
  return smiles_.Add();
}
inline void SubstructureEnvironment::add_smiles(const std::string& value) {
  smiles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureEnvironment.smiles)
}
inline void SubstructureEnvironment::add_smiles(std::string&& value) {
  smiles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureEnvironment.smiles)
}
inline void SubstructureEnvironment::add_smiles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  smiles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SubstructureSearch.SubstructureEnvironment.smiles)
}
inline void SubstructureEnvironment::add_smiles(const char* value, size_t size) {
  smiles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SubstructureSearch.SubstructureEnvironment.smiles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SubstructureEnvironment::smiles() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureEnvironment.smiles)
  return smiles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SubstructureEnvironment::mutable_smiles() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureEnvironment.smiles)
  return &smiles_;
}

// repeated .SubstructureSearch.SubstructureAtom query_atom = 5;
inline int SubstructureEnvironment::_internal_query_atom_size() const {
  return query_atom_.size();
}
inline int SubstructureEnvironment::query_atom_size() const {
  return _internal_query_atom_size();
}
inline void SubstructureEnvironment::clear_query_atom() {
  query_atom_.Clear();
}
inline ::SubstructureSearch::SubstructureAtom* SubstructureEnvironment::mutable_query_atom(int index) {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureEnvironment.query_atom)
  return query_atom_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtom >*
SubstructureEnvironment::mutable_query_atom() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureEnvironment.query_atom)
  return &query_atom_;
}
inline const ::SubstructureSearch::SubstructureAtom& SubstructureEnvironment::_internal_query_atom(int index) const {
  return query_atom_.Get(index);
}
inline const ::SubstructureSearch::SubstructureAtom& SubstructureEnvironment::query_atom(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureEnvironment.query_atom)
  return _internal_query_atom(index);
}
inline ::SubstructureSearch::SubstructureAtom* SubstructureEnvironment::_internal_add_query_atom() {
  return query_atom_.Add();
}
inline ::SubstructureSearch::SubstructureAtom* SubstructureEnvironment::add_query_atom() {
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureEnvironment.query_atom)
  return _internal_add_query_atom();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtom >&
SubstructureEnvironment::query_atom() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureEnvironment.query_atom)
  return query_atom_;
}

// optional .SubstructureSearch.EnvironmentAttachment attachment = 6;
inline bool SubstructureEnvironment::_internal_has_attachment() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || attachment_ != nullptr);
  return value;
}
inline bool SubstructureEnvironment::has_attachment() const {
  return _internal_has_attachment();
}
inline void SubstructureEnvironment::clear_attachment() {
  if (attachment_ != nullptr) attachment_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::SubstructureSearch::EnvironmentAttachment& SubstructureEnvironment::_internal_attachment() const {
  const ::SubstructureSearch::EnvironmentAttachment* p = attachment_;
  return p != nullptr ? *p : reinterpret_cast<const ::SubstructureSearch::EnvironmentAttachment&>(
      ::SubstructureSearch::_EnvironmentAttachment_default_instance_);
}
inline const ::SubstructureSearch::EnvironmentAttachment& SubstructureEnvironment::attachment() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureEnvironment.attachment)
  return _internal_attachment();
}
inline void SubstructureEnvironment::unsafe_arena_set_allocated_attachment(
    ::SubstructureSearch::EnvironmentAttachment* attachment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attachment_);
  }
  attachment_ = attachment;
  if (attachment) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SubstructureSearch.SubstructureEnvironment.attachment)
}
inline ::SubstructureSearch::EnvironmentAttachment* SubstructureEnvironment::release_attachment() {
  _has_bits_[0] &= ~0x00000001u;
  ::SubstructureSearch::EnvironmentAttachment* temp = attachment_;
  attachment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SubstructureSearch::EnvironmentAttachment* SubstructureEnvironment::unsafe_arena_release_attachment() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.SubstructureEnvironment.attachment)
  _has_bits_[0] &= ~0x00000001u;
  ::SubstructureSearch::EnvironmentAttachment* temp = attachment_;
  attachment_ = nullptr;
  return temp;
}
inline ::SubstructureSearch::EnvironmentAttachment* SubstructureEnvironment::_internal_mutable_attachment() {
  _has_bits_[0] |= 0x00000001u;
  if (attachment_ == nullptr) {
    auto* p = CreateMaybeMessage<::SubstructureSearch::EnvironmentAttachment>(GetArena());
    attachment_ = p;
  }
  return attachment_;
}
inline ::SubstructureSearch::EnvironmentAttachment* SubstructureEnvironment::mutable_attachment() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureEnvironment.attachment)
  return _internal_mutable_attachment();
}
inline void SubstructureEnvironment::set_allocated_attachment(::SubstructureSearch::EnvironmentAttachment* attachment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete attachment_;
  }
  if (attachment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attachment);
    if (message_arena != submessage_arena) {
      attachment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attachment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  attachment_ = attachment;
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.SubstructureEnvironment.attachment)
}

// repeated string bond = 7;
inline int SubstructureEnvironment::_internal_bond_size() const {
  return bond_.size();
}
inline int SubstructureEnvironment::bond_size() const {
  return _internal_bond_size();
}
inline void SubstructureEnvironment::clear_bond() {
  bond_.Clear();
}
inline std::string* SubstructureEnvironment::add_bond() {
  // @@protoc_insertion_point(field_add_mutable:SubstructureSearch.SubstructureEnvironment.bond)
  return _internal_add_bond();
}
inline const std::string& SubstructureEnvironment::_internal_bond(int index) const {
  return bond_.Get(index);
}
inline const std::string& SubstructureEnvironment::bond(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureEnvironment.bond)
  return _internal_bond(index);
}
inline std::string* SubstructureEnvironment::mutable_bond(int index) {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureEnvironment.bond)
  return bond_.Mutable(index);
}
inline void SubstructureEnvironment::set_bond(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureEnvironment.bond)
  bond_.Mutable(index)->assign(value);
}
inline void SubstructureEnvironment::set_bond(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureEnvironment.bond)
  bond_.Mutable(index)->assign(std::move(value));
}
inline void SubstructureEnvironment::set_bond(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bond_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.SubstructureEnvironment.bond)
}
inline void SubstructureEnvironment::set_bond(int index, const char* value, size_t size) {
  bond_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.SubstructureEnvironment.bond)
}
inline std::string* SubstructureEnvironment::_internal_add_bond() {
  return bond_.Add();
}
inline void SubstructureEnvironment::add_bond(const std::string& value) {
  bond_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureEnvironment.bond)
}
inline void SubstructureEnvironment::add_bond(std::string&& value) {
  bond_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureEnvironment.bond)
}
inline void SubstructureEnvironment::add_bond(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bond_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SubstructureSearch.SubstructureEnvironment.bond)
}
inline void SubstructureEnvironment::add_bond(const char* value, size_t size) {
  bond_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SubstructureSearch.SubstructureEnvironment.bond)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SubstructureEnvironment::bond() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureEnvironment.bond)
  return bond_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SubstructureEnvironment::mutable_bond() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureEnvironment.bond)
  return &bond_;
}

// optional uint32 or_id = 8;
inline bool SubstructureEnvironment::_internal_has_or_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SubstructureEnvironment::has_or_id() const {
  return _internal_has_or_id();
}
inline void SubstructureEnvironment::clear_or_id() {
  or_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureEnvironment::_internal_or_id() const {
  return or_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureEnvironment::or_id() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureEnvironment.or_id)
  return _internal_or_id();
}
inline void SubstructureEnvironment::_internal_set_or_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  or_id_ = value;
}
inline void SubstructureEnvironment::set_or_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_or_id(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureEnvironment.or_id)
}

// optional uint32 and_id = 9;
inline bool SubstructureEnvironment::_internal_has_and_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SubstructureEnvironment::has_and_id() const {
  return _internal_has_and_id();
}
inline void SubstructureEnvironment::clear_and_id() {
  and_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureEnvironment::_internal_and_id() const {
  return and_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureEnvironment::and_id() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureEnvironment.and_id)
  return _internal_and_id();
}
inline void SubstructureEnvironment::_internal_set_and_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  and_id_ = value;
}
inline void SubstructureEnvironment::set_and_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_and_id(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureEnvironment.and_id)
}

// repeated uint32 hits_needed = 10;
inline int SubstructureEnvironment::_internal_hits_needed_size() const {
  return hits_needed_.size();
}
inline int SubstructureEnvironment::hits_needed_size() const {
  return _internal_hits_needed_size();
}
inline void SubstructureEnvironment::clear_hits_needed() {
  hits_needed_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureEnvironment::_internal_hits_needed(int index) const {
  return hits_needed_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureEnvironment::hits_needed(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureEnvironment.hits_needed)
  return _internal_hits_needed(index);
}
inline void SubstructureEnvironment::set_hits_needed(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  hits_needed_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureEnvironment.hits_needed)
}
inline void SubstructureEnvironment::_internal_add_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  hits_needed_.Add(value);
}
inline void SubstructureEnvironment::add_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_hits_needed(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureEnvironment.hits_needed)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureEnvironment::_internal_hits_needed() const {
  return hits_needed_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SubstructureEnvironment::hits_needed() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureEnvironment.hits_needed)
  return _internal_hits_needed();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureEnvironment::_internal_mutable_hits_needed() {
  return &hits_needed_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SubstructureEnvironment::mutable_hits_needed() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureEnvironment.hits_needed)
  return _internal_mutable_hits_needed();
}

// optional uint32 min_hits_needed = 11;
inline bool SubstructureEnvironment::_internal_has_min_hits_needed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SubstructureEnvironment::has_min_hits_needed() const {
  return _internal_has_min_hits_needed();
}
inline void SubstructureEnvironment::clear_min_hits_needed() {
  min_hits_needed_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureEnvironment::_internal_min_hits_needed() const {
  return min_hits_needed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureEnvironment::min_hits_needed() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureEnvironment.min_hits_needed)
  return _internal_min_hits_needed();
}
inline void SubstructureEnvironment::_internal_set_min_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  min_hits_needed_ = value;
}
inline void SubstructureEnvironment::set_min_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_hits_needed(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureEnvironment.min_hits_needed)
}

// optional uint32 max_hits_needed = 12;
inline bool SubstructureEnvironment::_internal_has_max_hits_needed() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SubstructureEnvironment::has_max_hits_needed() const {
  return _internal_has_max_hits_needed();
}
inline void SubstructureEnvironment::clear_max_hits_needed() {
  max_hits_needed_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureEnvironment::_internal_max_hits_needed() const {
  return max_hits_needed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureEnvironment::max_hits_needed() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureEnvironment.max_hits_needed)
  return _internal_max_hits_needed();
}
inline void SubstructureEnvironment::_internal_set_max_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  max_hits_needed_ = value;
}
inline void SubstructureEnvironment::set_max_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_hits_needed(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureEnvironment.max_hits_needed)
}

// optional bool no_other_substituents_allowed = 13;
inline bool SubstructureEnvironment::_internal_has_no_other_substituents_allowed() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SubstructureEnvironment::has_no_other_substituents_allowed() const {
  return _internal_has_no_other_substituents_allowed();
}
inline void SubstructureEnvironment::clear_no_other_substituents_allowed() {
  no_other_substituents_allowed_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool SubstructureEnvironment::_internal_no_other_substituents_allowed() const {
  return no_other_substituents_allowed_;
}
inline bool SubstructureEnvironment::no_other_substituents_allowed() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureEnvironment.no_other_substituents_allowed)
  return _internal_no_other_substituents_allowed();
}
inline void SubstructureEnvironment::_internal_set_no_other_substituents_allowed(bool value) {
  _has_bits_[0] |= 0x00000040u;
  no_other_substituents_allowed_ = value;
}
inline void SubstructureEnvironment::set_no_other_substituents_allowed(bool value) {
  _internal_set_no_other_substituents_allowed(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureEnvironment.no_other_substituents_allowed)
}

// optional bool env_matches_can_share_attachment_points = 15;
inline bool SubstructureEnvironment::_internal_has_env_matches_can_share_attachment_points() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SubstructureEnvironment::has_env_matches_can_share_attachment_points() const {
  return _internal_has_env_matches_can_share_attachment_points();
}
inline void SubstructureEnvironment::clear_env_matches_can_share_attachment_points() {
  env_matches_can_share_attachment_points_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool SubstructureEnvironment::_internal_env_matches_can_share_attachment_points() const {
  return env_matches_can_share_attachment_points_;
}
inline bool SubstructureEnvironment::env_matches_can_share_attachment_points() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureEnvironment.env_matches_can_share_attachment_points)
  return _internal_env_matches_can_share_attachment_points();
}
inline void SubstructureEnvironment::_internal_set_env_matches_can_share_attachment_points(bool value) {
  _has_bits_[0] |= 0x00000080u;
  env_matches_can_share_attachment_points_ = value;
}
inline void SubstructureEnvironment::set_env_matches_can_share_attachment_points(bool value) {
  _internal_set_env_matches_can_share_attachment_points(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureEnvironment.env_matches_can_share_attachment_points)
}

// optional uint32 max_matches_to_find = 16;
inline bool SubstructureEnvironment::_internal_has_max_matches_to_find() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SubstructureEnvironment::has_max_matches_to_find() const {
  return _internal_has_max_matches_to_find();
}
inline void SubstructureEnvironment::clear_max_matches_to_find() {
  max_matches_to_find_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureEnvironment::_internal_max_matches_to_find() const {
  return max_matches_to_find_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureEnvironment::max_matches_to_find() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureEnvironment.max_matches_to_find)
  return _internal_max_matches_to_find();
}
inline void SubstructureEnvironment::_internal_set_max_matches_to_find(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  max_matches_to_find_ = value;
}
inline void SubstructureEnvironment::set_max_matches_to_find(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_matches_to_find(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureEnvironment.max_matches_to_find)
}

// optional bool hydrogen_ok = 17;
inline bool SubstructureEnvironment::_internal_has_hydrogen_ok() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SubstructureEnvironment::has_hydrogen_ok() const {
  return _internal_has_hydrogen_ok();
}
inline void SubstructureEnvironment::clear_hydrogen_ok() {
  hydrogen_ok_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool SubstructureEnvironment::_internal_hydrogen_ok() const {
  return hydrogen_ok_;
}
inline bool SubstructureEnvironment::hydrogen_ok() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureEnvironment.hydrogen_ok)
  return _internal_hydrogen_ok();
}
inline void SubstructureEnvironment::_internal_set_hydrogen_ok(bool value) {
  _has_bits_[0] |= 0x00000100u;
  hydrogen_ok_ = value;
}
inline void SubstructureEnvironment::set_hydrogen_ok(bool value) {
  _internal_set_hydrogen_ok(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureEnvironment.hydrogen_ok)
}

// optional uint32 max_env_matches_per_anchor = 18;
inline bool SubstructureEnvironment::_internal_has_max_env_matches_per_anchor() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SubstructureEnvironment::has_max_env_matches_per_anchor() const {
  return _internal_has_max_env_matches_per_anchor();
}
inline void SubstructureEnvironment::clear_max_env_matches_per_anchor() {
  max_env_matches_per_anchor_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureEnvironment::_internal_max_env_matches_per_anchor() const {
  return max_env_matches_per_anchor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubstructureEnvironment::max_env_matches_per_anchor() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureEnvironment.max_env_matches_per_anchor)
  return _internal_max_env_matches_per_anchor();
}
inline void SubstructureEnvironment::_internal_set_max_env_matches_per_anchor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  max_env_matches_per_anchor_ = value;
}
inline void SubstructureEnvironment::set_max_env_matches_per_anchor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_env_matches_per_anchor(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureEnvironment.max_env_matches_per_anchor)
}

// -------------------------------------------------------------------

// SingleSubstructureQuery

// optional int32 id = 1;
inline bool SingleSubstructureQuery::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_id() const {
  return _internal_has_id();
}
inline void SingleSubstructureQuery::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleSubstructureQuery::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleSubstructureQuery::id() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.id)
  return _internal_id();
}
inline void SingleSubstructureQuery::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void SingleSubstructureQuery::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.id)
}

// optional string label = 2;
inline bool SingleSubstructureQuery::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_label() const {
  return _internal_has_label();
}
inline void SingleSubstructureQuery::clear_label() {
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SingleSubstructureQuery::label() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.label)
  return _internal_label();
}
inline void SingleSubstructureQuery::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.label)
}
inline std::string* SingleSubstructureQuery::mutable_label() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SingleSubstructureQuery.label)
  return _internal_mutable_label();
}
inline const std::string& SingleSubstructureQuery::_internal_label() const {
  return label_.Get();
}
inline void SingleSubstructureQuery::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SingleSubstructureQuery::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubstructureSearch.SingleSubstructureQuery.label)
}
inline void SingleSubstructureQuery::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.SingleSubstructureQuery.label)
}
inline void SingleSubstructureQuery::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.SingleSubstructureQuery.label)
}
inline std::string* SingleSubstructureQuery::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SingleSubstructureQuery::release_label() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.SingleSubstructureQuery.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SingleSubstructureQuery::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.SingleSubstructureQuery.label)
}

// optional string comment = 3;
inline bool SingleSubstructureQuery::_internal_has_comment() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_comment() const {
  return _internal_has_comment();
}
inline void SingleSubstructureQuery::clear_comment() {
  comment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SingleSubstructureQuery::comment() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.comment)
  return _internal_comment();
}
inline void SingleSubstructureQuery::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.comment)
}
inline std::string* SingleSubstructureQuery::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SingleSubstructureQuery.comment)
  return _internal_mutable_comment();
}
inline const std::string& SingleSubstructureQuery::_internal_comment() const {
  return comment_.Get();
}
inline void SingleSubstructureQuery::_internal_set_comment(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SingleSubstructureQuery::set_comment(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubstructureSearch.SingleSubstructureQuery.comment)
}
inline void SingleSubstructureQuery::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.SingleSubstructureQuery.comment)
}
inline void SingleSubstructureQuery::set_comment(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.SingleSubstructureQuery.comment)
}
inline std::string* SingleSubstructureQuery::_internal_mutable_comment() {
  _has_bits_[0] |= 0x00000002u;
  return comment_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SingleSubstructureQuery::release_comment() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.SingleSubstructureQuery.comment)
  if (!_internal_has_comment()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return comment_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SingleSubstructureQuery::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.SingleSubstructureQuery.comment)
}

// optional bool one_embedding_per_start_atom = 4;
inline bool SingleSubstructureQuery::_internal_has_one_embedding_per_start_atom() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_one_embedding_per_start_atom() const {
  return _internal_has_one_embedding_per_start_atom();
}
inline void SingleSubstructureQuery::clear_one_embedding_per_start_atom() {
  one_embedding_per_start_atom_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool SingleSubstructureQuery::_internal_one_embedding_per_start_atom() const {
  return one_embedding_per_start_atom_;
}
inline bool SingleSubstructureQuery::one_embedding_per_start_atom() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.one_embedding_per_start_atom)
  return _internal_one_embedding_per_start_atom();
}
inline void SingleSubstructureQuery::_internal_set_one_embedding_per_start_atom(bool value) {
  _has_bits_[0] |= 0x00000100u;
  one_embedding_per_start_atom_ = value;
}
inline void SingleSubstructureQuery::set_one_embedding_per_start_atom(bool value) {
  _internal_set_one_embedding_per_start_atom(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.one_embedding_per_start_atom)
}

// optional uint32 normalise_rc_per_hits_needed = 5;
inline bool SingleSubstructureQuery::_internal_has_normalise_rc_per_hits_needed() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_normalise_rc_per_hits_needed() const {
  return _internal_has_normalise_rc_per_hits_needed();
}
inline void SingleSubstructureQuery::clear_normalise_rc_per_hits_needed() {
  normalise_rc_per_hits_needed_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_normalise_rc_per_hits_needed() const {
  return normalise_rc_per_hits_needed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::normalise_rc_per_hits_needed() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.normalise_rc_per_hits_needed)
  return _internal_normalise_rc_per_hits_needed();
}
inline void SingleSubstructureQuery::_internal_set_normalise_rc_per_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  normalise_rc_per_hits_needed_ = value;
}
inline void SingleSubstructureQuery::set_normalise_rc_per_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_normalise_rc_per_hits_needed(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.normalise_rc_per_hits_needed)
}

// optional uint32 subtract_from_rc = 6;
inline bool SingleSubstructureQuery::_internal_has_subtract_from_rc() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_subtract_from_rc() const {
  return _internal_has_subtract_from_rc();
}
inline void SingleSubstructureQuery::clear_subtract_from_rc() {
  subtract_from_rc_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_subtract_from_rc() const {
  return subtract_from_rc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::subtract_from_rc() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.subtract_from_rc)
  return _internal_subtract_from_rc();
}
inline void SingleSubstructureQuery::_internal_set_subtract_from_rc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  subtract_from_rc_ = value;
}
inline void SingleSubstructureQuery::set_subtract_from_rc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_subtract_from_rc(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.subtract_from_rc)
}

// optional uint32 max_matches_to_find = 8;
inline bool SingleSubstructureQuery::_internal_has_max_matches_to_find() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_matches_to_find() const {
  return _internal_has_max_matches_to_find();
}
inline void SingleSubstructureQuery::clear_max_matches_to_find() {
  max_matches_to_find_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_max_matches_to_find() const {
  return max_matches_to_find_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::max_matches_to_find() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_matches_to_find)
  return _internal_max_matches_to_find();
}
inline void SingleSubstructureQuery::_internal_set_max_matches_to_find(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  max_matches_to_find_ = value;
}
inline void SingleSubstructureQuery::set_max_matches_to_find(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_matches_to_find(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_matches_to_find)
}

// optional bool save_matched_atoms = 9;
inline bool SingleSubstructureQuery::_internal_has_save_matched_atoms() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_save_matched_atoms() const {
  return _internal_has_save_matched_atoms();
}
inline void SingleSubstructureQuery::clear_save_matched_atoms() {
  save_matched_atoms_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool SingleSubstructureQuery::_internal_save_matched_atoms() const {
  return save_matched_atoms_;
}
inline bool SingleSubstructureQuery::save_matched_atoms() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.save_matched_atoms)
  return _internal_save_matched_atoms();
}
inline void SingleSubstructureQuery::_internal_set_save_matched_atoms(bool value) {
  _has_bits_[0] |= 0x00000200u;
  save_matched_atoms_ = value;
}
inline void SingleSubstructureQuery::set_save_matched_atoms(bool value) {
  _internal_set_save_matched_atoms(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.save_matched_atoms)
}

// optional bool ncon_ignore_singly_connected = 10;
inline bool SingleSubstructureQuery::_internal_has_ncon_ignore_singly_connected() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_ncon_ignore_singly_connected() const {
  return _internal_has_ncon_ignore_singly_connected();
}
inline void SingleSubstructureQuery::clear_ncon_ignore_singly_connected() {
  ncon_ignore_singly_connected_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool SingleSubstructureQuery::_internal_ncon_ignore_singly_connected() const {
  return ncon_ignore_singly_connected_;
}
inline bool SingleSubstructureQuery::ncon_ignore_singly_connected() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.ncon_ignore_singly_connected)
  return _internal_ncon_ignore_singly_connected();
}
inline void SingleSubstructureQuery::_internal_set_ncon_ignore_singly_connected(bool value) {
  _has_bits_[0] |= 0x00000400u;
  ncon_ignore_singly_connected_ = value;
}
inline void SingleSubstructureQuery::set_ncon_ignore_singly_connected(bool value) {
  _internal_set_ncon_ignore_singly_connected(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.ncon_ignore_singly_connected)
}

// optional bool perceive_symmetric_equivalents = 11;
inline bool SingleSubstructureQuery::_internal_has_perceive_symmetric_equivalents() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_perceive_symmetric_equivalents() const {
  return _internal_has_perceive_symmetric_equivalents();
}
inline void SingleSubstructureQuery::clear_perceive_symmetric_equivalents() {
  perceive_symmetric_equivalents_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool SingleSubstructureQuery::_internal_perceive_symmetric_equivalents() const {
  return perceive_symmetric_equivalents_;
}
inline bool SingleSubstructureQuery::perceive_symmetric_equivalents() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.perceive_symmetric_equivalents)
  return _internal_perceive_symmetric_equivalents();
}
inline void SingleSubstructureQuery::_internal_set_perceive_symmetric_equivalents(bool value) {
  _has_bits_[0] |= 0x00000800u;
  perceive_symmetric_equivalents_ = value;
}
inline void SingleSubstructureQuery::set_perceive_symmetric_equivalents(bool value) {
  _internal_set_perceive_symmetric_equivalents(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.perceive_symmetric_equivalents)
}

// optional uint32 implicit_ring_condition = 12;
inline bool SingleSubstructureQuery::_internal_has_implicit_ring_condition() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_implicit_ring_condition() const {
  return _internal_has_implicit_ring_condition();
}
inline void SingleSubstructureQuery::clear_implicit_ring_condition() {
  implicit_ring_condition_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_implicit_ring_condition() const {
  return implicit_ring_condition_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::implicit_ring_condition() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.implicit_ring_condition)
  return _internal_implicit_ring_condition();
}
inline void SingleSubstructureQuery::_internal_set_implicit_ring_condition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  implicit_ring_condition_ = value;
}
inline void SingleSubstructureQuery::set_implicit_ring_condition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_implicit_ring_condition(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.implicit_ring_condition)
}

// optional bool all_hits_in_same_fragment = 13;
inline bool SingleSubstructureQuery::_internal_has_all_hits_in_same_fragment() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_all_hits_in_same_fragment() const {
  return _internal_has_all_hits_in_same_fragment();
}
inline void SingleSubstructureQuery::clear_all_hits_in_same_fragment() {
  all_hits_in_same_fragment_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool SingleSubstructureQuery::_internal_all_hits_in_same_fragment() const {
  return all_hits_in_same_fragment_;
}
inline bool SingleSubstructureQuery::all_hits_in_same_fragment() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.all_hits_in_same_fragment)
  return _internal_all_hits_in_same_fragment();
}
inline void SingleSubstructureQuery::_internal_set_all_hits_in_same_fragment(bool value) {
  _has_bits_[0] |= 0x00002000u;
  all_hits_in_same_fragment_ = value;
}
inline void SingleSubstructureQuery::set_all_hits_in_same_fragment(bool value) {
  _internal_set_all_hits_in_same_fragment(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.all_hits_in_same_fragment)
}

// optional bool only_match_largest_fragment = 14;
inline bool SingleSubstructureQuery::_internal_has_only_match_largest_fragment() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_only_match_largest_fragment() const {
  return _internal_has_only_match_largest_fragment();
}
inline void SingleSubstructureQuery::clear_only_match_largest_fragment() {
  only_match_largest_fragment_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool SingleSubstructureQuery::_internal_only_match_largest_fragment() const {
  return only_match_largest_fragment_;
}
inline bool SingleSubstructureQuery::only_match_largest_fragment() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.only_match_largest_fragment)
  return _internal_only_match_largest_fragment();
}
inline void SingleSubstructureQuery::_internal_set_only_match_largest_fragment(bool value) {
  _has_bits_[0] |= 0x00004000u;
  only_match_largest_fragment_ = value;
}
inline void SingleSubstructureQuery::set_only_match_largest_fragment(bool value) {
  _internal_set_only_match_largest_fragment(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.only_match_largest_fragment)
}

// optional bool embeddings_do_not_overlap = 15;
inline bool SingleSubstructureQuery::_internal_has_embeddings_do_not_overlap() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_embeddings_do_not_overlap() const {
  return _internal_has_embeddings_do_not_overlap();
}
inline void SingleSubstructureQuery::clear_embeddings_do_not_overlap() {
  embeddings_do_not_overlap_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool SingleSubstructureQuery::_internal_embeddings_do_not_overlap() const {
  return embeddings_do_not_overlap_;
}
inline bool SingleSubstructureQuery::embeddings_do_not_overlap() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.embeddings_do_not_overlap)
  return _internal_embeddings_do_not_overlap();
}
inline void SingleSubstructureQuery::_internal_set_embeddings_do_not_overlap(bool value) {
  _has_bits_[0] |= 0x00008000u;
  embeddings_do_not_overlap_ = value;
}
inline void SingleSubstructureQuery::set_embeddings_do_not_overlap(bool value) {
  _internal_set_embeddings_do_not_overlap(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.embeddings_do_not_overlap)
}

// optional bool sort_by_preference_value = 16;
inline bool SingleSubstructureQuery::_internal_has_sort_by_preference_value() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_sort_by_preference_value() const {
  return _internal_has_sort_by_preference_value();
}
inline void SingleSubstructureQuery::clear_sort_by_preference_value() {
  sort_by_preference_value_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool SingleSubstructureQuery::_internal_sort_by_preference_value() const {
  return sort_by_preference_value_;
}
inline bool SingleSubstructureQuery::sort_by_preference_value() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.sort_by_preference_value)
  return _internal_sort_by_preference_value();
}
inline void SingleSubstructureQuery::_internal_set_sort_by_preference_value(bool value) {
  _has_bits_[0] |= 0x00010000u;
  sort_by_preference_value_ = value;
}
inline void SingleSubstructureQuery::set_sort_by_preference_value(bool value) {
  _internal_set_sort_by_preference_value(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.sort_by_preference_value)
}

// string smiles = 17;
inline bool SingleSubstructureQuery::_internal_has_smiles() const {
  return smiles_or_smarts_case() == kSmiles;
}
inline bool SingleSubstructureQuery::has_smiles() const {
  return _internal_has_smiles();
}
inline void SingleSubstructureQuery::set_has_smiles() {
  _oneof_case_[0] = kSmiles;
}
inline void SingleSubstructureQuery::clear_smiles() {
  if (_internal_has_smiles()) {
    smiles_or_smarts_.smiles_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_smiles_or_smarts();
  }
}
inline const std::string& SingleSubstructureQuery::smiles() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.smiles)
  return _internal_smiles();
}
inline void SingleSubstructureQuery::set_smiles(const std::string& value) {
  _internal_set_smiles(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.smiles)
}
inline std::string* SingleSubstructureQuery::mutable_smiles() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SingleSubstructureQuery.smiles)
  return _internal_mutable_smiles();
}
inline const std::string& SingleSubstructureQuery::_internal_smiles() const {
  if (_internal_has_smiles()) {
    return smiles_or_smarts_.smiles_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SingleSubstructureQuery::_internal_set_smiles(const std::string& value) {
  if (!_internal_has_smiles()) {
    clear_smiles_or_smarts();
    set_has_smiles();
    smiles_or_smarts_.smiles_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  smiles_or_smarts_.smiles_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SingleSubstructureQuery::set_smiles(std::string&& value) {
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.smiles)
  if (!_internal_has_smiles()) {
    clear_smiles_or_smarts();
    set_has_smiles();
    smiles_or_smarts_.smiles_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  smiles_or_smarts_.smiles_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubstructureSearch.SingleSubstructureQuery.smiles)
}
inline void SingleSubstructureQuery::set_smiles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_smiles()) {
    clear_smiles_or_smarts();
    set_has_smiles();
    smiles_or_smarts_.smiles_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  smiles_or_smarts_.smiles_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.SingleSubstructureQuery.smiles)
}
inline void SingleSubstructureQuery::set_smiles(const char* value,
                             size_t size) {
  if (!_internal_has_smiles()) {
    clear_smiles_or_smarts();
    set_has_smiles();
    smiles_or_smarts_.smiles_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  smiles_or_smarts_.smiles_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.SingleSubstructureQuery.smiles)
}
inline std::string* SingleSubstructureQuery::_internal_mutable_smiles() {
  if (!_internal_has_smiles()) {
    clear_smiles_or_smarts();
    set_has_smiles();
    smiles_or_smarts_.smiles_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return smiles_or_smarts_.smiles_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SingleSubstructureQuery::release_smiles() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.SingleSubstructureQuery.smiles)
  if (_internal_has_smiles()) {
    clear_has_smiles_or_smarts();
    return smiles_or_smarts_.smiles_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void SingleSubstructureQuery::set_allocated_smiles(std::string* smiles) {
  if (has_smiles_or_smarts()) {
    clear_smiles_or_smarts();
  }
  if (smiles != nullptr) {
    set_has_smiles();
    smiles_or_smarts_.smiles_.UnsafeSetDefault(smiles);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(smiles);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.SingleSubstructureQuery.smiles)
}

// string smarts = 18;
inline bool SingleSubstructureQuery::_internal_has_smarts() const {
  return smiles_or_smarts_case() == kSmarts;
}
inline bool SingleSubstructureQuery::has_smarts() const {
  return _internal_has_smarts();
}
inline void SingleSubstructureQuery::set_has_smarts() {
  _oneof_case_[0] = kSmarts;
}
inline void SingleSubstructureQuery::clear_smarts() {
  if (_internal_has_smarts()) {
    smiles_or_smarts_.smarts_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_smiles_or_smarts();
  }
}
inline const std::string& SingleSubstructureQuery::smarts() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.smarts)
  return _internal_smarts();
}
inline void SingleSubstructureQuery::set_smarts(const std::string& value) {
  _internal_set_smarts(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.smarts)
}
inline std::string* SingleSubstructureQuery::mutable_smarts() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SingleSubstructureQuery.smarts)
  return _internal_mutable_smarts();
}
inline const std::string& SingleSubstructureQuery::_internal_smarts() const {
  if (_internal_has_smarts()) {
    return smiles_or_smarts_.smarts_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SingleSubstructureQuery::_internal_set_smarts(const std::string& value) {
  if (!_internal_has_smarts()) {
    clear_smiles_or_smarts();
    set_has_smarts();
    smiles_or_smarts_.smarts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  smiles_or_smarts_.smarts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SingleSubstructureQuery::set_smarts(std::string&& value) {
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.smarts)
  if (!_internal_has_smarts()) {
    clear_smiles_or_smarts();
    set_has_smarts();
    smiles_or_smarts_.smarts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  smiles_or_smarts_.smarts_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubstructureSearch.SingleSubstructureQuery.smarts)
}
inline void SingleSubstructureQuery::set_smarts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_smarts()) {
    clear_smiles_or_smarts();
    set_has_smarts();
    smiles_or_smarts_.smarts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  smiles_or_smarts_.smarts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.SingleSubstructureQuery.smarts)
}
inline void SingleSubstructureQuery::set_smarts(const char* value,
                             size_t size) {
  if (!_internal_has_smarts()) {
    clear_smiles_or_smarts();
    set_has_smarts();
    smiles_or_smarts_.smarts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  smiles_or_smarts_.smarts_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.SingleSubstructureQuery.smarts)
}
inline std::string* SingleSubstructureQuery::_internal_mutable_smarts() {
  if (!_internal_has_smarts()) {
    clear_smiles_or_smarts();
    set_has_smarts();
    smiles_or_smarts_.smarts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return smiles_or_smarts_.smarts_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SingleSubstructureQuery::release_smarts() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.SingleSubstructureQuery.smarts)
  if (_internal_has_smarts()) {
    clear_has_smiles_or_smarts();
    return smiles_or_smarts_.smarts_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void SingleSubstructureQuery::set_allocated_smarts(std::string* smarts) {
  if (has_smiles_or_smarts()) {
    clear_smiles_or_smarts();
  }
  if (smarts != nullptr) {
    set_has_smarts();
    smiles_or_smarts_.smarts_.UnsafeSetDefault(smarts);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(smarts);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.SingleSubstructureQuery.smarts)
}

// repeated double numeric_value = 19;
inline int SingleSubstructureQuery::_internal_numeric_value_size() const {
  return numeric_value_.size();
}
inline int SingleSubstructureQuery::numeric_value_size() const {
  return _internal_numeric_value_size();
}
inline void SingleSubstructureQuery::clear_numeric_value() {
  numeric_value_.Clear();
}
inline double SingleSubstructureQuery::_internal_numeric_value(int index) const {
  return numeric_value_.Get(index);
}
inline double SingleSubstructureQuery::numeric_value(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.numeric_value)
  return _internal_numeric_value(index);
}
inline void SingleSubstructureQuery::set_numeric_value(int index, double value) {
  numeric_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.numeric_value)
}
inline void SingleSubstructureQuery::_internal_add_numeric_value(double value) {
  numeric_value_.Add(value);
}
inline void SingleSubstructureQuery::add_numeric_value(double value) {
  _internal_add_numeric_value(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.numeric_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SingleSubstructureQuery::_internal_numeric_value() const {
  return numeric_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SingleSubstructureQuery::numeric_value() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.numeric_value)
  return _internal_numeric_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SingleSubstructureQuery::_internal_mutable_numeric_value() {
  return &numeric_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SingleSubstructureQuery::mutable_numeric_value() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.numeric_value)
  return _internal_mutable_numeric_value();
}

// repeated .SubstructureSearch.NoMatchedAtomsBetween no_matched_atoms_between = 20;
inline int SingleSubstructureQuery::_internal_no_matched_atoms_between_size() const {
  return no_matched_atoms_between_.size();
}
inline int SingleSubstructureQuery::no_matched_atoms_between_size() const {
  return _internal_no_matched_atoms_between_size();
}
inline void SingleSubstructureQuery::clear_no_matched_atoms_between() {
  no_matched_atoms_between_.Clear();
}
inline ::SubstructureSearch::NoMatchedAtomsBetween* SingleSubstructureQuery::mutable_no_matched_atoms_between(int index) {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SingleSubstructureQuery.no_matched_atoms_between)
  return no_matched_atoms_between_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::NoMatchedAtomsBetween >*
SingleSubstructureQuery::mutable_no_matched_atoms_between() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.no_matched_atoms_between)
  return &no_matched_atoms_between_;
}
inline const ::SubstructureSearch::NoMatchedAtomsBetween& SingleSubstructureQuery::_internal_no_matched_atoms_between(int index) const {
  return no_matched_atoms_between_.Get(index);
}
inline const ::SubstructureSearch::NoMatchedAtomsBetween& SingleSubstructureQuery::no_matched_atoms_between(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.no_matched_atoms_between)
  return _internal_no_matched_atoms_between(index);
}
inline ::SubstructureSearch::NoMatchedAtomsBetween* SingleSubstructureQuery::_internal_add_no_matched_atoms_between() {
  return no_matched_atoms_between_.Add();
}
inline ::SubstructureSearch::NoMatchedAtomsBetween* SingleSubstructureQuery::add_no_matched_atoms_between() {
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.no_matched_atoms_between)
  return _internal_add_no_matched_atoms_between();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::NoMatchedAtomsBetween >&
SingleSubstructureQuery::no_matched_atoms_between() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.no_matched_atoms_between)
  return no_matched_atoms_between_;
}

// optional bool no_matched_atoms_between_exhaustive = 21;
inline bool SingleSubstructureQuery::_internal_has_no_matched_atoms_between_exhaustive() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_no_matched_atoms_between_exhaustive() const {
  return _internal_has_no_matched_atoms_between_exhaustive();
}
inline void SingleSubstructureQuery::clear_no_matched_atoms_between_exhaustive() {
  no_matched_atoms_between_exhaustive_ = false;
  _has_bits_[1] &= ~0x00000100u;
}
inline bool SingleSubstructureQuery::_internal_no_matched_atoms_between_exhaustive() const {
  return no_matched_atoms_between_exhaustive_;
}
inline bool SingleSubstructureQuery::no_matched_atoms_between_exhaustive() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.no_matched_atoms_between_exhaustive)
  return _internal_no_matched_atoms_between_exhaustive();
}
inline void SingleSubstructureQuery::_internal_set_no_matched_atoms_between_exhaustive(bool value) {
  _has_bits_[1] |= 0x00000100u;
  no_matched_atoms_between_exhaustive_ = value;
}
inline void SingleSubstructureQuery::set_no_matched_atoms_between_exhaustive(bool value) {
  _internal_set_no_matched_atoms_between_exhaustive(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.no_matched_atoms_between_exhaustive)
}

// repeated .SubstructureSearch.LinkAtoms link_atoms = 22;
inline int SingleSubstructureQuery::_internal_link_atoms_size() const {
  return link_atoms_.size();
}
inline int SingleSubstructureQuery::link_atoms_size() const {
  return _internal_link_atoms_size();
}
inline void SingleSubstructureQuery::clear_link_atoms() {
  link_atoms_.Clear();
}
inline ::SubstructureSearch::LinkAtoms* SingleSubstructureQuery::mutable_link_atoms(int index) {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SingleSubstructureQuery.link_atoms)
  return link_atoms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::LinkAtoms >*
SingleSubstructureQuery::mutable_link_atoms() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.link_atoms)
  return &link_atoms_;
}
inline const ::SubstructureSearch::LinkAtoms& SingleSubstructureQuery::_internal_link_atoms(int index) const {
  return link_atoms_.Get(index);
}
inline const ::SubstructureSearch::LinkAtoms& SingleSubstructureQuery::link_atoms(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.link_atoms)
  return _internal_link_atoms(index);
}
inline ::SubstructureSearch::LinkAtoms* SingleSubstructureQuery::_internal_add_link_atoms() {
  return link_atoms_.Add();
}
inline ::SubstructureSearch::LinkAtoms* SingleSubstructureQuery::add_link_atoms() {
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.link_atoms)
  return _internal_add_link_atoms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::LinkAtoms >&
SingleSubstructureQuery::link_atoms() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.link_atoms)
  return link_atoms_;
}

// optional bool fail_if_embeddings_too_close = 23;
inline bool SingleSubstructureQuery::_internal_has_fail_if_embeddings_too_close() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_fail_if_embeddings_too_close() const {
  return _internal_has_fail_if_embeddings_too_close();
}
inline void SingleSubstructureQuery::clear_fail_if_embeddings_too_close() {
  fail_if_embeddings_too_close_ = false;
  _has_bits_[1] &= ~0x00000200u;
}
inline bool SingleSubstructureQuery::_internal_fail_if_embeddings_too_close() const {
  return fail_if_embeddings_too_close_;
}
inline bool SingleSubstructureQuery::fail_if_embeddings_too_close() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.fail_if_embeddings_too_close)
  return _internal_fail_if_embeddings_too_close();
}
inline void SingleSubstructureQuery::_internal_set_fail_if_embeddings_too_close(bool value) {
  _has_bits_[1] |= 0x00000200u;
  fail_if_embeddings_too_close_ = value;
}
inline void SingleSubstructureQuery::set_fail_if_embeddings_too_close(bool value) {
  _internal_set_fail_if_embeddings_too_close(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.fail_if_embeddings_too_close)
}

// optional uint32 distance_between_hits_ncheck = 24;
inline bool SingleSubstructureQuery::_internal_has_distance_between_hits_ncheck() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_distance_between_hits_ncheck() const {
  return _internal_has_distance_between_hits_ncheck();
}
inline void SingleSubstructureQuery::clear_distance_between_hits_ncheck() {
  distance_between_hits_ncheck_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_distance_between_hits_ncheck() const {
  return distance_between_hits_ncheck_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::distance_between_hits_ncheck() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.distance_between_hits_ncheck)
  return _internal_distance_between_hits_ncheck();
}
inline void SingleSubstructureQuery::_internal_set_distance_between_hits_ncheck(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  distance_between_hits_ncheck_ = value;
}
inline void SingleSubstructureQuery::set_distance_between_hits_ncheck(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_distance_between_hits_ncheck(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.distance_between_hits_ncheck)
}

// optional string sort_matches = 25;
inline bool SingleSubstructureQuery::_internal_has_sort_matches() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_sort_matches() const {
  return _internal_has_sort_matches();
}
inline void SingleSubstructureQuery::clear_sort_matches() {
  sort_matches_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SingleSubstructureQuery::sort_matches() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.sort_matches)
  return _internal_sort_matches();
}
inline void SingleSubstructureQuery::set_sort_matches(const std::string& value) {
  _internal_set_sort_matches(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.sort_matches)
}
inline std::string* SingleSubstructureQuery::mutable_sort_matches() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SingleSubstructureQuery.sort_matches)
  return _internal_mutable_sort_matches();
}
inline const std::string& SingleSubstructureQuery::_internal_sort_matches() const {
  return sort_matches_.Get();
}
inline void SingleSubstructureQuery::_internal_set_sort_matches(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  sort_matches_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SingleSubstructureQuery::set_sort_matches(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  sort_matches_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubstructureSearch.SingleSubstructureQuery.sort_matches)
}
inline void SingleSubstructureQuery::set_sort_matches(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  sort_matches_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.SingleSubstructureQuery.sort_matches)
}
inline void SingleSubstructureQuery::set_sort_matches(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  sort_matches_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.SingleSubstructureQuery.sort_matches)
}
inline std::string* SingleSubstructureQuery::_internal_mutable_sort_matches() {
  _has_bits_[0] |= 0x00000004u;
  return sort_matches_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SingleSubstructureQuery::release_sort_matches() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.SingleSubstructureQuery.sort_matches)
  if (!_internal_has_sort_matches()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return sort_matches_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SingleSubstructureQuery::set_allocated_sort_matches(std::string* sort_matches) {
  if (sort_matches != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sort_matches_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sort_matches,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.SingleSubstructureQuery.sort_matches)
}

// repeated uint32 attached_heteroatom_count = 26;
inline int SingleSubstructureQuery::_internal_attached_heteroatom_count_size() const {
  return attached_heteroatom_count_.size();
}
inline int SingleSubstructureQuery::attached_heteroatom_count_size() const {
  return _internal_attached_heteroatom_count_size();
}
inline void SingleSubstructureQuery::clear_attached_heteroatom_count() {
  attached_heteroatom_count_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_attached_heteroatom_count(int index) const {
  return attached_heteroatom_count_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::attached_heteroatom_count(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.attached_heteroatom_count)
  return _internal_attached_heteroatom_count(index);
}
inline void SingleSubstructureQuery::set_attached_heteroatom_count(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  attached_heteroatom_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.attached_heteroatom_count)
}
inline void SingleSubstructureQuery::_internal_add_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  attached_heteroatom_count_.Add(value);
}
inline void SingleSubstructureQuery::add_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_attached_heteroatom_count(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.attached_heteroatom_count)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::_internal_attached_heteroatom_count() const {
  return attached_heteroatom_count_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::attached_heteroatom_count() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.attached_heteroatom_count)
  return _internal_attached_heteroatom_count();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::_internal_mutable_attached_heteroatom_count() {
  return &attached_heteroatom_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::mutable_attached_heteroatom_count() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.attached_heteroatom_count)
  return _internal_mutable_attached_heteroatom_count();
}

// optional uint32 min_attached_heteroatom_count = 27;
inline bool SingleSubstructureQuery::_internal_has_min_attached_heteroatom_count() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_attached_heteroatom_count() const {
  return _internal_has_min_attached_heteroatom_count();
}
inline void SingleSubstructureQuery::clear_min_attached_heteroatom_count() {
  min_attached_heteroatom_count_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_min_attached_heteroatom_count() const {
  return min_attached_heteroatom_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::min_attached_heteroatom_count() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_attached_heteroatom_count)
  return _internal_min_attached_heteroatom_count();
}
inline void SingleSubstructureQuery::_internal_set_min_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  min_attached_heteroatom_count_ = value;
}
inline void SingleSubstructureQuery::set_min_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_attached_heteroatom_count(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_attached_heteroatom_count)
}

// optional uint32 max_attached_heteroatom_count = 28;
inline bool SingleSubstructureQuery::_internal_has_max_attached_heteroatom_count() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_attached_heteroatom_count() const {
  return _internal_has_max_attached_heteroatom_count();
}
inline void SingleSubstructureQuery::clear_max_attached_heteroatom_count() {
  max_attached_heteroatom_count_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_max_attached_heteroatom_count() const {
  return max_attached_heteroatom_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::max_attached_heteroatom_count() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_attached_heteroatom_count)
  return _internal_max_attached_heteroatom_count();
}
inline void SingleSubstructureQuery::_internal_set_max_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  max_attached_heteroatom_count_ = value;
}
inline void SingleSubstructureQuery::set_max_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_attached_heteroatom_count(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_attached_heteroatom_count)
}

// repeated uint32 hits_needed = 29;
inline int SingleSubstructureQuery::_internal_hits_needed_size() const {
  return hits_needed_.size();
}
inline int SingleSubstructureQuery::hits_needed_size() const {
  return _internal_hits_needed_size();
}
inline void SingleSubstructureQuery::clear_hits_needed() {
  hits_needed_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_hits_needed(int index) const {
  return hits_needed_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::hits_needed(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.hits_needed)
  return _internal_hits_needed(index);
}
inline void SingleSubstructureQuery::set_hits_needed(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  hits_needed_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.hits_needed)
}
inline void SingleSubstructureQuery::_internal_add_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  hits_needed_.Add(value);
}
inline void SingleSubstructureQuery::add_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_hits_needed(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.hits_needed)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::_internal_hits_needed() const {
  return hits_needed_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::hits_needed() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.hits_needed)
  return _internal_hits_needed();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::_internal_mutable_hits_needed() {
  return &hits_needed_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::mutable_hits_needed() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.hits_needed)
  return _internal_mutable_hits_needed();
}

// optional uint32 min_hits_needed = 30;
inline bool SingleSubstructureQuery::_internal_has_min_hits_needed() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_hits_needed() const {
  return _internal_has_min_hits_needed();
}
inline void SingleSubstructureQuery::clear_min_hits_needed() {
  min_hits_needed_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_min_hits_needed() const {
  return min_hits_needed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::min_hits_needed() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_hits_needed)
  return _internal_min_hits_needed();
}
inline void SingleSubstructureQuery::_internal_set_min_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  min_hits_needed_ = value;
}
inline void SingleSubstructureQuery::set_min_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_hits_needed(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_hits_needed)
}

// optional uint32 max_hits_needed = 31;
inline bool SingleSubstructureQuery::_internal_has_max_hits_needed() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_hits_needed() const {
  return _internal_has_max_hits_needed();
}
inline void SingleSubstructureQuery::clear_max_hits_needed() {
  max_hits_needed_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_max_hits_needed() const {
  return max_hits_needed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::max_hits_needed() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_hits_needed)
  return _internal_max_hits_needed();
}
inline void SingleSubstructureQuery::_internal_set_max_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  max_hits_needed_ = value;
}
inline void SingleSubstructureQuery::set_max_hits_needed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_hits_needed(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_hits_needed)
}

// repeated uint32 ring_atoms_matched = 32;
inline int SingleSubstructureQuery::_internal_ring_atoms_matched_size() const {
  return ring_atoms_matched_.size();
}
inline int SingleSubstructureQuery::ring_atoms_matched_size() const {
  return _internal_ring_atoms_matched_size();
}
inline void SingleSubstructureQuery::clear_ring_atoms_matched() {
  ring_atoms_matched_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_ring_atoms_matched(int index) const {
  return ring_atoms_matched_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::ring_atoms_matched(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.ring_atoms_matched)
  return _internal_ring_atoms_matched(index);
}
inline void SingleSubstructureQuery::set_ring_atoms_matched(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ring_atoms_matched_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.ring_atoms_matched)
}
inline void SingleSubstructureQuery::_internal_add_ring_atoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ring_atoms_matched_.Add(value);
}
inline void SingleSubstructureQuery::add_ring_atoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ring_atoms_matched(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.ring_atoms_matched)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::_internal_ring_atoms_matched() const {
  return ring_atoms_matched_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::ring_atoms_matched() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.ring_atoms_matched)
  return _internal_ring_atoms_matched();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::_internal_mutable_ring_atoms_matched() {
  return &ring_atoms_matched_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::mutable_ring_atoms_matched() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.ring_atoms_matched)
  return _internal_mutable_ring_atoms_matched();
}

// optional uint32 min_ring_atoms_matched = 33;
inline bool SingleSubstructureQuery::_internal_has_min_ring_atoms_matched() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_ring_atoms_matched() const {
  return _internal_has_min_ring_atoms_matched();
}
inline void SingleSubstructureQuery::clear_min_ring_atoms_matched() {
  min_ring_atoms_matched_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_min_ring_atoms_matched() const {
  return min_ring_atoms_matched_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::min_ring_atoms_matched() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_ring_atoms_matched)
  return _internal_min_ring_atoms_matched();
}
inline void SingleSubstructureQuery::_internal_set_min_ring_atoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  min_ring_atoms_matched_ = value;
}
inline void SingleSubstructureQuery::set_min_ring_atoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_ring_atoms_matched(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_ring_atoms_matched)
}

// optional uint32 max_ring_atoms_matched = 34;
inline bool SingleSubstructureQuery::_internal_has_max_ring_atoms_matched() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_ring_atoms_matched() const {
  return _internal_has_max_ring_atoms_matched();
}
inline void SingleSubstructureQuery::clear_max_ring_atoms_matched() {
  max_ring_atoms_matched_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_max_ring_atoms_matched() const {
  return max_ring_atoms_matched_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::max_ring_atoms_matched() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_ring_atoms_matched)
  return _internal_max_ring_atoms_matched();
}
inline void SingleSubstructureQuery::_internal_set_max_ring_atoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  max_ring_atoms_matched_ = value;
}
inline void SingleSubstructureQuery::set_max_ring_atoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_ring_atoms_matched(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_ring_atoms_matched)
}

// repeated uint32 heteroatoms_matched = 35;
inline int SingleSubstructureQuery::_internal_heteroatoms_matched_size() const {
  return heteroatoms_matched_.size();
}
inline int SingleSubstructureQuery::heteroatoms_matched_size() const {
  return _internal_heteroatoms_matched_size();
}
inline void SingleSubstructureQuery::clear_heteroatoms_matched() {
  heteroatoms_matched_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_heteroatoms_matched(int index) const {
  return heteroatoms_matched_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::heteroatoms_matched(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.heteroatoms_matched)
  return _internal_heteroatoms_matched(index);
}
inline void SingleSubstructureQuery::set_heteroatoms_matched(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  heteroatoms_matched_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.heteroatoms_matched)
}
inline void SingleSubstructureQuery::_internal_add_heteroatoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  heteroatoms_matched_.Add(value);
}
inline void SingleSubstructureQuery::add_heteroatoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_heteroatoms_matched(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.heteroatoms_matched)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::_internal_heteroatoms_matched() const {
  return heteroatoms_matched_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::heteroatoms_matched() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.heteroatoms_matched)
  return _internal_heteroatoms_matched();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::_internal_mutable_heteroatoms_matched() {
  return &heteroatoms_matched_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::mutable_heteroatoms_matched() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.heteroatoms_matched)
  return _internal_mutable_heteroatoms_matched();
}

// optional uint32 min_heteroatoms_matched = 36;
inline bool SingleSubstructureQuery::_internal_has_min_heteroatoms_matched() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_heteroatoms_matched() const {
  return _internal_has_min_heteroatoms_matched();
}
inline void SingleSubstructureQuery::clear_min_heteroatoms_matched() {
  min_heteroatoms_matched_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_min_heteroatoms_matched() const {
  return min_heteroatoms_matched_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::min_heteroatoms_matched() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_heteroatoms_matched)
  return _internal_min_heteroatoms_matched();
}
inline void SingleSubstructureQuery::_internal_set_min_heteroatoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  min_heteroatoms_matched_ = value;
}
inline void SingleSubstructureQuery::set_min_heteroatoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_heteroatoms_matched(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_heteroatoms_matched)
}

// optional uint32 max_heteroatoms_matched = 37;
inline bool SingleSubstructureQuery::_internal_has_max_heteroatoms_matched() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_heteroatoms_matched() const {
  return _internal_has_max_heteroatoms_matched();
}
inline void SingleSubstructureQuery::clear_max_heteroatoms_matched() {
  max_heteroatoms_matched_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_max_heteroatoms_matched() const {
  return max_heteroatoms_matched_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::max_heteroatoms_matched() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_heteroatoms_matched)
  return _internal_max_heteroatoms_matched();
}
inline void SingleSubstructureQuery::_internal_set_max_heteroatoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  max_heteroatoms_matched_ = value;
}
inline void SingleSubstructureQuery::set_max_heteroatoms_matched(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_heteroatoms_matched(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_heteroatoms_matched)
}

// repeated uint32 heteroatoms_in_molecule = 38;
inline int SingleSubstructureQuery::_internal_heteroatoms_in_molecule_size() const {
  return heteroatoms_in_molecule_.size();
}
inline int SingleSubstructureQuery::heteroatoms_in_molecule_size() const {
  return _internal_heteroatoms_in_molecule_size();
}
inline void SingleSubstructureQuery::clear_heteroatoms_in_molecule() {
  heteroatoms_in_molecule_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_heteroatoms_in_molecule(int index) const {
  return heteroatoms_in_molecule_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::heteroatoms_in_molecule(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.heteroatoms_in_molecule)
  return _internal_heteroatoms_in_molecule(index);
}
inline void SingleSubstructureQuery::set_heteroatoms_in_molecule(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  heteroatoms_in_molecule_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.heteroatoms_in_molecule)
}
inline void SingleSubstructureQuery::_internal_add_heteroatoms_in_molecule(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  heteroatoms_in_molecule_.Add(value);
}
inline void SingleSubstructureQuery::add_heteroatoms_in_molecule(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_heteroatoms_in_molecule(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.heteroatoms_in_molecule)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::_internal_heteroatoms_in_molecule() const {
  return heteroatoms_in_molecule_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::heteroatoms_in_molecule() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.heteroatoms_in_molecule)
  return _internal_heteroatoms_in_molecule();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::_internal_mutable_heteroatoms_in_molecule() {
  return &heteroatoms_in_molecule_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::mutable_heteroatoms_in_molecule() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.heteroatoms_in_molecule)
  return _internal_mutable_heteroatoms_in_molecule();
}

// optional uint32 min_heteroatoms_in_molecule = 39;
inline bool SingleSubstructureQuery::_internal_has_min_heteroatoms_in_molecule() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_heteroatoms_in_molecule() const {
  return _internal_has_min_heteroatoms_in_molecule();
}
inline void SingleSubstructureQuery::clear_min_heteroatoms_in_molecule() {
  min_heteroatoms_in_molecule_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_min_heteroatoms_in_molecule() const {
  return min_heteroatoms_in_molecule_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::min_heteroatoms_in_molecule() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_heteroatoms_in_molecule)
  return _internal_min_heteroatoms_in_molecule();
}
inline void SingleSubstructureQuery::_internal_set_min_heteroatoms_in_molecule(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  min_heteroatoms_in_molecule_ = value;
}
inline void SingleSubstructureQuery::set_min_heteroatoms_in_molecule(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_heteroatoms_in_molecule(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_heteroatoms_in_molecule)
}

// optional uint32 max_heteroatoms_in_molecule = 40;
inline bool SingleSubstructureQuery::_internal_has_max_heteroatoms_in_molecule() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_heteroatoms_in_molecule() const {
  return _internal_has_max_heteroatoms_in_molecule();
}
inline void SingleSubstructureQuery::clear_max_heteroatoms_in_molecule() {
  max_heteroatoms_in_molecule_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_max_heteroatoms_in_molecule() const {
  return max_heteroatoms_in_molecule_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::max_heteroatoms_in_molecule() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_heteroatoms_in_molecule)
  return _internal_max_heteroatoms_in_molecule();
}
inline void SingleSubstructureQuery::_internal_set_max_heteroatoms_in_molecule(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  max_heteroatoms_in_molecule_ = value;
}
inline void SingleSubstructureQuery::set_max_heteroatoms_in_molecule(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_heteroatoms_in_molecule(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_heteroatoms_in_molecule)
}

// repeated uint32 natoms = 41;
inline int SingleSubstructureQuery::_internal_natoms_size() const {
  return natoms_.size();
}
inline int SingleSubstructureQuery::natoms_size() const {
  return _internal_natoms_size();
}
inline void SingleSubstructureQuery::clear_natoms() {
  natoms_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_natoms(int index) const {
  return natoms_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::natoms(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.natoms)
  return _internal_natoms(index);
}
inline void SingleSubstructureQuery::set_natoms(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  natoms_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.natoms)
}
inline void SingleSubstructureQuery::_internal_add_natoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  natoms_.Add(value);
}
inline void SingleSubstructureQuery::add_natoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_natoms(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.natoms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::_internal_natoms() const {
  return natoms_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::natoms() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.natoms)
  return _internal_natoms();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::_internal_mutable_natoms() {
  return &natoms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::mutable_natoms() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.natoms)
  return _internal_mutable_natoms();
}

// optional uint32 min_natoms = 42;
inline bool SingleSubstructureQuery::_internal_has_min_natoms() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_natoms() const {
  return _internal_has_min_natoms();
}
inline void SingleSubstructureQuery::clear_min_natoms() {
  min_natoms_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_min_natoms() const {
  return min_natoms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::min_natoms() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_natoms)
  return _internal_min_natoms();
}
inline void SingleSubstructureQuery::_internal_set_min_natoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  min_natoms_ = value;
}
inline void SingleSubstructureQuery::set_min_natoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_natoms(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_natoms)
}

// optional uint32 max_natoms = 43;
inline bool SingleSubstructureQuery::_internal_has_max_natoms() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_natoms() const {
  return _internal_has_max_natoms();
}
inline void SingleSubstructureQuery::clear_max_natoms() {
  max_natoms_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_max_natoms() const {
  return max_natoms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::max_natoms() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_natoms)
  return _internal_max_natoms();
}
inline void SingleSubstructureQuery::_internal_set_max_natoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  max_natoms_ = value;
}
inline void SingleSubstructureQuery::set_max_natoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_natoms(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_natoms)
}

// repeated uint32 nrings = 44;
inline int SingleSubstructureQuery::_internal_nrings_size() const {
  return nrings_.size();
}
inline int SingleSubstructureQuery::nrings_size() const {
  return _internal_nrings_size();
}
inline void SingleSubstructureQuery::clear_nrings() {
  nrings_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_nrings(int index) const {
  return nrings_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::nrings(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.nrings)
  return _internal_nrings(index);
}
inline void SingleSubstructureQuery::set_nrings(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  nrings_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.nrings)
}
inline void SingleSubstructureQuery::_internal_add_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  nrings_.Add(value);
}
inline void SingleSubstructureQuery::add_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_nrings(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.nrings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::_internal_nrings() const {
  return nrings_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::nrings() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.nrings)
  return _internal_nrings();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::_internal_mutable_nrings() {
  return &nrings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::mutable_nrings() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.nrings)
  return _internal_mutable_nrings();
}

// optional uint32 min_nrings = 45;
inline bool SingleSubstructureQuery::_internal_has_min_nrings() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_nrings() const {
  return _internal_has_min_nrings();
}
inline void SingleSubstructureQuery::clear_min_nrings() {
  min_nrings_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_min_nrings() const {
  return min_nrings_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::min_nrings() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_nrings)
  return _internal_min_nrings();
}
inline void SingleSubstructureQuery::_internal_set_min_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  min_nrings_ = value;
}
inline void SingleSubstructureQuery::set_min_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_nrings(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_nrings)
}

// optional uint32 max_nrings = 46;
inline bool SingleSubstructureQuery::_internal_has_max_nrings() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_nrings() const {
  return _internal_has_max_nrings();
}
inline void SingleSubstructureQuery::clear_max_nrings() {
  max_nrings_ = 0u;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_max_nrings() const {
  return max_nrings_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::max_nrings() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_nrings)
  return _internal_max_nrings();
}
inline void SingleSubstructureQuery::_internal_set_max_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x80000000u;
  max_nrings_ = value;
}
inline void SingleSubstructureQuery::set_max_nrings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_nrings(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_nrings)
}

// repeated uint32 ncon = 47;
inline int SingleSubstructureQuery::_internal_ncon_size() const {
  return ncon_.size();
}
inline int SingleSubstructureQuery::ncon_size() const {
  return _internal_ncon_size();
}
inline void SingleSubstructureQuery::clear_ncon() {
  ncon_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_ncon(int index) const {
  return ncon_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::ncon(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.ncon)
  return _internal_ncon(index);
}
inline void SingleSubstructureQuery::set_ncon(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ncon_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.ncon)
}
inline void SingleSubstructureQuery::_internal_add_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ncon_.Add(value);
}
inline void SingleSubstructureQuery::add_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ncon(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.ncon)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::_internal_ncon() const {
  return ncon_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::ncon() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.ncon)
  return _internal_ncon();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::_internal_mutable_ncon() {
  return &ncon_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::mutable_ncon() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.ncon)
  return _internal_mutable_ncon();
}

// optional uint32 min_ncon = 48;
inline bool SingleSubstructureQuery::_internal_has_min_ncon() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_ncon() const {
  return _internal_has_min_ncon();
}
inline void SingleSubstructureQuery::clear_min_ncon() {
  min_ncon_ = 0u;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_min_ncon() const {
  return min_ncon_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::min_ncon() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_ncon)
  return _internal_min_ncon();
}
inline void SingleSubstructureQuery::_internal_set_min_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000001u;
  min_ncon_ = value;
}
inline void SingleSubstructureQuery::set_min_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_ncon(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_ncon)
}

// optional uint32 max_ncon = 49;
inline bool SingleSubstructureQuery::_internal_has_max_ncon() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_ncon() const {
  return _internal_has_max_ncon();
}
inline void SingleSubstructureQuery::clear_max_ncon() {
  max_ncon_ = 0u;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_max_ncon() const {
  return max_ncon_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::max_ncon() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_ncon)
  return _internal_max_ncon();
}
inline void SingleSubstructureQuery::_internal_set_max_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000002u;
  max_ncon_ = value;
}
inline void SingleSubstructureQuery::set_max_ncon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_ncon(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_ncon)
}

// repeated uint32 fused_rings = 50;
inline int SingleSubstructureQuery::_internal_fused_rings_size() const {
  return fused_rings_.size();
}
inline int SingleSubstructureQuery::fused_rings_size() const {
  return _internal_fused_rings_size();
}
inline void SingleSubstructureQuery::clear_fused_rings() {
  fused_rings_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_fused_rings(int index) const {
  return fused_rings_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::fused_rings(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.fused_rings)
  return _internal_fused_rings(index);
}
inline void SingleSubstructureQuery::set_fused_rings(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  fused_rings_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.fused_rings)
}
inline void SingleSubstructureQuery::_internal_add_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  fused_rings_.Add(value);
}
inline void SingleSubstructureQuery::add_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_fused_rings(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.fused_rings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::_internal_fused_rings() const {
  return fused_rings_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::fused_rings() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.fused_rings)
  return _internal_fused_rings();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::_internal_mutable_fused_rings() {
  return &fused_rings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::mutable_fused_rings() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.fused_rings)
  return _internal_mutable_fused_rings();
}

// optional uint32 min_fused_rings = 51;
inline bool SingleSubstructureQuery::_internal_has_min_fused_rings() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_fused_rings() const {
  return _internal_has_min_fused_rings();
}
inline void SingleSubstructureQuery::clear_min_fused_rings() {
  min_fused_rings_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_min_fused_rings() const {
  return min_fused_rings_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::min_fused_rings() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_fused_rings)
  return _internal_min_fused_rings();
}
inline void SingleSubstructureQuery::_internal_set_min_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000004u;
  min_fused_rings_ = value;
}
inline void SingleSubstructureQuery::set_min_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_fused_rings(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_fused_rings)
}

// optional uint32 max_fused_rings = 52;
inline bool SingleSubstructureQuery::_internal_has_max_fused_rings() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_fused_rings() const {
  return _internal_has_max_fused_rings();
}
inline void SingleSubstructureQuery::clear_max_fused_rings() {
  max_fused_rings_ = 0u;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_max_fused_rings() const {
  return max_fused_rings_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::max_fused_rings() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_fused_rings)
  return _internal_max_fused_rings();
}
inline void SingleSubstructureQuery::_internal_set_max_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000008u;
  max_fused_rings_ = value;
}
inline void SingleSubstructureQuery::set_max_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_fused_rings(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_fused_rings)
}

// repeated uint32 strongly_fused_rings = 53;
inline int SingleSubstructureQuery::_internal_strongly_fused_rings_size() const {
  return strongly_fused_rings_.size();
}
inline int SingleSubstructureQuery::strongly_fused_rings_size() const {
  return _internal_strongly_fused_rings_size();
}
inline void SingleSubstructureQuery::clear_strongly_fused_rings() {
  strongly_fused_rings_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_strongly_fused_rings(int index) const {
  return strongly_fused_rings_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::strongly_fused_rings(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.strongly_fused_rings)
  return _internal_strongly_fused_rings(index);
}
inline void SingleSubstructureQuery::set_strongly_fused_rings(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  strongly_fused_rings_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.strongly_fused_rings)
}
inline void SingleSubstructureQuery::_internal_add_strongly_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  strongly_fused_rings_.Add(value);
}
inline void SingleSubstructureQuery::add_strongly_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_strongly_fused_rings(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.strongly_fused_rings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::_internal_strongly_fused_rings() const {
  return strongly_fused_rings_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::strongly_fused_rings() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.strongly_fused_rings)
  return _internal_strongly_fused_rings();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::_internal_mutable_strongly_fused_rings() {
  return &strongly_fused_rings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::mutable_strongly_fused_rings() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.strongly_fused_rings)
  return _internal_mutable_strongly_fused_rings();
}

// optional uint32 min_strongly_fused_rings = 54;
inline bool SingleSubstructureQuery::_internal_has_min_strongly_fused_rings() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_strongly_fused_rings() const {
  return _internal_has_min_strongly_fused_rings();
}
inline void SingleSubstructureQuery::clear_min_strongly_fused_rings() {
  min_strongly_fused_rings_ = 0u;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_min_strongly_fused_rings() const {
  return min_strongly_fused_rings_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::min_strongly_fused_rings() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_strongly_fused_rings)
  return _internal_min_strongly_fused_rings();
}
inline void SingleSubstructureQuery::_internal_set_min_strongly_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000010u;
  min_strongly_fused_rings_ = value;
}
inline void SingleSubstructureQuery::set_min_strongly_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_strongly_fused_rings(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_strongly_fused_rings)
}

// optional uint32 max_strongly_fused_rings = 55;
inline bool SingleSubstructureQuery::_internal_has_max_strongly_fused_rings() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_strongly_fused_rings() const {
  return _internal_has_max_strongly_fused_rings();
}
inline void SingleSubstructureQuery::clear_max_strongly_fused_rings() {
  max_strongly_fused_rings_ = 0u;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_max_strongly_fused_rings() const {
  return max_strongly_fused_rings_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::max_strongly_fused_rings() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_strongly_fused_rings)
  return _internal_max_strongly_fused_rings();
}
inline void SingleSubstructureQuery::_internal_set_max_strongly_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000020u;
  max_strongly_fused_rings_ = value;
}
inline void SingleSubstructureQuery::set_max_strongly_fused_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_strongly_fused_rings(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_strongly_fused_rings)
}

// repeated uint32 isolated_rings = 56;
inline int SingleSubstructureQuery::_internal_isolated_rings_size() const {
  return isolated_rings_.size();
}
inline int SingleSubstructureQuery::isolated_rings_size() const {
  return _internal_isolated_rings_size();
}
inline void SingleSubstructureQuery::clear_isolated_rings() {
  isolated_rings_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_isolated_rings(int index) const {
  return isolated_rings_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::isolated_rings(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.isolated_rings)
  return _internal_isolated_rings(index);
}
inline void SingleSubstructureQuery::set_isolated_rings(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  isolated_rings_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.isolated_rings)
}
inline void SingleSubstructureQuery::_internal_add_isolated_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  isolated_rings_.Add(value);
}
inline void SingleSubstructureQuery::add_isolated_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_isolated_rings(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.isolated_rings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::_internal_isolated_rings() const {
  return isolated_rings_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::isolated_rings() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.isolated_rings)
  return _internal_isolated_rings();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::_internal_mutable_isolated_rings() {
  return &isolated_rings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::mutable_isolated_rings() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.isolated_rings)
  return _internal_mutable_isolated_rings();
}

// optional uint32 min_isolated_rings = 57;
inline bool SingleSubstructureQuery::_internal_has_min_isolated_rings() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_isolated_rings() const {
  return _internal_has_min_isolated_rings();
}
inline void SingleSubstructureQuery::clear_min_isolated_rings() {
  min_isolated_rings_ = 0u;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_min_isolated_rings() const {
  return min_isolated_rings_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::min_isolated_rings() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_isolated_rings)
  return _internal_min_isolated_rings();
}
inline void SingleSubstructureQuery::_internal_set_min_isolated_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000040u;
  min_isolated_rings_ = value;
}
inline void SingleSubstructureQuery::set_min_isolated_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_isolated_rings(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_isolated_rings)
}

// optional uint32 max_isolated_rings = 58;
inline bool SingleSubstructureQuery::_internal_has_max_isolated_rings() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_isolated_rings() const {
  return _internal_has_max_isolated_rings();
}
inline void SingleSubstructureQuery::clear_max_isolated_rings() {
  max_isolated_rings_ = 0u;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_max_isolated_rings() const {
  return max_isolated_rings_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::max_isolated_rings() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_isolated_rings)
  return _internal_max_isolated_rings();
}
inline void SingleSubstructureQuery::_internal_set_max_isolated_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000080u;
  max_isolated_rings_ = value;
}
inline void SingleSubstructureQuery::set_max_isolated_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_isolated_rings(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_isolated_rings)
}

// repeated uint32 isolated_ring_objects = 59;
inline int SingleSubstructureQuery::_internal_isolated_ring_objects_size() const {
  return isolated_ring_objects_.size();
}
inline int SingleSubstructureQuery::isolated_ring_objects_size() const {
  return _internal_isolated_ring_objects_size();
}
inline void SingleSubstructureQuery::clear_isolated_ring_objects() {
  isolated_ring_objects_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_isolated_ring_objects(int index) const {
  return isolated_ring_objects_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::isolated_ring_objects(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.isolated_ring_objects)
  return _internal_isolated_ring_objects(index);
}
inline void SingleSubstructureQuery::set_isolated_ring_objects(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  isolated_ring_objects_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.isolated_ring_objects)
}
inline void SingleSubstructureQuery::_internal_add_isolated_ring_objects(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  isolated_ring_objects_.Add(value);
}
inline void SingleSubstructureQuery::add_isolated_ring_objects(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_isolated_ring_objects(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.isolated_ring_objects)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::_internal_isolated_ring_objects() const {
  return isolated_ring_objects_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::isolated_ring_objects() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.isolated_ring_objects)
  return _internal_isolated_ring_objects();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::_internal_mutable_isolated_ring_objects() {
  return &isolated_ring_objects_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::mutable_isolated_ring_objects() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.isolated_ring_objects)
  return _internal_mutable_isolated_ring_objects();
}

// optional uint32 min_isolated_ring_objects = 60;
inline bool SingleSubstructureQuery::_internal_has_min_isolated_ring_objects() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_isolated_ring_objects() const {
  return _internal_has_min_isolated_ring_objects();
}
inline void SingleSubstructureQuery::clear_min_isolated_ring_objects() {
  min_isolated_ring_objects_ = 0u;
  _has_bits_[1] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_min_isolated_ring_objects() const {
  return min_isolated_ring_objects_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::min_isolated_ring_objects() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_isolated_ring_objects)
  return _internal_min_isolated_ring_objects();
}
inline void SingleSubstructureQuery::_internal_set_min_isolated_ring_objects(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00001000u;
  min_isolated_ring_objects_ = value;
}
inline void SingleSubstructureQuery::set_min_isolated_ring_objects(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_isolated_ring_objects(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_isolated_ring_objects)
}

// optional uint32 max_isolated_ring_objects = 61;
inline bool SingleSubstructureQuery::_internal_has_max_isolated_ring_objects() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_isolated_ring_objects() const {
  return _internal_has_max_isolated_ring_objects();
}
inline void SingleSubstructureQuery::clear_max_isolated_ring_objects() {
  max_isolated_ring_objects_ = 0u;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_max_isolated_ring_objects() const {
  return max_isolated_ring_objects_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::max_isolated_ring_objects() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_isolated_ring_objects)
  return _internal_max_isolated_ring_objects();
}
inline void SingleSubstructureQuery::_internal_set_max_isolated_ring_objects(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00002000u;
  max_isolated_ring_objects_ = value;
}
inline void SingleSubstructureQuery::set_max_isolated_ring_objects(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_isolated_ring_objects(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_isolated_ring_objects)
}

// repeated uint32 aromatic_rings = 62;
inline int SingleSubstructureQuery::_internal_aromatic_rings_size() const {
  return aromatic_rings_.size();
}
inline int SingleSubstructureQuery::aromatic_rings_size() const {
  return _internal_aromatic_rings_size();
}
inline void SingleSubstructureQuery::clear_aromatic_rings() {
  aromatic_rings_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_aromatic_rings(int index) const {
  return aromatic_rings_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::aromatic_rings(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.aromatic_rings)
  return _internal_aromatic_rings(index);
}
inline void SingleSubstructureQuery::set_aromatic_rings(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  aromatic_rings_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.aromatic_rings)
}
inline void SingleSubstructureQuery::_internal_add_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  aromatic_rings_.Add(value);
}
inline void SingleSubstructureQuery::add_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_aromatic_rings(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.aromatic_rings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::_internal_aromatic_rings() const {
  return aromatic_rings_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::aromatic_rings() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.aromatic_rings)
  return _internal_aromatic_rings();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::_internal_mutable_aromatic_rings() {
  return &aromatic_rings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::mutable_aromatic_rings() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.aromatic_rings)
  return _internal_mutable_aromatic_rings();
}

// optional uint32 min_aromatic_rings = 63;
inline bool SingleSubstructureQuery::_internal_has_min_aromatic_rings() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_aromatic_rings() const {
  return _internal_has_min_aromatic_rings();
}
inline void SingleSubstructureQuery::clear_min_aromatic_rings() {
  min_aromatic_rings_ = 0u;
  _has_bits_[1] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_min_aromatic_rings() const {
  return min_aromatic_rings_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::min_aromatic_rings() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_aromatic_rings)
  return _internal_min_aromatic_rings();
}
inline void SingleSubstructureQuery::_internal_set_min_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00004000u;
  min_aromatic_rings_ = value;
}
inline void SingleSubstructureQuery::set_min_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_aromatic_rings(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_aromatic_rings)
}

// optional uint32 max_aromatic_rings = 64;
inline bool SingleSubstructureQuery::_internal_has_max_aromatic_rings() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_aromatic_rings() const {
  return _internal_has_max_aromatic_rings();
}
inline void SingleSubstructureQuery::clear_max_aromatic_rings() {
  max_aromatic_rings_ = 0u;
  _has_bits_[1] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_max_aromatic_rings() const {
  return max_aromatic_rings_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::max_aromatic_rings() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_aromatic_rings)
  return _internal_max_aromatic_rings();
}
inline void SingleSubstructureQuery::_internal_set_max_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00008000u;
  max_aromatic_rings_ = value;
}
inline void SingleSubstructureQuery::set_max_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_aromatic_rings(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_aromatic_rings)
}

// repeated uint32 non_aromatic_rings = 65;
inline int SingleSubstructureQuery::_internal_non_aromatic_rings_size() const {
  return non_aromatic_rings_.size();
}
inline int SingleSubstructureQuery::non_aromatic_rings_size() const {
  return _internal_non_aromatic_rings_size();
}
inline void SingleSubstructureQuery::clear_non_aromatic_rings() {
  non_aromatic_rings_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_non_aromatic_rings(int index) const {
  return non_aromatic_rings_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::non_aromatic_rings(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.non_aromatic_rings)
  return _internal_non_aromatic_rings(index);
}
inline void SingleSubstructureQuery::set_non_aromatic_rings(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  non_aromatic_rings_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.non_aromatic_rings)
}
inline void SingleSubstructureQuery::_internal_add_non_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  non_aromatic_rings_.Add(value);
}
inline void SingleSubstructureQuery::add_non_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_non_aromatic_rings(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.non_aromatic_rings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::_internal_non_aromatic_rings() const {
  return non_aromatic_rings_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::non_aromatic_rings() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.non_aromatic_rings)
  return _internal_non_aromatic_rings();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::_internal_mutable_non_aromatic_rings() {
  return &non_aromatic_rings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::mutable_non_aromatic_rings() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.non_aromatic_rings)
  return _internal_mutable_non_aromatic_rings();
}

// optional uint32 min_non_aromatic_rings = 66;
inline bool SingleSubstructureQuery::_internal_has_min_non_aromatic_rings() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_non_aromatic_rings() const {
  return _internal_has_min_non_aromatic_rings();
}
inline void SingleSubstructureQuery::clear_min_non_aromatic_rings() {
  min_non_aromatic_rings_ = 0u;
  _has_bits_[1] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_min_non_aromatic_rings() const {
  return min_non_aromatic_rings_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::min_non_aromatic_rings() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_non_aromatic_rings)
  return _internal_min_non_aromatic_rings();
}
inline void SingleSubstructureQuery::_internal_set_min_non_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00010000u;
  min_non_aromatic_rings_ = value;
}
inline void SingleSubstructureQuery::set_min_non_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_non_aromatic_rings(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_non_aromatic_rings)
}

// optional uint32 max_non_aromatic_rings = 67;
inline bool SingleSubstructureQuery::_internal_has_max_non_aromatic_rings() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_non_aromatic_rings() const {
  return _internal_has_max_non_aromatic_rings();
}
inline void SingleSubstructureQuery::clear_max_non_aromatic_rings() {
  max_non_aromatic_rings_ = 0u;
  _has_bits_[1] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_max_non_aromatic_rings() const {
  return max_non_aromatic_rings_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::max_non_aromatic_rings() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_non_aromatic_rings)
  return _internal_max_non_aromatic_rings();
}
inline void SingleSubstructureQuery::_internal_set_max_non_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00020000u;
  max_non_aromatic_rings_ = value;
}
inline void SingleSubstructureQuery::set_max_non_aromatic_rings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_non_aromatic_rings(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_non_aromatic_rings)
}

// repeated uint32 distance_between_hits = 68;
inline int SingleSubstructureQuery::_internal_distance_between_hits_size() const {
  return distance_between_hits_.size();
}
inline int SingleSubstructureQuery::distance_between_hits_size() const {
  return _internal_distance_between_hits_size();
}
inline void SingleSubstructureQuery::clear_distance_between_hits() {
  distance_between_hits_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_distance_between_hits(int index) const {
  return distance_between_hits_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::distance_between_hits(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.distance_between_hits)
  return _internal_distance_between_hits(index);
}
inline void SingleSubstructureQuery::set_distance_between_hits(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  distance_between_hits_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.distance_between_hits)
}
inline void SingleSubstructureQuery::_internal_add_distance_between_hits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  distance_between_hits_.Add(value);
}
inline void SingleSubstructureQuery::add_distance_between_hits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_distance_between_hits(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.distance_between_hits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::_internal_distance_between_hits() const {
  return distance_between_hits_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::distance_between_hits() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.distance_between_hits)
  return _internal_distance_between_hits();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::_internal_mutable_distance_between_hits() {
  return &distance_between_hits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::mutable_distance_between_hits() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.distance_between_hits)
  return _internal_mutable_distance_between_hits();
}

// optional uint32 min_distance_between_hits = 69;
inline bool SingleSubstructureQuery::_internal_has_min_distance_between_hits() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_distance_between_hits() const {
  return _internal_has_min_distance_between_hits();
}
inline void SingleSubstructureQuery::clear_min_distance_between_hits() {
  min_distance_between_hits_ = 0u;
  _has_bits_[1] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_min_distance_between_hits() const {
  return min_distance_between_hits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::min_distance_between_hits() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_distance_between_hits)
  return _internal_min_distance_between_hits();
}
inline void SingleSubstructureQuery::_internal_set_min_distance_between_hits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00040000u;
  min_distance_between_hits_ = value;
}
inline void SingleSubstructureQuery::set_min_distance_between_hits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_distance_between_hits(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_distance_between_hits)
}

// optional uint32 max_distance_between_hits = 70;
inline bool SingleSubstructureQuery::_internal_has_max_distance_between_hits() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_distance_between_hits() const {
  return _internal_has_max_distance_between_hits();
}
inline void SingleSubstructureQuery::clear_max_distance_between_hits() {
  max_distance_between_hits_ = 0u;
  _has_bits_[1] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_max_distance_between_hits() const {
  return max_distance_between_hits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::max_distance_between_hits() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_distance_between_hits)
  return _internal_max_distance_between_hits();
}
inline void SingleSubstructureQuery::_internal_set_max_distance_between_hits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00080000u;
  max_distance_between_hits_ = value;
}
inline void SingleSubstructureQuery::set_max_distance_between_hits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_distance_between_hits(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_distance_between_hits)
}

// repeated uint32 number_isotopic_atoms = 71;
inline int SingleSubstructureQuery::_internal_number_isotopic_atoms_size() const {
  return number_isotopic_atoms_.size();
}
inline int SingleSubstructureQuery::number_isotopic_atoms_size() const {
  return _internal_number_isotopic_atoms_size();
}
inline void SingleSubstructureQuery::clear_number_isotopic_atoms() {
  number_isotopic_atoms_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_number_isotopic_atoms(int index) const {
  return number_isotopic_atoms_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::number_isotopic_atoms(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.number_isotopic_atoms)
  return _internal_number_isotopic_atoms(index);
}
inline void SingleSubstructureQuery::set_number_isotopic_atoms(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  number_isotopic_atoms_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.number_isotopic_atoms)
}
inline void SingleSubstructureQuery::_internal_add_number_isotopic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  number_isotopic_atoms_.Add(value);
}
inline void SingleSubstructureQuery::add_number_isotopic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_number_isotopic_atoms(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.number_isotopic_atoms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::_internal_number_isotopic_atoms() const {
  return number_isotopic_atoms_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::number_isotopic_atoms() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.number_isotopic_atoms)
  return _internal_number_isotopic_atoms();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::_internal_mutable_number_isotopic_atoms() {
  return &number_isotopic_atoms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::mutable_number_isotopic_atoms() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.number_isotopic_atoms)
  return _internal_mutable_number_isotopic_atoms();
}

// optional uint32 min_number_isotopic_atoms = 72;
inline bool SingleSubstructureQuery::_internal_has_min_number_isotopic_atoms() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_number_isotopic_atoms() const {
  return _internal_has_min_number_isotopic_atoms();
}
inline void SingleSubstructureQuery::clear_min_number_isotopic_atoms() {
  min_number_isotopic_atoms_ = 0u;
  _has_bits_[1] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_min_number_isotopic_atoms() const {
  return min_number_isotopic_atoms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::min_number_isotopic_atoms() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_number_isotopic_atoms)
  return _internal_min_number_isotopic_atoms();
}
inline void SingleSubstructureQuery::_internal_set_min_number_isotopic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00100000u;
  min_number_isotopic_atoms_ = value;
}
inline void SingleSubstructureQuery::set_min_number_isotopic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_number_isotopic_atoms(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_number_isotopic_atoms)
}

// optional uint32 max_number_isotopic_atoms = 73;
inline bool SingleSubstructureQuery::_internal_has_max_number_isotopic_atoms() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_number_isotopic_atoms() const {
  return _internal_has_max_number_isotopic_atoms();
}
inline void SingleSubstructureQuery::clear_max_number_isotopic_atoms() {
  max_number_isotopic_atoms_ = 0u;
  _has_bits_[1] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_max_number_isotopic_atoms() const {
  return max_number_isotopic_atoms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::max_number_isotopic_atoms() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_number_isotopic_atoms)
  return _internal_max_number_isotopic_atoms();
}
inline void SingleSubstructureQuery::_internal_set_max_number_isotopic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00200000u;
  max_number_isotopic_atoms_ = value;
}
inline void SingleSubstructureQuery::set_max_number_isotopic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_number_isotopic_atoms(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_number_isotopic_atoms)
}

// repeated uint32 number_fragments = 74;
inline int SingleSubstructureQuery::_internal_number_fragments_size() const {
  return number_fragments_.size();
}
inline int SingleSubstructureQuery::number_fragments_size() const {
  return _internal_number_fragments_size();
}
inline void SingleSubstructureQuery::clear_number_fragments() {
  number_fragments_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_number_fragments(int index) const {
  return number_fragments_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::number_fragments(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.number_fragments)
  return _internal_number_fragments(index);
}
inline void SingleSubstructureQuery::set_number_fragments(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  number_fragments_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.number_fragments)
}
inline void SingleSubstructureQuery::_internal_add_number_fragments(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  number_fragments_.Add(value);
}
inline void SingleSubstructureQuery::add_number_fragments(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_number_fragments(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.number_fragments)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::_internal_number_fragments() const {
  return number_fragments_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::number_fragments() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.number_fragments)
  return _internal_number_fragments();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::_internal_mutable_number_fragments() {
  return &number_fragments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::mutable_number_fragments() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.number_fragments)
  return _internal_mutable_number_fragments();
}

// optional uint32 min_number_fragments = 75;
inline bool SingleSubstructureQuery::_internal_has_min_number_fragments() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_number_fragments() const {
  return _internal_has_min_number_fragments();
}
inline void SingleSubstructureQuery::clear_min_number_fragments() {
  min_number_fragments_ = 0u;
  _has_bits_[1] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_min_number_fragments() const {
  return min_number_fragments_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::min_number_fragments() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_number_fragments)
  return _internal_min_number_fragments();
}
inline void SingleSubstructureQuery::_internal_set_min_number_fragments(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00400000u;
  min_number_fragments_ = value;
}
inline void SingleSubstructureQuery::set_min_number_fragments(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_number_fragments(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_number_fragments)
}

// optional uint32 max_number_fragments = 76;
inline bool SingleSubstructureQuery::_internal_has_max_number_fragments() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_number_fragments() const {
  return _internal_has_max_number_fragments();
}
inline void SingleSubstructureQuery::clear_max_number_fragments() {
  max_number_fragments_ = 0u;
  _has_bits_[1] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_max_number_fragments() const {
  return max_number_fragments_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::max_number_fragments() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_number_fragments)
  return _internal_max_number_fragments();
}
inline void SingleSubstructureQuery::_internal_set_max_number_fragments(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00800000u;
  max_number_fragments_ = value;
}
inline void SingleSubstructureQuery::set_max_number_fragments(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_number_fragments(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_number_fragments)
}

// repeated uint32 distance_between_root_atoms = 77;
inline int SingleSubstructureQuery::_internal_distance_between_root_atoms_size() const {
  return distance_between_root_atoms_.size();
}
inline int SingleSubstructureQuery::distance_between_root_atoms_size() const {
  return _internal_distance_between_root_atoms_size();
}
inline void SingleSubstructureQuery::clear_distance_between_root_atoms() {
  distance_between_root_atoms_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_distance_between_root_atoms(int index) const {
  return distance_between_root_atoms_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::distance_between_root_atoms(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.distance_between_root_atoms)
  return _internal_distance_between_root_atoms(index);
}
inline void SingleSubstructureQuery::set_distance_between_root_atoms(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  distance_between_root_atoms_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.distance_between_root_atoms)
}
inline void SingleSubstructureQuery::_internal_add_distance_between_root_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  distance_between_root_atoms_.Add(value);
}
inline void SingleSubstructureQuery::add_distance_between_root_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_distance_between_root_atoms(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.distance_between_root_atoms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::_internal_distance_between_root_atoms() const {
  return distance_between_root_atoms_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::distance_between_root_atoms() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.distance_between_root_atoms)
  return _internal_distance_between_root_atoms();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::_internal_mutable_distance_between_root_atoms() {
  return &distance_between_root_atoms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::mutable_distance_between_root_atoms() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.distance_between_root_atoms)
  return _internal_mutable_distance_between_root_atoms();
}

// optional uint32 min_distance_between_root_atoms = 78;
inline bool SingleSubstructureQuery::_internal_has_min_distance_between_root_atoms() const {
  bool value = (_has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_distance_between_root_atoms() const {
  return _internal_has_min_distance_between_root_atoms();
}
inline void SingleSubstructureQuery::clear_min_distance_between_root_atoms() {
  min_distance_between_root_atoms_ = 0u;
  _has_bits_[1] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_min_distance_between_root_atoms() const {
  return min_distance_between_root_atoms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::min_distance_between_root_atoms() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_distance_between_root_atoms)
  return _internal_min_distance_between_root_atoms();
}
inline void SingleSubstructureQuery::_internal_set_min_distance_between_root_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x01000000u;
  min_distance_between_root_atoms_ = value;
}
inline void SingleSubstructureQuery::set_min_distance_between_root_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_distance_between_root_atoms(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_distance_between_root_atoms)
}

// optional uint32 max_distance_between_root_atoms = 79;
inline bool SingleSubstructureQuery::_internal_has_max_distance_between_root_atoms() const {
  bool value = (_has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_distance_between_root_atoms() const {
  return _internal_has_max_distance_between_root_atoms();
}
inline void SingleSubstructureQuery::clear_max_distance_between_root_atoms() {
  max_distance_between_root_atoms_ = 0u;
  _has_bits_[1] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_max_distance_between_root_atoms() const {
  return max_distance_between_root_atoms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::max_distance_between_root_atoms() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_distance_between_root_atoms)
  return _internal_max_distance_between_root_atoms();
}
inline void SingleSubstructureQuery::_internal_set_max_distance_between_root_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x02000000u;
  max_distance_between_root_atoms_ = value;
}
inline void SingleSubstructureQuery::set_max_distance_between_root_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_distance_between_root_atoms(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_distance_between_root_atoms)
}

// repeated uint32 atoms_in_spinach = 80;
inline int SingleSubstructureQuery::_internal_atoms_in_spinach_size() const {
  return atoms_in_spinach_.size();
}
inline int SingleSubstructureQuery::atoms_in_spinach_size() const {
  return _internal_atoms_in_spinach_size();
}
inline void SingleSubstructureQuery::clear_atoms_in_spinach() {
  atoms_in_spinach_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_atoms_in_spinach(int index) const {
  return atoms_in_spinach_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::atoms_in_spinach(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.atoms_in_spinach)
  return _internal_atoms_in_spinach(index);
}
inline void SingleSubstructureQuery::set_atoms_in_spinach(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  atoms_in_spinach_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.atoms_in_spinach)
}
inline void SingleSubstructureQuery::_internal_add_atoms_in_spinach(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  atoms_in_spinach_.Add(value);
}
inline void SingleSubstructureQuery::add_atoms_in_spinach(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_atoms_in_spinach(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.atoms_in_spinach)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::_internal_atoms_in_spinach() const {
  return atoms_in_spinach_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::atoms_in_spinach() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.atoms_in_spinach)
  return _internal_atoms_in_spinach();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::_internal_mutable_atoms_in_spinach() {
  return &atoms_in_spinach_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::mutable_atoms_in_spinach() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.atoms_in_spinach)
  return _internal_mutable_atoms_in_spinach();
}

// optional uint32 min_atoms_in_spinach = 81;
inline bool SingleSubstructureQuery::_internal_has_min_atoms_in_spinach() const {
  bool value = (_has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_atoms_in_spinach() const {
  return _internal_has_min_atoms_in_spinach();
}
inline void SingleSubstructureQuery::clear_min_atoms_in_spinach() {
  min_atoms_in_spinach_ = 0u;
  _has_bits_[1] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_min_atoms_in_spinach() const {
  return min_atoms_in_spinach_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::min_atoms_in_spinach() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_atoms_in_spinach)
  return _internal_min_atoms_in_spinach();
}
inline void SingleSubstructureQuery::_internal_set_min_atoms_in_spinach(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x04000000u;
  min_atoms_in_spinach_ = value;
}
inline void SingleSubstructureQuery::set_min_atoms_in_spinach(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_atoms_in_spinach(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_atoms_in_spinach)
}

// optional uint32 max_atoms_in_spinach = 82;
inline bool SingleSubstructureQuery::_internal_has_max_atoms_in_spinach() const {
  bool value = (_has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_atoms_in_spinach() const {
  return _internal_has_max_atoms_in_spinach();
}
inline void SingleSubstructureQuery::clear_max_atoms_in_spinach() {
  max_atoms_in_spinach_ = 0u;
  _has_bits_[1] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_max_atoms_in_spinach() const {
  return max_atoms_in_spinach_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::max_atoms_in_spinach() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_atoms_in_spinach)
  return _internal_max_atoms_in_spinach();
}
inline void SingleSubstructureQuery::_internal_set_max_atoms_in_spinach(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x08000000u;
  max_atoms_in_spinach_ = value;
}
inline void SingleSubstructureQuery::set_max_atoms_in_spinach(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_atoms_in_spinach(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_atoms_in_spinach)
}

// repeated uint32 inter_ring_atoms = 83;
inline int SingleSubstructureQuery::_internal_inter_ring_atoms_size() const {
  return inter_ring_atoms_.size();
}
inline int SingleSubstructureQuery::inter_ring_atoms_size() const {
  return _internal_inter_ring_atoms_size();
}
inline void SingleSubstructureQuery::clear_inter_ring_atoms() {
  inter_ring_atoms_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_inter_ring_atoms(int index) const {
  return inter_ring_atoms_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::inter_ring_atoms(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.inter_ring_atoms)
  return _internal_inter_ring_atoms(index);
}
inline void SingleSubstructureQuery::set_inter_ring_atoms(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  inter_ring_atoms_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.inter_ring_atoms)
}
inline void SingleSubstructureQuery::_internal_add_inter_ring_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  inter_ring_atoms_.Add(value);
}
inline void SingleSubstructureQuery::add_inter_ring_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_inter_ring_atoms(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.inter_ring_atoms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::_internal_inter_ring_atoms() const {
  return inter_ring_atoms_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::inter_ring_atoms() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.inter_ring_atoms)
  return _internal_inter_ring_atoms();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::_internal_mutable_inter_ring_atoms() {
  return &inter_ring_atoms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::mutable_inter_ring_atoms() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.inter_ring_atoms)
  return _internal_mutable_inter_ring_atoms();
}

// optional uint32 min_inter_ring_atoms = 84;
inline bool SingleSubstructureQuery::_internal_has_min_inter_ring_atoms() const {
  bool value = (_has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_inter_ring_atoms() const {
  return _internal_has_min_inter_ring_atoms();
}
inline void SingleSubstructureQuery::clear_min_inter_ring_atoms() {
  min_inter_ring_atoms_ = 0u;
  _has_bits_[1] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_min_inter_ring_atoms() const {
  return min_inter_ring_atoms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::min_inter_ring_atoms() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_inter_ring_atoms)
  return _internal_min_inter_ring_atoms();
}
inline void SingleSubstructureQuery::_internal_set_min_inter_ring_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x10000000u;
  min_inter_ring_atoms_ = value;
}
inline void SingleSubstructureQuery::set_min_inter_ring_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_inter_ring_atoms(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_inter_ring_atoms)
}

// optional uint32 max_inter_ring_atoms = 85;
inline bool SingleSubstructureQuery::_internal_has_max_inter_ring_atoms() const {
  bool value = (_has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_inter_ring_atoms() const {
  return _internal_has_max_inter_ring_atoms();
}
inline void SingleSubstructureQuery::clear_max_inter_ring_atoms() {
  max_inter_ring_atoms_ = 0u;
  _has_bits_[1] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_max_inter_ring_atoms() const {
  return max_inter_ring_atoms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::max_inter_ring_atoms() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_inter_ring_atoms)
  return _internal_max_inter_ring_atoms();
}
inline void SingleSubstructureQuery::_internal_set_max_inter_ring_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x20000000u;
  max_inter_ring_atoms_ = value;
}
inline void SingleSubstructureQuery::set_max_inter_ring_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_inter_ring_atoms(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_inter_ring_atoms)
}

// repeated uint32 unmatched_atoms = 86;
inline int SingleSubstructureQuery::_internal_unmatched_atoms_size() const {
  return unmatched_atoms_.size();
}
inline int SingleSubstructureQuery::unmatched_atoms_size() const {
  return _internal_unmatched_atoms_size();
}
inline void SingleSubstructureQuery::clear_unmatched_atoms() {
  unmatched_atoms_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_unmatched_atoms(int index) const {
  return unmatched_atoms_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::unmatched_atoms(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.unmatched_atoms)
  return _internal_unmatched_atoms(index);
}
inline void SingleSubstructureQuery::set_unmatched_atoms(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  unmatched_atoms_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.unmatched_atoms)
}
inline void SingleSubstructureQuery::_internal_add_unmatched_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  unmatched_atoms_.Add(value);
}
inline void SingleSubstructureQuery::add_unmatched_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_unmatched_atoms(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.unmatched_atoms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::_internal_unmatched_atoms() const {
  return unmatched_atoms_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::unmatched_atoms() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.unmatched_atoms)
  return _internal_unmatched_atoms();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::_internal_mutable_unmatched_atoms() {
  return &unmatched_atoms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::mutable_unmatched_atoms() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.unmatched_atoms)
  return _internal_mutable_unmatched_atoms();
}

// optional uint32 min_unmatched_atoms = 87;
inline bool SingleSubstructureQuery::_internal_has_min_unmatched_atoms() const {
  bool value = (_has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_unmatched_atoms() const {
  return _internal_has_min_unmatched_atoms();
}
inline void SingleSubstructureQuery::clear_min_unmatched_atoms() {
  min_unmatched_atoms_ = 0u;
  _has_bits_[1] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_min_unmatched_atoms() const {
  return min_unmatched_atoms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::min_unmatched_atoms() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_unmatched_atoms)
  return _internal_min_unmatched_atoms();
}
inline void SingleSubstructureQuery::_internal_set_min_unmatched_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x40000000u;
  min_unmatched_atoms_ = value;
}
inline void SingleSubstructureQuery::set_min_unmatched_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_unmatched_atoms(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_unmatched_atoms)
}

// optional uint32 max_unmatched_atoms = 88;
inline bool SingleSubstructureQuery::_internal_has_max_unmatched_atoms() const {
  bool value = (_has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_unmatched_atoms() const {
  return _internal_has_max_unmatched_atoms();
}
inline void SingleSubstructureQuery::clear_max_unmatched_atoms() {
  max_unmatched_atoms_ = 0u;
  _has_bits_[1] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_max_unmatched_atoms() const {
  return max_unmatched_atoms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::max_unmatched_atoms() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_unmatched_atoms)
  return _internal_max_unmatched_atoms();
}
inline void SingleSubstructureQuery::_internal_set_max_unmatched_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x80000000u;
  max_unmatched_atoms_ = value;
}
inline void SingleSubstructureQuery::set_max_unmatched_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_unmatched_atoms(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_unmatched_atoms)
}

// repeated int32 net_formal_charge = 89;
inline int SingleSubstructureQuery::_internal_net_formal_charge_size() const {
  return net_formal_charge_.size();
}
inline int SingleSubstructureQuery::net_formal_charge_size() const {
  return _internal_net_formal_charge_size();
}
inline void SingleSubstructureQuery::clear_net_formal_charge() {
  net_formal_charge_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleSubstructureQuery::_internal_net_formal_charge(int index) const {
  return net_formal_charge_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleSubstructureQuery::net_formal_charge(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.net_formal_charge)
  return _internal_net_formal_charge(index);
}
inline void SingleSubstructureQuery::set_net_formal_charge(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  net_formal_charge_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.net_formal_charge)
}
inline void SingleSubstructureQuery::_internal_add_net_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  net_formal_charge_.Add(value);
}
inline void SingleSubstructureQuery::add_net_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_net_formal_charge(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.net_formal_charge)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SingleSubstructureQuery::_internal_net_formal_charge() const {
  return net_formal_charge_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SingleSubstructureQuery::net_formal_charge() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.net_formal_charge)
  return _internal_net_formal_charge();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SingleSubstructureQuery::_internal_mutable_net_formal_charge() {
  return &net_formal_charge_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SingleSubstructureQuery::mutable_net_formal_charge() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.net_formal_charge)
  return _internal_mutable_net_formal_charge();
}

// optional int32 min_net_formal_charge = 90;
inline bool SingleSubstructureQuery::_internal_has_min_net_formal_charge() const {
  bool value = (_has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_net_formal_charge() const {
  return _internal_has_min_net_formal_charge();
}
inline void SingleSubstructureQuery::clear_min_net_formal_charge() {
  min_net_formal_charge_ = 0;
  _has_bits_[2] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleSubstructureQuery::_internal_min_net_formal_charge() const {
  return min_net_formal_charge_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleSubstructureQuery::min_net_formal_charge() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_net_formal_charge)
  return _internal_min_net_formal_charge();
}
inline void SingleSubstructureQuery::_internal_set_min_net_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000001u;
  min_net_formal_charge_ = value;
}
inline void SingleSubstructureQuery::set_min_net_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_net_formal_charge(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_net_formal_charge)
}

// optional int32 max_net_formal_charge = 91;
inline bool SingleSubstructureQuery::_internal_has_max_net_formal_charge() const {
  bool value = (_has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_net_formal_charge() const {
  return _internal_has_max_net_formal_charge();
}
inline void SingleSubstructureQuery::clear_max_net_formal_charge() {
  max_net_formal_charge_ = 0;
  _has_bits_[2] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleSubstructureQuery::_internal_max_net_formal_charge() const {
  return max_net_formal_charge_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleSubstructureQuery::max_net_formal_charge() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_net_formal_charge)
  return _internal_max_net_formal_charge();
}
inline void SingleSubstructureQuery::_internal_set_max_net_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000002u;
  max_net_formal_charge_ = value;
}
inline void SingleSubstructureQuery::set_max_net_formal_charge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_net_formal_charge(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_net_formal_charge)
}

// optional float min_fraction_atoms_matched = 92;
inline bool SingleSubstructureQuery::_internal_has_min_fraction_atoms_matched() const {
  bool value = (_has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_fraction_atoms_matched() const {
  return _internal_has_min_fraction_atoms_matched();
}
inline void SingleSubstructureQuery::clear_min_fraction_atoms_matched() {
  min_fraction_atoms_matched_ = 0;
  _has_bits_[2] &= ~0x00000004u;
}
inline float SingleSubstructureQuery::_internal_min_fraction_atoms_matched() const {
  return min_fraction_atoms_matched_;
}
inline float SingleSubstructureQuery::min_fraction_atoms_matched() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_fraction_atoms_matched)
  return _internal_min_fraction_atoms_matched();
}
inline void SingleSubstructureQuery::_internal_set_min_fraction_atoms_matched(float value) {
  _has_bits_[2] |= 0x00000004u;
  min_fraction_atoms_matched_ = value;
}
inline void SingleSubstructureQuery::set_min_fraction_atoms_matched(float value) {
  _internal_set_min_fraction_atoms_matched(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_fraction_atoms_matched)
}

// optional float max_fraction_atoms_matched = 93;
inline bool SingleSubstructureQuery::_internal_has_max_fraction_atoms_matched() const {
  bool value = (_has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_fraction_atoms_matched() const {
  return _internal_has_max_fraction_atoms_matched();
}
inline void SingleSubstructureQuery::clear_max_fraction_atoms_matched() {
  max_fraction_atoms_matched_ = 0;
  _has_bits_[2] &= ~0x00000008u;
}
inline float SingleSubstructureQuery::_internal_max_fraction_atoms_matched() const {
  return max_fraction_atoms_matched_;
}
inline float SingleSubstructureQuery::max_fraction_atoms_matched() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_fraction_atoms_matched)
  return _internal_max_fraction_atoms_matched();
}
inline void SingleSubstructureQuery::_internal_set_max_fraction_atoms_matched(float value) {
  _has_bits_[2] |= 0x00000008u;
  max_fraction_atoms_matched_ = value;
}
inline void SingleSubstructureQuery::set_max_fraction_atoms_matched(float value) {
  _internal_set_max_fraction_atoms_matched(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_fraction_atoms_matched)
}

// repeated .SubstructureSearch.SubstructureEnvironment environment = 94;
inline int SingleSubstructureQuery::_internal_environment_size() const {
  return environment_.size();
}
inline int SingleSubstructureQuery::environment_size() const {
  return _internal_environment_size();
}
inline void SingleSubstructureQuery::clear_environment() {
  environment_.Clear();
}
inline ::SubstructureSearch::SubstructureEnvironment* SingleSubstructureQuery::mutable_environment(int index) {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SingleSubstructureQuery.environment)
  return environment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureEnvironment >*
SingleSubstructureQuery::mutable_environment() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.environment)
  return &environment_;
}
inline const ::SubstructureSearch::SubstructureEnvironment& SingleSubstructureQuery::_internal_environment(int index) const {
  return environment_.Get(index);
}
inline const ::SubstructureSearch::SubstructureEnvironment& SingleSubstructureQuery::environment(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.environment)
  return _internal_environment(index);
}
inline ::SubstructureSearch::SubstructureEnvironment* SingleSubstructureQuery::_internal_add_environment() {
  return environment_.Add();
}
inline ::SubstructureSearch::SubstructureEnvironment* SingleSubstructureQuery::add_environment() {
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.environment)
  return _internal_add_environment();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureEnvironment >&
SingleSubstructureQuery::environment() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.environment)
  return environment_;
}

// repeated .SubstructureSearch.SubstructureEnvironment environment_no_match = 95;
inline int SingleSubstructureQuery::_internal_environment_no_match_size() const {
  return environment_no_match_.size();
}
inline int SingleSubstructureQuery::environment_no_match_size() const {
  return _internal_environment_no_match_size();
}
inline void SingleSubstructureQuery::clear_environment_no_match() {
  environment_no_match_.Clear();
}
inline ::SubstructureSearch::SubstructureEnvironment* SingleSubstructureQuery::mutable_environment_no_match(int index) {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SingleSubstructureQuery.environment_no_match)
  return environment_no_match_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureEnvironment >*
SingleSubstructureQuery::mutable_environment_no_match() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.environment_no_match)
  return &environment_no_match_;
}
inline const ::SubstructureSearch::SubstructureEnvironment& SingleSubstructureQuery::_internal_environment_no_match(int index) const {
  return environment_no_match_.Get(index);
}
inline const ::SubstructureSearch::SubstructureEnvironment& SingleSubstructureQuery::environment_no_match(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.environment_no_match)
  return _internal_environment_no_match(index);
}
inline ::SubstructureSearch::SubstructureEnvironment* SingleSubstructureQuery::_internal_add_environment_no_match() {
  return environment_no_match_.Add();
}
inline ::SubstructureSearch::SubstructureEnvironment* SingleSubstructureQuery::add_environment_no_match() {
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.environment_no_match)
  return _internal_add_environment_no_match();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureEnvironment >&
SingleSubstructureQuery::environment_no_match() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.environment_no_match)
  return environment_no_match_;
}

// optional bool environment_must_match_unmatched_atoms = 96;
inline bool SingleSubstructureQuery::_internal_has_environment_must_match_unmatched_atoms() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_environment_must_match_unmatched_atoms() const {
  return _internal_has_environment_must_match_unmatched_atoms();
}
inline void SingleSubstructureQuery::clear_environment_must_match_unmatched_atoms() {
  environment_must_match_unmatched_atoms_ = false;
  _has_bits_[1] &= ~0x00000400u;
}
inline bool SingleSubstructureQuery::_internal_environment_must_match_unmatched_atoms() const {
  return environment_must_match_unmatched_atoms_;
}
inline bool SingleSubstructureQuery::environment_must_match_unmatched_atoms() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.environment_must_match_unmatched_atoms)
  return _internal_environment_must_match_unmatched_atoms();
}
inline void SingleSubstructureQuery::_internal_set_environment_must_match_unmatched_atoms(bool value) {
  _has_bits_[1] |= 0x00000400u;
  environment_must_match_unmatched_atoms_ = value;
}
inline void SingleSubstructureQuery::set_environment_must_match_unmatched_atoms(bool value) {
  _internal_set_environment_must_match_unmatched_atoms(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.environment_must_match_unmatched_atoms)
}

// optional bool env_matches_can_share_attachment_points = 97;
inline bool SingleSubstructureQuery::_internal_has_env_matches_can_share_attachment_points() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_env_matches_can_share_attachment_points() const {
  return _internal_has_env_matches_can_share_attachment_points();
}
inline void SingleSubstructureQuery::clear_env_matches_can_share_attachment_points() {
  env_matches_can_share_attachment_points_ = false;
  _has_bits_[1] &= ~0x00000800u;
}
inline bool SingleSubstructureQuery::_internal_env_matches_can_share_attachment_points() const {
  return env_matches_can_share_attachment_points_;
}
inline bool SingleSubstructureQuery::env_matches_can_share_attachment_points() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.env_matches_can_share_attachment_points)
  return _internal_env_matches_can_share_attachment_points();
}
inline void SingleSubstructureQuery::_internal_set_env_matches_can_share_attachment_points(bool value) {
  _has_bits_[1] |= 0x00000800u;
  env_matches_can_share_attachment_points_ = value;
}
inline void SingleSubstructureQuery::set_env_matches_can_share_attachment_points(bool value) {
  _internal_set_env_matches_can_share_attachment_points(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.env_matches_can_share_attachment_points)
}

// repeated .SubstructureSearch.SubstructureRingSpecification ring_specification = 98;
inline int SingleSubstructureQuery::_internal_ring_specification_size() const {
  return ring_specification_.size();
}
inline int SingleSubstructureQuery::ring_specification_size() const {
  return _internal_ring_specification_size();
}
inline void SingleSubstructureQuery::clear_ring_specification() {
  ring_specification_.Clear();
}
inline ::SubstructureSearch::SubstructureRingSpecification* SingleSubstructureQuery::mutable_ring_specification(int index) {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SingleSubstructureQuery.ring_specification)
  return ring_specification_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureRingSpecification >*
SingleSubstructureQuery::mutable_ring_specification() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.ring_specification)
  return &ring_specification_;
}
inline const ::SubstructureSearch::SubstructureRingSpecification& SingleSubstructureQuery::_internal_ring_specification(int index) const {
  return ring_specification_.Get(index);
}
inline const ::SubstructureSearch::SubstructureRingSpecification& SingleSubstructureQuery::ring_specification(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.ring_specification)
  return _internal_ring_specification(index);
}
inline ::SubstructureSearch::SubstructureRingSpecification* SingleSubstructureQuery::_internal_add_ring_specification() {
  return ring_specification_.Add();
}
inline ::SubstructureSearch::SubstructureRingSpecification* SingleSubstructureQuery::add_ring_specification() {
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.ring_specification)
  return _internal_add_ring_specification();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureRingSpecification >&
SingleSubstructureQuery::ring_specification() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.ring_specification)
  return ring_specification_;
}

// repeated .SubstructureSearch.Operator ring_specification_logexp = 99;
inline int SingleSubstructureQuery::_internal_ring_specification_logexp_size() const {
  return ring_specification_logexp_.size();
}
inline int SingleSubstructureQuery::ring_specification_logexp_size() const {
  return _internal_ring_specification_logexp_size();
}
inline void SingleSubstructureQuery::clear_ring_specification_logexp() {
  ring_specification_logexp_.Clear();
}
inline ::SubstructureSearch::Operator SingleSubstructureQuery::_internal_ring_specification_logexp(int index) const {
  return static_cast< ::SubstructureSearch::Operator >(ring_specification_logexp_.Get(index));
}
inline ::SubstructureSearch::Operator SingleSubstructureQuery::ring_specification_logexp(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.ring_specification_logexp)
  return _internal_ring_specification_logexp(index);
}
inline void SingleSubstructureQuery::set_ring_specification_logexp(int index, ::SubstructureSearch::Operator value) {
  assert(::SubstructureSearch::Operator_IsValid(value));
  ring_specification_logexp_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.ring_specification_logexp)
}
inline void SingleSubstructureQuery::_internal_add_ring_specification_logexp(::SubstructureSearch::Operator value) {
  assert(::SubstructureSearch::Operator_IsValid(value));
  ring_specification_logexp_.Add(value);
}
inline void SingleSubstructureQuery::add_ring_specification_logexp(::SubstructureSearch::Operator value) {
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.ring_specification_logexp)
  _internal_add_ring_specification_logexp(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SingleSubstructureQuery::ring_specification_logexp() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.ring_specification_logexp)
  return ring_specification_logexp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SingleSubstructureQuery::_internal_mutable_ring_specification_logexp() {
  return &ring_specification_logexp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SingleSubstructureQuery::mutable_ring_specification_logexp() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.ring_specification_logexp)
  return _internal_mutable_ring_specification_logexp();
}

// repeated .SubstructureSearch.SubstructureRingSystemSpecification ring_system_specifier = 100;
inline int SingleSubstructureQuery::_internal_ring_system_specifier_size() const {
  return ring_system_specifier_.size();
}
inline int SingleSubstructureQuery::ring_system_specifier_size() const {
  return _internal_ring_system_specifier_size();
}
inline void SingleSubstructureQuery::clear_ring_system_specifier() {
  ring_system_specifier_.Clear();
}
inline ::SubstructureSearch::SubstructureRingSystemSpecification* SingleSubstructureQuery::mutable_ring_system_specifier(int index) {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SingleSubstructureQuery.ring_system_specifier)
  return ring_system_specifier_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureRingSystemSpecification >*
SingleSubstructureQuery::mutable_ring_system_specifier() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.ring_system_specifier)
  return &ring_system_specifier_;
}
inline const ::SubstructureSearch::SubstructureRingSystemSpecification& SingleSubstructureQuery::_internal_ring_system_specifier(int index) const {
  return ring_system_specifier_.Get(index);
}
inline const ::SubstructureSearch::SubstructureRingSystemSpecification& SingleSubstructureQuery::ring_system_specifier(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.ring_system_specifier)
  return _internal_ring_system_specifier(index);
}
inline ::SubstructureSearch::SubstructureRingSystemSpecification* SingleSubstructureQuery::_internal_add_ring_system_specifier() {
  return ring_system_specifier_.Add();
}
inline ::SubstructureSearch::SubstructureRingSystemSpecification* SingleSubstructureQuery::add_ring_system_specifier() {
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.ring_system_specifier)
  return _internal_add_ring_system_specifier();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureRingSystemSpecification >&
SingleSubstructureQuery::ring_system_specifier() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.ring_system_specifier)
  return ring_system_specifier_;
}

// repeated .SubstructureSearch.Operator ring_system_specifier_logexp = 101;
inline int SingleSubstructureQuery::_internal_ring_system_specifier_logexp_size() const {
  return ring_system_specifier_logexp_.size();
}
inline int SingleSubstructureQuery::ring_system_specifier_logexp_size() const {
  return _internal_ring_system_specifier_logexp_size();
}
inline void SingleSubstructureQuery::clear_ring_system_specifier_logexp() {
  ring_system_specifier_logexp_.Clear();
}
inline ::SubstructureSearch::Operator SingleSubstructureQuery::_internal_ring_system_specifier_logexp(int index) const {
  return static_cast< ::SubstructureSearch::Operator >(ring_system_specifier_logexp_.Get(index));
}
inline ::SubstructureSearch::Operator SingleSubstructureQuery::ring_system_specifier_logexp(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.ring_system_specifier_logexp)
  return _internal_ring_system_specifier_logexp(index);
}
inline void SingleSubstructureQuery::set_ring_system_specifier_logexp(int index, ::SubstructureSearch::Operator value) {
  assert(::SubstructureSearch::Operator_IsValid(value));
  ring_system_specifier_logexp_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.ring_system_specifier_logexp)
}
inline void SingleSubstructureQuery::_internal_add_ring_system_specifier_logexp(::SubstructureSearch::Operator value) {
  assert(::SubstructureSearch::Operator_IsValid(value));
  ring_system_specifier_logexp_.Add(value);
}
inline void SingleSubstructureQuery::add_ring_system_specifier_logexp(::SubstructureSearch::Operator value) {
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.ring_system_specifier_logexp)
  _internal_add_ring_system_specifier_logexp(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SingleSubstructureQuery::ring_system_specifier_logexp() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.ring_system_specifier_logexp)
  return ring_system_specifier_logexp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SingleSubstructureQuery::_internal_mutable_ring_system_specifier_logexp() {
  return &ring_system_specifier_logexp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SingleSubstructureQuery::mutable_ring_system_specifier_logexp() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.ring_system_specifier_logexp)
  return _internal_mutable_ring_system_specifier_logexp();
}

// repeated .SubstructureSearch.ElementsNeeded element_hits_needed = 102;
inline int SingleSubstructureQuery::_internal_element_hits_needed_size() const {
  return element_hits_needed_.size();
}
inline int SingleSubstructureQuery::element_hits_needed_size() const {
  return _internal_element_hits_needed_size();
}
inline void SingleSubstructureQuery::clear_element_hits_needed() {
  element_hits_needed_.Clear();
}
inline ::SubstructureSearch::ElementsNeeded* SingleSubstructureQuery::mutable_element_hits_needed(int index) {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SingleSubstructureQuery.element_hits_needed)
  return element_hits_needed_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::ElementsNeeded >*
SingleSubstructureQuery::mutable_element_hits_needed() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.element_hits_needed)
  return &element_hits_needed_;
}
inline const ::SubstructureSearch::ElementsNeeded& SingleSubstructureQuery::_internal_element_hits_needed(int index) const {
  return element_hits_needed_.Get(index);
}
inline const ::SubstructureSearch::ElementsNeeded& SingleSubstructureQuery::element_hits_needed(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.element_hits_needed)
  return _internal_element_hits_needed(index);
}
inline ::SubstructureSearch::ElementsNeeded* SingleSubstructureQuery::_internal_add_element_hits_needed() {
  return element_hits_needed_.Add();
}
inline ::SubstructureSearch::ElementsNeeded* SingleSubstructureQuery::add_element_hits_needed() {
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.element_hits_needed)
  return _internal_add_element_hits_needed();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::ElementsNeeded >&
SingleSubstructureQuery::element_hits_needed() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.element_hits_needed)
  return element_hits_needed_;
}

// repeated .SubstructureSearch.ElementsNeeded elements_needed = 103;
inline int SingleSubstructureQuery::_internal_elements_needed_size() const {
  return elements_needed_.size();
}
inline int SingleSubstructureQuery::elements_needed_size() const {
  return _internal_elements_needed_size();
}
inline void SingleSubstructureQuery::clear_elements_needed() {
  elements_needed_.Clear();
}
inline ::SubstructureSearch::ElementsNeeded* SingleSubstructureQuery::mutable_elements_needed(int index) {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SingleSubstructureQuery.elements_needed)
  return elements_needed_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::ElementsNeeded >*
SingleSubstructureQuery::mutable_elements_needed() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.elements_needed)
  return &elements_needed_;
}
inline const ::SubstructureSearch::ElementsNeeded& SingleSubstructureQuery::_internal_elements_needed(int index) const {
  return elements_needed_.Get(index);
}
inline const ::SubstructureSearch::ElementsNeeded& SingleSubstructureQuery::elements_needed(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.elements_needed)
  return _internal_elements_needed(index);
}
inline ::SubstructureSearch::ElementsNeeded* SingleSubstructureQuery::_internal_add_elements_needed() {
  return elements_needed_.Add();
}
inline ::SubstructureSearch::ElementsNeeded* SingleSubstructureQuery::add_elements_needed() {
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.elements_needed)
  return _internal_add_elements_needed();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::ElementsNeeded >&
SingleSubstructureQuery::elements_needed() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.elements_needed)
  return elements_needed_;
}

// repeated uint32 aromatic_atoms = 104;
inline int SingleSubstructureQuery::_internal_aromatic_atoms_size() const {
  return aromatic_atoms_.size();
}
inline int SingleSubstructureQuery::aromatic_atoms_size() const {
  return _internal_aromatic_atoms_size();
}
inline void SingleSubstructureQuery::clear_aromatic_atoms() {
  aromatic_atoms_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_aromatic_atoms(int index) const {
  return aromatic_atoms_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::aromatic_atoms(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.aromatic_atoms)
  return _internal_aromatic_atoms(index);
}
inline void SingleSubstructureQuery::set_aromatic_atoms(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  aromatic_atoms_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.aromatic_atoms)
}
inline void SingleSubstructureQuery::_internal_add_aromatic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  aromatic_atoms_.Add(value);
}
inline void SingleSubstructureQuery::add_aromatic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_aromatic_atoms(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.aromatic_atoms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::_internal_aromatic_atoms() const {
  return aromatic_atoms_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::aromatic_atoms() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.aromatic_atoms)
  return _internal_aromatic_atoms();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::_internal_mutable_aromatic_atoms() {
  return &aromatic_atoms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::mutable_aromatic_atoms() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.aromatic_atoms)
  return _internal_mutable_aromatic_atoms();
}

// optional uint32 min_aromatic_atoms = 105;
inline bool SingleSubstructureQuery::_internal_has_min_aromatic_atoms() const {
  bool value = (_has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_min_aromatic_atoms() const {
  return _internal_has_min_aromatic_atoms();
}
inline void SingleSubstructureQuery::clear_min_aromatic_atoms() {
  min_aromatic_atoms_ = 0u;
  _has_bits_[2] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_min_aromatic_atoms() const {
  return min_aromatic_atoms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::min_aromatic_atoms() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.min_aromatic_atoms)
  return _internal_min_aromatic_atoms();
}
inline void SingleSubstructureQuery::_internal_set_min_aromatic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x00000010u;
  min_aromatic_atoms_ = value;
}
inline void SingleSubstructureQuery::set_min_aromatic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_aromatic_atoms(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.min_aromatic_atoms)
}

// optional uint32 max_aromatic_atoms = 106;
inline bool SingleSubstructureQuery::_internal_has_max_aromatic_atoms() const {
  bool value = (_has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_max_aromatic_atoms() const {
  return _internal_has_max_aromatic_atoms();
}
inline void SingleSubstructureQuery::clear_max_aromatic_atoms() {
  max_aromatic_atoms_ = 0u;
  _has_bits_[2] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_max_aromatic_atoms() const {
  return max_aromatic_atoms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::max_aromatic_atoms() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.max_aromatic_atoms)
  return _internal_max_aromatic_atoms();
}
inline void SingleSubstructureQuery::_internal_set_max_aromatic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x00000020u;
  max_aromatic_atoms_ = value;
}
inline void SingleSubstructureQuery::set_max_aromatic_atoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_aromatic_atoms(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.max_aromatic_atoms)
}

// optional bool unique_embeddings_only = 110;
inline bool SingleSubstructureQuery::_internal_has_unique_embeddings_only() const {
  bool value = (_has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_unique_embeddings_only() const {
  return _internal_has_unique_embeddings_only();
}
inline void SingleSubstructureQuery::clear_unique_embeddings_only() {
  unique_embeddings_only_ = false;
  _has_bits_[2] &= ~0x00000040u;
}
inline bool SingleSubstructureQuery::_internal_unique_embeddings_only() const {
  return unique_embeddings_only_;
}
inline bool SingleSubstructureQuery::unique_embeddings_only() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.unique_embeddings_only)
  return _internal_unique_embeddings_only();
}
inline void SingleSubstructureQuery::_internal_set_unique_embeddings_only(bool value) {
  _has_bits_[2] |= 0x00000040u;
  unique_embeddings_only_ = value;
}
inline void SingleSubstructureQuery::set_unique_embeddings_only(bool value) {
  _internal_set_unique_embeddings_only(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.unique_embeddings_only)
}

// repeated uint32 heteroatoms = 112;
inline int SingleSubstructureQuery::_internal_heteroatoms_size() const {
  return heteroatoms_.size();
}
inline int SingleSubstructureQuery::heteroatoms_size() const {
  return _internal_heteroatoms_size();
}
inline void SingleSubstructureQuery::clear_heteroatoms() {
  heteroatoms_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::_internal_heteroatoms(int index) const {
  return heteroatoms_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SingleSubstructureQuery::heteroatoms(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.heteroatoms)
  return _internal_heteroatoms(index);
}
inline void SingleSubstructureQuery::set_heteroatoms(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  heteroatoms_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.heteroatoms)
}
inline void SingleSubstructureQuery::_internal_add_heteroatoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  heteroatoms_.Add(value);
}
inline void SingleSubstructureQuery::add_heteroatoms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_heteroatoms(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.heteroatoms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::_internal_heteroatoms() const {
  return heteroatoms_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SingleSubstructureQuery::heteroatoms() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.heteroatoms)
  return _internal_heteroatoms();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::_internal_mutable_heteroatoms() {
  return &heteroatoms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SingleSubstructureQuery::mutable_heteroatoms() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.heteroatoms)
  return _internal_mutable_heteroatoms();
}

// optional bool respect_initial_atom_numbering = 113;
inline bool SingleSubstructureQuery::_internal_has_respect_initial_atom_numbering() const {
  bool value = (_has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_respect_initial_atom_numbering() const {
  return _internal_has_respect_initial_atom_numbering();
}
inline void SingleSubstructureQuery::clear_respect_initial_atom_numbering() {
  respect_initial_atom_numbering_ = false;
  _has_bits_[2] &= ~0x00000080u;
}
inline bool SingleSubstructureQuery::_internal_respect_initial_atom_numbering() const {
  return respect_initial_atom_numbering_;
}
inline bool SingleSubstructureQuery::respect_initial_atom_numbering() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.respect_initial_atom_numbering)
  return _internal_respect_initial_atom_numbering();
}
inline void SingleSubstructureQuery::_internal_set_respect_initial_atom_numbering(bool value) {
  _has_bits_[2] |= 0x00000080u;
  respect_initial_atom_numbering_ = value;
}
inline void SingleSubstructureQuery::set_respect_initial_atom_numbering(bool value) {
  _internal_set_respect_initial_atom_numbering(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.respect_initial_atom_numbering)
}

// optional bool compress_embeddings = 114;
inline bool SingleSubstructureQuery::_internal_has_compress_embeddings() const {
  bool value = (_has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_compress_embeddings() const {
  return _internal_has_compress_embeddings();
}
inline void SingleSubstructureQuery::clear_compress_embeddings() {
  compress_embeddings_ = false;
  _has_bits_[2] &= ~0x00000100u;
}
inline bool SingleSubstructureQuery::_internal_compress_embeddings() const {
  return compress_embeddings_;
}
inline bool SingleSubstructureQuery::compress_embeddings() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.compress_embeddings)
  return _internal_compress_embeddings();
}
inline void SingleSubstructureQuery::_internal_set_compress_embeddings(bool value) {
  _has_bits_[2] |= 0x00000100u;
  compress_embeddings_ = value;
}
inline void SingleSubstructureQuery::set_compress_embeddings(bool value) {
  _internal_set_compress_embeddings(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.compress_embeddings)
}

// optional bool environments_can_share_attachment_points = 115;
inline bool SingleSubstructureQuery::_internal_has_environments_can_share_attachment_points() const {
  bool value = (_has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_environments_can_share_attachment_points() const {
  return _internal_has_environments_can_share_attachment_points();
}
inline void SingleSubstructureQuery::clear_environments_can_share_attachment_points() {
  environments_can_share_attachment_points_ = false;
  _has_bits_[2] &= ~0x00000200u;
}
inline bool SingleSubstructureQuery::_internal_environments_can_share_attachment_points() const {
  return environments_can_share_attachment_points_;
}
inline bool SingleSubstructureQuery::environments_can_share_attachment_points() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.environments_can_share_attachment_points)
  return _internal_environments_can_share_attachment_points();
}
inline void SingleSubstructureQuery::_internal_set_environments_can_share_attachment_points(bool value) {
  _has_bits_[2] |= 0x00000200u;
  environments_can_share_attachment_points_ = value;
}
inline void SingleSubstructureQuery::set_environments_can_share_attachment_points(bool value) {
  _internal_set_environments_can_share_attachment_points(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.environments_can_share_attachment_points)
}

// repeated .SubstructureSearch.SubstructureAtom query_atom = 116;
inline int SingleSubstructureQuery::_internal_query_atom_size() const {
  return query_atom_.size();
}
inline int SingleSubstructureQuery::query_atom_size() const {
  return _internal_query_atom_size();
}
inline void SingleSubstructureQuery::clear_query_atom() {
  query_atom_.Clear();
}
inline ::SubstructureSearch::SubstructureAtom* SingleSubstructureQuery::mutable_query_atom(int index) {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SingleSubstructureQuery.query_atom)
  return query_atom_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtom >*
SingleSubstructureQuery::mutable_query_atom() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.query_atom)
  return &query_atom_;
}
inline const ::SubstructureSearch::SubstructureAtom& SingleSubstructureQuery::_internal_query_atom(int index) const {
  return query_atom_.Get(index);
}
inline const ::SubstructureSearch::SubstructureAtom& SingleSubstructureQuery::query_atom(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.query_atom)
  return _internal_query_atom(index);
}
inline ::SubstructureSearch::SubstructureAtom* SingleSubstructureQuery::_internal_add_query_atom() {
  return query_atom_.Add();
}
inline ::SubstructureSearch::SubstructureAtom* SingleSubstructureQuery::add_query_atom() {
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.query_atom)
  return _internal_add_query_atom();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureAtom >&
SingleSubstructureQuery::query_atom() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.query_atom)
  return query_atom_;
}

// repeated .SubstructureSearch.SubstructureChiralCenter chiral_centre = 117;
inline int SingleSubstructureQuery::_internal_chiral_centre_size() const {
  return chiral_centre_.size();
}
inline int SingleSubstructureQuery::chiral_centre_size() const {
  return _internal_chiral_centre_size();
}
inline void SingleSubstructureQuery::clear_chiral_centre() {
  chiral_centre_.Clear();
}
inline ::SubstructureSearch::SubstructureChiralCenter* SingleSubstructureQuery::mutable_chiral_centre(int index) {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SingleSubstructureQuery.chiral_centre)
  return chiral_centre_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureChiralCenter >*
SingleSubstructureQuery::mutable_chiral_centre() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SingleSubstructureQuery.chiral_centre)
  return &chiral_centre_;
}
inline const ::SubstructureSearch::SubstructureChiralCenter& SingleSubstructureQuery::_internal_chiral_centre(int index) const {
  return chiral_centre_.Get(index);
}
inline const ::SubstructureSearch::SubstructureChiralCenter& SingleSubstructureQuery::chiral_centre(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.chiral_centre)
  return _internal_chiral_centre(index);
}
inline ::SubstructureSearch::SubstructureChiralCenter* SingleSubstructureQuery::_internal_add_chiral_centre() {
  return chiral_centre_.Add();
}
inline ::SubstructureSearch::SubstructureChiralCenter* SingleSubstructureQuery::add_chiral_centre() {
  // @@protoc_insertion_point(field_add:SubstructureSearch.SingleSubstructureQuery.chiral_centre)
  return _internal_add_chiral_centre();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SubstructureChiralCenter >&
SingleSubstructureQuery::chiral_centre() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SingleSubstructureQuery.chiral_centre)
  return chiral_centre_;
}

// optional string atom_type = 119;
inline bool SingleSubstructureQuery::_internal_has_atom_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SingleSubstructureQuery::has_atom_type() const {
  return _internal_has_atom_type();
}
inline void SingleSubstructureQuery::clear_atom_type() {
  atom_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SingleSubstructureQuery::atom_type() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SingleSubstructureQuery.atom_type)
  return _internal_atom_type();
}
inline void SingleSubstructureQuery::set_atom_type(const std::string& value) {
  _internal_set_atom_type(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SingleSubstructureQuery.atom_type)
}
inline std::string* SingleSubstructureQuery::mutable_atom_type() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SingleSubstructureQuery.atom_type)
  return _internal_mutable_atom_type();
}
inline const std::string& SingleSubstructureQuery::_internal_atom_type() const {
  return atom_type_.Get();
}
inline void SingleSubstructureQuery::_internal_set_atom_type(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  atom_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SingleSubstructureQuery::set_atom_type(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  atom_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubstructureSearch.SingleSubstructureQuery.atom_type)
}
inline void SingleSubstructureQuery::set_atom_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  atom_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.SingleSubstructureQuery.atom_type)
}
inline void SingleSubstructureQuery::set_atom_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  atom_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.SingleSubstructureQuery.atom_type)
}
inline std::string* SingleSubstructureQuery::_internal_mutable_atom_type() {
  _has_bits_[0] |= 0x00000008u;
  return atom_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SingleSubstructureQuery::release_atom_type() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.SingleSubstructureQuery.atom_type)
  if (!_internal_has_atom_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return atom_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SingleSubstructureQuery::set_allocated_atom_type(std::string* atom_type) {
  if (atom_type != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  atom_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), atom_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.SingleSubstructureQuery.atom_type)
}

inline bool SingleSubstructureQuery::has_smiles_or_smarts() const {
  return smiles_or_smarts_case() != SMILES_OR_SMARTS_NOT_SET;
}
inline void SingleSubstructureQuery::clear_has_smiles_or_smarts() {
  _oneof_case_[0] = SMILES_OR_SMARTS_NOT_SET;
}
inline SingleSubstructureQuery::SmilesOrSmartsCase SingleSubstructureQuery::smiles_or_smarts_case() const {
  return SingleSubstructureQuery::SmilesOrSmartsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SubstructureQuery

// optional string comment = 1;
inline bool SubstructureQuery::_internal_has_comment() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SubstructureQuery::has_comment() const {
  return _internal_has_comment();
}
inline void SubstructureQuery::clear_comment() {
  comment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SubstructureQuery::comment() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureQuery.comment)
  return _internal_comment();
}
inline void SubstructureQuery::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureQuery.comment)
}
inline std::string* SubstructureQuery::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureQuery.comment)
  return _internal_mutable_comment();
}
inline const std::string& SubstructureQuery::_internal_comment() const {
  return comment_.Get();
}
inline void SubstructureQuery::_internal_set_comment(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubstructureQuery::set_comment(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  comment_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubstructureSearch.SubstructureQuery.comment)
}
inline void SubstructureQuery::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.SubstructureQuery.comment)
}
inline void SubstructureQuery::set_comment(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.SubstructureQuery.comment)
}
inline std::string* SubstructureQuery::_internal_mutable_comment() {
  _has_bits_[0] |= 0x00000001u;
  return comment_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubstructureQuery::release_comment() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.SubstructureQuery.comment)
  if (!_internal_has_comment()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return comment_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubstructureQuery::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.SubstructureQuery.comment)
}

// repeated .SubstructureSearch.SingleSubstructureQuery query = 2;
inline int SubstructureQuery::_internal_query_size() const {
  return query_.size();
}
inline int SubstructureQuery::query_size() const {
  return _internal_query_size();
}
inline void SubstructureQuery::clear_query() {
  query_.Clear();
}
inline ::SubstructureSearch::SingleSubstructureQuery* SubstructureQuery::mutable_query(int index) {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.SubstructureQuery.query)
  return query_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SingleSubstructureQuery >*
SubstructureQuery::mutable_query() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureQuery.query)
  return &query_;
}
inline const ::SubstructureSearch::SingleSubstructureQuery& SubstructureQuery::_internal_query(int index) const {
  return query_.Get(index);
}
inline const ::SubstructureSearch::SingleSubstructureQuery& SubstructureQuery::query(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureQuery.query)
  return _internal_query(index);
}
inline ::SubstructureSearch::SingleSubstructureQuery* SubstructureQuery::_internal_add_query() {
  return query_.Add();
}
inline ::SubstructureSearch::SingleSubstructureQuery* SubstructureQuery::add_query() {
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureQuery.query)
  return _internal_add_query();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::SingleSubstructureQuery >&
SubstructureQuery::query() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureQuery.query)
  return query_;
}

// repeated .SubstructureSearch.Operator logexp = 3;
inline int SubstructureQuery::_internal_logexp_size() const {
  return logexp_.size();
}
inline int SubstructureQuery::logexp_size() const {
  return _internal_logexp_size();
}
inline void SubstructureQuery::clear_logexp() {
  logexp_.Clear();
}
inline ::SubstructureSearch::Operator SubstructureQuery::_internal_logexp(int index) const {
  return static_cast< ::SubstructureSearch::Operator >(logexp_.Get(index));
}
inline ::SubstructureSearch::Operator SubstructureQuery::logexp(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureQuery.logexp)
  return _internal_logexp(index);
}
inline void SubstructureQuery::set_logexp(int index, ::SubstructureSearch::Operator value) {
  assert(::SubstructureSearch::Operator_IsValid(value));
  logexp_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureQuery.logexp)
}
inline void SubstructureQuery::_internal_add_logexp(::SubstructureSearch::Operator value) {
  assert(::SubstructureSearch::Operator_IsValid(value));
  logexp_.Add(value);
}
inline void SubstructureQuery::add_logexp(::SubstructureSearch::Operator value) {
  // @@protoc_insertion_point(field_add:SubstructureSearch.SubstructureQuery.logexp)
  _internal_add_logexp(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SubstructureQuery::logexp() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.SubstructureQuery.logexp)
  return logexp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SubstructureQuery::_internal_mutable_logexp() {
  return &logexp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SubstructureQuery::mutable_logexp() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.SubstructureQuery.logexp)
  return _internal_mutable_logexp();
}

// optional int32 match_each_component = 4;
inline bool SubstructureQuery::_internal_has_match_each_component() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SubstructureQuery::has_match_each_component() const {
  return _internal_has_match_each_component();
}
inline void SubstructureQuery::clear_match_each_component() {
  match_each_component_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubstructureQuery::_internal_match_each_component() const {
  return match_each_component_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubstructureQuery::match_each_component() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.SubstructureQuery.match_each_component)
  return _internal_match_each_component();
}
inline void SubstructureQuery::_internal_set_match_each_component(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  match_each_component_ = value;
}
inline void SubstructureQuery::set_match_each_component(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_match_each_component(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.SubstructureQuery.match_each_component)
}

// -------------------------------------------------------------------

// MinMaxSpecifierInt

// repeated int32 value = 1;
inline int MinMaxSpecifierInt::_internal_value_size() const {
  return value_.size();
}
inline int MinMaxSpecifierInt::value_size() const {
  return _internal_value_size();
}
inline void MinMaxSpecifierInt::clear_value() {
  value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MinMaxSpecifierInt::_internal_value(int index) const {
  return value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MinMaxSpecifierInt::value(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.MinMaxSpecifierInt.value)
  return _internal_value(index);
}
inline void MinMaxSpecifierInt::set_value(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.MinMaxSpecifierInt.value)
}
inline void MinMaxSpecifierInt::_internal_add_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  value_.Add(value);
}
inline void MinMaxSpecifierInt::add_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.MinMaxSpecifierInt.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MinMaxSpecifierInt::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MinMaxSpecifierInt::value() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.MinMaxSpecifierInt.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MinMaxSpecifierInt::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MinMaxSpecifierInt::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.MinMaxSpecifierInt.value)
  return _internal_mutable_value();
}

// optional int32 min = 2;
inline bool MinMaxSpecifierInt::_internal_has_min() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MinMaxSpecifierInt::has_min() const {
  return _internal_has_min();
}
inline void MinMaxSpecifierInt::clear_min() {
  min_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MinMaxSpecifierInt::_internal_min() const {
  return min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MinMaxSpecifierInt::min() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.MinMaxSpecifierInt.min)
  return _internal_min();
}
inline void MinMaxSpecifierInt::_internal_set_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  min_ = value;
}
inline void MinMaxSpecifierInt::set_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.MinMaxSpecifierInt.min)
}

// optional int32 max = 3;
inline bool MinMaxSpecifierInt::_internal_has_max() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MinMaxSpecifierInt::has_max() const {
  return _internal_has_max();
}
inline void MinMaxSpecifierInt::clear_max() {
  max_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MinMaxSpecifierInt::_internal_max() const {
  return max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MinMaxSpecifierInt::max() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.MinMaxSpecifierInt.max)
  return _internal_max();
}
inline void MinMaxSpecifierInt::_internal_set_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  max_ = value;
}
inline void MinMaxSpecifierInt::set_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.MinMaxSpecifierInt.max)
}

// -------------------------------------------------------------------

// MinMaxSpecifierUInt

// repeated uint32 value = 1;
inline int MinMaxSpecifierUInt::_internal_value_size() const {
  return value_.size();
}
inline int MinMaxSpecifierUInt::value_size() const {
  return _internal_value_size();
}
inline void MinMaxSpecifierUInt::clear_value() {
  value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MinMaxSpecifierUInt::_internal_value(int index) const {
  return value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MinMaxSpecifierUInt::value(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.MinMaxSpecifierUInt.value)
  return _internal_value(index);
}
inline void MinMaxSpecifierUInt::set_value(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.MinMaxSpecifierUInt.value)
}
inline void MinMaxSpecifierUInt::_internal_add_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  value_.Add(value);
}
inline void MinMaxSpecifierUInt::add_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:SubstructureSearch.MinMaxSpecifierUInt.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MinMaxSpecifierUInt::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MinMaxSpecifierUInt::value() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.MinMaxSpecifierUInt.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MinMaxSpecifierUInt::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MinMaxSpecifierUInt::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.MinMaxSpecifierUInt.value)
  return _internal_mutable_value();
}

// optional uint32 min = 2;
inline bool MinMaxSpecifierUInt::_internal_has_min() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MinMaxSpecifierUInt::has_min() const {
  return _internal_has_min();
}
inline void MinMaxSpecifierUInt::clear_min() {
  min_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MinMaxSpecifierUInt::_internal_min() const {
  return min_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MinMaxSpecifierUInt::min() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.MinMaxSpecifierUInt.min)
  return _internal_min();
}
inline void MinMaxSpecifierUInt::_internal_set_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  min_ = value;
}
inline void MinMaxSpecifierUInt::set_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.MinMaxSpecifierUInt.min)
}

// optional uint32 max = 3;
inline bool MinMaxSpecifierUInt::_internal_has_max() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MinMaxSpecifierUInt::has_max() const {
  return _internal_has_max();
}
inline void MinMaxSpecifierUInt::clear_max() {
  max_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MinMaxSpecifierUInt::_internal_max() const {
  return max_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MinMaxSpecifierUInt::max() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.MinMaxSpecifierUInt.max)
  return _internal_max();
}
inline void MinMaxSpecifierUInt::_internal_set_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  max_ = value;
}
inline void MinMaxSpecifierUInt::set_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.MinMaxSpecifierUInt.max)
}

// -------------------------------------------------------------------

// QueryMatchResults_Matches

// optional string name = 1;
inline bool QueryMatchResults_Matches::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool QueryMatchResults_Matches::has_name() const {
  return _internal_has_name();
}
inline void QueryMatchResults_Matches::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& QueryMatchResults_Matches::name() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.QueryMatchResults.Matches.name)
  return _internal_name();
}
inline void QueryMatchResults_Matches::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.QueryMatchResults.Matches.name)
}
inline std::string* QueryMatchResults_Matches::mutable_name() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.QueryMatchResults.Matches.name)
  return _internal_mutable_name();
}
inline const std::string& QueryMatchResults_Matches::_internal_name() const {
  return name_.Get();
}
inline void QueryMatchResults_Matches::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueryMatchResults_Matches::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubstructureSearch.QueryMatchResults.Matches.name)
}
inline void QueryMatchResults_Matches::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.QueryMatchResults.Matches.name)
}
inline void QueryMatchResults_Matches::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.QueryMatchResults.Matches.name)
}
inline std::string* QueryMatchResults_Matches::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueryMatchResults_Matches::release_name() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.QueryMatchResults.Matches.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryMatchResults_Matches::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.QueryMatchResults.Matches.name)
}

// optional uint32 nhits = 2;
inline bool QueryMatchResults_Matches::_internal_has_nhits() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool QueryMatchResults_Matches::has_nhits() const {
  return _internal_has_nhits();
}
inline void QueryMatchResults_Matches::clear_nhits() {
  nhits_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryMatchResults_Matches::_internal_nhits() const {
  return nhits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryMatchResults_Matches::nhits() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.QueryMatchResults.Matches.nhits)
  return _internal_nhits();
}
inline void QueryMatchResults_Matches::_internal_set_nhits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  nhits_ = value;
}
inline void QueryMatchResults_Matches::set_nhits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nhits(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.QueryMatchResults.Matches.nhits)
}

// -------------------------------------------------------------------

// QueryMatchResults

// optional string smiles = 1;
inline bool QueryMatchResults::_internal_has_smiles() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool QueryMatchResults::has_smiles() const {
  return _internal_has_smiles();
}
inline void QueryMatchResults::clear_smiles() {
  smiles_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& QueryMatchResults::smiles() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.QueryMatchResults.smiles)
  return _internal_smiles();
}
inline void QueryMatchResults::set_smiles(const std::string& value) {
  _internal_set_smiles(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.QueryMatchResults.smiles)
}
inline std::string* QueryMatchResults::mutable_smiles() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.QueryMatchResults.smiles)
  return _internal_mutable_smiles();
}
inline const std::string& QueryMatchResults::_internal_smiles() const {
  return smiles_.Get();
}
inline void QueryMatchResults::_internal_set_smiles(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  smiles_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueryMatchResults::set_smiles(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  smiles_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubstructureSearch.QueryMatchResults.smiles)
}
inline void QueryMatchResults::set_smiles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  smiles_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.QueryMatchResults.smiles)
}
inline void QueryMatchResults::set_smiles(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  smiles_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.QueryMatchResults.smiles)
}
inline std::string* QueryMatchResults::_internal_mutable_smiles() {
  _has_bits_[0] |= 0x00000001u;
  return smiles_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueryMatchResults::release_smiles() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.QueryMatchResults.smiles)
  if (!_internal_has_smiles()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return smiles_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryMatchResults::set_allocated_smiles(std::string* smiles) {
  if (smiles != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  smiles_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), smiles,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.QueryMatchResults.smiles)
}

// optional string name = 2;
inline bool QueryMatchResults::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool QueryMatchResults::has_name() const {
  return _internal_has_name();
}
inline void QueryMatchResults::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& QueryMatchResults::name() const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.QueryMatchResults.name)
  return _internal_name();
}
inline void QueryMatchResults::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:SubstructureSearch.QueryMatchResults.name)
}
inline std::string* QueryMatchResults::mutable_name() {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.QueryMatchResults.name)
  return _internal_mutable_name();
}
inline const std::string& QueryMatchResults::_internal_name() const {
  return name_.Get();
}
inline void QueryMatchResults::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueryMatchResults::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SubstructureSearch.QueryMatchResults.name)
}
inline void QueryMatchResults::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SubstructureSearch.QueryMatchResults.name)
}
inline void QueryMatchResults::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SubstructureSearch.QueryMatchResults.name)
}
inline std::string* QueryMatchResults::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueryMatchResults::release_name() {
  // @@protoc_insertion_point(field_release:SubstructureSearch.QueryMatchResults.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryMatchResults::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SubstructureSearch.QueryMatchResults.name)
}

// repeated .SubstructureSearch.QueryMatchResults.Matches matches = 3;
inline int QueryMatchResults::_internal_matches_size() const {
  return matches_.size();
}
inline int QueryMatchResults::matches_size() const {
  return _internal_matches_size();
}
inline void QueryMatchResults::clear_matches() {
  matches_.Clear();
}
inline ::SubstructureSearch::QueryMatchResults_Matches* QueryMatchResults::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:SubstructureSearch.QueryMatchResults.matches)
  return matches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::QueryMatchResults_Matches >*
QueryMatchResults::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:SubstructureSearch.QueryMatchResults.matches)
  return &matches_;
}
inline const ::SubstructureSearch::QueryMatchResults_Matches& QueryMatchResults::_internal_matches(int index) const {
  return matches_.Get(index);
}
inline const ::SubstructureSearch::QueryMatchResults_Matches& QueryMatchResults::matches(int index) const {
  // @@protoc_insertion_point(field_get:SubstructureSearch.QueryMatchResults.matches)
  return _internal_matches(index);
}
inline ::SubstructureSearch::QueryMatchResults_Matches* QueryMatchResults::_internal_add_matches() {
  return matches_.Add();
}
inline ::SubstructureSearch::QueryMatchResults_Matches* QueryMatchResults::add_matches() {
  // @@protoc_insertion_point(field_add:SubstructureSearch.QueryMatchResults.matches)
  return _internal_add_matches();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SubstructureSearch::QueryMatchResults_Matches >&
QueryMatchResults::matches() const {
  // @@protoc_insertion_point(field_list:SubstructureSearch.QueryMatchResults.matches)
  return matches_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SubstructureSearch

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SubstructureSearch::Aromaticity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SubstructureSearch::Aromaticity>() {
  return ::SubstructureSearch::Aromaticity_descriptor();
}
template <> struct is_proto_enum< ::SubstructureSearch::BondType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SubstructureSearch::BondType>() {
  return ::SubstructureSearch::BondType_descriptor();
}
template <> struct is_proto_enum< ::SubstructureSearch::Operator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SubstructureSearch::Operator>() {
  return ::SubstructureSearch::Operator_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Molecule_5fLib_2fsubstructure_2eproto
