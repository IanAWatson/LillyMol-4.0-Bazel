// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Molecule_Lib/reaction.proto

#include "Molecule_Lib/reaction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2freaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BondAngle_Molecule_5fLib_2freaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2freaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BondLength_Molecule_5fLib_2freaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2freaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BondToBeMade_Molecule_5fLib_2freaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2freaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeElement_Molecule_5fLib_2freaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2freaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeFormalCharge_Molecule_5fLib_2freaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2freaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DihedralAngle_Molecule_5fLib_2freaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2freaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FormalCharge_Molecule_5fLib_2freaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2freaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncrementIsotope_Molecule_5fLib_2freaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2freaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InterParticleBond_Molecule_5fLib_2freaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2freaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchConditions_Molecule_5fLib_2freaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2freaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchedAtomInComponent_Molecule_5fLib_2freaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2freaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NoReaction_Molecule_5fLib_2freaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2freaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PairOfAtoms_Molecule_5fLib_2freaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2freaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlaceIsotope_Molecule_5fLib_2freaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2freaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReplaceAtom_Molecule_5fLib_2freaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2freaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScaffoldMatchConditions_Molecule_5fLib_2freaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2freaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_ScaffoldReactionSite_Molecule_5fLib_2freaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2freaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SidechainMatchConditions_Molecule_5fLib_2freaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2freaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<18> scc_info_SidechainReactionSite_Molecule_5fLib_2freaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2freaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StereoCenter_Molecule_5fLib_2freaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2freaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StereoCenterComponent_Molecule_5fLib_2freaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2freaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ThreeDReplace_Molecule_5fLib_2freaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2freaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WedgeBond_Molecule_5fLib_2freaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2fsubstructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubstructureQuery_Molecule_5fLib_2fsubstructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ToggleKekuleForm_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto;
namespace ReactionProto {
class MatchConditionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchConditions> _instance;
} _MatchConditions_default_instance_;
class ScaffoldMatchConditionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScaffoldMatchConditions> _instance;
} _ScaffoldMatchConditions_default_instance_;
class SidechainMatchConditionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SidechainMatchConditions> _instance;
} _SidechainMatchConditions_default_instance_;
class PairOfAtomsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PairOfAtoms> _instance;
} _PairOfAtoms_default_instance_;
class MatchedAtomInComponentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchedAtomInComponent> _instance;
} _MatchedAtomInComponent_default_instance_;
class StereoCenterComponentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StereoCenterComponent> _instance;
} _StereoCenterComponent_default_instance_;
class StereoCenterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StereoCenter> _instance;
} _StereoCenter_default_instance_;
class BondToBeMadeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BondToBeMade> _instance;
} _BondToBeMade_default_instance_;
class InterParticleBondDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InterParticleBond> _instance;
} _InterParticleBond_default_instance_;
class ReplaceAtomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplaceAtom> _instance;
} _ReplaceAtom_default_instance_;
class WedgeBondDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WedgeBond> _instance;
} _WedgeBond_default_instance_;
class ChangeElementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeElement> _instance;
} _ChangeElement_default_instance_;
class FormalChargeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FormalCharge> _instance;
} _FormalCharge_default_instance_;
class ChangeFormalChargeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeFormalCharge> _instance;
} _ChangeFormalCharge_default_instance_;
class PlaceIsotopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaceIsotope> _instance;
} _PlaceIsotope_default_instance_;
class IncrementIsotopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IncrementIsotope> _instance;
} _IncrementIsotope_default_instance_;
class BondLengthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BondLength> _instance;
} _BondLength_default_instance_;
class BondAngleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BondAngle> _instance;
} _BondAngle_default_instance_;
class DihedralAngleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DihedralAngle> _instance;
} _DihedralAngle_default_instance_;
class RotateFragmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RotateFragment> _instance;
} _RotateFragment_default_instance_;
class ThreeDReplaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThreeDReplace> _instance;
} _ThreeDReplace_default_instance_;
class NoReactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NoReaction> _instance;
} _NoReaction_default_instance_;
class ReactionSiteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReactionSite> _instance;
} _ReactionSite_default_instance_;
class ScaffoldReactionSiteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScaffoldReactionSite> _instance;
} _ScaffoldReactionSite_default_instance_;
class SidechainReactionSiteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SidechainReactionSite> _instance;
} _SidechainReactionSite_default_instance_;
class ReactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Reaction> _instance;
} _Reaction_default_instance_;
}  // namespace ReactionProto
static void InitDefaultsscc_info_BondAngle_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_BondAngle_default_instance_;
    new (ptr) ::ReactionProto::BondAngle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BondAngle_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BondAngle_Molecule_5fLib_2freaction_2eproto}, {
      &scc_info_MatchedAtomInComponent_Molecule_5fLib_2freaction_2eproto.base,}};

static void InitDefaultsscc_info_BondLength_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_BondLength_default_instance_;
    new (ptr) ::ReactionProto::BondLength();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BondLength_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BondLength_Molecule_5fLib_2freaction_2eproto}, {
      &scc_info_MatchedAtomInComponent_Molecule_5fLib_2freaction_2eproto.base,}};

static void InitDefaultsscc_info_BondToBeMade_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_BondToBeMade_default_instance_;
    new (ptr) ::ReactionProto::BondToBeMade();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BondToBeMade_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BondToBeMade_Molecule_5fLib_2freaction_2eproto}, {}};

static void InitDefaultsscc_info_ChangeElement_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_ChangeElement_default_instance_;
    new (ptr) ::ReactionProto::ChangeElement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeElement_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChangeElement_Molecule_5fLib_2freaction_2eproto}, {}};

static void InitDefaultsscc_info_ChangeFormalCharge_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_ChangeFormalCharge_default_instance_;
    new (ptr) ::ReactionProto::ChangeFormalCharge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeFormalCharge_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChangeFormalCharge_Molecule_5fLib_2freaction_2eproto}, {}};

static void InitDefaultsscc_info_DihedralAngle_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_DihedralAngle_default_instance_;
    new (ptr) ::ReactionProto::DihedralAngle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DihedralAngle_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DihedralAngle_Molecule_5fLib_2freaction_2eproto}, {
      &scc_info_MatchedAtomInComponent_Molecule_5fLib_2freaction_2eproto.base,}};

static void InitDefaultsscc_info_FormalCharge_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_FormalCharge_default_instance_;
    new (ptr) ::ReactionProto::FormalCharge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FormalCharge_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FormalCharge_Molecule_5fLib_2freaction_2eproto}, {}};

static void InitDefaultsscc_info_IncrementIsotope_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_IncrementIsotope_default_instance_;
    new (ptr) ::ReactionProto::IncrementIsotope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncrementIsotope_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IncrementIsotope_Molecule_5fLib_2freaction_2eproto}, {}};

static void InitDefaultsscc_info_InterParticleBond_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_InterParticleBond_default_instance_;
    new (ptr) ::ReactionProto::InterParticleBond();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InterParticleBond_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InterParticleBond_Molecule_5fLib_2freaction_2eproto}, {
      &scc_info_MatchedAtomInComponent_Molecule_5fLib_2freaction_2eproto.base,}};

static void InitDefaultsscc_info_MatchConditions_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_MatchConditions_default_instance_;
    new (ptr) ::ReactionProto::MatchConditions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchConditions_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchConditions_Molecule_5fLib_2freaction_2eproto}, {}};

static void InitDefaultsscc_info_MatchedAtomInComponent_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_MatchedAtomInComponent_default_instance_;
    new (ptr) ::ReactionProto::MatchedAtomInComponent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchedAtomInComponent_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchedAtomInComponent_Molecule_5fLib_2freaction_2eproto}, {}};

static void InitDefaultsscc_info_NoReaction_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_NoReaction_default_instance_;
    new (ptr) ::ReactionProto::NoReaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NoReaction_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NoReaction_Molecule_5fLib_2freaction_2eproto}, {
      &scc_info_SubstructureQuery_Molecule_5fLib_2fsubstructure_2eproto.base,}};

static void InitDefaultsscc_info_PairOfAtoms_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_PairOfAtoms_default_instance_;
    new (ptr) ::ReactionProto::PairOfAtoms();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PairOfAtoms_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PairOfAtoms_Molecule_5fLib_2freaction_2eproto}, {}};

static void InitDefaultsscc_info_PlaceIsotope_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_PlaceIsotope_default_instance_;
    new (ptr) ::ReactionProto::PlaceIsotope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlaceIsotope_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlaceIsotope_Molecule_5fLib_2freaction_2eproto}, {}};

static void InitDefaultsscc_info_Reaction_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_Reaction_default_instance_;
    new (ptr) ::ReactionProto::Reaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Reaction_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Reaction_Molecule_5fLib_2freaction_2eproto}, {
      &scc_info_ScaffoldReactionSite_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_SidechainReactionSite_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_StereoCenter_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_ScaffoldMatchConditions_Molecule_5fLib_2freaction_2eproto.base,}};

static void InitDefaultsscc_info_ReactionSite_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_ReactionSite_default_instance_;
    new (ptr) ::ReactionProto::ReactionSite();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_ReactionSite_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 15, 0, InitDefaultsscc_info_ReactionSite_Molecule_5fLib_2freaction_2eproto}, {
      &scc_info_SubstructureQuery_Molecule_5fLib_2fsubstructure_2eproto.base,
      &scc_info_BondToBeMade_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_PairOfAtoms_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_ChangeElement_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_FormalCharge_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_ChangeFormalCharge_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_PlaceIsotope_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_IncrementIsotope_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_BondLength_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_BondAngle_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_DihedralAngle_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_ThreeDReplace_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_WedgeBond_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_ReplaceAtom_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_ToggleKekuleForm_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto.base,}};

static void InitDefaultsscc_info_ReplaceAtom_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_ReplaceAtom_default_instance_;
    new (ptr) ::ReactionProto::ReplaceAtom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReplaceAtom_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReplaceAtom_Molecule_5fLib_2freaction_2eproto}, {
      &scc_info_MatchedAtomInComponent_Molecule_5fLib_2freaction_2eproto.base,}};

static void InitDefaultsscc_info_RotateFragment_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_RotateFragment_default_instance_;
    new (ptr) ::ReactionProto::RotateFragment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RotateFragment_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RotateFragment_Molecule_5fLib_2freaction_2eproto}, {
      &scc_info_MatchedAtomInComponent_Molecule_5fLib_2freaction_2eproto.base,}};

static void InitDefaultsscc_info_ScaffoldMatchConditions_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_ScaffoldMatchConditions_default_instance_;
    new (ptr) ::ReactionProto::ScaffoldMatchConditions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScaffoldMatchConditions_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScaffoldMatchConditions_Molecule_5fLib_2freaction_2eproto}, {
      &scc_info_MatchConditions_Molecule_5fLib_2freaction_2eproto.base,}};

static void InitDefaultsscc_info_ScaffoldReactionSite_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_ScaffoldReactionSite_default_instance_;
    new (ptr) ::ReactionProto::ScaffoldReactionSite();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_ScaffoldReactionSite_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 15, 0, InitDefaultsscc_info_ScaffoldReactionSite_Molecule_5fLib_2freaction_2eproto}, {
      &scc_info_SubstructureQuery_Molecule_5fLib_2fsubstructure_2eproto.base,
      &scc_info_BondToBeMade_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_PairOfAtoms_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_ChangeElement_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_FormalCharge_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_ChangeFormalCharge_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_PlaceIsotope_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_IncrementIsotope_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_BondLength_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_BondAngle_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_DihedralAngle_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_ThreeDReplace_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_WedgeBond_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_ReplaceAtom_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_ToggleKekuleForm_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto.base,}};

static void InitDefaultsscc_info_SidechainMatchConditions_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_SidechainMatchConditions_default_instance_;
    new (ptr) ::ReactionProto::SidechainMatchConditions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SidechainMatchConditions_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SidechainMatchConditions_Molecule_5fLib_2freaction_2eproto}, {
      &scc_info_MatchConditions_Molecule_5fLib_2freaction_2eproto.base,}};

static void InitDefaultsscc_info_SidechainReactionSite_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_SidechainReactionSite_default_instance_;
    new (ptr) ::ReactionProto::SidechainReactionSite();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<18> scc_info_SidechainReactionSite_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 18, 0, InitDefaultsscc_info_SidechainReactionSite_Molecule_5fLib_2freaction_2eproto}, {
      &scc_info_SubstructureQuery_Molecule_5fLib_2fsubstructure_2eproto.base,
      &scc_info_BondToBeMade_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_PairOfAtoms_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_ChangeElement_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_FormalCharge_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_ChangeFormalCharge_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_PlaceIsotope_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_IncrementIsotope_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_BondLength_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_BondAngle_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_DihedralAngle_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_ThreeDReplace_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_WedgeBond_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_ReplaceAtom_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_ToggleKekuleForm_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto.base,
      &scc_info_InterParticleBond_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_NoReaction_Molecule_5fLib_2freaction_2eproto.base,
      &scc_info_SidechainMatchConditions_Molecule_5fLib_2freaction_2eproto.base,}};

static void InitDefaultsscc_info_StereoCenter_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_StereoCenter_default_instance_;
    new (ptr) ::ReactionProto::StereoCenter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StereoCenter_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StereoCenter_Molecule_5fLib_2freaction_2eproto}, {
      &scc_info_StereoCenterComponent_Molecule_5fLib_2freaction_2eproto.base,}};

static void InitDefaultsscc_info_StereoCenterComponent_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_StereoCenterComponent_default_instance_;
    new (ptr) ::ReactionProto::StereoCenterComponent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StereoCenterComponent_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StereoCenterComponent_Molecule_5fLib_2freaction_2eproto}, {
      &scc_info_MatchedAtomInComponent_Molecule_5fLib_2freaction_2eproto.base,}};

static void InitDefaultsscc_info_ThreeDReplace_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_ThreeDReplace_default_instance_;
    new (ptr) ::ReactionProto::ThreeDReplace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ThreeDReplace_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ThreeDReplace_Molecule_5fLib_2freaction_2eproto}, {
      &scc_info_MatchedAtomInComponent_Molecule_5fLib_2freaction_2eproto.base,}};

static void InitDefaultsscc_info_WedgeBond_Molecule_5fLib_2freaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ReactionProto::_WedgeBond_default_instance_;
    new (ptr) ::ReactionProto::WedgeBond();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WedgeBond_Molecule_5fLib_2freaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WedgeBond_Molecule_5fLib_2freaction_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Molecule_5fLib_2freaction_2eproto[26];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Molecule_5fLib_2freaction_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Molecule_5fLib_2freaction_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Molecule_5fLib_2freaction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ReactionProto::MatchConditions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::MatchConditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::MatchConditions, ignore_not_reacting_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::MatchConditions, find_unique_embeddings_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::MatchConditions, process_hit_number_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::MatchConditions, one_embedding_per_start_atom_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::MatchConditions, ignore_symmetry_related_matches_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::MatchConditions, multiple_match_string_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::MatchConditions, suppress_if_more_than_this_many_substructure_search_hits_),
  2,
  3,
  1,
  4,
  5,
  0,
  6,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldMatchConditions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldMatchConditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldMatchConditions, match_conditions_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldMatchConditions, enumerate_scaffold_hits_individually_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldMatchConditions, combinatorial_expansion_of_scaffold_hits_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainMatchConditions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainMatchConditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainMatchConditions, match_conditions_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainMatchConditions, make_new_reagent_for_each_hit_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainMatchConditions, max_matches_to_find_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainMatchConditions, strip_reagents_to_largest_fragment_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::PairOfAtoms, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::PairOfAtoms, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::PairOfAtoms, a1_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::PairOfAtoms, a2_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::MatchedAtomInComponent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::MatchedAtomInComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::MatchedAtomInComponent, component_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::MatchedAtomInComponent, atom_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::MatchedAtomInComponent, component_and_atom_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::StereoCenterComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::StereoCenterComponent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::StereoCenterComponent, AtomOrHydrogen_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::StereoCenter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::StereoCenter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::StereoCenter, a_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::StereoCenter, top_front_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::StereoCenter, top_back_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::StereoCenter, left_down_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::StereoCenter, right_down_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::StereoCenter, optional_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::BondToBeMade, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::BondToBeMade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::BondToBeMade, a1_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::BondToBeMade, a2_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::BondToBeMade, btype_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::InterParticleBond, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::InterParticleBond, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::InterParticleBond, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::InterParticleBond, btype_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::InterParticleBond, atom1_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::InterParticleBond, atom2_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReplaceAtom, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReplaceAtom, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReplaceAtom, atom1_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReplaceAtom, atom2_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::WedgeBond, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::WedgeBond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::WedgeBond, a1_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::WedgeBond, a2_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::WedgeBond, direction_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ChangeElement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ChangeElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ChangeElement, atom_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ChangeElement, element_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::FormalCharge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::FormalCharge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::FormalCharge, atom_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::FormalCharge, formal_charge_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ChangeFormalCharge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ChangeFormalCharge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ChangeFormalCharge, atom_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ChangeFormalCharge, delta_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::PlaceIsotope, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::PlaceIsotope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::PlaceIsotope, atom_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::PlaceIsotope, isotope_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::IncrementIsotope, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::IncrementIsotope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::IncrementIsotope, atom_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::IncrementIsotope, delta_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::BondLength, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::BondLength, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::BondLength, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::BondLength, distance_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::BondLength, first_atom_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::BondLength, second_atom_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::BondAngle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::BondAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::BondAngle, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::BondAngle, angle_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::BondAngle, atom1_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::BondAngle, atom2_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::BondAngle, atom3_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::DihedralAngle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::DihedralAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::DihedralAngle, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::DihedralAngle, angle_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::DihedralAngle, atom1_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::DihedralAngle, atom2_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::DihedralAngle, atom3_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::DihedralAngle, atom4_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::RotateFragment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::RotateFragment, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::RotateFragment, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::RotateFragment, angle_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::RotateFragment, the_atom_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ThreeDReplace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ThreeDReplace, a1_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ThreeDReplace, a2_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::NoReaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::NoReaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::NoReaction, comment_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::NoReaction, scaffold_no_reaction_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::NoReaction, sidechain_no_reaction_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, query_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, comment_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, make_bond_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, break_bond_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, remove_atom_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, remove_fragment_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, keep_fragment_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, change_element_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, formal_charge_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, change_formal_charge_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, isotope_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, change_isotope_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, invert_isotope_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, bond_length_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, bond_angle_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, dihedral_angle_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, reaction_3d_replace_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, wedge_bonds_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, replace_atom_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, unfix_implicit_hydrogens_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, inactive_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, invert_chirality_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, remove_chirality_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, toggle_kekule_form_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, ignore_multiple_matches_involving_atoms_not_changing_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, ignore_multiple_matches_involving_changing_atoms_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ReactionSite, noop_reaction_),
  1,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, id_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, query_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, make_bond_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, break_bond_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, remove_atom_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, remove_fragment_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, keep_fragment_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, change_element_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, formal_charge_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, change_formal_charge_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, isotope_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, change_isotope_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, invert_isotope_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, bond_length_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, bond_angle_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, dihedral_angle_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, reaction_3d_replace_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, wedge_bonds_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, replace_atom_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, unfix_implicit_hydrogens_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, inactive_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, invert_chirality_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, remove_chirality_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, toggle_kekule_form_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, ignore_multiple_matches_involving_atoms_not_changing_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, ignore_multiple_matches_involving_changing_atoms_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, noop_reaction_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, comment_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::ScaffoldReactionSite, smarts_),
  4,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  5,
  6,
  7,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, id_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, query_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, make_bond_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, break_bond_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, remove_atom_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, remove_fragment_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, keep_fragment_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, change_element_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, formal_charge_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, change_formal_charge_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, isotope_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, change_isotope_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, invert_isotope_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, bond_length_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, bond_angle_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, dihedral_angle_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, reaction_3d_replace_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, wedge_bonds_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, replace_atom_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, unfix_implicit_hydrogens_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, inactive_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, invert_chirality_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, remove_chirality_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, toggle_kekule_form_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, ignore_multiple_matches_involving_atoms_not_changing_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, ignore_multiple_matches_involving_changing_atoms_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, noop_reaction_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, comment_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, smarts_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, reagent_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, join_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, no_reaction_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, make_implicit_hydrogens_explicit_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::SidechainReactionSite, match_conditions_),
  5,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  6,
  7,
  8,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  9,
  4,
  PROTOBUF_FIELD_OFFSET(::ReactionProto::Reaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::Reaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReactionProto::Reaction, comment_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::Reaction, scaffold_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::Reaction, sidechain_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::Reaction, reaction_stereo_center_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::Reaction, append_reagent_name_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::Reaction, append_to_name_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::Reaction, query_files_in_current_directory_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::Reaction, reaction_directory_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::Reaction, find_kekule_forms_for_bad_valence_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::Reaction, make_implicit_hydrogens_explicit_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::Reaction, scaffold_match_conditions_),
  PROTOBUF_FIELD_OFFSET(::ReactionProto::Reaction, noop_reaction_),
  0,
  3,
  ~0u,
  ~0u,
  5,
  1,
  6,
  2,
  7,
  8,
  4,
  9,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::ReactionProto::MatchConditions)},
  { 19, 27, sizeof(::ReactionProto::ScaffoldMatchConditions)},
  { 30, 39, sizeof(::ReactionProto::SidechainMatchConditions)},
  { 43, 50, sizeof(::ReactionProto::PairOfAtoms)},
  { 52, 60, sizeof(::ReactionProto::MatchedAtomInComponent)},
  { 63, -1, sizeof(::ReactionProto::StereoCenterComponent)},
  { 71, 82, sizeof(::ReactionProto::StereoCenter)},
  { 88, 96, sizeof(::ReactionProto::BondToBeMade)},
  { 99, 111, sizeof(::ReactionProto::InterParticleBond)},
  { 116, -1, sizeof(::ReactionProto::ReplaceAtom)},
  { 127, 135, sizeof(::ReactionProto::WedgeBond)},
  { 138, 145, sizeof(::ReactionProto::ChangeElement)},
  { 147, 154, sizeof(::ReactionProto::FormalCharge)},
  { 156, 163, sizeof(::ReactionProto::ChangeFormalCharge)},
  { 165, 172, sizeof(::ReactionProto::PlaceIsotope)},
  { 174, 181, sizeof(::ReactionProto::IncrementIsotope)},
  { 183, 195, sizeof(::ReactionProto::BondLength)},
  { 200, 215, sizeof(::ReactionProto::BondAngle)},
  { 222, 240, sizeof(::ReactionProto::DihedralAngle)},
  { 249, 258, sizeof(::ReactionProto::RotateFragment)},
  { 261, -1, sizeof(::ReactionProto::ThreeDReplace)},
  { 268, 276, sizeof(::ReactionProto::NoReaction)},
  { 279, 311, sizeof(::ReactionProto::ReactionSite)},
  { 338, 372, sizeof(::ReactionProto::ScaffoldReactionSite)},
  { 401, 440, sizeof(::ReactionProto::SidechainReactionSite)},
  { 474, 491, sizeof(::ReactionProto::Reaction)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_MatchConditions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_ScaffoldMatchConditions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_SidechainMatchConditions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_PairOfAtoms_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_MatchedAtomInComponent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_StereoCenterComponent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_StereoCenter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_BondToBeMade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_InterParticleBond_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_ReplaceAtom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_WedgeBond_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_ChangeElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_FormalCharge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_ChangeFormalCharge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_PlaceIsotope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_IncrementIsotope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_BondLength_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_BondAngle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_DihedralAngle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_RotateFragment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_ThreeDReplace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_NoReaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_ReactionSite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_ScaffoldReactionSite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_SidechainReactionSite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ReactionProto::_Reaction_default_instance_),
};

const char descriptor_table_protodef_Molecule_5fLib_2freaction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033Molecule_Lib/reaction.proto\022\rReactionP"
  "roto\032\037Molecule_Lib/substructure.proto\032%M"
  "olecule_Lib/toggle_kekule_form.proto\"\232\002\n"
  "\017MatchConditions\022\033\n\023ignore_not_reacting\030"
  "\001 \001(\010\022\036\n\026find_unique_embeddings\030\002 \001(\010\022\032\n"
  "\022process_hit_number\030\003 \001(\005\022$\n\034one_embeddi"
  "ng_per_start_atom\030\004 \001(\010\022\'\n\037ignore_symmet"
  "ry_related_matches\030\005 \001(\010\022\035\n\025multiple_mat"
  "ch_string\030\006 \001(\t\022@\n8suppress_if_more_than"
  "_this_many_substructure_search_hits\030\007 \001("
  "\005\"\263\001\n\027ScaffoldMatchConditions\0228\n\020match_c"
  "onditions\030\001 \001(\0132\036.ReactionProto.MatchCon"
  "ditions\022,\n$enumerate_scaffold_hits_indiv"
  "idually\030\002 \001(\010\0220\n(combinatorial_expansion"
  "_of_scaffold_hits\030\003 \001(\005\"\304\001\n\030SidechainMat"
  "chConditions\0228\n\020match_conditions\030\001 \001(\0132\036"
  ".ReactionProto.MatchConditions\022%\n\035make_n"
  "ew_reagent_for_each_hit\030\002 \001(\010\022\033\n\023max_mat"
  "ches_to_find\030\003 \001(\005\022*\n\"strip_reagents_to_"
  "largest_fragment\030\004 \001(\010\"%\n\013PairOfAtoms\022\n\n"
  "\002a1\030\001 \001(\005\022\n\n\002a2\030\002 \001(\005\"U\n\026MatchedAtomInCo"
  "mponent\022\021\n\tcomponent\030\001 \001(\005\022\014\n\004atom\030\002 \001(\005"
  "\022\032\n\022component_and_atom\030\003 \001(\t\"}\n\025StereoCe"
  "nterComponent\0225\n\004atom\030\001 \001(\0132%.ReactionPr"
  "oto.MatchedAtomInComponentH\000\022\033\n\021implicit"
  "_hydrogen\030\002 \001(\010H\000B\020\n\016AtomOrHydrogen\"\265\002\n\014"
  "StereoCenter\022/\n\001a\030\001 \001(\0132$.ReactionProto."
  "StereoCenterComponent\0227\n\ttop_front\030\002 \001(\013"
  "2$.ReactionProto.StereoCenterComponent\0226"
  "\n\010top_back\030\003 \001(\0132$.ReactionProto.StereoC"
  "enterComponent\0227\n\tleft_down\030\004 \001(\0132$.Reac"
  "tionProto.StereoCenterComponent\0228\n\nright"
  "_down\030\005 \001(\0132$.ReactionProto.StereoCenter"
  "Component\022\020\n\010optional\030\006 \001(\010\"S\n\014BondToBeM"
  "ade\022\n\n\002a1\030\001 \001(\005\022\n\n\002a2\030\002 \001(\005\022+\n\005btype\030\003 \001"
  "(\0162\034.SubstructureSearch.BondType\"\330\001\n\021Int"
  "erParticleBond\022\014\n\002a1\030\001 \001(\rH\000\0223\n\002c1\030\002 \001(\013"
  "2%.ReactionProto.MatchedAtomInComponentH"
  "\000\022\014\n\002a2\030\003 \001(\rH\001\0223\n\002c2\030\004 \001(\0132%.ReactionPr"
  "oto.MatchedAtomInComponentH\001\022+\n\005btype\030\005 "
  "\001(\0162\034.SubstructureSearch.BondTypeB\007\n\005ato"
  "m1B\007\n\005atom2\"\245\001\n\013ReplaceAtom\022\014\n\002a1\030\001 \001(\rH"
  "\000\0223\n\002c1\030\002 \001(\0132%.ReactionProto.MatchedAto"
  "mInComponentH\000\022\014\n\002a2\030\003 \001(\rH\001\0223\n\002c2\030\004 \001(\013"
  "2%.ReactionProto.MatchedAtomInComponentH"
  "\001B\007\n\005atom1B\007\n\005atom2\"6\n\tWedgeBond\022\n\n\002a1\030\001"
  " \001(\005\022\n\n\002a2\030\002 \001(\005\022\021\n\tdirection\030\003 \001(\005\".\n\rC"
  "hangeElement\022\014\n\004atom\030\001 \001(\005\022\017\n\007element\030\002 "
  "\001(\t\"3\n\014FormalCharge\022\014\n\004atom\030\001 \001(\005\022\025\n\rfor"
  "mal_charge\030\002 \001(\005\"1\n\022ChangeFormalCharge\022\014"
  "\n\004atom\030\001 \001(\005\022\r\n\005delta\030\002 \001(\005\"-\n\014PlaceIsot"
  "ope\022\014\n\004atom\030\001 \001(\005\022\017\n\007isotope\030\002 \001(\005\"/\n\020In"
  "crementIsotope\022\014\n\004atom\030\001 \001(\005\022\r\n\005delta\030\002 "
  "\001(\005\"\301\001\n\nBondLength\022\014\n\002a1\030\001 \001(\rH\000\0223\n\002c1\030\002"
  " \001(\0132%.ReactionProto.MatchedAtomInCompon"
  "entH\000\022\014\n\002a2\030\003 \001(\rH\001\0223\n\002c2\030\004 \001(\0132%.Reacti"
  "onProto.MatchedAtomInComponentH\001\022\020\n\010dist"
  "ance\030\005 \001(\002B\014\n\nfirst_atomB\r\n\013second_atom\""
  "\376\001\n\tBondAngle\022\014\n\002a1\030\001 \001(\rH\000\0223\n\002c1\030\002 \001(\0132"
  "%.ReactionProto.MatchedAtomInComponentH\000"
  "\022\014\n\002a2\030\003 \001(\rH\001\0223\n\002c2\030\004 \001(\0132%.ReactionPro"
  "to.MatchedAtomInComponentH\001\022\014\n\002a3\030\005 \001(\rH"
  "\002\0223\n\002c3\030\006 \001(\0132%.ReactionProto.MatchedAto"
  "mInComponentH\002\022\r\n\005angle\030\007 \001(\002B\007\n\005atom1B\007"
  "\n\005atom2B\007\n\005atom3\"\316\002\n\rDihedralAngle\022\014\n\002a1"
  "\030\001 \001(\rH\000\0223\n\002c1\030\002 \001(\0132%.ReactionProto.Mat"
  "chedAtomInComponentH\000\022\014\n\002a2\030\003 \001(\rH\001\0223\n\002c"
  "2\030\004 \001(\0132%.ReactionProto.MatchedAtomInCom"
  "ponentH\001\022\014\n\002a3\030\005 \001(\rH\002\0223\n\002c3\030\006 \001(\0132%.Rea"
  "ctionProto.MatchedAtomInComponentH\002\022\014\n\002a"
  "4\030\007 \001(\rH\003\0223\n\002c4\030\010 \001(\0132%.ReactionProto.Ma"
  "tchedAtomInComponentH\003\022\r\n\005angle\030\t \001(\002B\007\n"
  "\005atom1B\007\n\005atom2B\007\n\005atom3B\007\n\005atom4\"s\n\016Rot"
  "ateFragment\022\016\n\004atom\030\001 \001(\rH\000\0226\n\005cspec\030\002 \001"
  "(\0132%.ReactionProto.MatchedAtomInComponen"
  "tH\000\022\r\n\005angle\030\003 \001(\002B\n\n\010the_atom\"u\n\rThreeD"
  "Replace\0221\n\002a1\030\001 \003(\0132%.ReactionProto.Matc"
  "hedAtomInComponent\0221\n\002a2\030\002 \003(\0132%.Reactio"
  "nProto.MatchedAtomInComponent\"\250\001\n\nNoReac"
  "tion\022\017\n\007comment\030\001 \001(\t\022C\n\024scaffold_no_rea"
  "ction\030\002 \001(\0132%.SubstructureSearch.Substru"
  "ctureQuery\022D\n\025sidechain_no_reaction\030\003 \001("
  "\0132%.SubstructureSearch.SubstructureQuery"
  "\"\317\t\n\014ReactionSite\0224\n\005query\030\001 \001(\0132%.Subst"
  "ructureSearch.SubstructureQuery\022\017\n\007comme"
  "nt\030\002 \001(\t\022.\n\tmake_bond\030\003 \003(\0132\033.ReactionPr"
  "oto.BondToBeMade\022.\n\nbreak_bond\030\004 \003(\0132\032.R"
  "eactionProto.PairOfAtoms\022\023\n\013remove_atom\030"
  "\005 \003(\005\022\027\n\017remove_fragment\030\006 \003(\005\022\025\n\rkeep_f"
  "ragment\030\007 \003(\005\0224\n\016change_element\030\010 \003(\0132\034."
  "ReactionProto.ChangeElement\0222\n\rformal_ch"
  "arge\030\t \003(\0132\033.ReactionProto.FormalCharge\022"
  "\?\n\024change_formal_charge\030\n \003(\0132!.Reaction"
  "Proto.ChangeFormalCharge\022,\n\007isotope\030\013 \003("
  "\0132\033.ReactionProto.PlaceIsotope\0227\n\016change"
  "_isotope\030\014 \003(\0132\037.ReactionProto.Increment"
  "Isotope\0223\n\016invert_isotope\030\r \003(\0132\033.Reacti"
  "onProto.PlaceIsotope\022.\n\013bond_length\030\016 \003("
  "\0132\031.ReactionProto.BondLength\022,\n\nbond_ang"
  "le\030\017 \003(\0132\030.ReactionProto.BondAngle\0224\n\016di"
  "hedral_angle\030\020 \003(\0132\034.ReactionProto.Dihed"
  "ralAngle\0229\n\023reaction_3d_replace\030\021 \003(\0132\034."
  "ReactionProto.ThreeDReplace\022-\n\013wedge_bon"
  "ds\030\022 \003(\0132\030.ReactionProto.WedgeBond\0220\n\014re"
  "place_atom\030\023 \003(\0132\032.ReactionProto.Replace"
  "Atom\022 \n\030unfix_implicit_hydrogens\030\024 \003(\005\0227"
  "\n\010inactive\030\025 \003(\0132%.SubstructureSearch.Su"
  "bstructureQuery\022\030\n\020invert_chirality\030\026 \003("
  "\005\022\030\n\020remove_chirality\030\027 \003(\005\022>\n\022toggle_ke"
  "kule_form\030\030 \001(\0132\".ToggleKekuleForm.Toggl"
  "eKekuleForm\022<\n4ignore_multiple_matches_i"
  "nvolving_atoms_not_changing\030\031 \001(\010\0228\n0ign"
  "ore_multiple_matches_involving_changing_"
  "atoms\030\033 \001(\010\022\025\n\rnoop_reaction\030\034 \001(\010\"\363\t\n\024S"
  "caffoldReactionSite\022\n\n\002id\030\001 \001(\005\0224\n\005query"
  "\030\002 \001(\0132%.SubstructureSearch.Substructure"
  "Query\022.\n\tmake_bond\030\003 \003(\0132\033.ReactionProto"
  ".BondToBeMade\022.\n\nbreak_bond\030\004 \003(\0132\032.Reac"
  "tionProto.PairOfAtoms\022\023\n\013remove_atom\030\005 \003"
  "(\005\022\027\n\017remove_fragment\030\006 \003(\005\022\025\n\rkeep_frag"
  "ment\030\007 \003(\005\0224\n\016change_element\030\010 \003(\0132\034.Rea"
  "ctionProto.ChangeElement\0222\n\rformal_charg"
  "e\030\t \003(\0132\033.ReactionProto.FormalCharge\022\?\n\024"
  "change_formal_charge\030\n \003(\0132!.ReactionPro"
  "to.ChangeFormalCharge\022,\n\007isotope\030\013 \003(\0132\033"
  ".ReactionProto.PlaceIsotope\0227\n\016change_is"
  "otope\030\014 \003(\0132\037.ReactionProto.IncrementIso"
  "tope\0223\n\016invert_isotope\030\r \003(\0132\033.ReactionP"
  "roto.PlaceIsotope\022.\n\013bond_length\030\016 \003(\0132\031"
  ".ReactionProto.BondLength\022,\n\nbond_angle\030"
  "\017 \003(\0132\030.ReactionProto.BondAngle\0224\n\016dihed"
  "ral_angle\030\020 \003(\0132\034.ReactionProto.Dihedral"
  "Angle\0229\n\023reaction_3d_replace\030\021 \003(\0132\034.Rea"
  "ctionProto.ThreeDReplace\022-\n\013wedge_bonds\030"
  "\022 \003(\0132\030.ReactionProto.WedgeBond\0220\n\014repla"
  "ce_atom\030\023 \003(\0132\032.ReactionProto.ReplaceAto"
  "m\022 \n\030unfix_implicit_hydrogens\030\024 \003(\005\0227\n\010i"
  "nactive\030\025 \003(\0132%.SubstructureSearch.Subst"
  "ructureQuery\022\030\n\020invert_chirality\030\026 \003(\005\022\030"
  "\n\020remove_chirality\030\027 \003(\005\022>\n\022toggle_kekul"
  "e_form\030\030 \001(\0132\".ToggleKekuleForm.ToggleKe"
  "kuleForm\022<\n4ignore_multiple_matches_invo"
  "lving_atoms_not_changing\030\031 \001(\010\0228\n0ignore"
  "_multiple_matches_involving_changing_ato"
  "ms\030\033 \001(\010\022\025\n\rnoop_reaction\030\034 \001(\010\022\017\n\007comme"
  "nt\030\035 \001(\t\022\016\n\006smarts\030\036 \001(\t\"\322\013\n\025SidechainRe"
  "actionSite\022\n\n\002id\030\001 \001(\005\0224\n\005query\030\002 \001(\0132%."
  "SubstructureSearch.SubstructureQuery\022.\n\t"
  "make_bond\030\003 \003(\0132\033.ReactionProto.BondToBe"
  "Made\022.\n\nbreak_bond\030\004 \003(\0132\032.ReactionProto"
  ".PairOfAtoms\022\023\n\013remove_atom\030\005 \003(\005\022\027\n\017rem"
  "ove_fragment\030\006 \003(\005\022\025\n\rkeep_fragment\030\007 \003("
  "\005\0224\n\016change_element\030\010 \003(\0132\034.ReactionProt"
  "o.ChangeElement\0222\n\rformal_charge\030\t \003(\0132\033"
  ".ReactionProto.FormalCharge\022\?\n\024change_fo"
  "rmal_charge\030\n \003(\0132!.ReactionProto.Change"
  "FormalCharge\022,\n\007isotope\030\013 \003(\0132\033.Reaction"
  "Proto.PlaceIsotope\0227\n\016change_isotope\030\014 \003"
  "(\0132\037.ReactionProto.IncrementIsotope\0223\n\016i"
  "nvert_isotope\030\r \003(\0132\033.ReactionProto.Plac"
  "eIsotope\022.\n\013bond_length\030\016 \003(\0132\031.Reaction"
  "Proto.BondLength\022,\n\nbond_angle\030\017 \003(\0132\030.R"
  "eactionProto.BondAngle\0224\n\016dihedral_angle"
  "\030\020 \003(\0132\034.ReactionProto.DihedralAngle\0229\n\023"
  "reaction_3d_replace\030\021 \003(\0132\034.ReactionProt"
  "o.ThreeDReplace\022-\n\013wedge_bonds\030\022 \003(\0132\030.R"
  "eactionProto.WedgeBond\0220\n\014replace_atom\030\023"
  " \003(\0132\032.ReactionProto.ReplaceAtom\022 \n\030unfi"
  "x_implicit_hydrogens\030\024 \003(\005\0227\n\010inactive\030\025"
  " \003(\0132%.SubstructureSearch.SubstructureQu"
  "ery\022\030\n\020invert_chirality\030\026 \003(\005\022\030\n\020remove_"
  "chirality\030\027 \003(\005\022>\n\022toggle_kekule_form\030\030 "
  "\001(\0132\".ToggleKekuleForm.ToggleKekuleForm\022"
  "<\n4ignore_multiple_matches_involving_ato"
  "ms_not_changing\030\031 \001(\010\0228\n0ignore_multiple"
  "_matches_involving_changing_atoms\030\033 \001(\010\022"
  "\025\n\rnoop_reaction\030\034 \001(\010\022\017\n\007comment\030\035 \001(\t\022"
  "\016\n\006smarts\030\036 \001(\t\022\017\n\007reagent\030( \003(\t\022.\n\004join"
  "\030) \003(\0132 .ReactionProto.InterParticleBond"
  "\022.\n\013no_reaction\030* \003(\0132\031.ReactionProto.No"
  "Reaction\022(\n make_implicit_hydrogens_expl"
  "icit\030+ \001(\010\022A\n\020match_conditions\030, \001(\0132\'.R"
  "eactionProto.SidechainMatchConditions\"\372\003"
  "\n\010Reaction\022\017\n\007comment\030\001 \001(\t\0225\n\010scaffold\030"
  "\002 \001(\0132#.ReactionProto.ScaffoldReactionSi"
  "te\0227\n\tsidechain\030\003 \003(\0132$.ReactionProto.Si"
  "dechainReactionSite\022;\n\026reaction_stereo_c"
  "enter\030\004 \003(\0132\033.ReactionProto.StereoCenter"
  "\022\033\n\023append_reagent_name\030\005 \001(\010\022\026\n\016append_"
  "to_name\030\006 \001(\t\022(\n query_files_in_current_"
  "directory\030\010 \001(\010\022\032\n\022reaction_directory\030\t "
  "\001(\t\022)\n!find_kekule_forms_for_bad_valence"
  "\030\n \001(\010\022(\n make_implicit_hydrogens_explic"
  "it\030\013 \001(\010\022I\n\031scaffold_match_conditions\030\014 "
  "\001(\0132&.ReactionProto.ScaffoldMatchConditi"
  "ons\022\025\n\rnoop_reaction\030\r \001(\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Molecule_5fLib_2freaction_2eproto_deps[2] = {
  &::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto,
  &::descriptor_table_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Molecule_5fLib_2freaction_2eproto_sccs[26] = {
  &scc_info_BondAngle_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_BondLength_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_BondToBeMade_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_ChangeElement_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_ChangeFormalCharge_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_DihedralAngle_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_FormalCharge_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_IncrementIsotope_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_InterParticleBond_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_MatchConditions_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_MatchedAtomInComponent_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_NoReaction_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_PairOfAtoms_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_PlaceIsotope_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_Reaction_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_ReactionSite_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_ReplaceAtom_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_RotateFragment_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_ScaffoldMatchConditions_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_ScaffoldReactionSite_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_SidechainMatchConditions_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_SidechainReactionSite_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_StereoCenter_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_StereoCenterComponent_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_ThreeDReplace_Molecule_5fLib_2freaction_2eproto.base,
  &scc_info_WedgeBond_Molecule_5fLib_2freaction_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Molecule_5fLib_2freaction_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Molecule_5fLib_2freaction_2eproto = {
  false, false, descriptor_table_protodef_Molecule_5fLib_2freaction_2eproto, "Molecule_Lib/reaction.proto", 7826,
  &descriptor_table_Molecule_5fLib_2freaction_2eproto_once, descriptor_table_Molecule_5fLib_2freaction_2eproto_sccs, descriptor_table_Molecule_5fLib_2freaction_2eproto_deps, 26, 2,
  schemas, file_default_instances, TableStruct_Molecule_5fLib_2freaction_2eproto::offsets,
  file_level_metadata_Molecule_5fLib_2freaction_2eproto, 26, file_level_enum_descriptors_Molecule_5fLib_2freaction_2eproto, file_level_service_descriptors_Molecule_5fLib_2freaction_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Molecule_5fLib_2freaction_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Molecule_5fLib_2freaction_2eproto)), true);
namespace ReactionProto {

// ===================================================================

class MatchConditions::_Internal {
 public:
  using HasBits = decltype(std::declval<MatchConditions>()._has_bits_);
  static void set_has_ignore_not_reacting(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_find_unique_embeddings(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_process_hit_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_one_embedding_per_start_atom(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ignore_symmetry_related_matches(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_multiple_match_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_suppress_if_more_than_this_many_substructure_search_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

MatchConditions::MatchConditions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.MatchConditions)
}
MatchConditions::MatchConditions(const MatchConditions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  multiple_match_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_multiple_match_string()) {
    multiple_match_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_multiple_match_string(),
      GetArena());
  }
  ::memcpy(&process_hit_number_, &from.process_hit_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&suppress_if_more_than_this_many_substructure_search_hits_) -
    reinterpret_cast<char*>(&process_hit_number_)) + sizeof(suppress_if_more_than_this_many_substructure_search_hits_));
  // @@protoc_insertion_point(copy_constructor:ReactionProto.MatchConditions)
}

void MatchConditions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchConditions_Molecule_5fLib_2freaction_2eproto.base);
  multiple_match_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&process_hit_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&suppress_if_more_than_this_many_substructure_search_hits_) -
      reinterpret_cast<char*>(&process_hit_number_)) + sizeof(suppress_if_more_than_this_many_substructure_search_hits_));
}

MatchConditions::~MatchConditions() {
  // @@protoc_insertion_point(destructor:ReactionProto.MatchConditions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchConditions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  multiple_match_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MatchConditions::ArenaDtor(void* object) {
  MatchConditions* _this = reinterpret_cast< MatchConditions* >(object);
  (void)_this;
}
void MatchConditions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchConditions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchConditions& MatchConditions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchConditions_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void MatchConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.MatchConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    multiple_match_string_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&process_hit_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&suppress_if_more_than_this_many_substructure_search_hits_) -
        reinterpret_cast<char*>(&process_hit_number_)) + sizeof(suppress_if_more_than_this_many_substructure_search_hits_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchConditions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool ignore_not_reacting = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ignore_not_reacting(&has_bits);
          ignore_not_reacting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool find_unique_embeddings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_find_unique_embeddings(&has_bits);
          find_unique_embeddings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 process_hit_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_process_hit_number(&has_bits);
          process_hit_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool one_embedding_per_start_atom = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_one_embedding_per_start_atom(&has_bits);
          one_embedding_per_start_atom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ignore_symmetry_related_matches = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ignore_symmetry_related_matches(&has_bits);
          ignore_symmetry_related_matches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string multiple_match_string = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_multiple_match_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReactionProto.MatchConditions.multiple_match_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 suppress_if_more_than_this_many_substructure_search_hits = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_suppress_if_more_than_this_many_substructure_search_hits(&has_bits);
          suppress_if_more_than_this_many_substructure_search_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchConditions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.MatchConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ignore_not_reacting = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ignore_not_reacting(), target);
  }

  // optional bool find_unique_embeddings = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_find_unique_embeddings(), target);
  }

  // optional int32 process_hit_number = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_process_hit_number(), target);
  }

  // optional bool one_embedding_per_start_atom = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_one_embedding_per_start_atom(), target);
  }

  // optional bool ignore_symmetry_related_matches = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_ignore_symmetry_related_matches(), target);
  }

  // optional string multiple_match_string = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_multiple_match_string().data(), static_cast<int>(this->_internal_multiple_match_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ReactionProto.MatchConditions.multiple_match_string");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_multiple_match_string(), target);
  }

  // optional int32 suppress_if_more_than_this_many_substructure_search_hits = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_suppress_if_more_than_this_many_substructure_search_hits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.MatchConditions)
  return target;
}

size_t MatchConditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.MatchConditions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string multiple_match_string = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_multiple_match_string());
    }

    // optional int32 process_hit_number = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_process_hit_number());
    }

    // optional bool ignore_not_reacting = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool find_unique_embeddings = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool one_embedding_per_start_atom = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool ignore_symmetry_related_matches = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 suppress_if_more_than_this_many_substructure_search_hits = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_suppress_if_more_than_this_many_substructure_search_hits());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchConditions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.MatchConditions)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchConditions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchConditions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.MatchConditions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.MatchConditions)
    MergeFrom(*source);
  }
}

void MatchConditions::MergeFrom(const MatchConditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.MatchConditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_multiple_match_string(from._internal_multiple_match_string());
    }
    if (cached_has_bits & 0x00000002u) {
      process_hit_number_ = from.process_hit_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      ignore_not_reacting_ = from.ignore_not_reacting_;
    }
    if (cached_has_bits & 0x00000008u) {
      find_unique_embeddings_ = from.find_unique_embeddings_;
    }
    if (cached_has_bits & 0x00000010u) {
      one_embedding_per_start_atom_ = from.one_embedding_per_start_atom_;
    }
    if (cached_has_bits & 0x00000020u) {
      ignore_symmetry_related_matches_ = from.ignore_symmetry_related_matches_;
    }
    if (cached_has_bits & 0x00000040u) {
      suppress_if_more_than_this_many_substructure_search_hits_ = from.suppress_if_more_than_this_many_substructure_search_hits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MatchConditions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.MatchConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchConditions::CopyFrom(const MatchConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.MatchConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchConditions::IsInitialized() const {
  return true;
}

void MatchConditions::InternalSwap(MatchConditions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  multiple_match_string_.Swap(&other->multiple_match_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchConditions, suppress_if_more_than_this_many_substructure_search_hits_)
      + sizeof(MatchConditions::suppress_if_more_than_this_many_substructure_search_hits_)
      - PROTOBUF_FIELD_OFFSET(MatchConditions, process_hit_number_)>(
          reinterpret_cast<char*>(&process_hit_number_),
          reinterpret_cast<char*>(&other->process_hit_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchConditions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScaffoldMatchConditions::_Internal {
 public:
  using HasBits = decltype(std::declval<ScaffoldMatchConditions>()._has_bits_);
  static const ::ReactionProto::MatchConditions& match_conditions(const ScaffoldMatchConditions* msg);
  static void set_has_match_conditions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enumerate_scaffold_hits_individually(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_combinatorial_expansion_of_scaffold_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ReactionProto::MatchConditions&
ScaffoldMatchConditions::_Internal::match_conditions(const ScaffoldMatchConditions* msg) {
  return *msg->match_conditions_;
}
ScaffoldMatchConditions::ScaffoldMatchConditions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.ScaffoldMatchConditions)
}
ScaffoldMatchConditions::ScaffoldMatchConditions(const ScaffoldMatchConditions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_match_conditions()) {
    match_conditions_ = new ::ReactionProto::MatchConditions(*from.match_conditions_);
  } else {
    match_conditions_ = nullptr;
  }
  ::memcpy(&enumerate_scaffold_hits_individually_, &from.enumerate_scaffold_hits_individually_,
    static_cast<size_t>(reinterpret_cast<char*>(&combinatorial_expansion_of_scaffold_hits_) -
    reinterpret_cast<char*>(&enumerate_scaffold_hits_individually_)) + sizeof(combinatorial_expansion_of_scaffold_hits_));
  // @@protoc_insertion_point(copy_constructor:ReactionProto.ScaffoldMatchConditions)
}

void ScaffoldMatchConditions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScaffoldMatchConditions_Molecule_5fLib_2freaction_2eproto.base);
  ::memset(&match_conditions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&combinatorial_expansion_of_scaffold_hits_) -
      reinterpret_cast<char*>(&match_conditions_)) + sizeof(combinatorial_expansion_of_scaffold_hits_));
}

ScaffoldMatchConditions::~ScaffoldMatchConditions() {
  // @@protoc_insertion_point(destructor:ReactionProto.ScaffoldMatchConditions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScaffoldMatchConditions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete match_conditions_;
}

void ScaffoldMatchConditions::ArenaDtor(void* object) {
  ScaffoldMatchConditions* _this = reinterpret_cast< ScaffoldMatchConditions* >(object);
  (void)_this;
}
void ScaffoldMatchConditions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScaffoldMatchConditions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScaffoldMatchConditions& ScaffoldMatchConditions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScaffoldMatchConditions_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void ScaffoldMatchConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.ScaffoldMatchConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(match_conditions_ != nullptr);
    match_conditions_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&enumerate_scaffold_hits_individually_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&combinatorial_expansion_of_scaffold_hits_) -
        reinterpret_cast<char*>(&enumerate_scaffold_hits_individually_)) + sizeof(combinatorial_expansion_of_scaffold_hits_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScaffoldMatchConditions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ReactionProto.MatchConditions match_conditions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_conditions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enumerate_scaffold_hits_individually = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enumerate_scaffold_hits_individually(&has_bits);
          enumerate_scaffold_hits_individually_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 combinatorial_expansion_of_scaffold_hits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_combinatorial_expansion_of_scaffold_hits(&has_bits);
          combinatorial_expansion_of_scaffold_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScaffoldMatchConditions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.ScaffoldMatchConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ReactionProto.MatchConditions match_conditions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::match_conditions(this), target, stream);
  }

  // optional bool enumerate_scaffold_hits_individually = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enumerate_scaffold_hits_individually(), target);
  }

  // optional int32 combinatorial_expansion_of_scaffold_hits = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_combinatorial_expansion_of_scaffold_hits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.ScaffoldMatchConditions)
  return target;
}

size_t ScaffoldMatchConditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.ScaffoldMatchConditions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ReactionProto.MatchConditions match_conditions = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *match_conditions_);
    }

    // optional bool enumerate_scaffold_hits_individually = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 combinatorial_expansion_of_scaffold_hits = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_combinatorial_expansion_of_scaffold_hits());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScaffoldMatchConditions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.ScaffoldMatchConditions)
  GOOGLE_DCHECK_NE(&from, this);
  const ScaffoldMatchConditions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScaffoldMatchConditions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.ScaffoldMatchConditions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.ScaffoldMatchConditions)
    MergeFrom(*source);
  }
}

void ScaffoldMatchConditions::MergeFrom(const ScaffoldMatchConditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.ScaffoldMatchConditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_match_conditions()->::ReactionProto::MatchConditions::MergeFrom(from._internal_match_conditions());
    }
    if (cached_has_bits & 0x00000002u) {
      enumerate_scaffold_hits_individually_ = from.enumerate_scaffold_hits_individually_;
    }
    if (cached_has_bits & 0x00000004u) {
      combinatorial_expansion_of_scaffold_hits_ = from.combinatorial_expansion_of_scaffold_hits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScaffoldMatchConditions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.ScaffoldMatchConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScaffoldMatchConditions::CopyFrom(const ScaffoldMatchConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.ScaffoldMatchConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScaffoldMatchConditions::IsInitialized() const {
  return true;
}

void ScaffoldMatchConditions::InternalSwap(ScaffoldMatchConditions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScaffoldMatchConditions, combinatorial_expansion_of_scaffold_hits_)
      + sizeof(ScaffoldMatchConditions::combinatorial_expansion_of_scaffold_hits_)
      - PROTOBUF_FIELD_OFFSET(ScaffoldMatchConditions, match_conditions_)>(
          reinterpret_cast<char*>(&match_conditions_),
          reinterpret_cast<char*>(&other->match_conditions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScaffoldMatchConditions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SidechainMatchConditions::_Internal {
 public:
  using HasBits = decltype(std::declval<SidechainMatchConditions>()._has_bits_);
  static const ::ReactionProto::MatchConditions& match_conditions(const SidechainMatchConditions* msg);
  static void set_has_match_conditions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_make_new_reagent_for_each_hit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_matches_to_find(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strip_reagents_to_largest_fragment(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ReactionProto::MatchConditions&
SidechainMatchConditions::_Internal::match_conditions(const SidechainMatchConditions* msg) {
  return *msg->match_conditions_;
}
SidechainMatchConditions::SidechainMatchConditions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.SidechainMatchConditions)
}
SidechainMatchConditions::SidechainMatchConditions(const SidechainMatchConditions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_match_conditions()) {
    match_conditions_ = new ::ReactionProto::MatchConditions(*from.match_conditions_);
  } else {
    match_conditions_ = nullptr;
  }
  ::memcpy(&max_matches_to_find_, &from.max_matches_to_find_,
    static_cast<size_t>(reinterpret_cast<char*>(&strip_reagents_to_largest_fragment_) -
    reinterpret_cast<char*>(&max_matches_to_find_)) + sizeof(strip_reagents_to_largest_fragment_));
  // @@protoc_insertion_point(copy_constructor:ReactionProto.SidechainMatchConditions)
}

void SidechainMatchConditions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SidechainMatchConditions_Molecule_5fLib_2freaction_2eproto.base);
  ::memset(&match_conditions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strip_reagents_to_largest_fragment_) -
      reinterpret_cast<char*>(&match_conditions_)) + sizeof(strip_reagents_to_largest_fragment_));
}

SidechainMatchConditions::~SidechainMatchConditions() {
  // @@protoc_insertion_point(destructor:ReactionProto.SidechainMatchConditions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SidechainMatchConditions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete match_conditions_;
}

void SidechainMatchConditions::ArenaDtor(void* object) {
  SidechainMatchConditions* _this = reinterpret_cast< SidechainMatchConditions* >(object);
  (void)_this;
}
void SidechainMatchConditions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SidechainMatchConditions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SidechainMatchConditions& SidechainMatchConditions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SidechainMatchConditions_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void SidechainMatchConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.SidechainMatchConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(match_conditions_ != nullptr);
    match_conditions_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&max_matches_to_find_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&strip_reagents_to_largest_fragment_) -
        reinterpret_cast<char*>(&max_matches_to_find_)) + sizeof(strip_reagents_to_largest_fragment_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SidechainMatchConditions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ReactionProto.MatchConditions match_conditions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_conditions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool make_new_reagent_for_each_hit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_make_new_reagent_for_each_hit(&has_bits);
          make_new_reagent_for_each_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_matches_to_find = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_matches_to_find(&has_bits);
          max_matches_to_find_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool strip_reagents_to_largest_fragment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_strip_reagents_to_largest_fragment(&has_bits);
          strip_reagents_to_largest_fragment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SidechainMatchConditions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.SidechainMatchConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ReactionProto.MatchConditions match_conditions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::match_conditions(this), target, stream);
  }

  // optional bool make_new_reagent_for_each_hit = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_make_new_reagent_for_each_hit(), target);
  }

  // optional int32 max_matches_to_find = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_matches_to_find(), target);
  }

  // optional bool strip_reagents_to_largest_fragment = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_strip_reagents_to_largest_fragment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.SidechainMatchConditions)
  return target;
}

size_t SidechainMatchConditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.SidechainMatchConditions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .ReactionProto.MatchConditions match_conditions = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *match_conditions_);
    }

    // optional int32 max_matches_to_find = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_matches_to_find());
    }

    // optional bool make_new_reagent_for_each_hit = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool strip_reagents_to_largest_fragment = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SidechainMatchConditions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.SidechainMatchConditions)
  GOOGLE_DCHECK_NE(&from, this);
  const SidechainMatchConditions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SidechainMatchConditions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.SidechainMatchConditions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.SidechainMatchConditions)
    MergeFrom(*source);
  }
}

void SidechainMatchConditions::MergeFrom(const SidechainMatchConditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.SidechainMatchConditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_match_conditions()->::ReactionProto::MatchConditions::MergeFrom(from._internal_match_conditions());
    }
    if (cached_has_bits & 0x00000002u) {
      max_matches_to_find_ = from.max_matches_to_find_;
    }
    if (cached_has_bits & 0x00000004u) {
      make_new_reagent_for_each_hit_ = from.make_new_reagent_for_each_hit_;
    }
    if (cached_has_bits & 0x00000008u) {
      strip_reagents_to_largest_fragment_ = from.strip_reagents_to_largest_fragment_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SidechainMatchConditions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.SidechainMatchConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SidechainMatchConditions::CopyFrom(const SidechainMatchConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.SidechainMatchConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SidechainMatchConditions::IsInitialized() const {
  return true;
}

void SidechainMatchConditions::InternalSwap(SidechainMatchConditions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SidechainMatchConditions, strip_reagents_to_largest_fragment_)
      + sizeof(SidechainMatchConditions::strip_reagents_to_largest_fragment_)
      - PROTOBUF_FIELD_OFFSET(SidechainMatchConditions, match_conditions_)>(
          reinterpret_cast<char*>(&match_conditions_),
          reinterpret_cast<char*>(&other->match_conditions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SidechainMatchConditions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PairOfAtoms::_Internal {
 public:
  using HasBits = decltype(std::declval<PairOfAtoms>()._has_bits_);
  static void set_has_a1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_a2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PairOfAtoms::PairOfAtoms(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.PairOfAtoms)
}
PairOfAtoms::PairOfAtoms(const PairOfAtoms& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&a1_, &from.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&a2_) -
    reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
  // @@protoc_insertion_point(copy_constructor:ReactionProto.PairOfAtoms)
}

void PairOfAtoms::SharedCtor() {
  ::memset(&a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a2_) -
      reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
}

PairOfAtoms::~PairOfAtoms() {
  // @@protoc_insertion_point(destructor:ReactionProto.PairOfAtoms)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PairOfAtoms::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PairOfAtoms::ArenaDtor(void* object) {
  PairOfAtoms* _this = reinterpret_cast< PairOfAtoms* >(object);
  (void)_this;
}
void PairOfAtoms::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PairOfAtoms::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PairOfAtoms& PairOfAtoms::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PairOfAtoms_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void PairOfAtoms::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.PairOfAtoms)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&a1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&a2_) -
        reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PairOfAtoms::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_a1(&has_bits);
          a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_a2(&has_bits);
          a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PairOfAtoms::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.PairOfAtoms)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_a1(), target);
  }

  // optional int32 a2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_a2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.PairOfAtoms)
  return target;
}

size_t PairOfAtoms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.PairOfAtoms)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 a1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_a1());
    }

    // optional int32 a2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_a2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PairOfAtoms::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.PairOfAtoms)
  GOOGLE_DCHECK_NE(&from, this);
  const PairOfAtoms* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PairOfAtoms>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.PairOfAtoms)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.PairOfAtoms)
    MergeFrom(*source);
  }
}

void PairOfAtoms::MergeFrom(const PairOfAtoms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.PairOfAtoms)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      a1_ = from.a1_;
    }
    if (cached_has_bits & 0x00000002u) {
      a2_ = from.a2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PairOfAtoms::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.PairOfAtoms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PairOfAtoms::CopyFrom(const PairOfAtoms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.PairOfAtoms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairOfAtoms::IsInitialized() const {
  return true;
}

void PairOfAtoms::InternalSwap(PairOfAtoms* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PairOfAtoms, a2_)
      + sizeof(PairOfAtoms::a2_)
      - PROTOBUF_FIELD_OFFSET(PairOfAtoms, a1_)>(
          reinterpret_cast<char*>(&a1_),
          reinterpret_cast<char*>(&other->a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PairOfAtoms::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MatchedAtomInComponent::_Internal {
 public:
  using HasBits = decltype(std::declval<MatchedAtomInComponent>()._has_bits_);
  static void set_has_component(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_atom(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_component_and_atom(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MatchedAtomInComponent::MatchedAtomInComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.MatchedAtomInComponent)
}
MatchedAtomInComponent::MatchedAtomInComponent(const MatchedAtomInComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  component_and_atom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_component_and_atom()) {
    component_and_atom_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_component_and_atom(),
      GetArena());
  }
  ::memcpy(&component_, &from.component_,
    static_cast<size_t>(reinterpret_cast<char*>(&atom_) -
    reinterpret_cast<char*>(&component_)) + sizeof(atom_));
  // @@protoc_insertion_point(copy_constructor:ReactionProto.MatchedAtomInComponent)
}

void MatchedAtomInComponent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchedAtomInComponent_Molecule_5fLib_2freaction_2eproto.base);
  component_and_atom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&component_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&atom_) -
      reinterpret_cast<char*>(&component_)) + sizeof(atom_));
}

MatchedAtomInComponent::~MatchedAtomInComponent() {
  // @@protoc_insertion_point(destructor:ReactionProto.MatchedAtomInComponent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchedAtomInComponent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  component_and_atom_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MatchedAtomInComponent::ArenaDtor(void* object) {
  MatchedAtomInComponent* _this = reinterpret_cast< MatchedAtomInComponent* >(object);
  (void)_this;
}
void MatchedAtomInComponent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchedAtomInComponent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchedAtomInComponent& MatchedAtomInComponent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchedAtomInComponent_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void MatchedAtomInComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.MatchedAtomInComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    component_and_atom_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&component_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&atom_) -
        reinterpret_cast<char*>(&component_)) + sizeof(atom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchedAtomInComponent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 component = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_component(&has_bits);
          component_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 atom = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_atom(&has_bits);
          atom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string component_and_atom = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_component_and_atom();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReactionProto.MatchedAtomInComponent.component_and_atom");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchedAtomInComponent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.MatchedAtomInComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 component = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_component(), target);
  }

  // optional int32 atom = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_atom(), target);
  }

  // optional string component_and_atom = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_component_and_atom().data(), static_cast<int>(this->_internal_component_and_atom().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ReactionProto.MatchedAtomInComponent.component_and_atom");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_component_and_atom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.MatchedAtomInComponent)
  return target;
}

size_t MatchedAtomInComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.MatchedAtomInComponent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string component_and_atom = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_component_and_atom());
    }

    // optional int32 component = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_component());
    }

    // optional int32 atom = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_atom());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchedAtomInComponent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.MatchedAtomInComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchedAtomInComponent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchedAtomInComponent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.MatchedAtomInComponent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.MatchedAtomInComponent)
    MergeFrom(*source);
  }
}

void MatchedAtomInComponent::MergeFrom(const MatchedAtomInComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.MatchedAtomInComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_component_and_atom(from._internal_component_and_atom());
    }
    if (cached_has_bits & 0x00000002u) {
      component_ = from.component_;
    }
    if (cached_has_bits & 0x00000004u) {
      atom_ = from.atom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MatchedAtomInComponent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.MatchedAtomInComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchedAtomInComponent::CopyFrom(const MatchedAtomInComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.MatchedAtomInComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchedAtomInComponent::IsInitialized() const {
  return true;
}

void MatchedAtomInComponent::InternalSwap(MatchedAtomInComponent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  component_and_atom_.Swap(&other->component_and_atom_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchedAtomInComponent, atom_)
      + sizeof(MatchedAtomInComponent::atom_)
      - PROTOBUF_FIELD_OFFSET(MatchedAtomInComponent, component_)>(
          reinterpret_cast<char*>(&component_),
          reinterpret_cast<char*>(&other->component_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchedAtomInComponent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StereoCenterComponent::_Internal {
 public:
  static const ::ReactionProto::MatchedAtomInComponent& atom(const StereoCenterComponent* msg);
};

const ::ReactionProto::MatchedAtomInComponent&
StereoCenterComponent::_Internal::atom(const StereoCenterComponent* msg) {
  return *msg->AtomOrHydrogen_.atom_;
}
void StereoCenterComponent::set_allocated_atom(::ReactionProto::MatchedAtomInComponent* atom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AtomOrHydrogen();
  if (atom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(atom);
    if (message_arena != submessage_arena) {
      atom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, atom, submessage_arena);
    }
    set_has_atom();
    AtomOrHydrogen_.atom_ = atom;
  }
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.StereoCenterComponent.atom)
}
StereoCenterComponent::StereoCenterComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.StereoCenterComponent)
}
StereoCenterComponent::StereoCenterComponent(const StereoCenterComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_AtomOrHydrogen();
  switch (from.AtomOrHydrogen_case()) {
    case kAtom: {
      _internal_mutable_atom()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_atom());
      break;
    }
    case kImplicitHydrogen: {
      _internal_set_implicit_hydrogen(from._internal_implicit_hydrogen());
      break;
    }
    case ATOMORHYDROGEN_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ReactionProto.StereoCenterComponent)
}

void StereoCenterComponent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StereoCenterComponent_Molecule_5fLib_2freaction_2eproto.base);
  clear_has_AtomOrHydrogen();
}

StereoCenterComponent::~StereoCenterComponent() {
  // @@protoc_insertion_point(destructor:ReactionProto.StereoCenterComponent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StereoCenterComponent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_AtomOrHydrogen()) {
    clear_AtomOrHydrogen();
  }
}

void StereoCenterComponent::ArenaDtor(void* object) {
  StereoCenterComponent* _this = reinterpret_cast< StereoCenterComponent* >(object);
  (void)_this;
}
void StereoCenterComponent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StereoCenterComponent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StereoCenterComponent& StereoCenterComponent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StereoCenterComponent_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void StereoCenterComponent::clear_AtomOrHydrogen() {
// @@protoc_insertion_point(one_of_clear_start:ReactionProto.StereoCenterComponent)
  switch (AtomOrHydrogen_case()) {
    case kAtom: {
      if (GetArena() == nullptr) {
        delete AtomOrHydrogen_.atom_;
      }
      break;
    }
    case kImplicitHydrogen: {
      // No need to clear
      break;
    }
    case ATOMORHYDROGEN_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ATOMORHYDROGEN_NOT_SET;
}


void StereoCenterComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.StereoCenterComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_AtomOrHydrogen();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StereoCenterComponent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ReactionProto.MatchedAtomInComponent atom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_atom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool implicit_hydrogen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_implicit_hydrogen(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StereoCenterComponent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.StereoCenterComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (AtomOrHydrogen_case()) {
    case kAtom: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::atom(this), target, stream);
      break;
    }
    case kImplicitHydrogen: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_implicit_hydrogen(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.StereoCenterComponent)
  return target;
}

size_t StereoCenterComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.StereoCenterComponent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (AtomOrHydrogen_case()) {
    // .ReactionProto.MatchedAtomInComponent atom = 1;
    case kAtom: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AtomOrHydrogen_.atom_);
      break;
    }
    // bool implicit_hydrogen = 2;
    case kImplicitHydrogen: {
      total_size += 1 + 1;
      break;
    }
    case ATOMORHYDROGEN_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StereoCenterComponent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.StereoCenterComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const StereoCenterComponent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StereoCenterComponent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.StereoCenterComponent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.StereoCenterComponent)
    MergeFrom(*source);
  }
}

void StereoCenterComponent::MergeFrom(const StereoCenterComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.StereoCenterComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.AtomOrHydrogen_case()) {
    case kAtom: {
      _internal_mutable_atom()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_atom());
      break;
    }
    case kImplicitHydrogen: {
      _internal_set_implicit_hydrogen(from._internal_implicit_hydrogen());
      break;
    }
    case ATOMORHYDROGEN_NOT_SET: {
      break;
    }
  }
}

void StereoCenterComponent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.StereoCenterComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StereoCenterComponent::CopyFrom(const StereoCenterComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.StereoCenterComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StereoCenterComponent::IsInitialized() const {
  return true;
}

void StereoCenterComponent::InternalSwap(StereoCenterComponent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(AtomOrHydrogen_, other->AtomOrHydrogen_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StereoCenterComponent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StereoCenter::_Internal {
 public:
  using HasBits = decltype(std::declval<StereoCenter>()._has_bits_);
  static const ::ReactionProto::StereoCenterComponent& a(const StereoCenter* msg);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ReactionProto::StereoCenterComponent& top_front(const StereoCenter* msg);
  static void set_has_top_front(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ReactionProto::StereoCenterComponent& top_back(const StereoCenter* msg);
  static void set_has_top_back(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ReactionProto::StereoCenterComponent& left_down(const StereoCenter* msg);
  static void set_has_left_down(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ReactionProto::StereoCenterComponent& right_down(const StereoCenter* msg);
  static void set_has_right_down(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_optional(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ReactionProto::StereoCenterComponent&
StereoCenter::_Internal::a(const StereoCenter* msg) {
  return *msg->a_;
}
const ::ReactionProto::StereoCenterComponent&
StereoCenter::_Internal::top_front(const StereoCenter* msg) {
  return *msg->top_front_;
}
const ::ReactionProto::StereoCenterComponent&
StereoCenter::_Internal::top_back(const StereoCenter* msg) {
  return *msg->top_back_;
}
const ::ReactionProto::StereoCenterComponent&
StereoCenter::_Internal::left_down(const StereoCenter* msg) {
  return *msg->left_down_;
}
const ::ReactionProto::StereoCenterComponent&
StereoCenter::_Internal::right_down(const StereoCenter* msg) {
  return *msg->right_down_;
}
StereoCenter::StereoCenter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.StereoCenter)
}
StereoCenter::StereoCenter(const StereoCenter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_a()) {
    a_ = new ::ReactionProto::StereoCenterComponent(*from.a_);
  } else {
    a_ = nullptr;
  }
  if (from._internal_has_top_front()) {
    top_front_ = new ::ReactionProto::StereoCenterComponent(*from.top_front_);
  } else {
    top_front_ = nullptr;
  }
  if (from._internal_has_top_back()) {
    top_back_ = new ::ReactionProto::StereoCenterComponent(*from.top_back_);
  } else {
    top_back_ = nullptr;
  }
  if (from._internal_has_left_down()) {
    left_down_ = new ::ReactionProto::StereoCenterComponent(*from.left_down_);
  } else {
    left_down_ = nullptr;
  }
  if (from._internal_has_right_down()) {
    right_down_ = new ::ReactionProto::StereoCenterComponent(*from.right_down_);
  } else {
    right_down_ = nullptr;
  }
  optional_ = from.optional_;
  // @@protoc_insertion_point(copy_constructor:ReactionProto.StereoCenter)
}

void StereoCenter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StereoCenter_Molecule_5fLib_2freaction_2eproto.base);
  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optional_) -
      reinterpret_cast<char*>(&a_)) + sizeof(optional_));
}

StereoCenter::~StereoCenter() {
  // @@protoc_insertion_point(destructor:ReactionProto.StereoCenter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StereoCenter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete a_;
  if (this != internal_default_instance()) delete top_front_;
  if (this != internal_default_instance()) delete top_back_;
  if (this != internal_default_instance()) delete left_down_;
  if (this != internal_default_instance()) delete right_down_;
}

void StereoCenter::ArenaDtor(void* object) {
  StereoCenter* _this = reinterpret_cast< StereoCenter* >(object);
  (void)_this;
}
void StereoCenter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StereoCenter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StereoCenter& StereoCenter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StereoCenter_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void StereoCenter::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.StereoCenter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(a_ != nullptr);
      a_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(top_front_ != nullptr);
      top_front_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(top_back_ != nullptr);
      top_back_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(left_down_ != nullptr);
      left_down_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(right_down_ != nullptr);
      right_down_->Clear();
    }
  }
  optional_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StereoCenter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ReactionProto.StereoCenterComponent a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_a(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ReactionProto.StereoCenterComponent top_front = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_front(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ReactionProto.StereoCenterComponent top_back = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_back(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ReactionProto.StereoCenterComponent left_down = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_down(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ReactionProto.StereoCenterComponent right_down = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_down(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool optional = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_optional(&has_bits);
          optional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StereoCenter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.StereoCenter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ReactionProto.StereoCenterComponent a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::a(this), target, stream);
  }

  // optional .ReactionProto.StereoCenterComponent top_front = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::top_front(this), target, stream);
  }

  // optional .ReactionProto.StereoCenterComponent top_back = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::top_back(this), target, stream);
  }

  // optional .ReactionProto.StereoCenterComponent left_down = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::left_down(this), target, stream);
  }

  // optional .ReactionProto.StereoCenterComponent right_down = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::right_down(this), target, stream);
  }

  // optional bool optional = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_optional(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.StereoCenter)
  return target;
}

size_t StereoCenter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.StereoCenter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .ReactionProto.StereoCenterComponent a = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *a_);
    }

    // optional .ReactionProto.StereoCenterComponent top_front = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *top_front_);
    }

    // optional .ReactionProto.StereoCenterComponent top_back = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *top_back_);
    }

    // optional .ReactionProto.StereoCenterComponent left_down = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *left_down_);
    }

    // optional .ReactionProto.StereoCenterComponent right_down = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *right_down_);
    }

    // optional bool optional = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StereoCenter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.StereoCenter)
  GOOGLE_DCHECK_NE(&from, this);
  const StereoCenter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StereoCenter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.StereoCenter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.StereoCenter)
    MergeFrom(*source);
  }
}

void StereoCenter::MergeFrom(const StereoCenter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.StereoCenter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_a()->::ReactionProto::StereoCenterComponent::MergeFrom(from._internal_a());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_top_front()->::ReactionProto::StereoCenterComponent::MergeFrom(from._internal_top_front());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_top_back()->::ReactionProto::StereoCenterComponent::MergeFrom(from._internal_top_back());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_left_down()->::ReactionProto::StereoCenterComponent::MergeFrom(from._internal_left_down());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_right_down()->::ReactionProto::StereoCenterComponent::MergeFrom(from._internal_right_down());
    }
    if (cached_has_bits & 0x00000020u) {
      optional_ = from.optional_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StereoCenter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.StereoCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StereoCenter::CopyFrom(const StereoCenter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.StereoCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StereoCenter::IsInitialized() const {
  return true;
}

void StereoCenter::InternalSwap(StereoCenter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StereoCenter, optional_)
      + sizeof(StereoCenter::optional_)
      - PROTOBUF_FIELD_OFFSET(StereoCenter, a_)>(
          reinterpret_cast<char*>(&a_),
          reinterpret_cast<char*>(&other->a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StereoCenter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BondToBeMade::_Internal {
 public:
  using HasBits = decltype(std::declval<BondToBeMade>()._has_bits_);
  static void set_has_a1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_a2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_btype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BondToBeMade::BondToBeMade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.BondToBeMade)
}
BondToBeMade::BondToBeMade(const BondToBeMade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&a1_, &from.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&btype_) -
    reinterpret_cast<char*>(&a1_)) + sizeof(btype_));
  // @@protoc_insertion_point(copy_constructor:ReactionProto.BondToBeMade)
}

void BondToBeMade::SharedCtor() {
  ::memset(&a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a2_) -
      reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
  btype_ = 3;
}

BondToBeMade::~BondToBeMade() {
  // @@protoc_insertion_point(destructor:ReactionProto.BondToBeMade)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BondToBeMade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BondToBeMade::ArenaDtor(void* object) {
  BondToBeMade* _this = reinterpret_cast< BondToBeMade* >(object);
  (void)_this;
}
void BondToBeMade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BondToBeMade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BondToBeMade& BondToBeMade::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BondToBeMade_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void BondToBeMade::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.BondToBeMade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&a1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&a2_) -
        reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
    btype_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BondToBeMade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_a1(&has_bits);
          a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_a2(&has_bits);
          a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SubstructureSearch.BondType btype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SubstructureSearch::BondType_IsValid(val))) {
            _internal_set_btype(static_cast<::SubstructureSearch::BondType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BondToBeMade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.BondToBeMade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_a1(), target);
  }

  // optional int32 a2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_a2(), target);
  }

  // optional .SubstructureSearch.BondType btype = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_btype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.BondToBeMade)
  return target;
}

size_t BondToBeMade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.BondToBeMade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 a1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_a1());
    }

    // optional int32 a2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_a2());
    }

    // optional .SubstructureSearch.BondType btype = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_btype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BondToBeMade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.BondToBeMade)
  GOOGLE_DCHECK_NE(&from, this);
  const BondToBeMade* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BondToBeMade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.BondToBeMade)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.BondToBeMade)
    MergeFrom(*source);
  }
}

void BondToBeMade::MergeFrom(const BondToBeMade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.BondToBeMade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      a1_ = from.a1_;
    }
    if (cached_has_bits & 0x00000002u) {
      a2_ = from.a2_;
    }
    if (cached_has_bits & 0x00000004u) {
      btype_ = from.btype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BondToBeMade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.BondToBeMade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BondToBeMade::CopyFrom(const BondToBeMade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.BondToBeMade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BondToBeMade::IsInitialized() const {
  return true;
}

void BondToBeMade::InternalSwap(BondToBeMade* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BondToBeMade, a2_)
      + sizeof(BondToBeMade::a2_)
      - PROTOBUF_FIELD_OFFSET(BondToBeMade, a1_)>(
          reinterpret_cast<char*>(&a1_),
          reinterpret_cast<char*>(&other->a1_));
  swap(btype_, other->btype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BondToBeMade::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InterParticleBond::_Internal {
 public:
  using HasBits = decltype(std::declval<InterParticleBond>()._has_bits_);
  static const ::ReactionProto::MatchedAtomInComponent& c1(const InterParticleBond* msg);
  static const ::ReactionProto::MatchedAtomInComponent& c2(const InterParticleBond* msg);
  static void set_has_btype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ReactionProto::MatchedAtomInComponent&
InterParticleBond::_Internal::c1(const InterParticleBond* msg) {
  return *msg->atom1_.c1_;
}
const ::ReactionProto::MatchedAtomInComponent&
InterParticleBond::_Internal::c2(const InterParticleBond* msg) {
  return *msg->atom2_.c2_;
}
void InterParticleBond::set_allocated_c1(::ReactionProto::MatchedAtomInComponent* c1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_atom1();
  if (c1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(c1);
    if (message_arena != submessage_arena) {
      c1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, c1, submessage_arena);
    }
    set_has_c1();
    atom1_.c1_ = c1;
  }
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.InterParticleBond.c1)
}
void InterParticleBond::set_allocated_c2(::ReactionProto::MatchedAtomInComponent* c2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_atom2();
  if (c2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(c2);
    if (message_arena != submessage_arena) {
      c2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, c2, submessage_arena);
    }
    set_has_c2();
    atom2_.c2_ = c2;
  }
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.InterParticleBond.c2)
}
InterParticleBond::InterParticleBond(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.InterParticleBond)
}
InterParticleBond::InterParticleBond(const InterParticleBond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  btype_ = from.btype_;
  clear_has_atom1();
  switch (from.atom1_case()) {
    case kA1: {
      _internal_set_a1(from._internal_a1());
      break;
    }
    case kC1: {
      _internal_mutable_c1()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c1());
      break;
    }
    case ATOM1_NOT_SET: {
      break;
    }
  }
  clear_has_atom2();
  switch (from.atom2_case()) {
    case kA2: {
      _internal_set_a2(from._internal_a2());
      break;
    }
    case kC2: {
      _internal_mutable_c2()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c2());
      break;
    }
    case ATOM2_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ReactionProto.InterParticleBond)
}

void InterParticleBond::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InterParticleBond_Molecule_5fLib_2freaction_2eproto.base);
  btype_ = 3;
  clear_has_atom1();
  clear_has_atom2();
}

InterParticleBond::~InterParticleBond() {
  // @@protoc_insertion_point(destructor:ReactionProto.InterParticleBond)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InterParticleBond::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_atom1()) {
    clear_atom1();
  }
  if (has_atom2()) {
    clear_atom2();
  }
}

void InterParticleBond::ArenaDtor(void* object) {
  InterParticleBond* _this = reinterpret_cast< InterParticleBond* >(object);
  (void)_this;
}
void InterParticleBond::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InterParticleBond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InterParticleBond& InterParticleBond::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InterParticleBond_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void InterParticleBond::clear_atom1() {
// @@protoc_insertion_point(one_of_clear_start:ReactionProto.InterParticleBond)
  switch (atom1_case()) {
    case kA1: {
      // No need to clear
      break;
    }
    case kC1: {
      if (GetArena() == nullptr) {
        delete atom1_.c1_;
      }
      break;
    }
    case ATOM1_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ATOM1_NOT_SET;
}

void InterParticleBond::clear_atom2() {
// @@protoc_insertion_point(one_of_clear_start:ReactionProto.InterParticleBond)
  switch (atom2_case()) {
    case kA2: {
      // No need to clear
      break;
    }
    case kC2: {
      if (GetArena() == nullptr) {
        delete atom2_.c2_;
      }
      break;
    }
    case ATOM2_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = ATOM2_NOT_SET;
}


void InterParticleBond::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.InterParticleBond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  btype_ = 3;
  clear_atom1();
  clear_atom2();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterParticleBond::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_a1(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ReactionProto.MatchedAtomInComponent c1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_c1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 a2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_a2(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ReactionProto.MatchedAtomInComponent c2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_c2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SubstructureSearch.BondType btype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SubstructureSearch::BondType_IsValid(val))) {
            _internal_set_btype(static_cast<::SubstructureSearch::BondType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InterParticleBond::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.InterParticleBond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (atom1_case()) {
    case kA1: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_a1(), target);
      break;
    }
    case kC1: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::c1(this), target, stream);
      break;
    }
    default: ;
  }
  switch (atom2_case()) {
    case kA2: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_a2(), target);
      break;
    }
    case kC2: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::c2(this), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional .SubstructureSearch.BondType btype = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_btype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.InterParticleBond)
  return target;
}

size_t InterParticleBond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.InterParticleBond)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .SubstructureSearch.BondType btype = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_btype());
  }

  switch (atom1_case()) {
    // uint32 a1 = 1;
    case kA1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_a1());
      break;
    }
    // .ReactionProto.MatchedAtomInComponent c1 = 2;
    case kC1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *atom1_.c1_);
      break;
    }
    case ATOM1_NOT_SET: {
      break;
    }
  }
  switch (atom2_case()) {
    // uint32 a2 = 3;
    case kA2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_a2());
      break;
    }
    // .ReactionProto.MatchedAtomInComponent c2 = 4;
    case kC2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *atom2_.c2_);
      break;
    }
    case ATOM2_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InterParticleBond::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.InterParticleBond)
  GOOGLE_DCHECK_NE(&from, this);
  const InterParticleBond* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InterParticleBond>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.InterParticleBond)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.InterParticleBond)
    MergeFrom(*source);
  }
}

void InterParticleBond::MergeFrom(const InterParticleBond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.InterParticleBond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_btype()) {
    _internal_set_btype(from._internal_btype());
  }
  switch (from.atom1_case()) {
    case kA1: {
      _internal_set_a1(from._internal_a1());
      break;
    }
    case kC1: {
      _internal_mutable_c1()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c1());
      break;
    }
    case ATOM1_NOT_SET: {
      break;
    }
  }
  switch (from.atom2_case()) {
    case kA2: {
      _internal_set_a2(from._internal_a2());
      break;
    }
    case kC2: {
      _internal_mutable_c2()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c2());
      break;
    }
    case ATOM2_NOT_SET: {
      break;
    }
  }
}

void InterParticleBond::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.InterParticleBond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterParticleBond::CopyFrom(const InterParticleBond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.InterParticleBond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterParticleBond::IsInitialized() const {
  return true;
}

void InterParticleBond::InternalSwap(InterParticleBond* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(btype_, other->btype_);
  swap(atom1_, other->atom1_);
  swap(atom2_, other->atom2_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InterParticleBond::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReplaceAtom::_Internal {
 public:
  static const ::ReactionProto::MatchedAtomInComponent& c1(const ReplaceAtom* msg);
  static const ::ReactionProto::MatchedAtomInComponent& c2(const ReplaceAtom* msg);
};

const ::ReactionProto::MatchedAtomInComponent&
ReplaceAtom::_Internal::c1(const ReplaceAtom* msg) {
  return *msg->atom1_.c1_;
}
const ::ReactionProto::MatchedAtomInComponent&
ReplaceAtom::_Internal::c2(const ReplaceAtom* msg) {
  return *msg->atom2_.c2_;
}
void ReplaceAtom::set_allocated_c1(::ReactionProto::MatchedAtomInComponent* c1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_atom1();
  if (c1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(c1);
    if (message_arena != submessage_arena) {
      c1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, c1, submessage_arena);
    }
    set_has_c1();
    atom1_.c1_ = c1;
  }
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.ReplaceAtom.c1)
}
void ReplaceAtom::set_allocated_c2(::ReactionProto::MatchedAtomInComponent* c2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_atom2();
  if (c2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(c2);
    if (message_arena != submessage_arena) {
      c2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, c2, submessage_arena);
    }
    set_has_c2();
    atom2_.c2_ = c2;
  }
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.ReplaceAtom.c2)
}
ReplaceAtom::ReplaceAtom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.ReplaceAtom)
}
ReplaceAtom::ReplaceAtom(const ReplaceAtom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_atom1();
  switch (from.atom1_case()) {
    case kA1: {
      _internal_set_a1(from._internal_a1());
      break;
    }
    case kC1: {
      _internal_mutable_c1()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c1());
      break;
    }
    case ATOM1_NOT_SET: {
      break;
    }
  }
  clear_has_atom2();
  switch (from.atom2_case()) {
    case kA2: {
      _internal_set_a2(from._internal_a2());
      break;
    }
    case kC2: {
      _internal_mutable_c2()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c2());
      break;
    }
    case ATOM2_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ReactionProto.ReplaceAtom)
}

void ReplaceAtom::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplaceAtom_Molecule_5fLib_2freaction_2eproto.base);
  clear_has_atom1();
  clear_has_atom2();
}

ReplaceAtom::~ReplaceAtom() {
  // @@protoc_insertion_point(destructor:ReactionProto.ReplaceAtom)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplaceAtom::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_atom1()) {
    clear_atom1();
  }
  if (has_atom2()) {
    clear_atom2();
  }
}

void ReplaceAtom::ArenaDtor(void* object) {
  ReplaceAtom* _this = reinterpret_cast< ReplaceAtom* >(object);
  (void)_this;
}
void ReplaceAtom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplaceAtom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplaceAtom& ReplaceAtom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplaceAtom_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void ReplaceAtom::clear_atom1() {
// @@protoc_insertion_point(one_of_clear_start:ReactionProto.ReplaceAtom)
  switch (atom1_case()) {
    case kA1: {
      // No need to clear
      break;
    }
    case kC1: {
      if (GetArena() == nullptr) {
        delete atom1_.c1_;
      }
      break;
    }
    case ATOM1_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ATOM1_NOT_SET;
}

void ReplaceAtom::clear_atom2() {
// @@protoc_insertion_point(one_of_clear_start:ReactionProto.ReplaceAtom)
  switch (atom2_case()) {
    case kA2: {
      // No need to clear
      break;
    }
    case kC2: {
      if (GetArena() == nullptr) {
        delete atom2_.c2_;
      }
      break;
    }
    case ATOM2_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = ATOM2_NOT_SET;
}


void ReplaceAtom::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.ReplaceAtom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_atom1();
  clear_atom2();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplaceAtom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_a1(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ReactionProto.MatchedAtomInComponent c1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_c1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 a2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_a2(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ReactionProto.MatchedAtomInComponent c2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_c2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplaceAtom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.ReplaceAtom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (atom1_case()) {
    case kA1: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_a1(), target);
      break;
    }
    case kC1: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::c1(this), target, stream);
      break;
    }
    default: ;
  }
  switch (atom2_case()) {
    case kA2: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_a2(), target);
      break;
    }
    case kC2: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::c2(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.ReplaceAtom)
  return target;
}

size_t ReplaceAtom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.ReplaceAtom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (atom1_case()) {
    // uint32 a1 = 1;
    case kA1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_a1());
      break;
    }
    // .ReactionProto.MatchedAtomInComponent c1 = 2;
    case kC1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *atom1_.c1_);
      break;
    }
    case ATOM1_NOT_SET: {
      break;
    }
  }
  switch (atom2_case()) {
    // uint32 a2 = 3;
    case kA2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_a2());
      break;
    }
    // .ReactionProto.MatchedAtomInComponent c2 = 4;
    case kC2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *atom2_.c2_);
      break;
    }
    case ATOM2_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplaceAtom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.ReplaceAtom)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplaceAtom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplaceAtom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.ReplaceAtom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.ReplaceAtom)
    MergeFrom(*source);
  }
}

void ReplaceAtom::MergeFrom(const ReplaceAtom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.ReplaceAtom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.atom1_case()) {
    case kA1: {
      _internal_set_a1(from._internal_a1());
      break;
    }
    case kC1: {
      _internal_mutable_c1()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c1());
      break;
    }
    case ATOM1_NOT_SET: {
      break;
    }
  }
  switch (from.atom2_case()) {
    case kA2: {
      _internal_set_a2(from._internal_a2());
      break;
    }
    case kC2: {
      _internal_mutable_c2()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c2());
      break;
    }
    case ATOM2_NOT_SET: {
      break;
    }
  }
}

void ReplaceAtom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.ReplaceAtom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaceAtom::CopyFrom(const ReplaceAtom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.ReplaceAtom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceAtom::IsInitialized() const {
  return true;
}

void ReplaceAtom::InternalSwap(ReplaceAtom* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(atom1_, other->atom1_);
  swap(atom2_, other->atom2_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplaceAtom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WedgeBond::_Internal {
 public:
  using HasBits = decltype(std::declval<WedgeBond>()._has_bits_);
  static void set_has_a1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_a2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

WedgeBond::WedgeBond(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.WedgeBond)
}
WedgeBond::WedgeBond(const WedgeBond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&a1_, &from.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&a1_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:ReactionProto.WedgeBond)
}

void WedgeBond::SharedCtor() {
  ::memset(&a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&a1_)) + sizeof(direction_));
}

WedgeBond::~WedgeBond() {
  // @@protoc_insertion_point(destructor:ReactionProto.WedgeBond)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WedgeBond::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WedgeBond::ArenaDtor(void* object) {
  WedgeBond* _this = reinterpret_cast< WedgeBond* >(object);
  (void)_this;
}
void WedgeBond::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WedgeBond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WedgeBond& WedgeBond::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WedgeBond_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void WedgeBond::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.WedgeBond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&a1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&direction_) -
        reinterpret_cast<char*>(&a1_)) + sizeof(direction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WedgeBond::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_a1(&has_bits);
          a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_a2(&has_bits);
          a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_direction(&has_bits);
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WedgeBond::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.WedgeBond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_a1(), target);
  }

  // optional int32 a2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_a2(), target);
  }

  // optional int32 direction = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.WedgeBond)
  return target;
}

size_t WedgeBond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.WedgeBond)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 a1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_a1());
    }

    // optional int32 a2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_a2());
    }

    // optional int32 direction = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_direction());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WedgeBond::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.WedgeBond)
  GOOGLE_DCHECK_NE(&from, this);
  const WedgeBond* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WedgeBond>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.WedgeBond)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.WedgeBond)
    MergeFrom(*source);
  }
}

void WedgeBond::MergeFrom(const WedgeBond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.WedgeBond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      a1_ = from.a1_;
    }
    if (cached_has_bits & 0x00000002u) {
      a2_ = from.a2_;
    }
    if (cached_has_bits & 0x00000004u) {
      direction_ = from.direction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WedgeBond::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.WedgeBond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WedgeBond::CopyFrom(const WedgeBond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.WedgeBond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WedgeBond::IsInitialized() const {
  return true;
}

void WedgeBond::InternalSwap(WedgeBond* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WedgeBond, direction_)
      + sizeof(WedgeBond::direction_)
      - PROTOBUF_FIELD_OFFSET(WedgeBond, a1_)>(
          reinterpret_cast<char*>(&a1_),
          reinterpret_cast<char*>(&other->a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WedgeBond::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChangeElement::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeElement>()._has_bits_);
  static void set_has_atom(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_element(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChangeElement::ChangeElement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.ChangeElement)
}
ChangeElement::ChangeElement(const ChangeElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  element_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_element()) {
    element_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_element(),
      GetArena());
  }
  atom_ = from.atom_;
  // @@protoc_insertion_point(copy_constructor:ReactionProto.ChangeElement)
}

void ChangeElement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChangeElement_Molecule_5fLib_2freaction_2eproto.base);
  element_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  atom_ = 0;
}

ChangeElement::~ChangeElement() {
  // @@protoc_insertion_point(destructor:ReactionProto.ChangeElement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeElement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  element_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChangeElement::ArenaDtor(void* object) {
  ChangeElement* _this = reinterpret_cast< ChangeElement* >(object);
  (void)_this;
}
void ChangeElement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeElement& ChangeElement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeElement_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void ChangeElement::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.ChangeElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    element_.ClearNonDefaultToEmpty();
  }
  atom_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 atom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_atom(&has_bits);
          atom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string element = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_element();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReactionProto.ChangeElement.element");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeElement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.ChangeElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 atom = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_atom(), target);
  }

  // optional string element = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_element().data(), static_cast<int>(this->_internal_element().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ReactionProto.ChangeElement.element");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_element(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.ChangeElement)
  return target;
}

size_t ChangeElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.ChangeElement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string element = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_element());
    }

    // optional int32 atom = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_atom());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.ChangeElement)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.ChangeElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.ChangeElement)
    MergeFrom(*source);
  }
}

void ChangeElement::MergeFrom(const ChangeElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.ChangeElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_element(from._internal_element());
    }
    if (cached_has_bits & 0x00000002u) {
      atom_ = from.atom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChangeElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.ChangeElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeElement::CopyFrom(const ChangeElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.ChangeElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeElement::IsInitialized() const {
  return true;
}

void ChangeElement::InternalSwap(ChangeElement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  element_.Swap(&other->element_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(atom_, other->atom_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeElement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FormalCharge::_Internal {
 public:
  using HasBits = decltype(std::declval<FormalCharge>()._has_bits_);
  static void set_has_atom(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_formal_charge(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FormalCharge::FormalCharge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.FormalCharge)
}
FormalCharge::FormalCharge(const FormalCharge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&atom_, &from.atom_,
    static_cast<size_t>(reinterpret_cast<char*>(&formal_charge_) -
    reinterpret_cast<char*>(&atom_)) + sizeof(formal_charge_));
  // @@protoc_insertion_point(copy_constructor:ReactionProto.FormalCharge)
}

void FormalCharge::SharedCtor() {
  ::memset(&atom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&formal_charge_) -
      reinterpret_cast<char*>(&atom_)) + sizeof(formal_charge_));
}

FormalCharge::~FormalCharge() {
  // @@protoc_insertion_point(destructor:ReactionProto.FormalCharge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FormalCharge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FormalCharge::ArenaDtor(void* object) {
  FormalCharge* _this = reinterpret_cast< FormalCharge* >(object);
  (void)_this;
}
void FormalCharge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormalCharge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FormalCharge& FormalCharge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FormalCharge_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void FormalCharge::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.FormalCharge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&atom_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&formal_charge_) -
        reinterpret_cast<char*>(&atom_)) + sizeof(formal_charge_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormalCharge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 atom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_atom(&has_bits);
          atom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 formal_charge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_formal_charge(&has_bits);
          formal_charge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormalCharge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.FormalCharge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 atom = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_atom(), target);
  }

  // optional int32 formal_charge = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_formal_charge(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.FormalCharge)
  return target;
}

size_t FormalCharge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.FormalCharge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 atom = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_atom());
    }

    // optional int32 formal_charge = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_formal_charge());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FormalCharge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.FormalCharge)
  GOOGLE_DCHECK_NE(&from, this);
  const FormalCharge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FormalCharge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.FormalCharge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.FormalCharge)
    MergeFrom(*source);
  }
}

void FormalCharge::MergeFrom(const FormalCharge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.FormalCharge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      atom_ = from.atom_;
    }
    if (cached_has_bits & 0x00000002u) {
      formal_charge_ = from.formal_charge_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FormalCharge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.FormalCharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormalCharge::CopyFrom(const FormalCharge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.FormalCharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormalCharge::IsInitialized() const {
  return true;
}

void FormalCharge::InternalSwap(FormalCharge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormalCharge, formal_charge_)
      + sizeof(FormalCharge::formal_charge_)
      - PROTOBUF_FIELD_OFFSET(FormalCharge, atom_)>(
          reinterpret_cast<char*>(&atom_),
          reinterpret_cast<char*>(&other->atom_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormalCharge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChangeFormalCharge::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeFormalCharge>()._has_bits_);
  static void set_has_atom(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChangeFormalCharge::ChangeFormalCharge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.ChangeFormalCharge)
}
ChangeFormalCharge::ChangeFormalCharge(const ChangeFormalCharge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&atom_, &from.atom_,
    static_cast<size_t>(reinterpret_cast<char*>(&delta_) -
    reinterpret_cast<char*>(&atom_)) + sizeof(delta_));
  // @@protoc_insertion_point(copy_constructor:ReactionProto.ChangeFormalCharge)
}

void ChangeFormalCharge::SharedCtor() {
  ::memset(&atom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delta_) -
      reinterpret_cast<char*>(&atom_)) + sizeof(delta_));
}

ChangeFormalCharge::~ChangeFormalCharge() {
  // @@protoc_insertion_point(destructor:ReactionProto.ChangeFormalCharge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeFormalCharge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChangeFormalCharge::ArenaDtor(void* object) {
  ChangeFormalCharge* _this = reinterpret_cast< ChangeFormalCharge* >(object);
  (void)_this;
}
void ChangeFormalCharge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeFormalCharge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeFormalCharge& ChangeFormalCharge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeFormalCharge_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void ChangeFormalCharge::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.ChangeFormalCharge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&atom_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delta_) -
        reinterpret_cast<char*>(&atom_)) + sizeof(delta_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeFormalCharge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 atom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_atom(&has_bits);
          atom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 delta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_delta(&has_bits);
          delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeFormalCharge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.ChangeFormalCharge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 atom = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_atom(), target);
  }

  // optional int32 delta = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.ChangeFormalCharge)
  return target;
}

size_t ChangeFormalCharge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.ChangeFormalCharge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 atom = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_atom());
    }

    // optional int32 delta = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_delta());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeFormalCharge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.ChangeFormalCharge)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeFormalCharge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeFormalCharge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.ChangeFormalCharge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.ChangeFormalCharge)
    MergeFrom(*source);
  }
}

void ChangeFormalCharge::MergeFrom(const ChangeFormalCharge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.ChangeFormalCharge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      atom_ = from.atom_;
    }
    if (cached_has_bits & 0x00000002u) {
      delta_ = from.delta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChangeFormalCharge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.ChangeFormalCharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeFormalCharge::CopyFrom(const ChangeFormalCharge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.ChangeFormalCharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeFormalCharge::IsInitialized() const {
  return true;
}

void ChangeFormalCharge::InternalSwap(ChangeFormalCharge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeFormalCharge, delta_)
      + sizeof(ChangeFormalCharge::delta_)
      - PROTOBUF_FIELD_OFFSET(ChangeFormalCharge, atom_)>(
          reinterpret_cast<char*>(&atom_),
          reinterpret_cast<char*>(&other->atom_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeFormalCharge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlaceIsotope::_Internal {
 public:
  using HasBits = decltype(std::declval<PlaceIsotope>()._has_bits_);
  static void set_has_atom(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_isotope(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PlaceIsotope::PlaceIsotope(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.PlaceIsotope)
}
PlaceIsotope::PlaceIsotope(const PlaceIsotope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&atom_, &from.atom_,
    static_cast<size_t>(reinterpret_cast<char*>(&isotope_) -
    reinterpret_cast<char*>(&atom_)) + sizeof(isotope_));
  // @@protoc_insertion_point(copy_constructor:ReactionProto.PlaceIsotope)
}

void PlaceIsotope::SharedCtor() {
  ::memset(&atom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isotope_) -
      reinterpret_cast<char*>(&atom_)) + sizeof(isotope_));
}

PlaceIsotope::~PlaceIsotope() {
  // @@protoc_insertion_point(destructor:ReactionProto.PlaceIsotope)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlaceIsotope::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlaceIsotope::ArenaDtor(void* object) {
  PlaceIsotope* _this = reinterpret_cast< PlaceIsotope* >(object);
  (void)_this;
}
void PlaceIsotope::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlaceIsotope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaceIsotope& PlaceIsotope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaceIsotope_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void PlaceIsotope::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.PlaceIsotope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&atom_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isotope_) -
        reinterpret_cast<char*>(&atom_)) + sizeof(isotope_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceIsotope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 atom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_atom(&has_bits);
          atom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 isotope = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_isotope(&has_bits);
          isotope_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceIsotope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.PlaceIsotope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 atom = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_atom(), target);
  }

  // optional int32 isotope = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_isotope(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.PlaceIsotope)
  return target;
}

size_t PlaceIsotope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.PlaceIsotope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 atom = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_atom());
    }

    // optional int32 isotope = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_isotope());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceIsotope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.PlaceIsotope)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceIsotope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceIsotope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.PlaceIsotope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.PlaceIsotope)
    MergeFrom(*source);
  }
}

void PlaceIsotope::MergeFrom(const PlaceIsotope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.PlaceIsotope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      atom_ = from.atom_;
    }
    if (cached_has_bits & 0x00000002u) {
      isotope_ = from.isotope_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlaceIsotope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.PlaceIsotope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceIsotope::CopyFrom(const PlaceIsotope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.PlaceIsotope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceIsotope::IsInitialized() const {
  return true;
}

void PlaceIsotope::InternalSwap(PlaceIsotope* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaceIsotope, isotope_)
      + sizeof(PlaceIsotope::isotope_)
      - PROTOBUF_FIELD_OFFSET(PlaceIsotope, atom_)>(
          reinterpret_cast<char*>(&atom_),
          reinterpret_cast<char*>(&other->atom_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceIsotope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IncrementIsotope::_Internal {
 public:
  using HasBits = decltype(std::declval<IncrementIsotope>()._has_bits_);
  static void set_has_atom(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

IncrementIsotope::IncrementIsotope(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.IncrementIsotope)
}
IncrementIsotope::IncrementIsotope(const IncrementIsotope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&atom_, &from.atom_,
    static_cast<size_t>(reinterpret_cast<char*>(&delta_) -
    reinterpret_cast<char*>(&atom_)) + sizeof(delta_));
  // @@protoc_insertion_point(copy_constructor:ReactionProto.IncrementIsotope)
}

void IncrementIsotope::SharedCtor() {
  ::memset(&atom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delta_) -
      reinterpret_cast<char*>(&atom_)) + sizeof(delta_));
}

IncrementIsotope::~IncrementIsotope() {
  // @@protoc_insertion_point(destructor:ReactionProto.IncrementIsotope)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IncrementIsotope::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IncrementIsotope::ArenaDtor(void* object) {
  IncrementIsotope* _this = reinterpret_cast< IncrementIsotope* >(object);
  (void)_this;
}
void IncrementIsotope::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IncrementIsotope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IncrementIsotope& IncrementIsotope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IncrementIsotope_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void IncrementIsotope::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.IncrementIsotope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&atom_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delta_) -
        reinterpret_cast<char*>(&atom_)) + sizeof(delta_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IncrementIsotope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 atom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_atom(&has_bits);
          atom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 delta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_delta(&has_bits);
          delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IncrementIsotope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.IncrementIsotope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 atom = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_atom(), target);
  }

  // optional int32 delta = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.IncrementIsotope)
  return target;
}

size_t IncrementIsotope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.IncrementIsotope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 atom = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_atom());
    }

    // optional int32 delta = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_delta());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncrementIsotope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.IncrementIsotope)
  GOOGLE_DCHECK_NE(&from, this);
  const IncrementIsotope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IncrementIsotope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.IncrementIsotope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.IncrementIsotope)
    MergeFrom(*source);
  }
}

void IncrementIsotope::MergeFrom(const IncrementIsotope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.IncrementIsotope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      atom_ = from.atom_;
    }
    if (cached_has_bits & 0x00000002u) {
      delta_ = from.delta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IncrementIsotope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.IncrementIsotope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncrementIsotope::CopyFrom(const IncrementIsotope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.IncrementIsotope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncrementIsotope::IsInitialized() const {
  return true;
}

void IncrementIsotope::InternalSwap(IncrementIsotope* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IncrementIsotope, delta_)
      + sizeof(IncrementIsotope::delta_)
      - PROTOBUF_FIELD_OFFSET(IncrementIsotope, atom_)>(
          reinterpret_cast<char*>(&atom_),
          reinterpret_cast<char*>(&other->atom_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IncrementIsotope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BondLength::_Internal {
 public:
  using HasBits = decltype(std::declval<BondLength>()._has_bits_);
  static const ::ReactionProto::MatchedAtomInComponent& c1(const BondLength* msg);
  static const ::ReactionProto::MatchedAtomInComponent& c2(const BondLength* msg);
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ReactionProto::MatchedAtomInComponent&
BondLength::_Internal::c1(const BondLength* msg) {
  return *msg->first_atom_.c1_;
}
const ::ReactionProto::MatchedAtomInComponent&
BondLength::_Internal::c2(const BondLength* msg) {
  return *msg->second_atom_.c2_;
}
void BondLength::set_allocated_c1(::ReactionProto::MatchedAtomInComponent* c1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_first_atom();
  if (c1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(c1);
    if (message_arena != submessage_arena) {
      c1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, c1, submessage_arena);
    }
    set_has_c1();
    first_atom_.c1_ = c1;
  }
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.BondLength.c1)
}
void BondLength::set_allocated_c2(::ReactionProto::MatchedAtomInComponent* c2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_second_atom();
  if (c2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(c2);
    if (message_arena != submessage_arena) {
      c2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, c2, submessage_arena);
    }
    set_has_c2();
    second_atom_.c2_ = c2;
  }
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.BondLength.c2)
}
BondLength::BondLength(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.BondLength)
}
BondLength::BondLength(const BondLength& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  distance_ = from.distance_;
  clear_has_first_atom();
  switch (from.first_atom_case()) {
    case kA1: {
      _internal_set_a1(from._internal_a1());
      break;
    }
    case kC1: {
      _internal_mutable_c1()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c1());
      break;
    }
    case FIRST_ATOM_NOT_SET: {
      break;
    }
  }
  clear_has_second_atom();
  switch (from.second_atom_case()) {
    case kA2: {
      _internal_set_a2(from._internal_a2());
      break;
    }
    case kC2: {
      _internal_mutable_c2()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c2());
      break;
    }
    case SECOND_ATOM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ReactionProto.BondLength)
}

void BondLength::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BondLength_Molecule_5fLib_2freaction_2eproto.base);
  distance_ = 0;
  clear_has_first_atom();
  clear_has_second_atom();
}

BondLength::~BondLength() {
  // @@protoc_insertion_point(destructor:ReactionProto.BondLength)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BondLength::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_first_atom()) {
    clear_first_atom();
  }
  if (has_second_atom()) {
    clear_second_atom();
  }
}

void BondLength::ArenaDtor(void* object) {
  BondLength* _this = reinterpret_cast< BondLength* >(object);
  (void)_this;
}
void BondLength::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BondLength::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BondLength& BondLength::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BondLength_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void BondLength::clear_first_atom() {
// @@protoc_insertion_point(one_of_clear_start:ReactionProto.BondLength)
  switch (first_atom_case()) {
    case kA1: {
      // No need to clear
      break;
    }
    case kC1: {
      if (GetArena() == nullptr) {
        delete first_atom_.c1_;
      }
      break;
    }
    case FIRST_ATOM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FIRST_ATOM_NOT_SET;
}

void BondLength::clear_second_atom() {
// @@protoc_insertion_point(one_of_clear_start:ReactionProto.BondLength)
  switch (second_atom_case()) {
    case kA2: {
      // No need to clear
      break;
    }
    case kC2: {
      if (GetArena() == nullptr) {
        delete second_atom_.c2_;
      }
      break;
    }
    case SECOND_ATOM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = SECOND_ATOM_NOT_SET;
}


void BondLength::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.BondLength)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distance_ = 0;
  clear_first_atom();
  clear_second_atom();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BondLength::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_a1(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ReactionProto.MatchedAtomInComponent c1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_c1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 a2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_a2(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ReactionProto.MatchedAtomInComponent c2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_c2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BondLength::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.BondLength)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (first_atom_case()) {
    case kA1: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_a1(), target);
      break;
    }
    case kC1: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::c1(this), target, stream);
      break;
    }
    default: ;
  }
  switch (second_atom_case()) {
    case kA2: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_a2(), target);
      break;
    }
    case kC2: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::c2(this), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional float distance = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.BondLength)
  return target;
}

size_t BondLength::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.BondLength)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float distance = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  switch (first_atom_case()) {
    // uint32 a1 = 1;
    case kA1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_a1());
      break;
    }
    // .ReactionProto.MatchedAtomInComponent c1 = 2;
    case kC1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *first_atom_.c1_);
      break;
    }
    case FIRST_ATOM_NOT_SET: {
      break;
    }
  }
  switch (second_atom_case()) {
    // uint32 a2 = 3;
    case kA2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_a2());
      break;
    }
    // .ReactionProto.MatchedAtomInComponent c2 = 4;
    case kC2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *second_atom_.c2_);
      break;
    }
    case SECOND_ATOM_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BondLength::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.BondLength)
  GOOGLE_DCHECK_NE(&from, this);
  const BondLength* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BondLength>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.BondLength)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.BondLength)
    MergeFrom(*source);
  }
}

void BondLength::MergeFrom(const BondLength& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.BondLength)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_distance()) {
    _internal_set_distance(from._internal_distance());
  }
  switch (from.first_atom_case()) {
    case kA1: {
      _internal_set_a1(from._internal_a1());
      break;
    }
    case kC1: {
      _internal_mutable_c1()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c1());
      break;
    }
    case FIRST_ATOM_NOT_SET: {
      break;
    }
  }
  switch (from.second_atom_case()) {
    case kA2: {
      _internal_set_a2(from._internal_a2());
      break;
    }
    case kC2: {
      _internal_mutable_c2()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c2());
      break;
    }
    case SECOND_ATOM_NOT_SET: {
      break;
    }
  }
}

void BondLength::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.BondLength)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BondLength::CopyFrom(const BondLength& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.BondLength)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BondLength::IsInitialized() const {
  return true;
}

void BondLength::InternalSwap(BondLength* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(distance_, other->distance_);
  swap(first_atom_, other->first_atom_);
  swap(second_atom_, other->second_atom_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BondLength::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BondAngle::_Internal {
 public:
  using HasBits = decltype(std::declval<BondAngle>()._has_bits_);
  static const ::ReactionProto::MatchedAtomInComponent& c1(const BondAngle* msg);
  static const ::ReactionProto::MatchedAtomInComponent& c2(const BondAngle* msg);
  static const ::ReactionProto::MatchedAtomInComponent& c3(const BondAngle* msg);
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ReactionProto::MatchedAtomInComponent&
BondAngle::_Internal::c1(const BondAngle* msg) {
  return *msg->atom1_.c1_;
}
const ::ReactionProto::MatchedAtomInComponent&
BondAngle::_Internal::c2(const BondAngle* msg) {
  return *msg->atom2_.c2_;
}
const ::ReactionProto::MatchedAtomInComponent&
BondAngle::_Internal::c3(const BondAngle* msg) {
  return *msg->atom3_.c3_;
}
void BondAngle::set_allocated_c1(::ReactionProto::MatchedAtomInComponent* c1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_atom1();
  if (c1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(c1);
    if (message_arena != submessage_arena) {
      c1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, c1, submessage_arena);
    }
    set_has_c1();
    atom1_.c1_ = c1;
  }
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.BondAngle.c1)
}
void BondAngle::set_allocated_c2(::ReactionProto::MatchedAtomInComponent* c2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_atom2();
  if (c2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(c2);
    if (message_arena != submessage_arena) {
      c2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, c2, submessage_arena);
    }
    set_has_c2();
    atom2_.c2_ = c2;
  }
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.BondAngle.c2)
}
void BondAngle::set_allocated_c3(::ReactionProto::MatchedAtomInComponent* c3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_atom3();
  if (c3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(c3);
    if (message_arena != submessage_arena) {
      c3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, c3, submessage_arena);
    }
    set_has_c3();
    atom3_.c3_ = c3;
  }
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.BondAngle.c3)
}
BondAngle::BondAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.BondAngle)
}
BondAngle::BondAngle(const BondAngle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  angle_ = from.angle_;
  clear_has_atom1();
  switch (from.atom1_case()) {
    case kA1: {
      _internal_set_a1(from._internal_a1());
      break;
    }
    case kC1: {
      _internal_mutable_c1()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c1());
      break;
    }
    case ATOM1_NOT_SET: {
      break;
    }
  }
  clear_has_atom2();
  switch (from.atom2_case()) {
    case kA2: {
      _internal_set_a2(from._internal_a2());
      break;
    }
    case kC2: {
      _internal_mutable_c2()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c2());
      break;
    }
    case ATOM2_NOT_SET: {
      break;
    }
  }
  clear_has_atom3();
  switch (from.atom3_case()) {
    case kA3: {
      _internal_set_a3(from._internal_a3());
      break;
    }
    case kC3: {
      _internal_mutable_c3()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c3());
      break;
    }
    case ATOM3_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ReactionProto.BondAngle)
}

void BondAngle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BondAngle_Molecule_5fLib_2freaction_2eproto.base);
  angle_ = 0;
  clear_has_atom1();
  clear_has_atom2();
  clear_has_atom3();
}

BondAngle::~BondAngle() {
  // @@protoc_insertion_point(destructor:ReactionProto.BondAngle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BondAngle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_atom1()) {
    clear_atom1();
  }
  if (has_atom2()) {
    clear_atom2();
  }
  if (has_atom3()) {
    clear_atom3();
  }
}

void BondAngle::ArenaDtor(void* object) {
  BondAngle* _this = reinterpret_cast< BondAngle* >(object);
  (void)_this;
}
void BondAngle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BondAngle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BondAngle& BondAngle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BondAngle_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void BondAngle::clear_atom1() {
// @@protoc_insertion_point(one_of_clear_start:ReactionProto.BondAngle)
  switch (atom1_case()) {
    case kA1: {
      // No need to clear
      break;
    }
    case kC1: {
      if (GetArena() == nullptr) {
        delete atom1_.c1_;
      }
      break;
    }
    case ATOM1_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ATOM1_NOT_SET;
}

void BondAngle::clear_atom2() {
// @@protoc_insertion_point(one_of_clear_start:ReactionProto.BondAngle)
  switch (atom2_case()) {
    case kA2: {
      // No need to clear
      break;
    }
    case kC2: {
      if (GetArena() == nullptr) {
        delete atom2_.c2_;
      }
      break;
    }
    case ATOM2_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = ATOM2_NOT_SET;
}

void BondAngle::clear_atom3() {
// @@protoc_insertion_point(one_of_clear_start:ReactionProto.BondAngle)
  switch (atom3_case()) {
    case kA3: {
      // No need to clear
      break;
    }
    case kC3: {
      if (GetArena() == nullptr) {
        delete atom3_.c3_;
      }
      break;
    }
    case ATOM3_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = ATOM3_NOT_SET;
}


void BondAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.BondAngle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  angle_ = 0;
  clear_atom1();
  clear_atom2();
  clear_atom3();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BondAngle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_a1(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ReactionProto.MatchedAtomInComponent c1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_c1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 a2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_a2(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ReactionProto.MatchedAtomInComponent c2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_c2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 a3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_a3(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ReactionProto.MatchedAtomInComponent c3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_c3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float angle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BondAngle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.BondAngle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (atom1_case()) {
    case kA1: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_a1(), target);
      break;
    }
    case kC1: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::c1(this), target, stream);
      break;
    }
    default: ;
  }
  switch (atom2_case()) {
    case kA2: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_a2(), target);
      break;
    }
    case kC2: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::c2(this), target, stream);
      break;
    }
    default: ;
  }
  switch (atom3_case()) {
    case kA3: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_a3(), target);
      break;
    }
    case kC3: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::c3(this), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional float angle = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.BondAngle)
  return target;
}

size_t BondAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.BondAngle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float angle = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  switch (atom1_case()) {
    // uint32 a1 = 1;
    case kA1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_a1());
      break;
    }
    // .ReactionProto.MatchedAtomInComponent c1 = 2;
    case kC1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *atom1_.c1_);
      break;
    }
    case ATOM1_NOT_SET: {
      break;
    }
  }
  switch (atom2_case()) {
    // uint32 a2 = 3;
    case kA2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_a2());
      break;
    }
    // .ReactionProto.MatchedAtomInComponent c2 = 4;
    case kC2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *atom2_.c2_);
      break;
    }
    case ATOM2_NOT_SET: {
      break;
    }
  }
  switch (atom3_case()) {
    // uint32 a3 = 5;
    case kA3: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_a3());
      break;
    }
    // .ReactionProto.MatchedAtomInComponent c3 = 6;
    case kC3: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *atom3_.c3_);
      break;
    }
    case ATOM3_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BondAngle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.BondAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const BondAngle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BondAngle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.BondAngle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.BondAngle)
    MergeFrom(*source);
  }
}

void BondAngle::MergeFrom(const BondAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.BondAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_angle()) {
    _internal_set_angle(from._internal_angle());
  }
  switch (from.atom1_case()) {
    case kA1: {
      _internal_set_a1(from._internal_a1());
      break;
    }
    case kC1: {
      _internal_mutable_c1()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c1());
      break;
    }
    case ATOM1_NOT_SET: {
      break;
    }
  }
  switch (from.atom2_case()) {
    case kA2: {
      _internal_set_a2(from._internal_a2());
      break;
    }
    case kC2: {
      _internal_mutable_c2()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c2());
      break;
    }
    case ATOM2_NOT_SET: {
      break;
    }
  }
  switch (from.atom3_case()) {
    case kA3: {
      _internal_set_a3(from._internal_a3());
      break;
    }
    case kC3: {
      _internal_mutable_c3()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c3());
      break;
    }
    case ATOM3_NOT_SET: {
      break;
    }
  }
}

void BondAngle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.BondAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BondAngle::CopyFrom(const BondAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.BondAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BondAngle::IsInitialized() const {
  return true;
}

void BondAngle::InternalSwap(BondAngle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(angle_, other->angle_);
  swap(atom1_, other->atom1_);
  swap(atom2_, other->atom2_);
  swap(atom3_, other->atom3_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BondAngle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DihedralAngle::_Internal {
 public:
  using HasBits = decltype(std::declval<DihedralAngle>()._has_bits_);
  static const ::ReactionProto::MatchedAtomInComponent& c1(const DihedralAngle* msg);
  static const ::ReactionProto::MatchedAtomInComponent& c2(const DihedralAngle* msg);
  static const ::ReactionProto::MatchedAtomInComponent& c3(const DihedralAngle* msg);
  static const ::ReactionProto::MatchedAtomInComponent& c4(const DihedralAngle* msg);
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ReactionProto::MatchedAtomInComponent&
DihedralAngle::_Internal::c1(const DihedralAngle* msg) {
  return *msg->atom1_.c1_;
}
const ::ReactionProto::MatchedAtomInComponent&
DihedralAngle::_Internal::c2(const DihedralAngle* msg) {
  return *msg->atom2_.c2_;
}
const ::ReactionProto::MatchedAtomInComponent&
DihedralAngle::_Internal::c3(const DihedralAngle* msg) {
  return *msg->atom3_.c3_;
}
const ::ReactionProto::MatchedAtomInComponent&
DihedralAngle::_Internal::c4(const DihedralAngle* msg) {
  return *msg->atom4_.c4_;
}
void DihedralAngle::set_allocated_c1(::ReactionProto::MatchedAtomInComponent* c1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_atom1();
  if (c1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(c1);
    if (message_arena != submessage_arena) {
      c1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, c1, submessage_arena);
    }
    set_has_c1();
    atom1_.c1_ = c1;
  }
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.DihedralAngle.c1)
}
void DihedralAngle::set_allocated_c2(::ReactionProto::MatchedAtomInComponent* c2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_atom2();
  if (c2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(c2);
    if (message_arena != submessage_arena) {
      c2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, c2, submessage_arena);
    }
    set_has_c2();
    atom2_.c2_ = c2;
  }
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.DihedralAngle.c2)
}
void DihedralAngle::set_allocated_c3(::ReactionProto::MatchedAtomInComponent* c3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_atom3();
  if (c3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(c3);
    if (message_arena != submessage_arena) {
      c3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, c3, submessage_arena);
    }
    set_has_c3();
    atom3_.c3_ = c3;
  }
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.DihedralAngle.c3)
}
void DihedralAngle::set_allocated_c4(::ReactionProto::MatchedAtomInComponent* c4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_atom4();
  if (c4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(c4);
    if (message_arena != submessage_arena) {
      c4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, c4, submessage_arena);
    }
    set_has_c4();
    atom4_.c4_ = c4;
  }
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.DihedralAngle.c4)
}
DihedralAngle::DihedralAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.DihedralAngle)
}
DihedralAngle::DihedralAngle(const DihedralAngle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  angle_ = from.angle_;
  clear_has_atom1();
  switch (from.atom1_case()) {
    case kA1: {
      _internal_set_a1(from._internal_a1());
      break;
    }
    case kC1: {
      _internal_mutable_c1()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c1());
      break;
    }
    case ATOM1_NOT_SET: {
      break;
    }
  }
  clear_has_atom2();
  switch (from.atom2_case()) {
    case kA2: {
      _internal_set_a2(from._internal_a2());
      break;
    }
    case kC2: {
      _internal_mutable_c2()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c2());
      break;
    }
    case ATOM2_NOT_SET: {
      break;
    }
  }
  clear_has_atom3();
  switch (from.atom3_case()) {
    case kA3: {
      _internal_set_a3(from._internal_a3());
      break;
    }
    case kC3: {
      _internal_mutable_c3()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c3());
      break;
    }
    case ATOM3_NOT_SET: {
      break;
    }
  }
  clear_has_atom4();
  switch (from.atom4_case()) {
    case kA4: {
      _internal_set_a4(from._internal_a4());
      break;
    }
    case kC4: {
      _internal_mutable_c4()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c4());
      break;
    }
    case ATOM4_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ReactionProto.DihedralAngle)
}

void DihedralAngle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DihedralAngle_Molecule_5fLib_2freaction_2eproto.base);
  angle_ = 0;
  clear_has_atom1();
  clear_has_atom2();
  clear_has_atom3();
  clear_has_atom4();
}

DihedralAngle::~DihedralAngle() {
  // @@protoc_insertion_point(destructor:ReactionProto.DihedralAngle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DihedralAngle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_atom1()) {
    clear_atom1();
  }
  if (has_atom2()) {
    clear_atom2();
  }
  if (has_atom3()) {
    clear_atom3();
  }
  if (has_atom4()) {
    clear_atom4();
  }
}

void DihedralAngle::ArenaDtor(void* object) {
  DihedralAngle* _this = reinterpret_cast< DihedralAngle* >(object);
  (void)_this;
}
void DihedralAngle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DihedralAngle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DihedralAngle& DihedralAngle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DihedralAngle_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void DihedralAngle::clear_atom1() {
// @@protoc_insertion_point(one_of_clear_start:ReactionProto.DihedralAngle)
  switch (atom1_case()) {
    case kA1: {
      // No need to clear
      break;
    }
    case kC1: {
      if (GetArena() == nullptr) {
        delete atom1_.c1_;
      }
      break;
    }
    case ATOM1_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ATOM1_NOT_SET;
}

void DihedralAngle::clear_atom2() {
// @@protoc_insertion_point(one_of_clear_start:ReactionProto.DihedralAngle)
  switch (atom2_case()) {
    case kA2: {
      // No need to clear
      break;
    }
    case kC2: {
      if (GetArena() == nullptr) {
        delete atom2_.c2_;
      }
      break;
    }
    case ATOM2_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = ATOM2_NOT_SET;
}

void DihedralAngle::clear_atom3() {
// @@protoc_insertion_point(one_of_clear_start:ReactionProto.DihedralAngle)
  switch (atom3_case()) {
    case kA3: {
      // No need to clear
      break;
    }
    case kC3: {
      if (GetArena() == nullptr) {
        delete atom3_.c3_;
      }
      break;
    }
    case ATOM3_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = ATOM3_NOT_SET;
}

void DihedralAngle::clear_atom4() {
// @@protoc_insertion_point(one_of_clear_start:ReactionProto.DihedralAngle)
  switch (atom4_case()) {
    case kA4: {
      // No need to clear
      break;
    }
    case kC4: {
      if (GetArena() == nullptr) {
        delete atom4_.c4_;
      }
      break;
    }
    case ATOM4_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = ATOM4_NOT_SET;
}


void DihedralAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.DihedralAngle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  angle_ = 0;
  clear_atom1();
  clear_atom2();
  clear_atom3();
  clear_atom4();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DihedralAngle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_a1(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ReactionProto.MatchedAtomInComponent c1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_c1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 a2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_a2(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ReactionProto.MatchedAtomInComponent c2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_c2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 a3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_a3(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ReactionProto.MatchedAtomInComponent c3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_c3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 a4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_a4(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ReactionProto.MatchedAtomInComponent c4 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_c4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float angle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DihedralAngle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.DihedralAngle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (atom1_case()) {
    case kA1: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_a1(), target);
      break;
    }
    case kC1: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::c1(this), target, stream);
      break;
    }
    default: ;
  }
  switch (atom2_case()) {
    case kA2: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_a2(), target);
      break;
    }
    case kC2: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::c2(this), target, stream);
      break;
    }
    default: ;
  }
  switch (atom3_case()) {
    case kA3: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_a3(), target);
      break;
    }
    case kC3: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::c3(this), target, stream);
      break;
    }
    default: ;
  }
  switch (atom4_case()) {
    case kA4: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_a4(), target);
      break;
    }
    case kC4: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::c4(this), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional float angle = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.DihedralAngle)
  return target;
}

size_t DihedralAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.DihedralAngle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float angle = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  switch (atom1_case()) {
    // uint32 a1 = 1;
    case kA1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_a1());
      break;
    }
    // .ReactionProto.MatchedAtomInComponent c1 = 2;
    case kC1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *atom1_.c1_);
      break;
    }
    case ATOM1_NOT_SET: {
      break;
    }
  }
  switch (atom2_case()) {
    // uint32 a2 = 3;
    case kA2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_a2());
      break;
    }
    // .ReactionProto.MatchedAtomInComponent c2 = 4;
    case kC2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *atom2_.c2_);
      break;
    }
    case ATOM2_NOT_SET: {
      break;
    }
  }
  switch (atom3_case()) {
    // uint32 a3 = 5;
    case kA3: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_a3());
      break;
    }
    // .ReactionProto.MatchedAtomInComponent c3 = 6;
    case kC3: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *atom3_.c3_);
      break;
    }
    case ATOM3_NOT_SET: {
      break;
    }
  }
  switch (atom4_case()) {
    // uint32 a4 = 7;
    case kA4: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_a4());
      break;
    }
    // .ReactionProto.MatchedAtomInComponent c4 = 8;
    case kC4: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *atom4_.c4_);
      break;
    }
    case ATOM4_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DihedralAngle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.DihedralAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const DihedralAngle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DihedralAngle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.DihedralAngle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.DihedralAngle)
    MergeFrom(*source);
  }
}

void DihedralAngle::MergeFrom(const DihedralAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.DihedralAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_angle()) {
    _internal_set_angle(from._internal_angle());
  }
  switch (from.atom1_case()) {
    case kA1: {
      _internal_set_a1(from._internal_a1());
      break;
    }
    case kC1: {
      _internal_mutable_c1()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c1());
      break;
    }
    case ATOM1_NOT_SET: {
      break;
    }
  }
  switch (from.atom2_case()) {
    case kA2: {
      _internal_set_a2(from._internal_a2());
      break;
    }
    case kC2: {
      _internal_mutable_c2()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c2());
      break;
    }
    case ATOM2_NOT_SET: {
      break;
    }
  }
  switch (from.atom3_case()) {
    case kA3: {
      _internal_set_a3(from._internal_a3());
      break;
    }
    case kC3: {
      _internal_mutable_c3()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c3());
      break;
    }
    case ATOM3_NOT_SET: {
      break;
    }
  }
  switch (from.atom4_case()) {
    case kA4: {
      _internal_set_a4(from._internal_a4());
      break;
    }
    case kC4: {
      _internal_mutable_c4()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_c4());
      break;
    }
    case ATOM4_NOT_SET: {
      break;
    }
  }
}

void DihedralAngle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.DihedralAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DihedralAngle::CopyFrom(const DihedralAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.DihedralAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DihedralAngle::IsInitialized() const {
  return true;
}

void DihedralAngle::InternalSwap(DihedralAngle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(angle_, other->angle_);
  swap(atom1_, other->atom1_);
  swap(atom2_, other->atom2_);
  swap(atom3_, other->atom3_);
  swap(atom4_, other->atom4_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  swap(_oneof_case_[3], other->_oneof_case_[3]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DihedralAngle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RotateFragment::_Internal {
 public:
  using HasBits = decltype(std::declval<RotateFragment>()._has_bits_);
  static const ::ReactionProto::MatchedAtomInComponent& cspec(const RotateFragment* msg);
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ReactionProto::MatchedAtomInComponent&
RotateFragment::_Internal::cspec(const RotateFragment* msg) {
  return *msg->the_atom_.cspec_;
}
void RotateFragment::set_allocated_cspec(::ReactionProto::MatchedAtomInComponent* cspec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_the_atom();
  if (cspec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cspec);
    if (message_arena != submessage_arena) {
      cspec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cspec, submessage_arena);
    }
    set_has_cspec();
    the_atom_.cspec_ = cspec;
  }
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.RotateFragment.cspec)
}
RotateFragment::RotateFragment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.RotateFragment)
}
RotateFragment::RotateFragment(const RotateFragment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  angle_ = from.angle_;
  clear_has_the_atom();
  switch (from.the_atom_case()) {
    case kAtom: {
      _internal_set_atom(from._internal_atom());
      break;
    }
    case kCspec: {
      _internal_mutable_cspec()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_cspec());
      break;
    }
    case THE_ATOM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ReactionProto.RotateFragment)
}

void RotateFragment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RotateFragment_Molecule_5fLib_2freaction_2eproto.base);
  angle_ = 0;
  clear_has_the_atom();
}

RotateFragment::~RotateFragment() {
  // @@protoc_insertion_point(destructor:ReactionProto.RotateFragment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RotateFragment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_the_atom()) {
    clear_the_atom();
  }
}

void RotateFragment::ArenaDtor(void* object) {
  RotateFragment* _this = reinterpret_cast< RotateFragment* >(object);
  (void)_this;
}
void RotateFragment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RotateFragment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RotateFragment& RotateFragment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RotateFragment_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void RotateFragment::clear_the_atom() {
// @@protoc_insertion_point(one_of_clear_start:ReactionProto.RotateFragment)
  switch (the_atom_case()) {
    case kAtom: {
      // No need to clear
      break;
    }
    case kCspec: {
      if (GetArena() == nullptr) {
        delete the_atom_.cspec_;
      }
      break;
    }
    case THE_ATOM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = THE_ATOM_NOT_SET;
}


void RotateFragment::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.RotateFragment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  angle_ = 0;
  clear_the_atom();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RotateFragment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 atom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_atom(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ReactionProto.MatchedAtomInComponent cspec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cspec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RotateFragment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.RotateFragment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (the_atom_case()) {
    case kAtom: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_atom(), target);
      break;
    }
    case kCspec: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::cspec(this), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional float angle = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.RotateFragment)
  return target;
}

size_t RotateFragment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.RotateFragment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float angle = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  switch (the_atom_case()) {
    // uint32 atom = 1;
    case kAtom: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_atom());
      break;
    }
    // .ReactionProto.MatchedAtomInComponent cspec = 2;
    case kCspec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *the_atom_.cspec_);
      break;
    }
    case THE_ATOM_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RotateFragment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.RotateFragment)
  GOOGLE_DCHECK_NE(&from, this);
  const RotateFragment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RotateFragment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.RotateFragment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.RotateFragment)
    MergeFrom(*source);
  }
}

void RotateFragment::MergeFrom(const RotateFragment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.RotateFragment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_angle()) {
    _internal_set_angle(from._internal_angle());
  }
  switch (from.the_atom_case()) {
    case kAtom: {
      _internal_set_atom(from._internal_atom());
      break;
    }
    case kCspec: {
      _internal_mutable_cspec()->::ReactionProto::MatchedAtomInComponent::MergeFrom(from._internal_cspec());
      break;
    }
    case THE_ATOM_NOT_SET: {
      break;
    }
  }
}

void RotateFragment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.RotateFragment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotateFragment::CopyFrom(const RotateFragment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.RotateFragment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotateFragment::IsInitialized() const {
  return true;
}

void RotateFragment::InternalSwap(RotateFragment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(angle_, other->angle_);
  swap(the_atom_, other->the_atom_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RotateFragment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ThreeDReplace::_Internal {
 public:
};

ThreeDReplace::ThreeDReplace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  a1_(arena),
  a2_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.ThreeDReplace)
}
ThreeDReplace::ThreeDReplace(const ThreeDReplace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      a1_(from.a1_),
      a2_(from.a2_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ReactionProto.ThreeDReplace)
}

void ThreeDReplace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ThreeDReplace_Molecule_5fLib_2freaction_2eproto.base);
}

ThreeDReplace::~ThreeDReplace() {
  // @@protoc_insertion_point(destructor:ReactionProto.ThreeDReplace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThreeDReplace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ThreeDReplace::ArenaDtor(void* object) {
  ThreeDReplace* _this = reinterpret_cast< ThreeDReplace* >(object);
  (void)_this;
}
void ThreeDReplace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThreeDReplace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThreeDReplace& ThreeDReplace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThreeDReplace_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void ThreeDReplace::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.ThreeDReplace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a1_.Clear();
  a2_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThreeDReplace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ReactionProto.MatchedAtomInComponent a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_a1(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.MatchedAtomInComponent a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_a2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThreeDReplace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.ThreeDReplace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ReactionProto.MatchedAtomInComponent a1 = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_a1_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_a1(i), target, stream);
  }

  // repeated .ReactionProto.MatchedAtomInComponent a2 = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_a2_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_a2(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.ThreeDReplace)
  return target;
}

size_t ThreeDReplace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.ThreeDReplace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ReactionProto.MatchedAtomInComponent a1 = 1;
  total_size += 1UL * this->_internal_a1_size();
  for (const auto& msg : this->a1_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.MatchedAtomInComponent a2 = 2;
  total_size += 1UL * this->_internal_a2_size();
  for (const auto& msg : this->a2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThreeDReplace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.ThreeDReplace)
  GOOGLE_DCHECK_NE(&from, this);
  const ThreeDReplace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThreeDReplace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.ThreeDReplace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.ThreeDReplace)
    MergeFrom(*source);
  }
}

void ThreeDReplace::MergeFrom(const ThreeDReplace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.ThreeDReplace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  a1_.MergeFrom(from.a1_);
  a2_.MergeFrom(from.a2_);
}

void ThreeDReplace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.ThreeDReplace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThreeDReplace::CopyFrom(const ThreeDReplace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.ThreeDReplace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreeDReplace::IsInitialized() const {
  return true;
}

void ThreeDReplace::InternalSwap(ThreeDReplace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  a1_.InternalSwap(&other->a1_);
  a2_.InternalSwap(&other->a2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThreeDReplace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NoReaction::_Internal {
 public:
  using HasBits = decltype(std::declval<NoReaction>()._has_bits_);
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SubstructureSearch::SubstructureQuery& scaffold_no_reaction(const NoReaction* msg);
  static void set_has_scaffold_no_reaction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::SubstructureSearch::SubstructureQuery& sidechain_no_reaction(const NoReaction* msg);
  static void set_has_sidechain_no_reaction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::SubstructureSearch::SubstructureQuery&
NoReaction::_Internal::scaffold_no_reaction(const NoReaction* msg) {
  return *msg->scaffold_no_reaction_;
}
const ::SubstructureSearch::SubstructureQuery&
NoReaction::_Internal::sidechain_no_reaction(const NoReaction* msg) {
  return *msg->sidechain_no_reaction_;
}
void NoReaction::clear_scaffold_no_reaction() {
  if (scaffold_no_reaction_ != nullptr) scaffold_no_reaction_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void NoReaction::clear_sidechain_no_reaction() {
  if (sidechain_no_reaction_ != nullptr) sidechain_no_reaction_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
NoReaction::NoReaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.NoReaction)
}
NoReaction::NoReaction(const NoReaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_comment()) {
    comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_comment(),
      GetArena());
  }
  if (from._internal_has_scaffold_no_reaction()) {
    scaffold_no_reaction_ = new ::SubstructureSearch::SubstructureQuery(*from.scaffold_no_reaction_);
  } else {
    scaffold_no_reaction_ = nullptr;
  }
  if (from._internal_has_sidechain_no_reaction()) {
    sidechain_no_reaction_ = new ::SubstructureSearch::SubstructureQuery(*from.sidechain_no_reaction_);
  } else {
    sidechain_no_reaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ReactionProto.NoReaction)
}

void NoReaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NoReaction_Molecule_5fLib_2freaction_2eproto.base);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&scaffold_no_reaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sidechain_no_reaction_) -
      reinterpret_cast<char*>(&scaffold_no_reaction_)) + sizeof(sidechain_no_reaction_));
}

NoReaction::~NoReaction() {
  // @@protoc_insertion_point(destructor:ReactionProto.NoReaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NoReaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scaffold_no_reaction_;
  if (this != internal_default_instance()) delete sidechain_no_reaction_;
}

void NoReaction::ArenaDtor(void* object) {
  NoReaction* _this = reinterpret_cast< NoReaction* >(object);
  (void)_this;
}
void NoReaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NoReaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NoReaction& NoReaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NoReaction_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void NoReaction::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.NoReaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      comment_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(scaffold_no_reaction_ != nullptr);
      scaffold_no_reaction_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sidechain_no_reaction_ != nullptr);
      sidechain_no_reaction_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoReaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string comment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReactionProto.NoReaction.comment");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SubstructureSearch.SubstructureQuery scaffold_no_reaction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scaffold_no_reaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SubstructureSearch.SubstructureQuery sidechain_no_reaction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sidechain_no_reaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NoReaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.NoReaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string comment = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ReactionProto.NoReaction.comment");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_comment(), target);
  }

  // optional .SubstructureSearch.SubstructureQuery scaffold_no_reaction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::scaffold_no_reaction(this), target, stream);
  }

  // optional .SubstructureSearch.SubstructureQuery sidechain_no_reaction = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sidechain_no_reaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.NoReaction)
  return target;
}

size_t NoReaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.NoReaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string comment = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comment());
    }

    // optional .SubstructureSearch.SubstructureQuery scaffold_no_reaction = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scaffold_no_reaction_);
    }

    // optional .SubstructureSearch.SubstructureQuery sidechain_no_reaction = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sidechain_no_reaction_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoReaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.NoReaction)
  GOOGLE_DCHECK_NE(&from, this);
  const NoReaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NoReaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.NoReaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.NoReaction)
    MergeFrom(*source);
  }
}

void NoReaction::MergeFrom(const NoReaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.NoReaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_comment(from._internal_comment());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_scaffold_no_reaction()->::SubstructureSearch::SubstructureQuery::MergeFrom(from._internal_scaffold_no_reaction());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_sidechain_no_reaction()->::SubstructureSearch::SubstructureQuery::MergeFrom(from._internal_sidechain_no_reaction());
    }
  }
}

void NoReaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.NoReaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoReaction::CopyFrom(const NoReaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.NoReaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoReaction::IsInitialized() const {
  return true;
}

void NoReaction::InternalSwap(NoReaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NoReaction, sidechain_no_reaction_)
      + sizeof(NoReaction::sidechain_no_reaction_)
      - PROTOBUF_FIELD_OFFSET(NoReaction, scaffold_no_reaction_)>(
          reinterpret_cast<char*>(&scaffold_no_reaction_),
          reinterpret_cast<char*>(&other->scaffold_no_reaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NoReaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReactionSite::_Internal {
 public:
  using HasBits = decltype(std::declval<ReactionSite>()._has_bits_);
  static const ::SubstructureSearch::SubstructureQuery& query(const ReactionSite* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ToggleKekuleForm::ToggleKekuleForm& toggle_kekule_form(const ReactionSite* msg);
  static void set_has_toggle_kekule_form(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ignore_multiple_matches_involving_atoms_not_changing(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ignore_multiple_matches_involving_changing_atoms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_noop_reaction(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::SubstructureSearch::SubstructureQuery&
ReactionSite::_Internal::query(const ReactionSite* msg) {
  return *msg->query_;
}
const ::ToggleKekuleForm::ToggleKekuleForm&
ReactionSite::_Internal::toggle_kekule_form(const ReactionSite* msg) {
  return *msg->toggle_kekule_form_;
}
void ReactionSite::clear_query() {
  if (query_ != nullptr) query_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ReactionSite::clear_inactive() {
  inactive_.Clear();
}
void ReactionSite::clear_toggle_kekule_form() {
  if (toggle_kekule_form_ != nullptr) toggle_kekule_form_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ReactionSite::ReactionSite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  make_bond_(arena),
  break_bond_(arena),
  remove_atom_(arena),
  remove_fragment_(arena),
  keep_fragment_(arena),
  change_element_(arena),
  formal_charge_(arena),
  change_formal_charge_(arena),
  isotope_(arena),
  change_isotope_(arena),
  invert_isotope_(arena),
  bond_length_(arena),
  bond_angle_(arena),
  dihedral_angle_(arena),
  reaction_3d_replace_(arena),
  wedge_bonds_(arena),
  replace_atom_(arena),
  unfix_implicit_hydrogens_(arena),
  inactive_(arena),
  invert_chirality_(arena),
  remove_chirality_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.ReactionSite)
}
ReactionSite::ReactionSite(const ReactionSite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      make_bond_(from.make_bond_),
      break_bond_(from.break_bond_),
      remove_atom_(from.remove_atom_),
      remove_fragment_(from.remove_fragment_),
      keep_fragment_(from.keep_fragment_),
      change_element_(from.change_element_),
      formal_charge_(from.formal_charge_),
      change_formal_charge_(from.change_formal_charge_),
      isotope_(from.isotope_),
      change_isotope_(from.change_isotope_),
      invert_isotope_(from.invert_isotope_),
      bond_length_(from.bond_length_),
      bond_angle_(from.bond_angle_),
      dihedral_angle_(from.dihedral_angle_),
      reaction_3d_replace_(from.reaction_3d_replace_),
      wedge_bonds_(from.wedge_bonds_),
      replace_atom_(from.replace_atom_),
      unfix_implicit_hydrogens_(from.unfix_implicit_hydrogens_),
      inactive_(from.inactive_),
      invert_chirality_(from.invert_chirality_),
      remove_chirality_(from.remove_chirality_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_comment()) {
    comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_comment(),
      GetArena());
  }
  if (from._internal_has_query()) {
    query_ = new ::SubstructureSearch::SubstructureQuery(*from.query_);
  } else {
    query_ = nullptr;
  }
  if (from._internal_has_toggle_kekule_form()) {
    toggle_kekule_form_ = new ::ToggleKekuleForm::ToggleKekuleForm(*from.toggle_kekule_form_);
  } else {
    toggle_kekule_form_ = nullptr;
  }
  ::memcpy(&ignore_multiple_matches_involving_atoms_not_changing_, &from.ignore_multiple_matches_involving_atoms_not_changing_,
    static_cast<size_t>(reinterpret_cast<char*>(&noop_reaction_) -
    reinterpret_cast<char*>(&ignore_multiple_matches_involving_atoms_not_changing_)) + sizeof(noop_reaction_));
  // @@protoc_insertion_point(copy_constructor:ReactionProto.ReactionSite)
}

void ReactionSite::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReactionSite_Molecule_5fLib_2freaction_2eproto.base);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&query_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&noop_reaction_) -
      reinterpret_cast<char*>(&query_)) + sizeof(noop_reaction_));
}

ReactionSite::~ReactionSite() {
  // @@protoc_insertion_point(destructor:ReactionProto.ReactionSite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReactionSite::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete query_;
  if (this != internal_default_instance()) delete toggle_kekule_form_;
}

void ReactionSite::ArenaDtor(void* object) {
  ReactionSite* _this = reinterpret_cast< ReactionSite* >(object);
  (void)_this;
}
void ReactionSite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReactionSite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReactionSite& ReactionSite::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReactionSite_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void ReactionSite::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.ReactionSite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  make_bond_.Clear();
  break_bond_.Clear();
  remove_atom_.Clear();
  remove_fragment_.Clear();
  keep_fragment_.Clear();
  change_element_.Clear();
  formal_charge_.Clear();
  change_formal_charge_.Clear();
  isotope_.Clear();
  change_isotope_.Clear();
  invert_isotope_.Clear();
  bond_length_.Clear();
  bond_angle_.Clear();
  dihedral_angle_.Clear();
  reaction_3d_replace_.Clear();
  wedge_bonds_.Clear();
  replace_atom_.Clear();
  unfix_implicit_hydrogens_.Clear();
  inactive_.Clear();
  invert_chirality_.Clear();
  remove_chirality_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      comment_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(query_ != nullptr);
      query_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(toggle_kekule_form_ != nullptr);
      toggle_kekule_form_->Clear();
    }
  }
  ::memset(&ignore_multiple_matches_involving_atoms_not_changing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&noop_reaction_) -
      reinterpret_cast<char*>(&ignore_multiple_matches_involving_atoms_not_changing_)) + sizeof(noop_reaction_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReactionSite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .SubstructureSearch.SubstructureQuery query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReactionProto.ReactionSite.comment");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.BondToBeMade make_bond = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_make_bond(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.PairOfAtoms break_bond = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_break_bond(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 remove_atom = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_remove_atom(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_remove_atom(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 remove_fragment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_remove_fragment(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_remove_fragment(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 keep_fragment = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_keep_fragment(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_keep_fragment(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.ChangeElement change_element = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_change_element(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.FormalCharge formal_charge = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formal_charge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.ChangeFormalCharge change_formal_charge = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_change_formal_charge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.PlaceIsotope isotope = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_isotope(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.IncrementIsotope change_isotope = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_change_isotope(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.PlaceIsotope invert_isotope = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_invert_isotope(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.BondLength bond_length = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bond_length(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.BondAngle bond_angle = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bond_angle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.DihedralAngle dihedral_angle = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_dihedral_angle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.ThreeDReplace reaction_3d_replace = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_reaction_3d_replace(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.WedgeBond wedge_bonds = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_wedge_bonds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.ReplaceAtom replace_atom = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_replace_atom(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 unfix_implicit_hydrogens = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unfix_implicit_hydrogens(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<160>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_unfix_implicit_hydrogens(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.SubstructureQuery inactive = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_inactive(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 invert_chirality = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_invert_chirality(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<176>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_invert_chirality(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 remove_chirality = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_remove_chirality(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<184>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_remove_chirality(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ToggleKekuleForm.ToggleKekuleForm toggle_kekule_form = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_toggle_kekule_form(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ignore_multiple_matches_involving_atoms_not_changing = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_ignore_multiple_matches_involving_atoms_not_changing(&has_bits);
          ignore_multiple_matches_involving_atoms_not_changing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ignore_multiple_matches_involving_changing_atoms = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_ignore_multiple_matches_involving_changing_atoms(&has_bits);
          ignore_multiple_matches_involving_changing_atoms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool noop_reaction = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_noop_reaction(&has_bits);
          noop_reaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReactionSite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.ReactionSite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SubstructureSearch.SubstructureQuery query = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::query(this), target, stream);
  }

  // optional string comment = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ReactionProto.ReactionSite.comment");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_comment(), target);
  }

  // repeated .ReactionProto.BondToBeMade make_bond = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_make_bond_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_make_bond(i), target, stream);
  }

  // repeated .ReactionProto.PairOfAtoms break_bond = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_break_bond_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_break_bond(i), target, stream);
  }

  // repeated int32 remove_atom = 5;
  for (int i = 0, n = this->_internal_remove_atom_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_remove_atom(i), target);
  }

  // repeated int32 remove_fragment = 6;
  for (int i = 0, n = this->_internal_remove_fragment_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_remove_fragment(i), target);
  }

  // repeated int32 keep_fragment = 7;
  for (int i = 0, n = this->_internal_keep_fragment_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_keep_fragment(i), target);
  }

  // repeated .ReactionProto.ChangeElement change_element = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_change_element_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_change_element(i), target, stream);
  }

  // repeated .ReactionProto.FormalCharge formal_charge = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_formal_charge_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_formal_charge(i), target, stream);
  }

  // repeated .ReactionProto.ChangeFormalCharge change_formal_charge = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_change_formal_charge_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_change_formal_charge(i), target, stream);
  }

  // repeated .ReactionProto.PlaceIsotope isotope = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_isotope_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_isotope(i), target, stream);
  }

  // repeated .ReactionProto.IncrementIsotope change_isotope = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_change_isotope_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_change_isotope(i), target, stream);
  }

  // repeated .ReactionProto.PlaceIsotope invert_isotope = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_invert_isotope_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_invert_isotope(i), target, stream);
  }

  // repeated .ReactionProto.BondLength bond_length = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bond_length_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_bond_length(i), target, stream);
  }

  // repeated .ReactionProto.BondAngle bond_angle = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bond_angle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_bond_angle(i), target, stream);
  }

  // repeated .ReactionProto.DihedralAngle dihedral_angle = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dihedral_angle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_dihedral_angle(i), target, stream);
  }

  // repeated .ReactionProto.ThreeDReplace reaction_3d_replace = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reaction_3d_replace_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_reaction_3d_replace(i), target, stream);
  }

  // repeated .ReactionProto.WedgeBond wedge_bonds = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_wedge_bonds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_wedge_bonds(i), target, stream);
  }

  // repeated .ReactionProto.ReplaceAtom replace_atom = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_replace_atom_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_replace_atom(i), target, stream);
  }

  // repeated int32 unfix_implicit_hydrogens = 20;
  for (int i = 0, n = this->_internal_unfix_implicit_hydrogens_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_unfix_implicit_hydrogens(i), target);
  }

  // repeated .SubstructureSearch.SubstructureQuery inactive = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inactive_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_inactive(i), target, stream);
  }

  // repeated int32 invert_chirality = 22;
  for (int i = 0, n = this->_internal_invert_chirality_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_invert_chirality(i), target);
  }

  // repeated int32 remove_chirality = 23;
  for (int i = 0, n = this->_internal_remove_chirality_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_remove_chirality(i), target);
  }

  // optional .ToggleKekuleForm.ToggleKekuleForm toggle_kekule_form = 24;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::toggle_kekule_form(this), target, stream);
  }

  // optional bool ignore_multiple_matches_involving_atoms_not_changing = 25;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_ignore_multiple_matches_involving_atoms_not_changing(), target);
  }

  // optional bool ignore_multiple_matches_involving_changing_atoms = 27;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_ignore_multiple_matches_involving_changing_atoms(), target);
  }

  // optional bool noop_reaction = 28;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_noop_reaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.ReactionSite)
  return target;
}

size_t ReactionSite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.ReactionSite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ReactionProto.BondToBeMade make_bond = 3;
  total_size += 1UL * this->_internal_make_bond_size();
  for (const auto& msg : this->make_bond_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.PairOfAtoms break_bond = 4;
  total_size += 1UL * this->_internal_break_bond_size();
  for (const auto& msg : this->break_bond_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 remove_atom = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->remove_atom_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_remove_atom_size());
    total_size += data_size;
  }

  // repeated int32 remove_fragment = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->remove_fragment_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_remove_fragment_size());
    total_size += data_size;
  }

  // repeated int32 keep_fragment = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->keep_fragment_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_keep_fragment_size());
    total_size += data_size;
  }

  // repeated .ReactionProto.ChangeElement change_element = 8;
  total_size += 1UL * this->_internal_change_element_size();
  for (const auto& msg : this->change_element_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.FormalCharge formal_charge = 9;
  total_size += 1UL * this->_internal_formal_charge_size();
  for (const auto& msg : this->formal_charge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.ChangeFormalCharge change_formal_charge = 10;
  total_size += 1UL * this->_internal_change_formal_charge_size();
  for (const auto& msg : this->change_formal_charge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.PlaceIsotope isotope = 11;
  total_size += 1UL * this->_internal_isotope_size();
  for (const auto& msg : this->isotope_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.IncrementIsotope change_isotope = 12;
  total_size += 1UL * this->_internal_change_isotope_size();
  for (const auto& msg : this->change_isotope_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.PlaceIsotope invert_isotope = 13;
  total_size += 1UL * this->_internal_invert_isotope_size();
  for (const auto& msg : this->invert_isotope_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.BondLength bond_length = 14;
  total_size += 1UL * this->_internal_bond_length_size();
  for (const auto& msg : this->bond_length_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.BondAngle bond_angle = 15;
  total_size += 1UL * this->_internal_bond_angle_size();
  for (const auto& msg : this->bond_angle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.DihedralAngle dihedral_angle = 16;
  total_size += 2UL * this->_internal_dihedral_angle_size();
  for (const auto& msg : this->dihedral_angle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.ThreeDReplace reaction_3d_replace = 17;
  total_size += 2UL * this->_internal_reaction_3d_replace_size();
  for (const auto& msg : this->reaction_3d_replace_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.WedgeBond wedge_bonds = 18;
  total_size += 2UL * this->_internal_wedge_bonds_size();
  for (const auto& msg : this->wedge_bonds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.ReplaceAtom replace_atom = 19;
  total_size += 2UL * this->_internal_replace_atom_size();
  for (const auto& msg : this->replace_atom_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 unfix_implicit_hydrogens = 20;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->unfix_implicit_hydrogens_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unfix_implicit_hydrogens_size());
    total_size += data_size;
  }

  // repeated .SubstructureSearch.SubstructureQuery inactive = 21;
  total_size += 2UL * this->_internal_inactive_size();
  for (const auto& msg : this->inactive_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 invert_chirality = 22;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->invert_chirality_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_invert_chirality_size());
    total_size += data_size;
  }

  // repeated int32 remove_chirality = 23;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->remove_chirality_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_remove_chirality_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string comment = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comment());
    }

    // optional .SubstructureSearch.SubstructureQuery query = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_);
    }

    // optional .ToggleKekuleForm.ToggleKekuleForm toggle_kekule_form = 24;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *toggle_kekule_form_);
    }

    // optional bool ignore_multiple_matches_involving_atoms_not_changing = 25;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool ignore_multiple_matches_involving_changing_atoms = 27;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool noop_reaction = 28;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReactionSite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.ReactionSite)
  GOOGLE_DCHECK_NE(&from, this);
  const ReactionSite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReactionSite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.ReactionSite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.ReactionSite)
    MergeFrom(*source);
  }
}

void ReactionSite::MergeFrom(const ReactionSite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.ReactionSite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  make_bond_.MergeFrom(from.make_bond_);
  break_bond_.MergeFrom(from.break_bond_);
  remove_atom_.MergeFrom(from.remove_atom_);
  remove_fragment_.MergeFrom(from.remove_fragment_);
  keep_fragment_.MergeFrom(from.keep_fragment_);
  change_element_.MergeFrom(from.change_element_);
  formal_charge_.MergeFrom(from.formal_charge_);
  change_formal_charge_.MergeFrom(from.change_formal_charge_);
  isotope_.MergeFrom(from.isotope_);
  change_isotope_.MergeFrom(from.change_isotope_);
  invert_isotope_.MergeFrom(from.invert_isotope_);
  bond_length_.MergeFrom(from.bond_length_);
  bond_angle_.MergeFrom(from.bond_angle_);
  dihedral_angle_.MergeFrom(from.dihedral_angle_);
  reaction_3d_replace_.MergeFrom(from.reaction_3d_replace_);
  wedge_bonds_.MergeFrom(from.wedge_bonds_);
  replace_atom_.MergeFrom(from.replace_atom_);
  unfix_implicit_hydrogens_.MergeFrom(from.unfix_implicit_hydrogens_);
  inactive_.MergeFrom(from.inactive_);
  invert_chirality_.MergeFrom(from.invert_chirality_);
  remove_chirality_.MergeFrom(from.remove_chirality_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_comment(from._internal_comment());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_query()->::SubstructureSearch::SubstructureQuery::MergeFrom(from._internal_query());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_toggle_kekule_form()->::ToggleKekuleForm::ToggleKekuleForm::MergeFrom(from._internal_toggle_kekule_form());
    }
    if (cached_has_bits & 0x00000008u) {
      ignore_multiple_matches_involving_atoms_not_changing_ = from.ignore_multiple_matches_involving_atoms_not_changing_;
    }
    if (cached_has_bits & 0x00000010u) {
      ignore_multiple_matches_involving_changing_atoms_ = from.ignore_multiple_matches_involving_changing_atoms_;
    }
    if (cached_has_bits & 0x00000020u) {
      noop_reaction_ = from.noop_reaction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReactionSite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.ReactionSite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReactionSite::CopyFrom(const ReactionSite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.ReactionSite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReactionSite::IsInitialized() const {
  return true;
}

void ReactionSite::InternalSwap(ReactionSite* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  make_bond_.InternalSwap(&other->make_bond_);
  break_bond_.InternalSwap(&other->break_bond_);
  remove_atom_.InternalSwap(&other->remove_atom_);
  remove_fragment_.InternalSwap(&other->remove_fragment_);
  keep_fragment_.InternalSwap(&other->keep_fragment_);
  change_element_.InternalSwap(&other->change_element_);
  formal_charge_.InternalSwap(&other->formal_charge_);
  change_formal_charge_.InternalSwap(&other->change_formal_charge_);
  isotope_.InternalSwap(&other->isotope_);
  change_isotope_.InternalSwap(&other->change_isotope_);
  invert_isotope_.InternalSwap(&other->invert_isotope_);
  bond_length_.InternalSwap(&other->bond_length_);
  bond_angle_.InternalSwap(&other->bond_angle_);
  dihedral_angle_.InternalSwap(&other->dihedral_angle_);
  reaction_3d_replace_.InternalSwap(&other->reaction_3d_replace_);
  wedge_bonds_.InternalSwap(&other->wedge_bonds_);
  replace_atom_.InternalSwap(&other->replace_atom_);
  unfix_implicit_hydrogens_.InternalSwap(&other->unfix_implicit_hydrogens_);
  inactive_.InternalSwap(&other->inactive_);
  invert_chirality_.InternalSwap(&other->invert_chirality_);
  remove_chirality_.InternalSwap(&other->remove_chirality_);
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReactionSite, noop_reaction_)
      + sizeof(ReactionSite::noop_reaction_)
      - PROTOBUF_FIELD_OFFSET(ReactionSite, query_)>(
          reinterpret_cast<char*>(&query_),
          reinterpret_cast<char*>(&other->query_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReactionSite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScaffoldReactionSite::_Internal {
 public:
  using HasBits = decltype(std::declval<ScaffoldReactionSite>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::SubstructureSearch::SubstructureQuery& query(const ScaffoldReactionSite* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ToggleKekuleForm::ToggleKekuleForm& toggle_kekule_form(const ScaffoldReactionSite* msg);
  static void set_has_toggle_kekule_form(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ignore_multiple_matches_involving_atoms_not_changing(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ignore_multiple_matches_involving_changing_atoms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_noop_reaction(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_smarts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::SubstructureSearch::SubstructureQuery&
ScaffoldReactionSite::_Internal::query(const ScaffoldReactionSite* msg) {
  return *msg->query_;
}
const ::ToggleKekuleForm::ToggleKekuleForm&
ScaffoldReactionSite::_Internal::toggle_kekule_form(const ScaffoldReactionSite* msg) {
  return *msg->toggle_kekule_form_;
}
void ScaffoldReactionSite::clear_query() {
  if (query_ != nullptr) query_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ScaffoldReactionSite::clear_inactive() {
  inactive_.Clear();
}
void ScaffoldReactionSite::clear_toggle_kekule_form() {
  if (toggle_kekule_form_ != nullptr) toggle_kekule_form_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ScaffoldReactionSite::ScaffoldReactionSite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  make_bond_(arena),
  break_bond_(arena),
  remove_atom_(arena),
  remove_fragment_(arena),
  keep_fragment_(arena),
  change_element_(arena),
  formal_charge_(arena),
  change_formal_charge_(arena),
  isotope_(arena),
  change_isotope_(arena),
  invert_isotope_(arena),
  bond_length_(arena),
  bond_angle_(arena),
  dihedral_angle_(arena),
  reaction_3d_replace_(arena),
  wedge_bonds_(arena),
  replace_atom_(arena),
  unfix_implicit_hydrogens_(arena),
  inactive_(arena),
  invert_chirality_(arena),
  remove_chirality_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.ScaffoldReactionSite)
}
ScaffoldReactionSite::ScaffoldReactionSite(const ScaffoldReactionSite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      make_bond_(from.make_bond_),
      break_bond_(from.break_bond_),
      remove_atom_(from.remove_atom_),
      remove_fragment_(from.remove_fragment_),
      keep_fragment_(from.keep_fragment_),
      change_element_(from.change_element_),
      formal_charge_(from.formal_charge_),
      change_formal_charge_(from.change_formal_charge_),
      isotope_(from.isotope_),
      change_isotope_(from.change_isotope_),
      invert_isotope_(from.invert_isotope_),
      bond_length_(from.bond_length_),
      bond_angle_(from.bond_angle_),
      dihedral_angle_(from.dihedral_angle_),
      reaction_3d_replace_(from.reaction_3d_replace_),
      wedge_bonds_(from.wedge_bonds_),
      replace_atom_(from.replace_atom_),
      unfix_implicit_hydrogens_(from.unfix_implicit_hydrogens_),
      inactive_(from.inactive_),
      invert_chirality_(from.invert_chirality_),
      remove_chirality_(from.remove_chirality_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_comment()) {
    comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_comment(),
      GetArena());
  }
  smarts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_smarts()) {
    smarts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_smarts(),
      GetArena());
  }
  if (from._internal_has_query()) {
    query_ = new ::SubstructureSearch::SubstructureQuery(*from.query_);
  } else {
    query_ = nullptr;
  }
  if (from._internal_has_toggle_kekule_form()) {
    toggle_kekule_form_ = new ::ToggleKekuleForm::ToggleKekuleForm(*from.toggle_kekule_form_);
  } else {
    toggle_kekule_form_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&noop_reaction_) -
    reinterpret_cast<char*>(&id_)) + sizeof(noop_reaction_));
  // @@protoc_insertion_point(copy_constructor:ReactionProto.ScaffoldReactionSite)
}

void ScaffoldReactionSite::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScaffoldReactionSite_Molecule_5fLib_2freaction_2eproto.base);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  smarts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&query_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&noop_reaction_) -
      reinterpret_cast<char*>(&query_)) + sizeof(noop_reaction_));
}

ScaffoldReactionSite::~ScaffoldReactionSite() {
  // @@protoc_insertion_point(destructor:ReactionProto.ScaffoldReactionSite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScaffoldReactionSite::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  smarts_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete query_;
  if (this != internal_default_instance()) delete toggle_kekule_form_;
}

void ScaffoldReactionSite::ArenaDtor(void* object) {
  ScaffoldReactionSite* _this = reinterpret_cast< ScaffoldReactionSite* >(object);
  (void)_this;
}
void ScaffoldReactionSite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScaffoldReactionSite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScaffoldReactionSite& ScaffoldReactionSite::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScaffoldReactionSite_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void ScaffoldReactionSite::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.ScaffoldReactionSite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  make_bond_.Clear();
  break_bond_.Clear();
  remove_atom_.Clear();
  remove_fragment_.Clear();
  keep_fragment_.Clear();
  change_element_.Clear();
  formal_charge_.Clear();
  change_formal_charge_.Clear();
  isotope_.Clear();
  change_isotope_.Clear();
  invert_isotope_.Clear();
  bond_length_.Clear();
  bond_angle_.Clear();
  dihedral_angle_.Clear();
  reaction_3d_replace_.Clear();
  wedge_bonds_.Clear();
  replace_atom_.Clear();
  unfix_implicit_hydrogens_.Clear();
  inactive_.Clear();
  invert_chirality_.Clear();
  remove_chirality_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      comment_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      smarts_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(query_ != nullptr);
      query_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(toggle_kekule_form_ != nullptr);
      toggle_kekule_form_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&noop_reaction_) -
        reinterpret_cast<char*>(&id_)) + sizeof(noop_reaction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScaffoldReactionSite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SubstructureSearch.SubstructureQuery query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.BondToBeMade make_bond = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_make_bond(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.PairOfAtoms break_bond = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_break_bond(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 remove_atom = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_remove_atom(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_remove_atom(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 remove_fragment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_remove_fragment(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_remove_fragment(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 keep_fragment = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_keep_fragment(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_keep_fragment(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.ChangeElement change_element = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_change_element(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.FormalCharge formal_charge = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formal_charge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.ChangeFormalCharge change_formal_charge = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_change_formal_charge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.PlaceIsotope isotope = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_isotope(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.IncrementIsotope change_isotope = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_change_isotope(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.PlaceIsotope invert_isotope = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_invert_isotope(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.BondLength bond_length = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bond_length(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.BondAngle bond_angle = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bond_angle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.DihedralAngle dihedral_angle = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_dihedral_angle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.ThreeDReplace reaction_3d_replace = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_reaction_3d_replace(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.WedgeBond wedge_bonds = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_wedge_bonds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.ReplaceAtom replace_atom = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_replace_atom(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 unfix_implicit_hydrogens = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unfix_implicit_hydrogens(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<160>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_unfix_implicit_hydrogens(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.SubstructureQuery inactive = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_inactive(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 invert_chirality = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_invert_chirality(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<176>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_invert_chirality(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 remove_chirality = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_remove_chirality(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<184>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_remove_chirality(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ToggleKekuleForm.ToggleKekuleForm toggle_kekule_form = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_toggle_kekule_form(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ignore_multiple_matches_involving_atoms_not_changing = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_ignore_multiple_matches_involving_atoms_not_changing(&has_bits);
          ignore_multiple_matches_involving_atoms_not_changing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ignore_multiple_matches_involving_changing_atoms = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_ignore_multiple_matches_involving_changing_atoms(&has_bits);
          ignore_multiple_matches_involving_changing_atoms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool noop_reaction = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_noop_reaction(&has_bits);
          noop_reaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string comment = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReactionProto.ScaffoldReactionSite.comment");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string smarts = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_smarts();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReactionProto.ScaffoldReactionSite.smarts");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScaffoldReactionSite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.ScaffoldReactionSite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .SubstructureSearch.SubstructureQuery query = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::query(this), target, stream);
  }

  // repeated .ReactionProto.BondToBeMade make_bond = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_make_bond_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_make_bond(i), target, stream);
  }

  // repeated .ReactionProto.PairOfAtoms break_bond = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_break_bond_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_break_bond(i), target, stream);
  }

  // repeated int32 remove_atom = 5;
  for (int i = 0, n = this->_internal_remove_atom_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_remove_atom(i), target);
  }

  // repeated int32 remove_fragment = 6;
  for (int i = 0, n = this->_internal_remove_fragment_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_remove_fragment(i), target);
  }

  // repeated int32 keep_fragment = 7;
  for (int i = 0, n = this->_internal_keep_fragment_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_keep_fragment(i), target);
  }

  // repeated .ReactionProto.ChangeElement change_element = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_change_element_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_change_element(i), target, stream);
  }

  // repeated .ReactionProto.FormalCharge formal_charge = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_formal_charge_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_formal_charge(i), target, stream);
  }

  // repeated .ReactionProto.ChangeFormalCharge change_formal_charge = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_change_formal_charge_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_change_formal_charge(i), target, stream);
  }

  // repeated .ReactionProto.PlaceIsotope isotope = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_isotope_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_isotope(i), target, stream);
  }

  // repeated .ReactionProto.IncrementIsotope change_isotope = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_change_isotope_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_change_isotope(i), target, stream);
  }

  // repeated .ReactionProto.PlaceIsotope invert_isotope = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_invert_isotope_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_invert_isotope(i), target, stream);
  }

  // repeated .ReactionProto.BondLength bond_length = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bond_length_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_bond_length(i), target, stream);
  }

  // repeated .ReactionProto.BondAngle bond_angle = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bond_angle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_bond_angle(i), target, stream);
  }

  // repeated .ReactionProto.DihedralAngle dihedral_angle = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dihedral_angle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_dihedral_angle(i), target, stream);
  }

  // repeated .ReactionProto.ThreeDReplace reaction_3d_replace = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reaction_3d_replace_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_reaction_3d_replace(i), target, stream);
  }

  // repeated .ReactionProto.WedgeBond wedge_bonds = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_wedge_bonds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_wedge_bonds(i), target, stream);
  }

  // repeated .ReactionProto.ReplaceAtom replace_atom = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_replace_atom_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_replace_atom(i), target, stream);
  }

  // repeated int32 unfix_implicit_hydrogens = 20;
  for (int i = 0, n = this->_internal_unfix_implicit_hydrogens_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_unfix_implicit_hydrogens(i), target);
  }

  // repeated .SubstructureSearch.SubstructureQuery inactive = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inactive_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_inactive(i), target, stream);
  }

  // repeated int32 invert_chirality = 22;
  for (int i = 0, n = this->_internal_invert_chirality_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_invert_chirality(i), target);
  }

  // repeated int32 remove_chirality = 23;
  for (int i = 0, n = this->_internal_remove_chirality_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_remove_chirality(i), target);
  }

  // optional .ToggleKekuleForm.ToggleKekuleForm toggle_kekule_form = 24;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::toggle_kekule_form(this), target, stream);
  }

  // optional bool ignore_multiple_matches_involving_atoms_not_changing = 25;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_ignore_multiple_matches_involving_atoms_not_changing(), target);
  }

  // optional bool ignore_multiple_matches_involving_changing_atoms = 27;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_ignore_multiple_matches_involving_changing_atoms(), target);
  }

  // optional bool noop_reaction = 28;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_noop_reaction(), target);
  }

  // optional string comment = 29;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ReactionProto.ScaffoldReactionSite.comment");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_comment(), target);
  }

  // optional string smarts = 30;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_smarts().data(), static_cast<int>(this->_internal_smarts().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ReactionProto.ScaffoldReactionSite.smarts");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_smarts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.ScaffoldReactionSite)
  return target;
}

size_t ScaffoldReactionSite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.ScaffoldReactionSite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ReactionProto.BondToBeMade make_bond = 3;
  total_size += 1UL * this->_internal_make_bond_size();
  for (const auto& msg : this->make_bond_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.PairOfAtoms break_bond = 4;
  total_size += 1UL * this->_internal_break_bond_size();
  for (const auto& msg : this->break_bond_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 remove_atom = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->remove_atom_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_remove_atom_size());
    total_size += data_size;
  }

  // repeated int32 remove_fragment = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->remove_fragment_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_remove_fragment_size());
    total_size += data_size;
  }

  // repeated int32 keep_fragment = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->keep_fragment_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_keep_fragment_size());
    total_size += data_size;
  }

  // repeated .ReactionProto.ChangeElement change_element = 8;
  total_size += 1UL * this->_internal_change_element_size();
  for (const auto& msg : this->change_element_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.FormalCharge formal_charge = 9;
  total_size += 1UL * this->_internal_formal_charge_size();
  for (const auto& msg : this->formal_charge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.ChangeFormalCharge change_formal_charge = 10;
  total_size += 1UL * this->_internal_change_formal_charge_size();
  for (const auto& msg : this->change_formal_charge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.PlaceIsotope isotope = 11;
  total_size += 1UL * this->_internal_isotope_size();
  for (const auto& msg : this->isotope_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.IncrementIsotope change_isotope = 12;
  total_size += 1UL * this->_internal_change_isotope_size();
  for (const auto& msg : this->change_isotope_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.PlaceIsotope invert_isotope = 13;
  total_size += 1UL * this->_internal_invert_isotope_size();
  for (const auto& msg : this->invert_isotope_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.BondLength bond_length = 14;
  total_size += 1UL * this->_internal_bond_length_size();
  for (const auto& msg : this->bond_length_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.BondAngle bond_angle = 15;
  total_size += 1UL * this->_internal_bond_angle_size();
  for (const auto& msg : this->bond_angle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.DihedralAngle dihedral_angle = 16;
  total_size += 2UL * this->_internal_dihedral_angle_size();
  for (const auto& msg : this->dihedral_angle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.ThreeDReplace reaction_3d_replace = 17;
  total_size += 2UL * this->_internal_reaction_3d_replace_size();
  for (const auto& msg : this->reaction_3d_replace_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.WedgeBond wedge_bonds = 18;
  total_size += 2UL * this->_internal_wedge_bonds_size();
  for (const auto& msg : this->wedge_bonds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.ReplaceAtom replace_atom = 19;
  total_size += 2UL * this->_internal_replace_atom_size();
  for (const auto& msg : this->replace_atom_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 unfix_implicit_hydrogens = 20;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->unfix_implicit_hydrogens_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unfix_implicit_hydrogens_size());
    total_size += data_size;
  }

  // repeated .SubstructureSearch.SubstructureQuery inactive = 21;
  total_size += 2UL * this->_internal_inactive_size();
  for (const auto& msg : this->inactive_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 invert_chirality = 22;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->invert_chirality_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_invert_chirality_size());
    total_size += data_size;
  }

  // repeated int32 remove_chirality = 23;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->remove_chirality_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_remove_chirality_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string comment = 29;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comment());
    }

    // optional string smarts = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_smarts());
    }

    // optional .SubstructureSearch.SubstructureQuery query = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_);
    }

    // optional .ToggleKekuleForm.ToggleKekuleForm toggle_kekule_form = 24;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *toggle_kekule_form_);
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

    // optional bool ignore_multiple_matches_involving_atoms_not_changing = 25;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool ignore_multiple_matches_involving_changing_atoms = 27;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool noop_reaction = 28;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScaffoldReactionSite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.ScaffoldReactionSite)
  GOOGLE_DCHECK_NE(&from, this);
  const ScaffoldReactionSite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScaffoldReactionSite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.ScaffoldReactionSite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.ScaffoldReactionSite)
    MergeFrom(*source);
  }
}

void ScaffoldReactionSite::MergeFrom(const ScaffoldReactionSite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.ScaffoldReactionSite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  make_bond_.MergeFrom(from.make_bond_);
  break_bond_.MergeFrom(from.break_bond_);
  remove_atom_.MergeFrom(from.remove_atom_);
  remove_fragment_.MergeFrom(from.remove_fragment_);
  keep_fragment_.MergeFrom(from.keep_fragment_);
  change_element_.MergeFrom(from.change_element_);
  formal_charge_.MergeFrom(from.formal_charge_);
  change_formal_charge_.MergeFrom(from.change_formal_charge_);
  isotope_.MergeFrom(from.isotope_);
  change_isotope_.MergeFrom(from.change_isotope_);
  invert_isotope_.MergeFrom(from.invert_isotope_);
  bond_length_.MergeFrom(from.bond_length_);
  bond_angle_.MergeFrom(from.bond_angle_);
  dihedral_angle_.MergeFrom(from.dihedral_angle_);
  reaction_3d_replace_.MergeFrom(from.reaction_3d_replace_);
  wedge_bonds_.MergeFrom(from.wedge_bonds_);
  replace_atom_.MergeFrom(from.replace_atom_);
  unfix_implicit_hydrogens_.MergeFrom(from.unfix_implicit_hydrogens_);
  inactive_.MergeFrom(from.inactive_);
  invert_chirality_.MergeFrom(from.invert_chirality_);
  remove_chirality_.MergeFrom(from.remove_chirality_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_comment(from._internal_comment());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_smarts(from._internal_smarts());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_query()->::SubstructureSearch::SubstructureQuery::MergeFrom(from._internal_query());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_toggle_kekule_form()->::ToggleKekuleForm::ToggleKekuleForm::MergeFrom(from._internal_toggle_kekule_form());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      ignore_multiple_matches_involving_atoms_not_changing_ = from.ignore_multiple_matches_involving_atoms_not_changing_;
    }
    if (cached_has_bits & 0x00000040u) {
      ignore_multiple_matches_involving_changing_atoms_ = from.ignore_multiple_matches_involving_changing_atoms_;
    }
    if (cached_has_bits & 0x00000080u) {
      noop_reaction_ = from.noop_reaction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScaffoldReactionSite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.ScaffoldReactionSite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScaffoldReactionSite::CopyFrom(const ScaffoldReactionSite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.ScaffoldReactionSite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScaffoldReactionSite::IsInitialized() const {
  return true;
}

void ScaffoldReactionSite::InternalSwap(ScaffoldReactionSite* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  make_bond_.InternalSwap(&other->make_bond_);
  break_bond_.InternalSwap(&other->break_bond_);
  remove_atom_.InternalSwap(&other->remove_atom_);
  remove_fragment_.InternalSwap(&other->remove_fragment_);
  keep_fragment_.InternalSwap(&other->keep_fragment_);
  change_element_.InternalSwap(&other->change_element_);
  formal_charge_.InternalSwap(&other->formal_charge_);
  change_formal_charge_.InternalSwap(&other->change_formal_charge_);
  isotope_.InternalSwap(&other->isotope_);
  change_isotope_.InternalSwap(&other->change_isotope_);
  invert_isotope_.InternalSwap(&other->invert_isotope_);
  bond_length_.InternalSwap(&other->bond_length_);
  bond_angle_.InternalSwap(&other->bond_angle_);
  dihedral_angle_.InternalSwap(&other->dihedral_angle_);
  reaction_3d_replace_.InternalSwap(&other->reaction_3d_replace_);
  wedge_bonds_.InternalSwap(&other->wedge_bonds_);
  replace_atom_.InternalSwap(&other->replace_atom_);
  unfix_implicit_hydrogens_.InternalSwap(&other->unfix_implicit_hydrogens_);
  inactive_.InternalSwap(&other->inactive_);
  invert_chirality_.InternalSwap(&other->invert_chirality_);
  remove_chirality_.InternalSwap(&other->remove_chirality_);
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  smarts_.Swap(&other->smarts_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScaffoldReactionSite, noop_reaction_)
      + sizeof(ScaffoldReactionSite::noop_reaction_)
      - PROTOBUF_FIELD_OFFSET(ScaffoldReactionSite, query_)>(
          reinterpret_cast<char*>(&query_),
          reinterpret_cast<char*>(&other->query_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScaffoldReactionSite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SidechainReactionSite::_Internal {
 public:
  using HasBits = decltype(std::declval<SidechainReactionSite>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::SubstructureSearch::SubstructureQuery& query(const SidechainReactionSite* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ToggleKekuleForm::ToggleKekuleForm& toggle_kekule_form(const SidechainReactionSite* msg);
  static void set_has_toggle_kekule_form(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ignore_multiple_matches_involving_atoms_not_changing(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ignore_multiple_matches_involving_changing_atoms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_noop_reaction(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_smarts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_make_implicit_hydrogens_explicit(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::ReactionProto::SidechainMatchConditions& match_conditions(const SidechainReactionSite* msg);
  static void set_has_match_conditions(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::SubstructureSearch::SubstructureQuery&
SidechainReactionSite::_Internal::query(const SidechainReactionSite* msg) {
  return *msg->query_;
}
const ::ToggleKekuleForm::ToggleKekuleForm&
SidechainReactionSite::_Internal::toggle_kekule_form(const SidechainReactionSite* msg) {
  return *msg->toggle_kekule_form_;
}
const ::ReactionProto::SidechainMatchConditions&
SidechainReactionSite::_Internal::match_conditions(const SidechainReactionSite* msg) {
  return *msg->match_conditions_;
}
void SidechainReactionSite::clear_query() {
  if (query_ != nullptr) query_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SidechainReactionSite::clear_inactive() {
  inactive_.Clear();
}
void SidechainReactionSite::clear_toggle_kekule_form() {
  if (toggle_kekule_form_ != nullptr) toggle_kekule_form_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
SidechainReactionSite::SidechainReactionSite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  make_bond_(arena),
  break_bond_(arena),
  remove_atom_(arena),
  remove_fragment_(arena),
  keep_fragment_(arena),
  change_element_(arena),
  formal_charge_(arena),
  change_formal_charge_(arena),
  isotope_(arena),
  change_isotope_(arena),
  invert_isotope_(arena),
  bond_length_(arena),
  bond_angle_(arena),
  dihedral_angle_(arena),
  reaction_3d_replace_(arena),
  wedge_bonds_(arena),
  replace_atom_(arena),
  unfix_implicit_hydrogens_(arena),
  inactive_(arena),
  invert_chirality_(arena),
  remove_chirality_(arena),
  reagent_(arena),
  join_(arena),
  no_reaction_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.SidechainReactionSite)
}
SidechainReactionSite::SidechainReactionSite(const SidechainReactionSite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      make_bond_(from.make_bond_),
      break_bond_(from.break_bond_),
      remove_atom_(from.remove_atom_),
      remove_fragment_(from.remove_fragment_),
      keep_fragment_(from.keep_fragment_),
      change_element_(from.change_element_),
      formal_charge_(from.formal_charge_),
      change_formal_charge_(from.change_formal_charge_),
      isotope_(from.isotope_),
      change_isotope_(from.change_isotope_),
      invert_isotope_(from.invert_isotope_),
      bond_length_(from.bond_length_),
      bond_angle_(from.bond_angle_),
      dihedral_angle_(from.dihedral_angle_),
      reaction_3d_replace_(from.reaction_3d_replace_),
      wedge_bonds_(from.wedge_bonds_),
      replace_atom_(from.replace_atom_),
      unfix_implicit_hydrogens_(from.unfix_implicit_hydrogens_),
      inactive_(from.inactive_),
      invert_chirality_(from.invert_chirality_),
      remove_chirality_(from.remove_chirality_),
      reagent_(from.reagent_),
      join_(from.join_),
      no_reaction_(from.no_reaction_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_comment()) {
    comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_comment(),
      GetArena());
  }
  smarts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_smarts()) {
    smarts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_smarts(),
      GetArena());
  }
  if (from._internal_has_query()) {
    query_ = new ::SubstructureSearch::SubstructureQuery(*from.query_);
  } else {
    query_ = nullptr;
  }
  if (from._internal_has_toggle_kekule_form()) {
    toggle_kekule_form_ = new ::ToggleKekuleForm::ToggleKekuleForm(*from.toggle_kekule_form_);
  } else {
    toggle_kekule_form_ = nullptr;
  }
  if (from._internal_has_match_conditions()) {
    match_conditions_ = new ::ReactionProto::SidechainMatchConditions(*from.match_conditions_);
  } else {
    match_conditions_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&make_implicit_hydrogens_explicit_) -
    reinterpret_cast<char*>(&id_)) + sizeof(make_implicit_hydrogens_explicit_));
  // @@protoc_insertion_point(copy_constructor:ReactionProto.SidechainReactionSite)
}

void SidechainReactionSite::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SidechainReactionSite_Molecule_5fLib_2freaction_2eproto.base);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  smarts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&query_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&make_implicit_hydrogens_explicit_) -
      reinterpret_cast<char*>(&query_)) + sizeof(make_implicit_hydrogens_explicit_));
}

SidechainReactionSite::~SidechainReactionSite() {
  // @@protoc_insertion_point(destructor:ReactionProto.SidechainReactionSite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SidechainReactionSite::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  smarts_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete query_;
  if (this != internal_default_instance()) delete toggle_kekule_form_;
  if (this != internal_default_instance()) delete match_conditions_;
}

void SidechainReactionSite::ArenaDtor(void* object) {
  SidechainReactionSite* _this = reinterpret_cast< SidechainReactionSite* >(object);
  (void)_this;
}
void SidechainReactionSite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SidechainReactionSite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SidechainReactionSite& SidechainReactionSite::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SidechainReactionSite_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void SidechainReactionSite::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.SidechainReactionSite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  make_bond_.Clear();
  break_bond_.Clear();
  remove_atom_.Clear();
  remove_fragment_.Clear();
  keep_fragment_.Clear();
  change_element_.Clear();
  formal_charge_.Clear();
  change_formal_charge_.Clear();
  isotope_.Clear();
  change_isotope_.Clear();
  invert_isotope_.Clear();
  bond_length_.Clear();
  bond_angle_.Clear();
  dihedral_angle_.Clear();
  reaction_3d_replace_.Clear();
  wedge_bonds_.Clear();
  replace_atom_.Clear();
  unfix_implicit_hydrogens_.Clear();
  inactive_.Clear();
  invert_chirality_.Clear();
  remove_chirality_.Clear();
  reagent_.Clear();
  join_.Clear();
  no_reaction_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      comment_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      smarts_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(query_ != nullptr);
      query_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(toggle_kekule_form_ != nullptr);
      toggle_kekule_form_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(match_conditions_ != nullptr);
      match_conditions_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ignore_multiple_matches_involving_changing_atoms_) -
        reinterpret_cast<char*>(&id_)) + sizeof(ignore_multiple_matches_involving_changing_atoms_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&noop_reaction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&make_implicit_hydrogens_explicit_) -
        reinterpret_cast<char*>(&noop_reaction_)) + sizeof(make_implicit_hydrogens_explicit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SidechainReactionSite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SubstructureSearch.SubstructureQuery query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.BondToBeMade make_bond = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_make_bond(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.PairOfAtoms break_bond = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_break_bond(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 remove_atom = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_remove_atom(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_remove_atom(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 remove_fragment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_remove_fragment(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_remove_fragment(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 keep_fragment = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_keep_fragment(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_keep_fragment(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.ChangeElement change_element = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_change_element(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.FormalCharge formal_charge = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formal_charge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.ChangeFormalCharge change_formal_charge = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_change_formal_charge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.PlaceIsotope isotope = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_isotope(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.IncrementIsotope change_isotope = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_change_isotope(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.PlaceIsotope invert_isotope = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_invert_isotope(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.BondLength bond_length = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bond_length(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.BondAngle bond_angle = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bond_angle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.DihedralAngle dihedral_angle = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_dihedral_angle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.ThreeDReplace reaction_3d_replace = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_reaction_3d_replace(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.WedgeBond wedge_bonds = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_wedge_bonds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.ReplaceAtom replace_atom = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_replace_atom(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 unfix_implicit_hydrogens = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unfix_implicit_hydrogens(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<160>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_unfix_implicit_hydrogens(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.SubstructureQuery inactive = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_inactive(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 invert_chirality = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_invert_chirality(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<176>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_invert_chirality(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 remove_chirality = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_remove_chirality(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<184>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_remove_chirality(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ToggleKekuleForm.ToggleKekuleForm toggle_kekule_form = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_toggle_kekule_form(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ignore_multiple_matches_involving_atoms_not_changing = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_ignore_multiple_matches_involving_atoms_not_changing(&has_bits);
          ignore_multiple_matches_involving_atoms_not_changing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ignore_multiple_matches_involving_changing_atoms = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_ignore_multiple_matches_involving_changing_atoms(&has_bits);
          ignore_multiple_matches_involving_changing_atoms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool noop_reaction = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_noop_reaction(&has_bits);
          noop_reaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string comment = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReactionProto.SidechainReactionSite.comment");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string smarts = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_smarts();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReactionProto.SidechainReactionSite.smarts");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string reagent = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_reagent();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReactionProto.SidechainReactionSite.reagent");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.InterParticleBond join = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_join(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<330>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.NoReaction no_reaction = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_no_reaction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<338>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool make_implicit_hydrogens_explicit = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_make_implicit_hydrogens_explicit(&has_bits);
          make_implicit_hydrogens_explicit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ReactionProto.SidechainMatchConditions match_conditions = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_conditions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SidechainReactionSite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.SidechainReactionSite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .SubstructureSearch.SubstructureQuery query = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::query(this), target, stream);
  }

  // repeated .ReactionProto.BondToBeMade make_bond = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_make_bond_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_make_bond(i), target, stream);
  }

  // repeated .ReactionProto.PairOfAtoms break_bond = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_break_bond_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_break_bond(i), target, stream);
  }

  // repeated int32 remove_atom = 5;
  for (int i = 0, n = this->_internal_remove_atom_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_remove_atom(i), target);
  }

  // repeated int32 remove_fragment = 6;
  for (int i = 0, n = this->_internal_remove_fragment_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_remove_fragment(i), target);
  }

  // repeated int32 keep_fragment = 7;
  for (int i = 0, n = this->_internal_keep_fragment_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_keep_fragment(i), target);
  }

  // repeated .ReactionProto.ChangeElement change_element = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_change_element_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_change_element(i), target, stream);
  }

  // repeated .ReactionProto.FormalCharge formal_charge = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_formal_charge_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_formal_charge(i), target, stream);
  }

  // repeated .ReactionProto.ChangeFormalCharge change_formal_charge = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_change_formal_charge_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_change_formal_charge(i), target, stream);
  }

  // repeated .ReactionProto.PlaceIsotope isotope = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_isotope_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_isotope(i), target, stream);
  }

  // repeated .ReactionProto.IncrementIsotope change_isotope = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_change_isotope_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_change_isotope(i), target, stream);
  }

  // repeated .ReactionProto.PlaceIsotope invert_isotope = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_invert_isotope_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_invert_isotope(i), target, stream);
  }

  // repeated .ReactionProto.BondLength bond_length = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bond_length_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_bond_length(i), target, stream);
  }

  // repeated .ReactionProto.BondAngle bond_angle = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bond_angle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_bond_angle(i), target, stream);
  }

  // repeated .ReactionProto.DihedralAngle dihedral_angle = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dihedral_angle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_dihedral_angle(i), target, stream);
  }

  // repeated .ReactionProto.ThreeDReplace reaction_3d_replace = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reaction_3d_replace_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_reaction_3d_replace(i), target, stream);
  }

  // repeated .ReactionProto.WedgeBond wedge_bonds = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_wedge_bonds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_wedge_bonds(i), target, stream);
  }

  // repeated .ReactionProto.ReplaceAtom replace_atom = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_replace_atom_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_replace_atom(i), target, stream);
  }

  // repeated int32 unfix_implicit_hydrogens = 20;
  for (int i = 0, n = this->_internal_unfix_implicit_hydrogens_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_unfix_implicit_hydrogens(i), target);
  }

  // repeated .SubstructureSearch.SubstructureQuery inactive = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inactive_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_inactive(i), target, stream);
  }

  // repeated int32 invert_chirality = 22;
  for (int i = 0, n = this->_internal_invert_chirality_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_invert_chirality(i), target);
  }

  // repeated int32 remove_chirality = 23;
  for (int i = 0, n = this->_internal_remove_chirality_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_remove_chirality(i), target);
  }

  // optional .ToggleKekuleForm.ToggleKekuleForm toggle_kekule_form = 24;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::toggle_kekule_form(this), target, stream);
  }

  // optional bool ignore_multiple_matches_involving_atoms_not_changing = 25;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_ignore_multiple_matches_involving_atoms_not_changing(), target);
  }

  // optional bool ignore_multiple_matches_involving_changing_atoms = 27;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_ignore_multiple_matches_involving_changing_atoms(), target);
  }

  // optional bool noop_reaction = 28;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_noop_reaction(), target);
  }

  // optional string comment = 29;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ReactionProto.SidechainReactionSite.comment");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_comment(), target);
  }

  // optional string smarts = 30;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_smarts().data(), static_cast<int>(this->_internal_smarts().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ReactionProto.SidechainReactionSite.smarts");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_smarts(), target);
  }

  // repeated string reagent = 40;
  for (int i = 0, n = this->_internal_reagent_size(); i < n; i++) {
    const auto& s = this->_internal_reagent(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ReactionProto.SidechainReactionSite.reagent");
    target = stream->WriteString(40, s, target);
  }

  // repeated .ReactionProto.InterParticleBond join = 41;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_join_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, this->_internal_join(i), target, stream);
  }

  // repeated .ReactionProto.NoReaction no_reaction = 42;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_no_reaction_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, this->_internal_no_reaction(i), target, stream);
  }

  // optional bool make_implicit_hydrogens_explicit = 43;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->_internal_make_implicit_hydrogens_explicit(), target);
  }

  // optional .ReactionProto.SidechainMatchConditions match_conditions = 44;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::match_conditions(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.SidechainReactionSite)
  return target;
}

size_t SidechainReactionSite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.SidechainReactionSite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ReactionProto.BondToBeMade make_bond = 3;
  total_size += 1UL * this->_internal_make_bond_size();
  for (const auto& msg : this->make_bond_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.PairOfAtoms break_bond = 4;
  total_size += 1UL * this->_internal_break_bond_size();
  for (const auto& msg : this->break_bond_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 remove_atom = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->remove_atom_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_remove_atom_size());
    total_size += data_size;
  }

  // repeated int32 remove_fragment = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->remove_fragment_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_remove_fragment_size());
    total_size += data_size;
  }

  // repeated int32 keep_fragment = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->keep_fragment_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_keep_fragment_size());
    total_size += data_size;
  }

  // repeated .ReactionProto.ChangeElement change_element = 8;
  total_size += 1UL * this->_internal_change_element_size();
  for (const auto& msg : this->change_element_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.FormalCharge formal_charge = 9;
  total_size += 1UL * this->_internal_formal_charge_size();
  for (const auto& msg : this->formal_charge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.ChangeFormalCharge change_formal_charge = 10;
  total_size += 1UL * this->_internal_change_formal_charge_size();
  for (const auto& msg : this->change_formal_charge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.PlaceIsotope isotope = 11;
  total_size += 1UL * this->_internal_isotope_size();
  for (const auto& msg : this->isotope_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.IncrementIsotope change_isotope = 12;
  total_size += 1UL * this->_internal_change_isotope_size();
  for (const auto& msg : this->change_isotope_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.PlaceIsotope invert_isotope = 13;
  total_size += 1UL * this->_internal_invert_isotope_size();
  for (const auto& msg : this->invert_isotope_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.BondLength bond_length = 14;
  total_size += 1UL * this->_internal_bond_length_size();
  for (const auto& msg : this->bond_length_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.BondAngle bond_angle = 15;
  total_size += 1UL * this->_internal_bond_angle_size();
  for (const auto& msg : this->bond_angle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.DihedralAngle dihedral_angle = 16;
  total_size += 2UL * this->_internal_dihedral_angle_size();
  for (const auto& msg : this->dihedral_angle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.ThreeDReplace reaction_3d_replace = 17;
  total_size += 2UL * this->_internal_reaction_3d_replace_size();
  for (const auto& msg : this->reaction_3d_replace_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.WedgeBond wedge_bonds = 18;
  total_size += 2UL * this->_internal_wedge_bonds_size();
  for (const auto& msg : this->wedge_bonds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.ReplaceAtom replace_atom = 19;
  total_size += 2UL * this->_internal_replace_atom_size();
  for (const auto& msg : this->replace_atom_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 unfix_implicit_hydrogens = 20;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->unfix_implicit_hydrogens_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unfix_implicit_hydrogens_size());
    total_size += data_size;
  }

  // repeated .SubstructureSearch.SubstructureQuery inactive = 21;
  total_size += 2UL * this->_internal_inactive_size();
  for (const auto& msg : this->inactive_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 invert_chirality = 22;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->invert_chirality_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_invert_chirality_size());
    total_size += data_size;
  }

  // repeated int32 remove_chirality = 23;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->remove_chirality_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_remove_chirality_size());
    total_size += data_size;
  }

  // repeated string reagent = 40;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(reagent_.size());
  for (int i = 0, n = reagent_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      reagent_.Get(i));
  }

  // repeated .ReactionProto.InterParticleBond join = 41;
  total_size += 2UL * this->_internal_join_size();
  for (const auto& msg : this->join_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.NoReaction no_reaction = 42;
  total_size += 2UL * this->_internal_no_reaction_size();
  for (const auto& msg : this->no_reaction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string comment = 29;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comment());
    }

    // optional string smarts = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_smarts());
    }

    // optional .SubstructureSearch.SubstructureQuery query = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_);
    }

    // optional .ToggleKekuleForm.ToggleKekuleForm toggle_kekule_form = 24;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *toggle_kekule_form_);
    }

    // optional .ReactionProto.SidechainMatchConditions match_conditions = 44;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *match_conditions_);
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

    // optional bool ignore_multiple_matches_involving_atoms_not_changing = 25;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool ignore_multiple_matches_involving_changing_atoms = 27;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool noop_reaction = 28;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool make_implicit_hydrogens_explicit = 43;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SidechainReactionSite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.SidechainReactionSite)
  GOOGLE_DCHECK_NE(&from, this);
  const SidechainReactionSite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SidechainReactionSite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.SidechainReactionSite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.SidechainReactionSite)
    MergeFrom(*source);
  }
}

void SidechainReactionSite::MergeFrom(const SidechainReactionSite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.SidechainReactionSite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  make_bond_.MergeFrom(from.make_bond_);
  break_bond_.MergeFrom(from.break_bond_);
  remove_atom_.MergeFrom(from.remove_atom_);
  remove_fragment_.MergeFrom(from.remove_fragment_);
  keep_fragment_.MergeFrom(from.keep_fragment_);
  change_element_.MergeFrom(from.change_element_);
  formal_charge_.MergeFrom(from.formal_charge_);
  change_formal_charge_.MergeFrom(from.change_formal_charge_);
  isotope_.MergeFrom(from.isotope_);
  change_isotope_.MergeFrom(from.change_isotope_);
  invert_isotope_.MergeFrom(from.invert_isotope_);
  bond_length_.MergeFrom(from.bond_length_);
  bond_angle_.MergeFrom(from.bond_angle_);
  dihedral_angle_.MergeFrom(from.dihedral_angle_);
  reaction_3d_replace_.MergeFrom(from.reaction_3d_replace_);
  wedge_bonds_.MergeFrom(from.wedge_bonds_);
  replace_atom_.MergeFrom(from.replace_atom_);
  unfix_implicit_hydrogens_.MergeFrom(from.unfix_implicit_hydrogens_);
  inactive_.MergeFrom(from.inactive_);
  invert_chirality_.MergeFrom(from.invert_chirality_);
  remove_chirality_.MergeFrom(from.remove_chirality_);
  reagent_.MergeFrom(from.reagent_);
  join_.MergeFrom(from.join_);
  no_reaction_.MergeFrom(from.no_reaction_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_comment(from._internal_comment());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_smarts(from._internal_smarts());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_query()->::SubstructureSearch::SubstructureQuery::MergeFrom(from._internal_query());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_toggle_kekule_form()->::ToggleKekuleForm::ToggleKekuleForm::MergeFrom(from._internal_toggle_kekule_form());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_match_conditions()->::ReactionProto::SidechainMatchConditions::MergeFrom(from._internal_match_conditions());
    }
    if (cached_has_bits & 0x00000020u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000040u) {
      ignore_multiple_matches_involving_atoms_not_changing_ = from.ignore_multiple_matches_involving_atoms_not_changing_;
    }
    if (cached_has_bits & 0x00000080u) {
      ignore_multiple_matches_involving_changing_atoms_ = from.ignore_multiple_matches_involving_changing_atoms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      noop_reaction_ = from.noop_reaction_;
    }
    if (cached_has_bits & 0x00000200u) {
      make_implicit_hydrogens_explicit_ = from.make_implicit_hydrogens_explicit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SidechainReactionSite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.SidechainReactionSite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SidechainReactionSite::CopyFrom(const SidechainReactionSite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.SidechainReactionSite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SidechainReactionSite::IsInitialized() const {
  return true;
}

void SidechainReactionSite::InternalSwap(SidechainReactionSite* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  make_bond_.InternalSwap(&other->make_bond_);
  break_bond_.InternalSwap(&other->break_bond_);
  remove_atom_.InternalSwap(&other->remove_atom_);
  remove_fragment_.InternalSwap(&other->remove_fragment_);
  keep_fragment_.InternalSwap(&other->keep_fragment_);
  change_element_.InternalSwap(&other->change_element_);
  formal_charge_.InternalSwap(&other->formal_charge_);
  change_formal_charge_.InternalSwap(&other->change_formal_charge_);
  isotope_.InternalSwap(&other->isotope_);
  change_isotope_.InternalSwap(&other->change_isotope_);
  invert_isotope_.InternalSwap(&other->invert_isotope_);
  bond_length_.InternalSwap(&other->bond_length_);
  bond_angle_.InternalSwap(&other->bond_angle_);
  dihedral_angle_.InternalSwap(&other->dihedral_angle_);
  reaction_3d_replace_.InternalSwap(&other->reaction_3d_replace_);
  wedge_bonds_.InternalSwap(&other->wedge_bonds_);
  replace_atom_.InternalSwap(&other->replace_atom_);
  unfix_implicit_hydrogens_.InternalSwap(&other->unfix_implicit_hydrogens_);
  inactive_.InternalSwap(&other->inactive_);
  invert_chirality_.InternalSwap(&other->invert_chirality_);
  remove_chirality_.InternalSwap(&other->remove_chirality_);
  reagent_.InternalSwap(&other->reagent_);
  join_.InternalSwap(&other->join_);
  no_reaction_.InternalSwap(&other->no_reaction_);
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  smarts_.Swap(&other->smarts_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SidechainReactionSite, make_implicit_hydrogens_explicit_)
      + sizeof(SidechainReactionSite::make_implicit_hydrogens_explicit_)
      - PROTOBUF_FIELD_OFFSET(SidechainReactionSite, query_)>(
          reinterpret_cast<char*>(&query_),
          reinterpret_cast<char*>(&other->query_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SidechainReactionSite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Reaction::_Internal {
 public:
  using HasBits = decltype(std::declval<Reaction>()._has_bits_);
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ReactionProto::ScaffoldReactionSite& scaffold(const Reaction* msg);
  static void set_has_scaffold(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_append_reagent_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_append_to_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_query_files_in_current_directory(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_reaction_directory(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_find_kekule_forms_for_bad_valence(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_make_implicit_hydrogens_explicit(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::ReactionProto::ScaffoldMatchConditions& scaffold_match_conditions(const Reaction* msg);
  static void set_has_scaffold_match_conditions(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_noop_reaction(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::ReactionProto::ScaffoldReactionSite&
Reaction::_Internal::scaffold(const Reaction* msg) {
  return *msg->scaffold_;
}
const ::ReactionProto::ScaffoldMatchConditions&
Reaction::_Internal::scaffold_match_conditions(const Reaction* msg) {
  return *msg->scaffold_match_conditions_;
}
Reaction::Reaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sidechain_(arena),
  reaction_stereo_center_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReactionProto.Reaction)
}
Reaction::Reaction(const Reaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sidechain_(from.sidechain_),
      reaction_stereo_center_(from.reaction_stereo_center_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_comment()) {
    comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_comment(),
      GetArena());
  }
  append_to_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_append_to_name()) {
    append_to_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_append_to_name(),
      GetArena());
  }
  reaction_directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reaction_directory()) {
    reaction_directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reaction_directory(),
      GetArena());
  }
  if (from._internal_has_scaffold()) {
    scaffold_ = new ::ReactionProto::ScaffoldReactionSite(*from.scaffold_);
  } else {
    scaffold_ = nullptr;
  }
  if (from._internal_has_scaffold_match_conditions()) {
    scaffold_match_conditions_ = new ::ReactionProto::ScaffoldMatchConditions(*from.scaffold_match_conditions_);
  } else {
    scaffold_match_conditions_ = nullptr;
  }
  ::memcpy(&append_reagent_name_, &from.append_reagent_name_,
    static_cast<size_t>(reinterpret_cast<char*>(&noop_reaction_) -
    reinterpret_cast<char*>(&append_reagent_name_)) + sizeof(noop_reaction_));
  // @@protoc_insertion_point(copy_constructor:ReactionProto.Reaction)
}

void Reaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Reaction_Molecule_5fLib_2freaction_2eproto.base);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  append_to_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reaction_directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&scaffold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&noop_reaction_) -
      reinterpret_cast<char*>(&scaffold_)) + sizeof(noop_reaction_));
}

Reaction::~Reaction() {
  // @@protoc_insertion_point(destructor:ReactionProto.Reaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Reaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  append_to_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reaction_directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scaffold_;
  if (this != internal_default_instance()) delete scaffold_match_conditions_;
}

void Reaction::ArenaDtor(void* object) {
  Reaction* _this = reinterpret_cast< Reaction* >(object);
  (void)_this;
}
void Reaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Reaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Reaction& Reaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Reaction_Molecule_5fLib_2freaction_2eproto.base);
  return *internal_default_instance();
}


void Reaction::Clear() {
// @@protoc_insertion_point(message_clear_start:ReactionProto.Reaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sidechain_.Clear();
  reaction_stereo_center_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      comment_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      append_to_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      reaction_directory_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(scaffold_ != nullptr);
      scaffold_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(scaffold_match_conditions_ != nullptr);
      scaffold_match_conditions_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&append_reagent_name_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&find_kekule_forms_for_bad_valence_) -
        reinterpret_cast<char*>(&append_reagent_name_)) + sizeof(find_kekule_forms_for_bad_valence_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&make_implicit_hydrogens_explicit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&noop_reaction_) -
        reinterpret_cast<char*>(&make_implicit_hydrogens_explicit_)) + sizeof(noop_reaction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string comment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReactionProto.Reaction.comment");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ReactionProto.ScaffoldReactionSite scaffold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scaffold(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.SidechainReactionSite sidechain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sidechain(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ReactionProto.StereoCenter reaction_stereo_center = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reaction_stereo_center(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool append_reagent_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_append_reagent_name(&has_bits);
          append_reagent_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string append_to_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_append_to_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReactionProto.Reaction.append_to_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool query_files_in_current_directory = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_query_files_in_current_directory(&has_bits);
          query_files_in_current_directory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string reaction_directory = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_reaction_directory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReactionProto.Reaction.reaction_directory");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool find_kekule_forms_for_bad_valence = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_find_kekule_forms_for_bad_valence(&has_bits);
          find_kekule_forms_for_bad_valence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool make_implicit_hydrogens_explicit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_make_implicit_hydrogens_explicit(&has_bits);
          make_implicit_hydrogens_explicit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ReactionProto.ScaffoldMatchConditions scaffold_match_conditions = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_scaffold_match_conditions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool noop_reaction = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_noop_reaction(&has_bits);
          noop_reaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Reaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReactionProto.Reaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string comment = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ReactionProto.Reaction.comment");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_comment(), target);
  }

  // optional .ReactionProto.ScaffoldReactionSite scaffold = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::scaffold(this), target, stream);
  }

  // repeated .ReactionProto.SidechainReactionSite sidechain = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sidechain_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sidechain(i), target, stream);
  }

  // repeated .ReactionProto.StereoCenter reaction_stereo_center = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reaction_stereo_center_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_reaction_stereo_center(i), target, stream);
  }

  // optional bool append_reagent_name = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_append_reagent_name(), target);
  }

  // optional string append_to_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_append_to_name().data(), static_cast<int>(this->_internal_append_to_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ReactionProto.Reaction.append_to_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_append_to_name(), target);
  }

  // optional bool query_files_in_current_directory = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_query_files_in_current_directory(), target);
  }

  // optional string reaction_directory = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reaction_directory().data(), static_cast<int>(this->_internal_reaction_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ReactionProto.Reaction.reaction_directory");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_reaction_directory(), target);
  }

  // optional bool find_kekule_forms_for_bad_valence = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_find_kekule_forms_for_bad_valence(), target);
  }

  // optional bool make_implicit_hydrogens_explicit = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_make_implicit_hydrogens_explicit(), target);
  }

  // optional .ReactionProto.ScaffoldMatchConditions scaffold_match_conditions = 12;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::scaffold_match_conditions(this), target, stream);
  }

  // optional bool noop_reaction = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_noop_reaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReactionProto.Reaction)
  return target;
}

size_t Reaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReactionProto.Reaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ReactionProto.SidechainReactionSite sidechain = 3;
  total_size += 1UL * this->_internal_sidechain_size();
  for (const auto& msg : this->sidechain_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ReactionProto.StereoCenter reaction_stereo_center = 4;
  total_size += 1UL * this->_internal_reaction_stereo_center_size();
  for (const auto& msg : this->reaction_stereo_center_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string comment = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comment());
    }

    // optional string append_to_name = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_append_to_name());
    }

    // optional string reaction_directory = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reaction_directory());
    }

    // optional .ReactionProto.ScaffoldReactionSite scaffold = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scaffold_);
    }

    // optional .ReactionProto.ScaffoldMatchConditions scaffold_match_conditions = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scaffold_match_conditions_);
    }

    // optional bool append_reagent_name = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool query_files_in_current_directory = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool find_kekule_forms_for_bad_valence = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool make_implicit_hydrogens_explicit = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool noop_reaction = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReactionProto.Reaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Reaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Reaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReactionProto.Reaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReactionProto.Reaction)
    MergeFrom(*source);
  }
}

void Reaction::MergeFrom(const Reaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReactionProto.Reaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sidechain_.MergeFrom(from.sidechain_);
  reaction_stereo_center_.MergeFrom(from.reaction_stereo_center_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_comment(from._internal_comment());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_append_to_name(from._internal_append_to_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_reaction_directory(from._internal_reaction_directory());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_scaffold()->::ReactionProto::ScaffoldReactionSite::MergeFrom(from._internal_scaffold());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_scaffold_match_conditions()->::ReactionProto::ScaffoldMatchConditions::MergeFrom(from._internal_scaffold_match_conditions());
    }
    if (cached_has_bits & 0x00000020u) {
      append_reagent_name_ = from.append_reagent_name_;
    }
    if (cached_has_bits & 0x00000040u) {
      query_files_in_current_directory_ = from.query_files_in_current_directory_;
    }
    if (cached_has_bits & 0x00000080u) {
      find_kekule_forms_for_bad_valence_ = from.find_kekule_forms_for_bad_valence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      make_implicit_hydrogens_explicit_ = from.make_implicit_hydrogens_explicit_;
    }
    if (cached_has_bits & 0x00000200u) {
      noop_reaction_ = from.noop_reaction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Reaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReactionProto.Reaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reaction::CopyFrom(const Reaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReactionProto.Reaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reaction::IsInitialized() const {
  return true;
}

void Reaction::InternalSwap(Reaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sidechain_.InternalSwap(&other->sidechain_);
  reaction_stereo_center_.InternalSwap(&other->reaction_stereo_center_);
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  append_to_name_.Swap(&other->append_to_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reaction_directory_.Swap(&other->reaction_directory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Reaction, noop_reaction_)
      + sizeof(Reaction::noop_reaction_)
      - PROTOBUF_FIELD_OFFSET(Reaction, scaffold_)>(
          reinterpret_cast<char*>(&scaffold_),
          reinterpret_cast<char*>(&other->scaffold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Reaction::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ReactionProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ReactionProto::MatchConditions* Arena::CreateMaybeMessage< ::ReactionProto::MatchConditions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::MatchConditions >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::ScaffoldMatchConditions* Arena::CreateMaybeMessage< ::ReactionProto::ScaffoldMatchConditions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::ScaffoldMatchConditions >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::SidechainMatchConditions* Arena::CreateMaybeMessage< ::ReactionProto::SidechainMatchConditions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::SidechainMatchConditions >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::PairOfAtoms* Arena::CreateMaybeMessage< ::ReactionProto::PairOfAtoms >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::PairOfAtoms >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::MatchedAtomInComponent* Arena::CreateMaybeMessage< ::ReactionProto::MatchedAtomInComponent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::MatchedAtomInComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::StereoCenterComponent* Arena::CreateMaybeMessage< ::ReactionProto::StereoCenterComponent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::StereoCenterComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::StereoCenter* Arena::CreateMaybeMessage< ::ReactionProto::StereoCenter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::StereoCenter >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::BondToBeMade* Arena::CreateMaybeMessage< ::ReactionProto::BondToBeMade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::BondToBeMade >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::InterParticleBond* Arena::CreateMaybeMessage< ::ReactionProto::InterParticleBond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::InterParticleBond >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::ReplaceAtom* Arena::CreateMaybeMessage< ::ReactionProto::ReplaceAtom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::ReplaceAtom >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::WedgeBond* Arena::CreateMaybeMessage< ::ReactionProto::WedgeBond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::WedgeBond >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::ChangeElement* Arena::CreateMaybeMessage< ::ReactionProto::ChangeElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::ChangeElement >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::FormalCharge* Arena::CreateMaybeMessage< ::ReactionProto::FormalCharge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::FormalCharge >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::ChangeFormalCharge* Arena::CreateMaybeMessage< ::ReactionProto::ChangeFormalCharge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::ChangeFormalCharge >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::PlaceIsotope* Arena::CreateMaybeMessage< ::ReactionProto::PlaceIsotope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::PlaceIsotope >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::IncrementIsotope* Arena::CreateMaybeMessage< ::ReactionProto::IncrementIsotope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::IncrementIsotope >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::BondLength* Arena::CreateMaybeMessage< ::ReactionProto::BondLength >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::BondLength >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::BondAngle* Arena::CreateMaybeMessage< ::ReactionProto::BondAngle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::BondAngle >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::DihedralAngle* Arena::CreateMaybeMessage< ::ReactionProto::DihedralAngle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::DihedralAngle >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::RotateFragment* Arena::CreateMaybeMessage< ::ReactionProto::RotateFragment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::RotateFragment >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::ThreeDReplace* Arena::CreateMaybeMessage< ::ReactionProto::ThreeDReplace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::ThreeDReplace >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::NoReaction* Arena::CreateMaybeMessage< ::ReactionProto::NoReaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::NoReaction >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::ReactionSite* Arena::CreateMaybeMessage< ::ReactionProto::ReactionSite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::ReactionSite >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::ScaffoldReactionSite* Arena::CreateMaybeMessage< ::ReactionProto::ScaffoldReactionSite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::ScaffoldReactionSite >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::SidechainReactionSite* Arena::CreateMaybeMessage< ::ReactionProto::SidechainReactionSite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::SidechainReactionSite >(arena);
}
template<> PROTOBUF_NOINLINE ::ReactionProto::Reaction* Arena::CreateMaybeMessage< ::ReactionProto::Reaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReactionProto::Reaction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
