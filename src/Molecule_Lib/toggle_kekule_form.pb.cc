// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Molecule_Lib/toggle_kekule_form.proto

#include "Molecule_Lib/toggle_kekule_form.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KekuleBond_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto;
namespace ToggleKekuleForm {
class KekuleBondDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KekuleBond> _instance;
} _KekuleBond_default_instance_;
class ToggleKekuleFormDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ToggleKekuleForm> _instance;
} _ToggleKekuleForm_default_instance_;
}  // namespace ToggleKekuleForm
static void InitDefaultsscc_info_KekuleBond_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ToggleKekuleForm::_KekuleBond_default_instance_;
    new (ptr) ::ToggleKekuleForm::KekuleBond();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KekuleBond_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KekuleBond_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto}, {}};

static void InitDefaultsscc_info_ToggleKekuleForm_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ToggleKekuleForm::_ToggleKekuleForm_default_instance_;
    new (ptr) ::ToggleKekuleForm::ToggleKekuleForm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ToggleKekuleForm_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ToggleKekuleForm_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto}, {
      &scc_info_KekuleBond_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ToggleKekuleForm::KekuleBond, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ToggleKekuleForm::KekuleBond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ToggleKekuleForm::KekuleBond, a1_),
  PROTOBUF_FIELD_OFFSET(::ToggleKekuleForm::KekuleBond, a2_),
  PROTOBUF_FIELD_OFFSET(::ToggleKekuleForm::KekuleBond, btype_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ToggleKekuleForm::ToggleKekuleForm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ToggleKekuleForm::ToggleKekuleForm, bond_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::ToggleKekuleForm::KekuleBond)},
  { 11, -1, sizeof(::ToggleKekuleForm::ToggleKekuleForm)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ToggleKekuleForm::_KekuleBond_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ToggleKekuleForm::_ToggleKekuleForm_default_instance_),
};

const char descriptor_table_protodef_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%Molecule_Lib/toggle_kekule_form.proto\022"
  "\020ToggleKekuleForm\032\037Molecule_Lib/substruc"
  "ture.proto\"Q\n\nKekuleBond\022\n\n\002a1\030\001 \001(\005\022\n\n\002"
  "a2\030\002 \001(\005\022+\n\005btype\030\003 \001(\0162\034.SubstructureSe"
  "arch.BondType\">\n\020ToggleKekuleForm\022*\n\004bon"
  "d\030\001 \003(\0132\034.ToggleKekuleForm.KekuleBond"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto_deps[1] = {
  &::descriptor_table_Molecule_5fLib_2fsubstructure_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto_sccs[2] = {
  &scc_info_KekuleBond_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto.base,
  &scc_info_ToggleKekuleForm_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto = {
  false, false, descriptor_table_protodef_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto, "Molecule_Lib/toggle_kekule_form.proto", 237,
  &descriptor_table_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto_once, descriptor_table_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto_sccs, descriptor_table_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto::offsets,
  file_level_metadata_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto, 2, file_level_enum_descriptors_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto, file_level_service_descriptors_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto)), true);
namespace ToggleKekuleForm {

// ===================================================================

class KekuleBond::_Internal {
 public:
  using HasBits = decltype(std::declval<KekuleBond>()._has_bits_);
  static void set_has_a1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_a2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_btype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

KekuleBond::KekuleBond(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ToggleKekuleForm.KekuleBond)
}
KekuleBond::KekuleBond(const KekuleBond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&a1_, &from.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&btype_) -
    reinterpret_cast<char*>(&a1_)) + sizeof(btype_));
  // @@protoc_insertion_point(copy_constructor:ToggleKekuleForm.KekuleBond)
}

void KekuleBond::SharedCtor() {
  ::memset(&a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a2_) -
      reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
  btype_ = 3;
}

KekuleBond::~KekuleBond() {
  // @@protoc_insertion_point(destructor:ToggleKekuleForm.KekuleBond)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KekuleBond::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KekuleBond::ArenaDtor(void* object) {
  KekuleBond* _this = reinterpret_cast< KekuleBond* >(object);
  (void)_this;
}
void KekuleBond::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KekuleBond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KekuleBond& KekuleBond::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KekuleBond_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto.base);
  return *internal_default_instance();
}


void KekuleBond::Clear() {
// @@protoc_insertion_point(message_clear_start:ToggleKekuleForm.KekuleBond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&a1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&a2_) -
        reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
    btype_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KekuleBond::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_a1(&has_bits);
          a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_a2(&has_bits);
          a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SubstructureSearch.BondType btype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SubstructureSearch::BondType_IsValid(val))) {
            _internal_set_btype(static_cast<::SubstructureSearch::BondType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KekuleBond::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToggleKekuleForm.KekuleBond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_a1(), target);
  }

  // optional int32 a2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_a2(), target);
  }

  // optional .SubstructureSearch.BondType btype = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_btype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToggleKekuleForm.KekuleBond)
  return target;
}

size_t KekuleBond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ToggleKekuleForm.KekuleBond)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 a1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_a1());
    }

    // optional int32 a2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_a2());
    }

    // optional .SubstructureSearch.BondType btype = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_btype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KekuleBond::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ToggleKekuleForm.KekuleBond)
  GOOGLE_DCHECK_NE(&from, this);
  const KekuleBond* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KekuleBond>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ToggleKekuleForm.KekuleBond)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ToggleKekuleForm.KekuleBond)
    MergeFrom(*source);
  }
}

void KekuleBond::MergeFrom(const KekuleBond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ToggleKekuleForm.KekuleBond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      a1_ = from.a1_;
    }
    if (cached_has_bits & 0x00000002u) {
      a2_ = from.a2_;
    }
    if (cached_has_bits & 0x00000004u) {
      btype_ = from.btype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KekuleBond::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ToggleKekuleForm.KekuleBond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KekuleBond::CopyFrom(const KekuleBond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ToggleKekuleForm.KekuleBond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KekuleBond::IsInitialized() const {
  return true;
}

void KekuleBond::InternalSwap(KekuleBond* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KekuleBond, a2_)
      + sizeof(KekuleBond::a2_)
      - PROTOBUF_FIELD_OFFSET(KekuleBond, a1_)>(
          reinterpret_cast<char*>(&a1_),
          reinterpret_cast<char*>(&other->a1_));
  swap(btype_, other->btype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KekuleBond::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ToggleKekuleForm::_Internal {
 public:
};

ToggleKekuleForm::ToggleKekuleForm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bond_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ToggleKekuleForm.ToggleKekuleForm)
}
ToggleKekuleForm::ToggleKekuleForm(const ToggleKekuleForm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bond_(from.bond_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ToggleKekuleForm.ToggleKekuleForm)
}

void ToggleKekuleForm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ToggleKekuleForm_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto.base);
}

ToggleKekuleForm::~ToggleKekuleForm() {
  // @@protoc_insertion_point(destructor:ToggleKekuleForm.ToggleKekuleForm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ToggleKekuleForm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ToggleKekuleForm::ArenaDtor(void* object) {
  ToggleKekuleForm* _this = reinterpret_cast< ToggleKekuleForm* >(object);
  (void)_this;
}
void ToggleKekuleForm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToggleKekuleForm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ToggleKekuleForm& ToggleKekuleForm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ToggleKekuleForm_Molecule_5fLib_2ftoggle_5fkekule_5fform_2eproto.base);
  return *internal_default_instance();
}


void ToggleKekuleForm::Clear() {
// @@protoc_insertion_point(message_clear_start:ToggleKekuleForm.ToggleKekuleForm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bond_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToggleKekuleForm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ToggleKekuleForm.KekuleBond bond = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bond(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToggleKekuleForm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToggleKekuleForm.ToggleKekuleForm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ToggleKekuleForm.KekuleBond bond = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bond_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bond(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToggleKekuleForm.ToggleKekuleForm)
  return target;
}

size_t ToggleKekuleForm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ToggleKekuleForm.ToggleKekuleForm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ToggleKekuleForm.KekuleBond bond = 1;
  total_size += 1UL * this->_internal_bond_size();
  for (const auto& msg : this->bond_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToggleKekuleForm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ToggleKekuleForm.ToggleKekuleForm)
  GOOGLE_DCHECK_NE(&from, this);
  const ToggleKekuleForm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToggleKekuleForm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ToggleKekuleForm.ToggleKekuleForm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ToggleKekuleForm.ToggleKekuleForm)
    MergeFrom(*source);
  }
}

void ToggleKekuleForm::MergeFrom(const ToggleKekuleForm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ToggleKekuleForm.ToggleKekuleForm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bond_.MergeFrom(from.bond_);
}

void ToggleKekuleForm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ToggleKekuleForm.ToggleKekuleForm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToggleKekuleForm::CopyFrom(const ToggleKekuleForm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ToggleKekuleForm.ToggleKekuleForm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToggleKekuleForm::IsInitialized() const {
  return true;
}

void ToggleKekuleForm::InternalSwap(ToggleKekuleForm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bond_.InternalSwap(&other->bond_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToggleKekuleForm::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ToggleKekuleForm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ToggleKekuleForm::KekuleBond* Arena::CreateMaybeMessage< ::ToggleKekuleForm::KekuleBond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ToggleKekuleForm::KekuleBond >(arena);
}
template<> PROTOBUF_NOINLINE ::ToggleKekuleForm::ToggleKekuleForm* Arena::CreateMaybeMessage< ::ToggleKekuleForm::ToggleKekuleForm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ToggleKekuleForm::ToggleKekuleForm >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
