// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: toggle_kekule_form.proto

#include "toggle_kekule_form.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_toggle_5fkekule_5fform_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_toggle_5fkekule_5fform_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_KekuleBond;
}  // namespace protobuf_toggle_5fkekule_5fform_2eproto
namespace ToggleKekuleForm {
class KekuleBondDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KekuleBond>
      _instance;
} _KekuleBond_default_instance_;
class ToggleKekuleFormDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ToggleKekuleForm>
      _instance;
} _ToggleKekuleForm_default_instance_;
}  // namespace ToggleKekuleForm
namespace protobuf_toggle_5fkekule_5fform_2eproto {
static void InitDefaultsKekuleBond() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ToggleKekuleForm::_KekuleBond_default_instance_;
    new (ptr) ::ToggleKekuleForm::KekuleBond();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ToggleKekuleForm::KekuleBond::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KekuleBond =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKekuleBond}, {}};

static void InitDefaultsToggleKekuleForm() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ToggleKekuleForm::_ToggleKekuleForm_default_instance_;
    new (ptr) ::ToggleKekuleForm::ToggleKekuleForm();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ToggleKekuleForm::ToggleKekuleForm::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ToggleKekuleForm =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsToggleKekuleForm}, {
      &protobuf_toggle_5fkekule_5fform_2eproto::scc_info_KekuleBond.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_KekuleBond.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ToggleKekuleForm.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ToggleKekuleForm::KekuleBond, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ToggleKekuleForm::KekuleBond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ToggleKekuleForm::KekuleBond, a1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ToggleKekuleForm::KekuleBond, a2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ToggleKekuleForm::KekuleBond, btype_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ToggleKekuleForm::ToggleKekuleForm, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ToggleKekuleForm::ToggleKekuleForm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ToggleKekuleForm::ToggleKekuleForm, bond_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::ToggleKekuleForm::KekuleBond)},
  { 11, 17, sizeof(::ToggleKekuleForm::ToggleKekuleForm)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ToggleKekuleForm::_KekuleBond_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ToggleKekuleForm::_ToggleKekuleForm_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "toggle_kekule_form.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030toggle_kekule_form.proto\022\020ToggleKekule"
      "Form\032\037Molecule_Lib/substructure.proto\"Q\n"
      "\nKekuleBond\022\n\n\002a1\030\001 \001(\005\022\n\n\002a2\030\002 \001(\005\022+\n\005b"
      "type\030\003 \001(\0162\034.SubstructureSearch.BondType"
      "\">\n\020ToggleKekuleForm\022*\n\004bond\030\001 \003(\0132\034.Tog"
      "gleKekuleForm.KekuleBond"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 224);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "toggle_kekule_form.proto", &protobuf_RegisterTypes);
  ::protobuf_Molecule_5fLib_2fsubstructure_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_toggle_5fkekule_5fform_2eproto
namespace ToggleKekuleForm {

// ===================================================================

void KekuleBond::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KekuleBond::kA1FieldNumber;
const int KekuleBond::kA2FieldNumber;
const int KekuleBond::kBtypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KekuleBond::KekuleBond()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_toggle_5fkekule_5fform_2eproto::scc_info_KekuleBond.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ToggleKekuleForm.KekuleBond)
}
KekuleBond::KekuleBond(const KekuleBond& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&a1_, &from.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&btype_) -
    reinterpret_cast<char*>(&a1_)) + sizeof(btype_));
  // @@protoc_insertion_point(copy_constructor:ToggleKekuleForm.KekuleBond)
}

void KekuleBond::SharedCtor() {
  ::memset(&a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a2_) -
      reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
  btype_ = 3;
}

KekuleBond::~KekuleBond() {
  // @@protoc_insertion_point(destructor:ToggleKekuleForm.KekuleBond)
  SharedDtor();
}

void KekuleBond::SharedDtor() {
}

void KekuleBond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KekuleBond::descriptor() {
  ::protobuf_toggle_5fkekule_5fform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_toggle_5fkekule_5fform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KekuleBond& KekuleBond::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_toggle_5fkekule_5fform_2eproto::scc_info_KekuleBond.base);
  return *internal_default_instance();
}


void KekuleBond::Clear() {
// @@protoc_insertion_point(message_clear_start:ToggleKekuleForm.KekuleBond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&a1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&a2_) -
        reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
    btype_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KekuleBond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ToggleKekuleForm.KekuleBond)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 a1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_a1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 a2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_a2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SubstructureSearch.BondType btype = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SubstructureSearch::BondType_IsValid(value)) {
            set_btype(static_cast< ::SubstructureSearch::BondType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ToggleKekuleForm.KekuleBond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ToggleKekuleForm.KekuleBond)
  return false;
#undef DO_
}

void KekuleBond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ToggleKekuleForm.KekuleBond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->a1(), output);
  }

  // optional int32 a2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->a2(), output);
  }

  // optional .SubstructureSearch.BondType btype = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->btype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ToggleKekuleForm.KekuleBond)
}

::google::protobuf::uint8* KekuleBond::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ToggleKekuleForm.KekuleBond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->a1(), target);
  }

  // optional int32 a2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->a2(), target);
  }

  // optional .SubstructureSearch.BondType btype = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->btype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToggleKekuleForm.KekuleBond)
  return target;
}

size_t KekuleBond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ToggleKekuleForm.KekuleBond)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 a1 = 1;
    if (has_a1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a1());
    }

    // optional int32 a2 = 2;
    if (has_a2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a2());
    }

    // optional .SubstructureSearch.BondType btype = 3;
    if (has_btype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->btype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KekuleBond::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ToggleKekuleForm.KekuleBond)
  GOOGLE_DCHECK_NE(&from, this);
  const KekuleBond* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KekuleBond>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ToggleKekuleForm.KekuleBond)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ToggleKekuleForm.KekuleBond)
    MergeFrom(*source);
  }
}

void KekuleBond::MergeFrom(const KekuleBond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ToggleKekuleForm.KekuleBond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      a1_ = from.a1_;
    }
    if (cached_has_bits & 0x00000002u) {
      a2_ = from.a2_;
    }
    if (cached_has_bits & 0x00000004u) {
      btype_ = from.btype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KekuleBond::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ToggleKekuleForm.KekuleBond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KekuleBond::CopyFrom(const KekuleBond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ToggleKekuleForm.KekuleBond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KekuleBond::IsInitialized() const {
  return true;
}

void KekuleBond::Swap(KekuleBond* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KekuleBond::InternalSwap(KekuleBond* other) {
  using std::swap;
  swap(a1_, other->a1_);
  swap(a2_, other->a2_);
  swap(btype_, other->btype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KekuleBond::GetMetadata() const {
  protobuf_toggle_5fkekule_5fform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_toggle_5fkekule_5fform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ToggleKekuleForm::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToggleKekuleForm::kBondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToggleKekuleForm::ToggleKekuleForm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_toggle_5fkekule_5fform_2eproto::scc_info_ToggleKekuleForm.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ToggleKekuleForm.ToggleKekuleForm)
}
ToggleKekuleForm::ToggleKekuleForm(const ToggleKekuleForm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      bond_(from.bond_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ToggleKekuleForm.ToggleKekuleForm)
}

void ToggleKekuleForm::SharedCtor() {
}

ToggleKekuleForm::~ToggleKekuleForm() {
  // @@protoc_insertion_point(destructor:ToggleKekuleForm.ToggleKekuleForm)
  SharedDtor();
}

void ToggleKekuleForm::SharedDtor() {
}

void ToggleKekuleForm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ToggleKekuleForm::descriptor() {
  ::protobuf_toggle_5fkekule_5fform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_toggle_5fkekule_5fform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ToggleKekuleForm& ToggleKekuleForm::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_toggle_5fkekule_5fform_2eproto::scc_info_ToggleKekuleForm.base);
  return *internal_default_instance();
}


void ToggleKekuleForm::Clear() {
// @@protoc_insertion_point(message_clear_start:ToggleKekuleForm.ToggleKekuleForm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bond_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ToggleKekuleForm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ToggleKekuleForm.ToggleKekuleForm)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ToggleKekuleForm.KekuleBond bond = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bond()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ToggleKekuleForm.ToggleKekuleForm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ToggleKekuleForm.ToggleKekuleForm)
  return false;
#undef DO_
}

void ToggleKekuleForm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ToggleKekuleForm.ToggleKekuleForm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ToggleKekuleForm.KekuleBond bond = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bond_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->bond(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ToggleKekuleForm.ToggleKekuleForm)
}

::google::protobuf::uint8* ToggleKekuleForm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ToggleKekuleForm.ToggleKekuleForm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ToggleKekuleForm.KekuleBond bond = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bond_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->bond(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToggleKekuleForm.ToggleKekuleForm)
  return target;
}

size_t ToggleKekuleForm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ToggleKekuleForm.ToggleKekuleForm)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ToggleKekuleForm.KekuleBond bond = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->bond_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bond(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToggleKekuleForm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ToggleKekuleForm.ToggleKekuleForm)
  GOOGLE_DCHECK_NE(&from, this);
  const ToggleKekuleForm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ToggleKekuleForm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ToggleKekuleForm.ToggleKekuleForm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ToggleKekuleForm.ToggleKekuleForm)
    MergeFrom(*source);
  }
}

void ToggleKekuleForm::MergeFrom(const ToggleKekuleForm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ToggleKekuleForm.ToggleKekuleForm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bond_.MergeFrom(from.bond_);
}

void ToggleKekuleForm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ToggleKekuleForm.ToggleKekuleForm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToggleKekuleForm::CopyFrom(const ToggleKekuleForm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ToggleKekuleForm.ToggleKekuleForm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToggleKekuleForm::IsInitialized() const {
  return true;
}

void ToggleKekuleForm::Swap(ToggleKekuleForm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToggleKekuleForm::InternalSwap(ToggleKekuleForm* other) {
  using std::swap;
  CastToBase(&bond_)->InternalSwap(CastToBase(&other->bond_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ToggleKekuleForm::GetMetadata() const {
  protobuf_toggle_5fkekule_5fform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_toggle_5fkekule_5fform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ToggleKekuleForm
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ToggleKekuleForm::KekuleBond* Arena::CreateMaybeMessage< ::ToggleKekuleForm::KekuleBond >(Arena* arena) {
  return Arena::CreateInternal< ::ToggleKekuleForm::KekuleBond >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ToggleKekuleForm::ToggleKekuleForm* Arena::CreateMaybeMessage< ::ToggleKekuleForm::ToggleKekuleForm >(Arena* arena) {
  return Arena::CreateInternal< ::ToggleKekuleForm::ToggleKekuleForm >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
