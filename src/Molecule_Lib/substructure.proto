syntax = "proto2";

package SubstructureSearch;

import "Molecule_Lib/geometric_constraints.proto";

// Many of these protos fairly closely match correspondingly named
// classes in the C++ code.

enum Aromaticity {
  SS_ALIPHATIC = 1;
  SS_AROMATIC = 2;
}

// Names need to be chosen so as to not collide with existing
// symbols.
enum BondType {
  // Single bond.
  SS_SINGLE_BOND = 3;
  // Double bond.
  SS_DOUBLE_BOND = 4;
  // Triple bond.
  SS_TRIPLE_BOND = 5;
  // Aromatic Bond.
  SS_AROMATIC_BOND = 6;
  // Any kind of bond.
  SS_BOND = 7;
}

// For specifying logical expressions
enum Operator {
  // Or operator.
  SS_OR = 8;
  // And operator.
  SS_AND = 9;
  // XOR operator.
  SS_XOR = 10;
  // Low priority AND.
  SS_LP_AND = 11;
}

// In a chirality specification, some positions are atom
// numbers, and others may be an implicit Hydrogen. Leaving
// the door open to future lone pair specifications.
message AtomNumberHydrogenLonePair {
  enum HorLP {
    HYDROGEN = 1;
    LONEPAIR = 2;
  }
  oneof AtomNumberOr {
    uint32 atom_number = 1;
    HorLP h_or_lp = 2;
  }
}

message SubstructureChiralCenter {
  // Central atom, required.

  optional uint32 center = 1;

  optional AtomNumberHydrogenLonePair top_front = 2;

  optional AtomNumberHydrogenLonePair top_back = 3;

  optional AtomNumberHydrogenLonePair left_down = 4;

  optional AtomNumberHydrogenLonePair right_down = 5;
}

// A Substructure Bond has one or more bond specifications, combined
// via an OR operator, and the unique id of the atom at the other end.
message SubstructureBond {
  repeated BondType bond_type = 1;
  optional uint32 other_end = 2;
}

// When specifying how an environment is attached, there can be multiple
// points of attachment.
message SubstructureEnvironmentBond {
  repeated BondType bond_type = 1;
  repeated uint32 other_end = 2;
}

// For a given element, how many are needed?
message ElementsNeeded {
  oneof ElementSpecifier {
    uint32 atomic_number = 1;
    string atomic_symbol = 2;
  }

  repeated uint32 hits_needed = 3;
  optional uint32 min_hits_needed = 4;
  optional uint32 max_hits_needed = 5;
}

message NoMatchedAtomsBetween {
  optional uint32 a1 = 1;
  optional uint32 a2 = 2;
  // Must mimic the ...{...} syntax of a smarts.
  // Must start and end with braces.
  // {3-5}, {3[c]}, {>4[c]}, {>5}
  optional string qualifier = 3;
}

message LinkAtoms {
  optional uint32 a1 = 1;
  optional uint32 a2 = 2;
  repeated uint32 distance = 3;
  optional uint32 min_distance = 4;
  optional uint32 max_distance = 5;
}

// How an environment is attached to matched atoms.
// There are two ways of specifying an environment
// attachment. One via a proto, and the other as a string.
//   1.
//      SubstructureEnvironmentBond
//   2.
//      substructure_bond: "-!@ 1 2 3"
// Only one of these means of specifying the bonding can be present.
// I should make this a oneof directive, but things start to get too
// complex.
// Note that there is no means of saying attach
// via a single bond to matched atom 1, and via a double
// bond to matched atom 2.
message EnvironmentAttachment {
  // Scheme 1.
  repeated uint32 attachment_point = 1;

  repeated BondType btype = 2;

  // Scheme 2.
  optional string substructure_bond = 3;
}

message SubstructureRingEnvironment {
  optional SubstructureAtom substructure_atom = 1;

  optional uint32 min_hits_needed = 2;
  optional uint32 max_hits_needed = 3;
}

// Properties of a ring that are shared between ring specifiers
// and ring system specifiers.
message SubstructureRingBase {
  // Positive or negative match.
  optional bool match_as_match = 1;

  repeated uint32 hits_needed = 2;
  optional uint32 min_hits_needed = 3;
  optional uint32 max_hits_needed = 4;

  // The number of heteroatoms attached to the ring.
  repeated uint32 attached_heteroatom_count = 5;
  optional uint32 min_attached_heteroatom_count = 6;
  optional uint32 max_attached_heteroatom_count = 7;

  // The number of heteroatoms in the ring.
  repeated uint32 heteroatom_count = 8;
  optional uint32 min_heteroatom_count = 9;
  optional uint32 max_heteroatom_count = 10;

  // Number of exoclcylic connections. Atoms in a
  // fused system count towards ncon.
  repeated uint32 ncon = 11;
  optional uint32 min_ncon = 12;
  optional uint32 max_ncon = 13;

  // If multiple rings are being tested, they must all
  // be in the same fragment.
  optional bool all_hits_in_same_fragment = 14;

  // The number of ring bonds that are NOT single bonds.
  // Note that single, aromatic bonds do NOT count.
  // So, N1=CC=CO1, contains 2 within ring unsaturated bonds.
  repeated uint32 within_ring_unsaturation = 16;
  optional uint32 min_within_ring_unsaturation = 17;
  optional uint32 max_within_ring_unsaturation = 18;

  // An isolated ring will have zero, naphthalene will have 1, and adamantane
  // will have 2
  repeated uint32 largest_number_of_bonds_shared_with_another_ring = 19;
  optional uint32 min_largest_number_of_bonds_shared_with_another_ring = 20;
  optional uint32 max_largest_number_of_bonds_shared_with_another_ring = 21;

  // The number of atoms in the ring that have pi electrons.
  repeated uint32 atoms_with_pi_electrons = 26;
  optional uint32 min_atoms_with_pi_electrons = 27;
  optional uint32 max_atoms_with_pi_electrons = 28;

  // The number of neighbors sharing two or more bonds.
  repeated uint32 strongly_fused_ring_neighbours = 29;
  optional uint32 min_strongly_fused_ring_neighbours = 30;
  optional uint32 max_strongly_fused_ring_neighbours = 31;

  // Conditions that must match the an atom in the ring and
  // what is joined.
  // For example, to look for a phenolic Oxygen, c-[OD1]
  // What is unusual here is that the first matched atom
  // in a ring environment is a ring atom. That is different
  // from how regular query environments match.
  optional string environment = 22;

  // By default, only the first atom in a ring environment can
  // be in the ring. If that condition is relaxed, then matched
  // atoms can include ring atoms.
  optional bool environment_can_match_in_ring_atoms = 23;

  // By default, matches to rings and ring systems do not create
  // matched atoms. But if requested, they can set a per-atom
  // value for the global_match_id.
  optional uint32 set_global_id = 24;

// Not supported from proto. Seems unnecessary.
//optional string define_heteroatoms = 24;
//optional string heteroatoms = 25;
}

message SubstructureRingSpecification {
  optional SubstructureRingBase base = 1;

  // The number of atoms in the ring.
  repeated uint32 ring_size = 2;
  optional uint32 min_ring_size = 3;
  optional uint32 max_ring_size = 4;

  // Whether or not the ring is aromatic.
  // If not specified, there are no restrictions.
  optional bool aromatic = 5;

  // the number of fused ring neighbors.
  repeated uint32 fused = 6;
  optional uint32 min_fused = 7;
  optional uint32 max_fused = 8;

  // Number of fused aromatic neighbors.
  // Note that if you have a molecule with zero rings,
  // these criteria will always fail, even something like
  // fused_aromatic_neighbours < 2
  // This of this as requiring "there is a ring which...".
  repeated uint32 fused_aromatic_neighbours = 9;
  optional uint32 min_fused_aromatic_neighbours = 10;
  optional uint32 max_fused_aromatic_neighbours = 11;

  repeated uint32 fused_non_aromatic_neighbours = 12;
  optional uint32 min_fused_non_aromatic_neighbours = 13;
  optional uint32 max_fused_non_aromatic_neighbours = 14;
}

// In a SubstructureRingSystemSpecification we can specify
// ring sizes as well as the number of occurrences needed.
message RingSizeRequirement {
  optional uint32 ring_size = 1;

  repeated uint32 count = 2;
  optional uint32 min_count = 3;
  optional uint32 max_count = 4;
}

message SubstructureRingSystemSpecification {
  optional SubstructureRingBase base = 1;

  // the number of SSSR rings in the system.
  repeated uint32 rings_in_system = 2;
  optional uint32 min_rings_in_system = 3;
  optional uint32 max_rings_in_system = 4;

  // Ring sizes that must be in the matched system.
  // No specification about number of occurrences.
  repeated uint32 ring_sizes = 5;
  optional uint32 min_ring_sizes = 6;
  optional uint32 max_ring_sizes = 7;

  // Detailed specification of how many instances of any ring
  // size to find.
  repeated RingSizeRequirement ring_size_count = 8;

  // Number of aromatic rings - any size.
  repeated uint32 aromatic_ring_count = 11;
  optional uint32 min_aromatic_ring_count = 12;
  optional uint32 max_aromatic_ring_count = 13;

  // Number of non aromatic rings - any size
  repeated uint32 non_aromatic_ring_count = 14;
  optional uint32 min_non_aromatic_ring_count = 15;
  optional uint32 max_non_aromatic_ring_count = 16;

  // The maximum number of fused neighbors associated with
  // any ring in the system. Naphthalene would be 1.
  repeated uint32 degree_of_fusion = 17;
  optional uint32 min_degree_of_fusion = 18;
  optional uint32 max_degree_of_fusion = 19;

  // The number of atoms in the system.
  repeated uint32 atoms_in_system = 20;
  optional uint32 min_atoms_in_system = 21;
  optional uint32 max_atoms_in_system = 22;

  // Number of substituent groups attached. Not
  // inter-ring groups.
  repeated uint32 number_spinach_groups = 23;
  optional uint32 min_number_spinach_groups = 24;
  optional uint32 max_number_spinach_groups = 25;

  // Number of inter-ring groups off the ring system.
  repeated uint32 number_non_spinach_groups = 26;
  optional uint32 min_number_non_spinach_groups = 27;
  optional uint32 max_number_non_spinach_groups = 28;

  // There exists a spinach group that has this many atoms.
  repeated uint32 atoms_in_spinach_group = 29;
  optional uint32 min_atoms_in_spinach_group = 30;
  optional uint32 max_atoms_in_spinach_group = 31;

  // The length of a spinach group - max bonds from the ring.
  repeated uint32 length_of_spinach_group = 32;
  optional uint32 min_length_of_spinach_group = 33;
  optional uint32 max_length_of_spinach_group = 34;

  // The number of bonds to another ring. Note that
  // any match is considered OK.
  repeated uint32 distance_to_another_ring = 35;
  optional uint32 min_distance_to_another_ring = 36;
  optional uint32 max_distance_to_another_ring = 37;

  // The number of rings in the system that are strongly
  // fused to another ring n the system
  repeated uint32 strongly_fused_ring_count = 38;
  optional uint32 min_strongly_fused_ring_count = 39;
  optional uint32 max_strongly_fused_ring_count = 40;
}

message SubstructureAtomSpecifier {
  // The Element to match as symbol.
  repeated string atomic_symbol = 1;

  // The Element to match as atomic number.
  repeated uint32 atomic_number = 2;

  // Number of explicit connections.
  repeated uint32 ncon = 3;
  optional uint32 min_ncon = 4;
  optional uint32 max_ncon = 5;

  // Number of explicit connections out to 2 bonds.
  repeated uint32 ncon2 = 6;
  optional uint32 min_ncon2 = 7;
  optional uint32 max_ncon2 = 8;

  // Number of bonds - single=1, double=2, aromatic undefined
  repeated uint32 nbonds = 9;
  optional uint32 min_nbonds = 10;
  optional uint32 max_nbonds = 11;

  // Formal charge.
  repeated int32 formal_charge = 12;
  optional int32 min_formal_charge = 13;
  optional int32 max_formal_charge = 14;

  // Number of SSSR rings.
  repeated uint32 nrings = 15;
  optional uint32 min_nrings = 16;
  optional uint32 max_nrings = 17;

  // Number of ring bonds.
  repeated uint32 ring_bond_count = 18;
  optional uint32 min_ring_bond_count = 19;
  optional uint32 max_ring_bond_count = 20;

  repeated uint32 ring_size = 21;
  optional uint32 min_ring_size = 22;
  optional uint32 max_ring_size = 23;

  repeated uint32 hcount = 24;
  optional uint32 min_hcount = 25;
  optional uint32 max_hcount = 26;

  // Aromaticity.
  optional bool aromatic = 27;

  // Chiral or not.
  optional bool chirality = 28;

  // Aromatic ring sizes.
  repeated uint32 aromatic_ring_size = 30;
  optional uint32 min_aromatic_ring_size = 31;
  optional uint32 max_aromatic_ring_size = 32;

  // Aliphatic ring sizes.
  repeated uint32 aliphatic_ring_size = 33;
  optional uint32 min_aliphatic_ring_size = 34;
  optional uint32 max_aliphatic_ring_size = 35;

  // Attached heteroatom count.
  repeated uint32 attached_heteroatom_count = 36;
  optional uint32 min_attached_heteroatom_count = 37;
  optional uint32 max_attached_heteroatom_count = 38;

  // Lone pair count.
  repeated uint32 lone_pair_count = 39;
  optional uint32 min_lone_pair_count = 40;
  optional uint32 max_lone_pair_count = 41;

  // Unsaturation = nbonds() - ncon().
  repeated uint32 unsaturation = 42;
  optional uint32 min_unsaturation = 43;
  optional uint32 max_unsaturation = 44;

  // Daylight X value - ncon including implicit Hydrogens.
  repeated uint32 daylight_x = 45;
  optional uint32 min_daylight_x = 46;
  optional uint32 max_daylight_x = 47;

  // Isotope.
  repeated uint32 isotope = 48;
  optional uint32 min_isotope = 49;
  optional uint32 max_isotope = 50;

  // Aryl neighbors.
  repeated uint32 aryl = 51;
  optional uint32 min_aryl = 52;
  optional uint32 max_aryl = 53;

  // Number of vinyl neighbors.
  repeated uint32 vinyl = 54;
  optional uint32 min_vinyl = 55;
  optional uint32 max_vinyl = 56;

  // Fused System Size.
  repeated uint32 fused_system_size = 57;
  optional uint32 min_fused_system_size = 58;
  optional uint32 max_fused_system_size = 59;

  // All aromatic rings containing atom must have Kekule forms.
  optional bool all_rings_kekule = 60;

  // Heteroatoms in ring.
  repeated uint32 heteroatoms_in_ring = 61;
  optional uint32 min_heteroatoms_in_ring = 62;
  optional uint32 max_heteroatoms_in_ring = 63;

  // Spinach related matching.
  //   -1 -> unspecified
  //    0 -> matched atom must not be in spinach
  //    1 -> matched atom must     be in spinach
  // In a molecule with no rings, there is no positive
  // match to spinach, but there will be a negative
  // match to a spinach specification.
  optional int32 match_spinach_only = 64;

  // Scaffold atoms attached to ring. Useful for distinguishing
  // "internal" and "terminal" rings.
  // Matches all atoms in a ring if a ring holding the atom
  // has this many scaffold bonds attached.
  repeated uint32 scaffold_bonds_attached_to_ring = 65;
  optional uint32 min_scaffold_bonds_attached_to_ring = 66;
  optional uint32 max_scaffold_bonds_attached_to_ring = 67;

  // Preference value associated with matching.
  optional int32 preference_value = 68;

  // Symmetry degree
  repeated uint32 symmetry_degree = 69;
  optional uint32 min_symmetry_degree = 70;
  optional uint32 max_symmetry_degree = 71;

  // Symmetry group for enforcing symmetry group matches.
  optional int32 symmetry_group = 72;

  // SubstructureAtomSpecifier's after the first one must
  // have an operator specified.
  optional Operator logical_operator = 76;

  // Atom type stored with the Atom.
  optional uint32 user_atom_type = 77;

  // Atom typing specification, done within the query.
  optional uint32 atom_type = 78;

  // This will be instantiated from the 'v' directive in a smarts.
  repeated uint32 valence = 79;
  optional uint32 min_valence = 80;
  optional uint32 max_valence = 81;
}

message SubstructureAtomEnvironment {
  optional uint32 id = 1;

  repeated SubstructureAtom substructure_atom = 2;

  optional string op = 3;
}

message SubstructureAtom {
  // The id must be present, and must be unique across SubstructureAtom's.
  optional int32 id = 1;

  optional bool match_as_match = 2;

  optional string text_identifier = 3;

  optional uint32 atom_map_number = 4;

  optional uint32 initial_atom_number = 5;

  // I do not understand what this is for. As implemented, the functionality
  // seems strange. Omitting for now.
  // optional uint32 or_id = 6;
  //optional int32 or_operator = 8;


  // A SubstructureAtom can consist of any number of individual choices of properties.
  repeated SubstructureAtomSpecifier atom_properties = 7;

  optional int32 ring_id = 9;

  // Matched atoms given the same fused_system_id must be
  // in the same fused system.
  optional uint32 fused_system_id = 10;

  // Matched atoms in the same fragment_id, must be in
  // the same fragment.
  optional int32 fragment_id = 11;

  optional double numeric_value = 12;

  // Matched atoms can be excluded from the embedings reported.
  optional bool include_in_embedding = 13;

  // An atom can be specified as a smarts, which might specify
  // multiple atoms, the smarts for a single atom, or a smiles,
  // which might also describe multiple atoms.
  oneof SmilesOrSmarts {
    string smarts = 14;
    string atom_smarts = 15;
    string smiles = 16;
  }

  // Specifications about atoms that are adjacent to the matched atoms.
  repeated SubstructureAtomEnvironment environment = 17;

  // Bonds can be specified either by a SubstructureBond or a bond smarts.
  repeated SubstructureBond query_bond = 21;

  // For convenience, bonding can be described as text bond smarts.
  // bond_smarts: "@^= 0", which is a ring XOR doublebond to matched atom 0.
  optional string bond_smarts = 22;

  // Single bond type specifications.
  repeated uint32 single_bond = 25;
  repeated uint32 double_bond = 26;
  repeated uint32 triple_bond = 27;
  repeated uint32 aromatic_bond = 28;
  repeated uint32 bond = 29;

  // The preferences that might be associated with this atom.
  repeated SubstructureAtomSpecifier preference = 23;

  // By default, low preference embeddings are discarded. Optionally
  // they can be summed.
  optional bool sum_all_preference_hits = 24;

  // Unmatched atoms attached.
  repeated uint32 unmatched_atoms_attached = 30;
  optional uint32 min_unmatched_atoms_attached = 31;
  optional uint32 max_unmatched_atoms_attached =  32;

  // We can do searches on atom types, giving a specific value
  // for an atom type. But often we just want to ensure that
  // one or more atoms are either the same or different.
  // Matched atoms with the same atom_type_group must have
  // the same atom types. If different groups, then the atom types
  // assigned must be different.
  optional uint32 atom_type_group = 33;

  // Per atom global match id value, used for matching query atoms
  // to atoms marked by global match conditions.
  optional uint32 global_match_id = 34;
}

// Specifications of the atoms adjacent to the matched atoms.
message SubstructureEnvironment {
  optional uint32 id = 1;

  // Various ways of describing the atoms that comprise the env.
  repeated string smarts = 3;
  repeated string smiles = 4;
  repeated SubstructureAtom query_atom = 5;

  // How the environment is attached.
  optional EnvironmentAttachment attachment = 6;

  repeated string bond = 7;

  // Different environments can be related by and and or groups.
  optional uint32 or_id = 8;
  optional uint32 and_id = 9;

  // The number of instances the environment must match each
  // embedding.
  repeated uint32 hits_needed = 10;
  optional uint32 min_hits_needed = 11;
  optional uint32 max_hits_needed = 12;

  // Examine the anchor atoms. If there are any other, unmatched
  // atoms at that site, reject the match.
  optional bool no_other_substituents_allowed = 13;

  // by default, environments can share the same attachment
  // point. That can be turned off.
  optional bool env_matches_can_share_attachment_points = 15;

  // Stop searching once a given number of matches are found.
  optional uint32 max_matches_to_find = 16;

  // When attempting to match an environment, if there is
  // not a match at an atom, then if there are only H atoms,
  // record that as a match.
  optional bool hydrogen_ok = 17;

  // If 2 environment matches are needed, you can ensure that
  // the come from 2 different matched atoms.
  optional uint32 max_env_matches_per_anchor = 18;
}

// Environments work if there is just one attachment point, but I
// ran into a case where what needed to be excluded involved two
// different connections to the matched nitrogen atom, N(~O)~[NH1]
// This could have been done with multiple environments combined
// with a logical operator, but that seems too complex.
// The assumption is that the first atom in the smarts
// matches a matched atom from the main query.
// Also useful for specifying exclusions. 
// We have an amine group that should NOT be certain types.
// Here the and operator is desirable.
//  
//  smarts: "[ND2H1]a@aC(=O)[OH]"
//  matched_atom_must_be {
//    atom: 0
//    smarts: "!N-C=[O,S]"
//    smarts: "!N[SD4](=*)(=*)"
//    smarts: "!N[#6H0X4]"

message MatchedAtomMatch {
  // The matched atom number. required.
  // If repeated, ALL such atoms must match. Should allow or conditions...
  repeated int32 atom = 1;

  // Smarts that must match at that atom.
  // First query atom must match the matched atom.
  // If the first character of the smarts is '!' that becomes
  // part of a rejection list, any match causes a rejection (any).
  // If it does not start with '!', then it is a positive
  // match, and we then require at least one of the positive
  // matches to match (or).
  repeated string smarts = 2;

  // Many of these can be combined in a logical expression.
  // The default will be AND.
  // Not currently implemented.
  optional Operator logexp = 3;
}

// Specifications for pairs of matched atoms.
message SeparatedAtoms {
  // A pair of matched atoms
  optional uint32 a1 = 1;
  optional uint32 a2 = 2;

  // And the required bonds between them.
  repeated uint32 bonds_between = 3;
  optional uint32 min_bonds_between = 4;
  optional uint32 max_bonds_between = 5;
}

message SingleSubstructureQuery {
  // Must be present, and unique across all SingleSubstructureQuery.
  optional int32 id = 1;

  // Free text stored with the query.
  optional string label = 2;
  optional string comment = 3;

  // Once an embedding has been found, do not try to find
  // more embeddings starting with that first matched atom.
  optional bool one_embedding_per_start_atom = 4;

  // Not sure if this is needed. Not tested.
  optional uint32 normalise_rc_per_hits_needed = 5;

  // Subtract subtract_from_rc from the return code of a
  // substructure search. But note that the number of embeddings
  // will remain unchanged.
  optional uint32 subtract_from_rc = 6;

  // Stop searching once max_matches_to_find embeddings have been found.
  optional uint32 max_matches_to_find = 8;

  // Set true by default.
  optional bool save_matched_atoms = 9;

  // Seems to specific, not tested.
  optional bool ncon_ignore_singly_connected = 10;

  // Set true by default. Benzene will have 24 matches.
  optional bool perceive_symmetric_equivalents = 11;

  // the matched atoms in an embedding must form a
  // ring, even though there was no ring specified
  // in the query.
  optional uint32 implicit_ring_condition = 12;

  // Once a match has been found in one fragment, only
  // look for matches in that fragment. Note that this
  // makes matching dependent on atom(fragment) ordering.
  optional bool all_hits_in_same_fragment = 13;

  // Restrict matching to the largest fragment. If there
  // are multiple largest fragment, it will choose the
  // first, even though there may be no matches there.
  optional bool only_match_largest_fragment = 14;

  // As embeddings are found, if a new embedding overlaps
  // with a previously found embedding, it is discarded.
  // Note that this may introduce an atom ordering dependence.
  optional bool embeddings_do_not_overlap = 15;

  // By default, low preference matches are discarded.
  // Instead, they can be sorted by their preference values.
  optional bool sort_by_preference_value = 16;

  // A query can be specified by a smarts or a smiles.
  oneof smiles_or_smarts {
     string smiles = 17;
     string smarts = 18;
  }

  // There can be any number of numeric values associated
  // with a query.
  repeated double numeric_value = 19;

  // Reject an embedding if there are any matched atoms between
  // two specified matched atoms. Useful for discerning directionality
  // in things like amides, esters and such.
  repeated NoMatchedAtomsBetween no_matched_atoms_between = 20;

  optional bool no_matched_atoms_between_exhaustive = 21;

  // Specify constraints on the distance between any two matched atoms.
  repeated LinkAtoms link_atoms = 22;

  optional bool fail_if_embeddings_too_close = 23;

  // The number of matched atoms that are used for determining
  // the distance between hits. By default, all matched
  // atoms are used. If any distance violates the constraint
  // the embedding is discarded. Note atom ordering dependency.
  optional uint32 distance_between_hits_ncheck = 24;

  // Unclear if this is useful or not. Use preferences.
  optional string sort_matches = 25;

  // Once embeddings are determined, check the number of
  // unmatched heteroatoms attached to the matched atoms. Discard
  // embedding unless this is satisfied.
  repeated uint32 attached_heteroatom_count = 26;
  optional uint32 min_attached_heteroatom_count = 27;
  optional uint32 max_attached_heteroatom_count = 28;

  // The number of hits that must be found. Return failure
  // unless satisfied.
  repeated uint32 hits_needed = 29;
  optional uint32 min_hits_needed = 30;
  optional uint32 max_hits_needed = 31;

  // Within each embedding, the number of ring atoms matched.
  repeated uint32 ring_atoms_matched = 32;
  optional uint32 min_ring_atoms_matched = 33;
  optional uint32 max_ring_atoms_matched = 34;

  // Within each embedding, the number of heteroatoms matched.
  repeated uint32 heteroatoms_matched = 35;
  optional uint32 min_heteroatoms_matched = 36;
  optional uint32 max_heteroatoms_matched = 37;

  // Only search the molecule if the number of heteroatoms
  // is satisfied.
  repeated uint32 heteroatoms_in_molecule = 38;
  optional uint32 min_heteroatoms_in_molecule = 39;
  optional uint32 max_heteroatoms_in_molecule = 40;

  // Only search the molecule if the natoms constraint
  // is matched.
  repeated uint32 natoms = 41;
  optional uint32 min_natoms = 42;
  optional uint32 max_natoms = 43;

  // Only search the molecule if the nrings constraint is
  // satisfied.
  repeated uint32 nrings = 44;
  optional uint32 min_nrings = 45;
  optional uint32 max_nrings = 46;

  // The number of non matched attached to matched atoms.
  repeated uint32 ncon = 47;
  optional uint32 min_ncon = 48;
  optional uint32 max_ncon = 49;

  // Only search the molecule if the fused_rings attribute is
  // satisfied.
  repeated uint32 fused_rings = 50;
  optional uint32 min_fused_rings = 51;
  optional uint32 max_fused_rings = 52;

  // Only seach the molecule if the strongly_fused_rings
  // attribute is satisfied.
  repeated uint32 strongly_fused_rings = 53;
  optional uint32 min_strongly_fused_rings = 54;
  optional uint32 max_strongly_fused_rings = 55;

  // Only seach the molecule if the isolated_rings attribute
  // is satisfied.
  repeated uint32 isolated_rings = 56;
  optional uint32 min_isolated_rings = 57;
  optional uint32 max_isolated_rings = 58;

  // An isolated ring object is a ring or ring sysem.
  // Only seach the molecule if the isolated_ring_objects
  // attribute is satisfied.
  repeated uint32 isolated_ring_objects = 59;
  optional uint32 min_isolated_ring_objects = 60;
  optional uint32 max_isolated_ring_objects = 61;

  // Only seach the molecule if the aromatic_rings attribute
  // is satisfied.
  repeated uint32 aromatic_rings = 62;
  optional uint32 min_aromatic_rings = 63;
  optional uint32 max_aromatic_rings = 64;

  // Only seach the molecule if the non_aromatic_rings attribute
  // is satisfied.
  repeated uint32 non_aromatic_rings = 65;
  optional uint32 min_non_aromatic_rings = 66;
  optional uint32 max_non_aromatic_rings = 67;

  // Matches that violate distance_between_hits will be discarded.
  // Beware that this depends on the order in which embeddings are
  // discovered, so you can get different results by reordering
  // the atoms in the molecule.
  // Note the interaction with distance_between_hits_ncheck.
  repeated uint32 distance_between_hits = 68;
  optional uint32 min_distance_between_hits = 69;
  optional uint32 max_distance_between_hits = 70;

  // Only search the molecule if number_isotopic_atoms attribute
  // is satisfied.
  repeated uint32 number_isotopic_atoms = 71;
  optional uint32 min_number_isotopic_atoms = 72;
  optional uint32 max_number_isotopic_atoms = 73;

  // Only search the molecule if number_fragments attribute
  // is satisfied.
  repeated uint32 number_fragments = 74;
  optional uint32 min_number_fragments = 75;
  optional uint32 max_number_fragments = 76;

  repeated uint32 distance_between_root_atoms = 77;
  optional uint32 min_distance_between_root_atoms = 78;
  optional uint32 max_distance_between_root_atoms = 79;

  // Only search the molecule if the atoms_in_spinach property
  // is satisfied.
  repeated uint32 atoms_in_spinach = 80;
  optional uint32 min_atoms_in_spinach = 81;
  optional uint32 max_atoms_in_spinach = 82;

  // Only search the molecule if the inter_ring_atoms property
  // is satisfied.
  repeated uint32 inter_ring_atoms = 83;
  optional uint32 min_inter_ring_atoms = 84;
  optional uint32 max_inter_ring_atoms = 85;

  // Once matching is complete, only report matches if the
  // number of unmatched atoms condition is met.
  repeated uint32 unmatched_atoms = 86;
  optional uint32 min_unmatched_atoms = 87;
  optional uint32 max_unmatched_atoms = 88;

  // Only search the molecule if the net_formal_charge property
  // is satisfied.
  repeated int32 net_formal_charge = 89;
  optional int32 min_net_formal_charge = 90;
  optional int32 max_net_formal_charge = 91;
  // The most common use case is looking for molecules that have
  // any net formal charge, so make that easy.
  // If set, will match if there is any formal charge.
  // Currently not implemented. TODO, fix this
  optional bool any_net_formal_charge = 92;

  // Once the matches are made, only accept if, across all
  // embeddings, this fraction of the atoms in the target
  // is satisfied.
  optional float min_fraction_atoms_matched = 93;
  optional float max_fraction_atoms_matched = 94;

  repeated SubstructureEnvironment environment = 95;
  repeated SubstructureEnvironment environment_no_match = 96;

  // By default the atoms in an environment only match unmatched
  // atoms. That can be changed.
  optional bool environment_must_match_unmatched_atoms = 97;

  // If specified in the query, will be passed to all
  // environments.
  optional bool env_matches_can_share_attachment_points = 98;

  // Specific requirements or restrictions on a particular matched atom.
  // These can all be done via recursive smarts, but the intent is to
  // lessen the need for complex recursive smarts.
  repeated MatchedAtomMatch matched_atom_must_be = 122;

  repeated SubstructureRingSpecification ring_specifier = 99;
  repeated Operator ring_specification_logexp = 100;

  repeated SubstructureRingSystemSpecification ring_system_specifier = 101;
  repeated Operator ring_system_specifier_logexp = 102;

  // Among the matched atoms, what elements must be present.
  repeated ElementsNeeded element_hits_needed = 103;

  // Only search the molecule if elements_needed is satisfied.
  repeated ElementsNeeded elements_needed = 104;

  // Only search the molecule if aromatic_atoms is satisfied.
  repeated uint32 aromatic_atoms = 105;
  optional uint32 min_aromatic_atoms = 106;
  optional uint32 max_aromatic_atoms = 107;

  // As embeddings are found, discard those that are duplicates
  // of embeddings already found.
  optional bool unique_embeddings_only = 110;

  // When the attached_heteroatom_count attribute is specified,
  // we can define which atomic numbers are to be considered
  // attached_heteroatom's.
  repeated uint32 heteroatoms = 112;

  // If set, then each match will set the id: atom in the
  // embedding.
  optional bool respect_initial_atom_numbering = 113;

  // If set, all hits will be merged into one. Yields a single
  // embedding with all atoms matched by any of the embeddings.
  optional bool compress_embeddings = 114;

  // Will be transferred to any substructure_Environment
  optional bool environments_can_share_attachment_points = 115;

  // Remember to assign a unique id to each.
  repeated SubstructureAtom query_atom = 116;

  // Chirality specification(s).
  repeated SubstructureChiralCenter chiral_centre = 117;

  // Atom typing specification, done within the query.
  optional string atom_type = 119;

  repeated GeometricConstraints.SetOfConstraints geometric_constraints = 120;

  // Bond separation between matched atoms.
  repeated SeparatedAtoms separated_atoms = 121;

  // Next to assign 123
}

// A SubstructureQuery is merely a collection of individual
// queries, held together with a logical expression.
message SubstructureQuery {
  optional string comment = 1;
  optional string name = 2;

  repeated SingleSubstructureQuery query = 3;

  repeated Operator logexp = 4;

  optional int32 match_each_component = 5;
}

// An interesting design choice. Should the various properties
// be specified as a message like this, or as is currently
// implemented. What really drove the decision was more about
// wishing to avoid too many layers of parentheses.
message MinMaxSpecifierInt {
  repeated int32 value = 1;
  optional int32 min = 2;
  optional int32 max = 3;
}

message MinMaxSpecifierUInt {
  repeated uint32 value = 1;
  optional uint32 min = 2;
  optional uint32 max = 3;
}

// When a query is matched, this proto describes the results.
message QueryMatchResults {
  optional string smiles = 1;
  optional string name = 2;
  message Matches {
    optional string name = 1;
    optional uint32 nhits = 2;
  }

  repeated Matches matches = 3;
}
