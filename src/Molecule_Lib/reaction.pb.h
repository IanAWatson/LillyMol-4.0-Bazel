// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reaction.proto

#ifndef PROTOBUF_INCLUDED_reaction_2eproto
#define PROTOBUF_INCLUDED_reaction_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Molecule_Lib/substructure.pb.h"
#include "Molecule_Lib/toggle_kekule_form.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_reaction_2eproto 

namespace protobuf_reaction_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[26];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_reaction_2eproto
namespace ReactionProto {
class BondAngle;
class BondAngleDefaultTypeInternal;
extern BondAngleDefaultTypeInternal _BondAngle_default_instance_;
class BondLength;
class BondLengthDefaultTypeInternal;
extern BondLengthDefaultTypeInternal _BondLength_default_instance_;
class BondToBeMade;
class BondToBeMadeDefaultTypeInternal;
extern BondToBeMadeDefaultTypeInternal _BondToBeMade_default_instance_;
class ChangeElement;
class ChangeElementDefaultTypeInternal;
extern ChangeElementDefaultTypeInternal _ChangeElement_default_instance_;
class ChangeFormalCharge;
class ChangeFormalChargeDefaultTypeInternal;
extern ChangeFormalChargeDefaultTypeInternal _ChangeFormalCharge_default_instance_;
class DihedralAngle;
class DihedralAngleDefaultTypeInternal;
extern DihedralAngleDefaultTypeInternal _DihedralAngle_default_instance_;
class FormalCharge;
class FormalChargeDefaultTypeInternal;
extern FormalChargeDefaultTypeInternal _FormalCharge_default_instance_;
class IncrementIsotope;
class IncrementIsotopeDefaultTypeInternal;
extern IncrementIsotopeDefaultTypeInternal _IncrementIsotope_default_instance_;
class InterParticleBond;
class InterParticleBondDefaultTypeInternal;
extern InterParticleBondDefaultTypeInternal _InterParticleBond_default_instance_;
class MatchConditions;
class MatchConditionsDefaultTypeInternal;
extern MatchConditionsDefaultTypeInternal _MatchConditions_default_instance_;
class MatchedAtomInComponent;
class MatchedAtomInComponentDefaultTypeInternal;
extern MatchedAtomInComponentDefaultTypeInternal _MatchedAtomInComponent_default_instance_;
class NoReaction;
class NoReactionDefaultTypeInternal;
extern NoReactionDefaultTypeInternal _NoReaction_default_instance_;
class PairOfAtoms;
class PairOfAtomsDefaultTypeInternal;
extern PairOfAtomsDefaultTypeInternal _PairOfAtoms_default_instance_;
class PlaceIsotope;
class PlaceIsotopeDefaultTypeInternal;
extern PlaceIsotopeDefaultTypeInternal _PlaceIsotope_default_instance_;
class Reaction;
class ReactionDefaultTypeInternal;
extern ReactionDefaultTypeInternal _Reaction_default_instance_;
class ReactionSite;
class ReactionSiteDefaultTypeInternal;
extern ReactionSiteDefaultTypeInternal _ReactionSite_default_instance_;
class ReplaceAtom;
class ReplaceAtomDefaultTypeInternal;
extern ReplaceAtomDefaultTypeInternal _ReplaceAtom_default_instance_;
class RotateFragment;
class RotateFragmentDefaultTypeInternal;
extern RotateFragmentDefaultTypeInternal _RotateFragment_default_instance_;
class ScaffoldMatchConditions;
class ScaffoldMatchConditionsDefaultTypeInternal;
extern ScaffoldMatchConditionsDefaultTypeInternal _ScaffoldMatchConditions_default_instance_;
class ScaffoldReactionSite;
class ScaffoldReactionSiteDefaultTypeInternal;
extern ScaffoldReactionSiteDefaultTypeInternal _ScaffoldReactionSite_default_instance_;
class SidechainMatchConditions;
class SidechainMatchConditionsDefaultTypeInternal;
extern SidechainMatchConditionsDefaultTypeInternal _SidechainMatchConditions_default_instance_;
class SidechainReactionSite;
class SidechainReactionSiteDefaultTypeInternal;
extern SidechainReactionSiteDefaultTypeInternal _SidechainReactionSite_default_instance_;
class StereoCenter;
class StereoCenterDefaultTypeInternal;
extern StereoCenterDefaultTypeInternal _StereoCenter_default_instance_;
class StereoCenterComponent;
class StereoCenterComponentDefaultTypeInternal;
extern StereoCenterComponentDefaultTypeInternal _StereoCenterComponent_default_instance_;
class ThreeDReplace;
class ThreeDReplaceDefaultTypeInternal;
extern ThreeDReplaceDefaultTypeInternal _ThreeDReplace_default_instance_;
class WedgeBond;
class WedgeBondDefaultTypeInternal;
extern WedgeBondDefaultTypeInternal _WedgeBond_default_instance_;
}  // namespace ReactionProto
namespace google {
namespace protobuf {
template<> ::ReactionProto::BondAngle* Arena::CreateMaybeMessage<::ReactionProto::BondAngle>(Arena*);
template<> ::ReactionProto::BondLength* Arena::CreateMaybeMessage<::ReactionProto::BondLength>(Arena*);
template<> ::ReactionProto::BondToBeMade* Arena::CreateMaybeMessage<::ReactionProto::BondToBeMade>(Arena*);
template<> ::ReactionProto::ChangeElement* Arena::CreateMaybeMessage<::ReactionProto::ChangeElement>(Arena*);
template<> ::ReactionProto::ChangeFormalCharge* Arena::CreateMaybeMessage<::ReactionProto::ChangeFormalCharge>(Arena*);
template<> ::ReactionProto::DihedralAngle* Arena::CreateMaybeMessage<::ReactionProto::DihedralAngle>(Arena*);
template<> ::ReactionProto::FormalCharge* Arena::CreateMaybeMessage<::ReactionProto::FormalCharge>(Arena*);
template<> ::ReactionProto::IncrementIsotope* Arena::CreateMaybeMessage<::ReactionProto::IncrementIsotope>(Arena*);
template<> ::ReactionProto::InterParticleBond* Arena::CreateMaybeMessage<::ReactionProto::InterParticleBond>(Arena*);
template<> ::ReactionProto::MatchConditions* Arena::CreateMaybeMessage<::ReactionProto::MatchConditions>(Arena*);
template<> ::ReactionProto::MatchedAtomInComponent* Arena::CreateMaybeMessage<::ReactionProto::MatchedAtomInComponent>(Arena*);
template<> ::ReactionProto::NoReaction* Arena::CreateMaybeMessage<::ReactionProto::NoReaction>(Arena*);
template<> ::ReactionProto::PairOfAtoms* Arena::CreateMaybeMessage<::ReactionProto::PairOfAtoms>(Arena*);
template<> ::ReactionProto::PlaceIsotope* Arena::CreateMaybeMessage<::ReactionProto::PlaceIsotope>(Arena*);
template<> ::ReactionProto::Reaction* Arena::CreateMaybeMessage<::ReactionProto::Reaction>(Arena*);
template<> ::ReactionProto::ReactionSite* Arena::CreateMaybeMessage<::ReactionProto::ReactionSite>(Arena*);
template<> ::ReactionProto::ReplaceAtom* Arena::CreateMaybeMessage<::ReactionProto::ReplaceAtom>(Arena*);
template<> ::ReactionProto::RotateFragment* Arena::CreateMaybeMessage<::ReactionProto::RotateFragment>(Arena*);
template<> ::ReactionProto::ScaffoldMatchConditions* Arena::CreateMaybeMessage<::ReactionProto::ScaffoldMatchConditions>(Arena*);
template<> ::ReactionProto::ScaffoldReactionSite* Arena::CreateMaybeMessage<::ReactionProto::ScaffoldReactionSite>(Arena*);
template<> ::ReactionProto::SidechainMatchConditions* Arena::CreateMaybeMessage<::ReactionProto::SidechainMatchConditions>(Arena*);
template<> ::ReactionProto::SidechainReactionSite* Arena::CreateMaybeMessage<::ReactionProto::SidechainReactionSite>(Arena*);
template<> ::ReactionProto::StereoCenter* Arena::CreateMaybeMessage<::ReactionProto::StereoCenter>(Arena*);
template<> ::ReactionProto::StereoCenterComponent* Arena::CreateMaybeMessage<::ReactionProto::StereoCenterComponent>(Arena*);
template<> ::ReactionProto::ThreeDReplace* Arena::CreateMaybeMessage<::ReactionProto::ThreeDReplace>(Arena*);
template<> ::ReactionProto::WedgeBond* Arena::CreateMaybeMessage<::ReactionProto::WedgeBond>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ReactionProto {

// ===================================================================

class MatchConditions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.MatchConditions) */ {
 public:
  MatchConditions();
  virtual ~MatchConditions();

  MatchConditions(const MatchConditions& from);

  inline MatchConditions& operator=(const MatchConditions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatchConditions(MatchConditions&& from) noexcept
    : MatchConditions() {
    *this = ::std::move(from);
  }

  inline MatchConditions& operator=(MatchConditions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchConditions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchConditions* internal_default_instance() {
    return reinterpret_cast<const MatchConditions*>(
               &_MatchConditions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MatchConditions* other);
  friend void swap(MatchConditions& a, MatchConditions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatchConditions* New() const final {
    return CreateMaybeMessage<MatchConditions>(NULL);
  }

  MatchConditions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatchConditions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatchConditions& from);
  void MergeFrom(const MatchConditions& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchConditions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string multiple_match_string = 6;
  bool has_multiple_match_string() const;
  void clear_multiple_match_string();
  static const int kMultipleMatchStringFieldNumber = 6;
  const ::std::string& multiple_match_string() const;
  void set_multiple_match_string(const ::std::string& value);
  #if LANG_CXX11
  void set_multiple_match_string(::std::string&& value);
  #endif
  void set_multiple_match_string(const char* value);
  void set_multiple_match_string(const char* value, size_t size);
  ::std::string* mutable_multiple_match_string();
  ::std::string* release_multiple_match_string();
  void set_allocated_multiple_match_string(::std::string* multiple_match_string);

  // optional int32 process_hit_number = 3;
  bool has_process_hit_number() const;
  void clear_process_hit_number();
  static const int kProcessHitNumberFieldNumber = 3;
  ::google::protobuf::int32 process_hit_number() const;
  void set_process_hit_number(::google::protobuf::int32 value);

  // optional bool ignore_not_reacting = 1;
  bool has_ignore_not_reacting() const;
  void clear_ignore_not_reacting();
  static const int kIgnoreNotReactingFieldNumber = 1;
  bool ignore_not_reacting() const;
  void set_ignore_not_reacting(bool value);

  // optional bool find_unique_embeddings = 2;
  bool has_find_unique_embeddings() const;
  void clear_find_unique_embeddings();
  static const int kFindUniqueEmbeddingsFieldNumber = 2;
  bool find_unique_embeddings() const;
  void set_find_unique_embeddings(bool value);

  // optional bool one_embedding_per_start_atom = 4;
  bool has_one_embedding_per_start_atom() const;
  void clear_one_embedding_per_start_atom();
  static const int kOneEmbeddingPerStartAtomFieldNumber = 4;
  bool one_embedding_per_start_atom() const;
  void set_one_embedding_per_start_atom(bool value);

  // optional bool ignore_symmetry_related_matches = 5;
  bool has_ignore_symmetry_related_matches() const;
  void clear_ignore_symmetry_related_matches();
  static const int kIgnoreSymmetryRelatedMatchesFieldNumber = 5;
  bool ignore_symmetry_related_matches() const;
  void set_ignore_symmetry_related_matches(bool value);

  // optional int32 suppress_if_more_than_this_many_substructure_search_hits = 7;
  bool has_suppress_if_more_than_this_many_substructure_search_hits() const;
  void clear_suppress_if_more_than_this_many_substructure_search_hits();
  static const int kSuppressIfMoreThanThisManySubstructureSearchHitsFieldNumber = 7;
  ::google::protobuf::int32 suppress_if_more_than_this_many_substructure_search_hits() const;
  void set_suppress_if_more_than_this_many_substructure_search_hits(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ReactionProto.MatchConditions)
 private:
  void set_has_ignore_not_reacting();
  void clear_has_ignore_not_reacting();
  void set_has_find_unique_embeddings();
  void clear_has_find_unique_embeddings();
  void set_has_process_hit_number();
  void clear_has_process_hit_number();
  void set_has_one_embedding_per_start_atom();
  void clear_has_one_embedding_per_start_atom();
  void set_has_ignore_symmetry_related_matches();
  void clear_has_ignore_symmetry_related_matches();
  void set_has_multiple_match_string();
  void clear_has_multiple_match_string();
  void set_has_suppress_if_more_than_this_many_substructure_search_hits();
  void clear_has_suppress_if_more_than_this_many_substructure_search_hits();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr multiple_match_string_;
  ::google::protobuf::int32 process_hit_number_;
  bool ignore_not_reacting_;
  bool find_unique_embeddings_;
  bool one_embedding_per_start_atom_;
  bool ignore_symmetry_related_matches_;
  ::google::protobuf::int32 suppress_if_more_than_this_many_substructure_search_hits_;
  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScaffoldMatchConditions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.ScaffoldMatchConditions) */ {
 public:
  ScaffoldMatchConditions();
  virtual ~ScaffoldMatchConditions();

  ScaffoldMatchConditions(const ScaffoldMatchConditions& from);

  inline ScaffoldMatchConditions& operator=(const ScaffoldMatchConditions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScaffoldMatchConditions(ScaffoldMatchConditions&& from) noexcept
    : ScaffoldMatchConditions() {
    *this = ::std::move(from);
  }

  inline ScaffoldMatchConditions& operator=(ScaffoldMatchConditions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScaffoldMatchConditions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScaffoldMatchConditions* internal_default_instance() {
    return reinterpret_cast<const ScaffoldMatchConditions*>(
               &_ScaffoldMatchConditions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ScaffoldMatchConditions* other);
  friend void swap(ScaffoldMatchConditions& a, ScaffoldMatchConditions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScaffoldMatchConditions* New() const final {
    return CreateMaybeMessage<ScaffoldMatchConditions>(NULL);
  }

  ScaffoldMatchConditions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScaffoldMatchConditions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScaffoldMatchConditions& from);
  void MergeFrom(const ScaffoldMatchConditions& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScaffoldMatchConditions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ReactionProto.MatchConditions match_conditions = 1;
  bool has_match_conditions() const;
  void clear_match_conditions();
  static const int kMatchConditionsFieldNumber = 1;
  private:
  const ::ReactionProto::MatchConditions& _internal_match_conditions() const;
  public:
  const ::ReactionProto::MatchConditions& match_conditions() const;
  ::ReactionProto::MatchConditions* release_match_conditions();
  ::ReactionProto::MatchConditions* mutable_match_conditions();
  void set_allocated_match_conditions(::ReactionProto::MatchConditions* match_conditions);

  // optional bool enumerate_scaffold_hits_individually = 2;
  bool has_enumerate_scaffold_hits_individually() const;
  void clear_enumerate_scaffold_hits_individually();
  static const int kEnumerateScaffoldHitsIndividuallyFieldNumber = 2;
  bool enumerate_scaffold_hits_individually() const;
  void set_enumerate_scaffold_hits_individually(bool value);

  // optional int32 combinatorial_expansion_of_scaffold_hits = 3;
  bool has_combinatorial_expansion_of_scaffold_hits() const;
  void clear_combinatorial_expansion_of_scaffold_hits();
  static const int kCombinatorialExpansionOfScaffoldHitsFieldNumber = 3;
  ::google::protobuf::int32 combinatorial_expansion_of_scaffold_hits() const;
  void set_combinatorial_expansion_of_scaffold_hits(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ReactionProto.ScaffoldMatchConditions)
 private:
  void set_has_match_conditions();
  void clear_has_match_conditions();
  void set_has_enumerate_scaffold_hits_individually();
  void clear_has_enumerate_scaffold_hits_individually();
  void set_has_combinatorial_expansion_of_scaffold_hits();
  void clear_has_combinatorial_expansion_of_scaffold_hits();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ReactionProto::MatchConditions* match_conditions_;
  bool enumerate_scaffold_hits_individually_;
  ::google::protobuf::int32 combinatorial_expansion_of_scaffold_hits_;
  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SidechainMatchConditions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.SidechainMatchConditions) */ {
 public:
  SidechainMatchConditions();
  virtual ~SidechainMatchConditions();

  SidechainMatchConditions(const SidechainMatchConditions& from);

  inline SidechainMatchConditions& operator=(const SidechainMatchConditions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SidechainMatchConditions(SidechainMatchConditions&& from) noexcept
    : SidechainMatchConditions() {
    *this = ::std::move(from);
  }

  inline SidechainMatchConditions& operator=(SidechainMatchConditions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SidechainMatchConditions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SidechainMatchConditions* internal_default_instance() {
    return reinterpret_cast<const SidechainMatchConditions*>(
               &_SidechainMatchConditions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SidechainMatchConditions* other);
  friend void swap(SidechainMatchConditions& a, SidechainMatchConditions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SidechainMatchConditions* New() const final {
    return CreateMaybeMessage<SidechainMatchConditions>(NULL);
  }

  SidechainMatchConditions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SidechainMatchConditions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SidechainMatchConditions& from);
  void MergeFrom(const SidechainMatchConditions& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SidechainMatchConditions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ReactionProto.MatchConditions match_conditions = 1;
  bool has_match_conditions() const;
  void clear_match_conditions();
  static const int kMatchConditionsFieldNumber = 1;
  private:
  const ::ReactionProto::MatchConditions& _internal_match_conditions() const;
  public:
  const ::ReactionProto::MatchConditions& match_conditions() const;
  ::ReactionProto::MatchConditions* release_match_conditions();
  ::ReactionProto::MatchConditions* mutable_match_conditions();
  void set_allocated_match_conditions(::ReactionProto::MatchConditions* match_conditions);

  // optional int32 max_matches_to_find = 3;
  bool has_max_matches_to_find() const;
  void clear_max_matches_to_find();
  static const int kMaxMatchesToFindFieldNumber = 3;
  ::google::protobuf::int32 max_matches_to_find() const;
  void set_max_matches_to_find(::google::protobuf::int32 value);

  // optional bool make_new_reagent_for_each_hit = 2;
  bool has_make_new_reagent_for_each_hit() const;
  void clear_make_new_reagent_for_each_hit();
  static const int kMakeNewReagentForEachHitFieldNumber = 2;
  bool make_new_reagent_for_each_hit() const;
  void set_make_new_reagent_for_each_hit(bool value);

  // optional bool strip_reagents_to_largest_fragment = 4;
  bool has_strip_reagents_to_largest_fragment() const;
  void clear_strip_reagents_to_largest_fragment();
  static const int kStripReagentsToLargestFragmentFieldNumber = 4;
  bool strip_reagents_to_largest_fragment() const;
  void set_strip_reagents_to_largest_fragment(bool value);

  // @@protoc_insertion_point(class_scope:ReactionProto.SidechainMatchConditions)
 private:
  void set_has_match_conditions();
  void clear_has_match_conditions();
  void set_has_make_new_reagent_for_each_hit();
  void clear_has_make_new_reagent_for_each_hit();
  void set_has_max_matches_to_find();
  void clear_has_max_matches_to_find();
  void set_has_strip_reagents_to_largest_fragment();
  void clear_has_strip_reagents_to_largest_fragment();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ReactionProto::MatchConditions* match_conditions_;
  ::google::protobuf::int32 max_matches_to_find_;
  bool make_new_reagent_for_each_hit_;
  bool strip_reagents_to_largest_fragment_;
  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PairOfAtoms : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.PairOfAtoms) */ {
 public:
  PairOfAtoms();
  virtual ~PairOfAtoms();

  PairOfAtoms(const PairOfAtoms& from);

  inline PairOfAtoms& operator=(const PairOfAtoms& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PairOfAtoms(PairOfAtoms&& from) noexcept
    : PairOfAtoms() {
    *this = ::std::move(from);
  }

  inline PairOfAtoms& operator=(PairOfAtoms&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PairOfAtoms& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PairOfAtoms* internal_default_instance() {
    return reinterpret_cast<const PairOfAtoms*>(
               &_PairOfAtoms_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PairOfAtoms* other);
  friend void swap(PairOfAtoms& a, PairOfAtoms& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PairOfAtoms* New() const final {
    return CreateMaybeMessage<PairOfAtoms>(NULL);
  }

  PairOfAtoms* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PairOfAtoms>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PairOfAtoms& from);
  void MergeFrom(const PairOfAtoms& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PairOfAtoms* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 a1 = 1;
  bool has_a1() const;
  void clear_a1();
  static const int kA1FieldNumber = 1;
  ::google::protobuf::int32 a1() const;
  void set_a1(::google::protobuf::int32 value);

  // optional int32 a2 = 2;
  bool has_a2() const;
  void clear_a2();
  static const int kA2FieldNumber = 2;
  ::google::protobuf::int32 a2() const;
  void set_a2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ReactionProto.PairOfAtoms)
 private:
  void set_has_a1();
  void clear_has_a1();
  void set_has_a2();
  void clear_has_a2();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 a1_;
  ::google::protobuf::int32 a2_;
  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MatchedAtomInComponent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.MatchedAtomInComponent) */ {
 public:
  MatchedAtomInComponent();
  virtual ~MatchedAtomInComponent();

  MatchedAtomInComponent(const MatchedAtomInComponent& from);

  inline MatchedAtomInComponent& operator=(const MatchedAtomInComponent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatchedAtomInComponent(MatchedAtomInComponent&& from) noexcept
    : MatchedAtomInComponent() {
    *this = ::std::move(from);
  }

  inline MatchedAtomInComponent& operator=(MatchedAtomInComponent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchedAtomInComponent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchedAtomInComponent* internal_default_instance() {
    return reinterpret_cast<const MatchedAtomInComponent*>(
               &_MatchedAtomInComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(MatchedAtomInComponent* other);
  friend void swap(MatchedAtomInComponent& a, MatchedAtomInComponent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatchedAtomInComponent* New() const final {
    return CreateMaybeMessage<MatchedAtomInComponent>(NULL);
  }

  MatchedAtomInComponent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatchedAtomInComponent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatchedAtomInComponent& from);
  void MergeFrom(const MatchedAtomInComponent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchedAtomInComponent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string component_and_atom = 3;
  bool has_component_and_atom() const;
  void clear_component_and_atom();
  static const int kComponentAndAtomFieldNumber = 3;
  const ::std::string& component_and_atom() const;
  void set_component_and_atom(const ::std::string& value);
  #if LANG_CXX11
  void set_component_and_atom(::std::string&& value);
  #endif
  void set_component_and_atom(const char* value);
  void set_component_and_atom(const char* value, size_t size);
  ::std::string* mutable_component_and_atom();
  ::std::string* release_component_and_atom();
  void set_allocated_component_and_atom(::std::string* component_and_atom);

  // optional int32 component = 1;
  bool has_component() const;
  void clear_component();
  static const int kComponentFieldNumber = 1;
  ::google::protobuf::int32 component() const;
  void set_component(::google::protobuf::int32 value);

  // optional int32 atom = 2;
  bool has_atom() const;
  void clear_atom();
  static const int kAtomFieldNumber = 2;
  ::google::protobuf::int32 atom() const;
  void set_atom(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ReactionProto.MatchedAtomInComponent)
 private:
  void set_has_component();
  void clear_has_component();
  void set_has_atom();
  void clear_has_atom();
  void set_has_component_and_atom();
  void clear_has_component_and_atom();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr component_and_atom_;
  ::google::protobuf::int32 component_;
  ::google::protobuf::int32 atom_;
  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StereoCenterComponent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.StereoCenterComponent) */ {
 public:
  StereoCenterComponent();
  virtual ~StereoCenterComponent();

  StereoCenterComponent(const StereoCenterComponent& from);

  inline StereoCenterComponent& operator=(const StereoCenterComponent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StereoCenterComponent(StereoCenterComponent&& from) noexcept
    : StereoCenterComponent() {
    *this = ::std::move(from);
  }

  inline StereoCenterComponent& operator=(StereoCenterComponent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StereoCenterComponent& default_instance();

  enum AtomOrHydrogenCase {
    kAtom = 1,
    kImplicitHydrogen = 2,
    ATOMORHYDROGEN_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StereoCenterComponent* internal_default_instance() {
    return reinterpret_cast<const StereoCenterComponent*>(
               &_StereoCenterComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(StereoCenterComponent* other);
  friend void swap(StereoCenterComponent& a, StereoCenterComponent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StereoCenterComponent* New() const final {
    return CreateMaybeMessage<StereoCenterComponent>(NULL);
  }

  StereoCenterComponent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StereoCenterComponent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StereoCenterComponent& from);
  void MergeFrom(const StereoCenterComponent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StereoCenterComponent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ReactionProto.MatchedAtomInComponent atom = 1;
  bool has_atom() const;
  void clear_atom();
  static const int kAtomFieldNumber = 1;
  private:
  const ::ReactionProto::MatchedAtomInComponent& _internal_atom() const;
  public:
  const ::ReactionProto::MatchedAtomInComponent& atom() const;
  ::ReactionProto::MatchedAtomInComponent* release_atom();
  ::ReactionProto::MatchedAtomInComponent* mutable_atom();
  void set_allocated_atom(::ReactionProto::MatchedAtomInComponent* atom);

  // optional bool implicit_hydrogen = 2;
  bool has_implicit_hydrogen() const;
  void clear_implicit_hydrogen();
  static const int kImplicitHydrogenFieldNumber = 2;
  bool implicit_hydrogen() const;
  void set_implicit_hydrogen(bool value);

  void clear_AtomOrHydrogen();
  AtomOrHydrogenCase AtomOrHydrogen_case() const;
  // @@protoc_insertion_point(class_scope:ReactionProto.StereoCenterComponent)
 private:
  void set_has_atom();
  void set_has_implicit_hydrogen();

  inline bool has_AtomOrHydrogen() const;
  inline void clear_has_AtomOrHydrogen();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union AtomOrHydrogenUnion {
    AtomOrHydrogenUnion() {}
    ::ReactionProto::MatchedAtomInComponent* atom_;
    bool implicit_hydrogen_;
  } AtomOrHydrogen_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StereoCenter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.StereoCenter) */ {
 public:
  StereoCenter();
  virtual ~StereoCenter();

  StereoCenter(const StereoCenter& from);

  inline StereoCenter& operator=(const StereoCenter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StereoCenter(StereoCenter&& from) noexcept
    : StereoCenter() {
    *this = ::std::move(from);
  }

  inline StereoCenter& operator=(StereoCenter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StereoCenter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StereoCenter* internal_default_instance() {
    return reinterpret_cast<const StereoCenter*>(
               &_StereoCenter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(StereoCenter* other);
  friend void swap(StereoCenter& a, StereoCenter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StereoCenter* New() const final {
    return CreateMaybeMessage<StereoCenter>(NULL);
  }

  StereoCenter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StereoCenter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StereoCenter& from);
  void MergeFrom(const StereoCenter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StereoCenter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ReactionProto.StereoCenterComponent a = 1;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 1;
  private:
  const ::ReactionProto::StereoCenterComponent& _internal_a() const;
  public:
  const ::ReactionProto::StereoCenterComponent& a() const;
  ::ReactionProto::StereoCenterComponent* release_a();
  ::ReactionProto::StereoCenterComponent* mutable_a();
  void set_allocated_a(::ReactionProto::StereoCenterComponent* a);

  // optional .ReactionProto.StereoCenterComponent top_front = 2;
  bool has_top_front() const;
  void clear_top_front();
  static const int kTopFrontFieldNumber = 2;
  private:
  const ::ReactionProto::StereoCenterComponent& _internal_top_front() const;
  public:
  const ::ReactionProto::StereoCenterComponent& top_front() const;
  ::ReactionProto::StereoCenterComponent* release_top_front();
  ::ReactionProto::StereoCenterComponent* mutable_top_front();
  void set_allocated_top_front(::ReactionProto::StereoCenterComponent* top_front);

  // optional .ReactionProto.StereoCenterComponent top_back = 3;
  bool has_top_back() const;
  void clear_top_back();
  static const int kTopBackFieldNumber = 3;
  private:
  const ::ReactionProto::StereoCenterComponent& _internal_top_back() const;
  public:
  const ::ReactionProto::StereoCenterComponent& top_back() const;
  ::ReactionProto::StereoCenterComponent* release_top_back();
  ::ReactionProto::StereoCenterComponent* mutable_top_back();
  void set_allocated_top_back(::ReactionProto::StereoCenterComponent* top_back);

  // optional .ReactionProto.StereoCenterComponent left_down = 4;
  bool has_left_down() const;
  void clear_left_down();
  static const int kLeftDownFieldNumber = 4;
  private:
  const ::ReactionProto::StereoCenterComponent& _internal_left_down() const;
  public:
  const ::ReactionProto::StereoCenterComponent& left_down() const;
  ::ReactionProto::StereoCenterComponent* release_left_down();
  ::ReactionProto::StereoCenterComponent* mutable_left_down();
  void set_allocated_left_down(::ReactionProto::StereoCenterComponent* left_down);

  // optional .ReactionProto.StereoCenterComponent right_down = 5;
  bool has_right_down() const;
  void clear_right_down();
  static const int kRightDownFieldNumber = 5;
  private:
  const ::ReactionProto::StereoCenterComponent& _internal_right_down() const;
  public:
  const ::ReactionProto::StereoCenterComponent& right_down() const;
  ::ReactionProto::StereoCenterComponent* release_right_down();
  ::ReactionProto::StereoCenterComponent* mutable_right_down();
  void set_allocated_right_down(::ReactionProto::StereoCenterComponent* right_down);

  // optional bool optional = 6;
  bool has_optional() const;
  void clear_optional();
  static const int kOptionalFieldNumber = 6;
  bool optional() const;
  void set_optional(bool value);

  // @@protoc_insertion_point(class_scope:ReactionProto.StereoCenter)
 private:
  void set_has_a();
  void clear_has_a();
  void set_has_top_front();
  void clear_has_top_front();
  void set_has_top_back();
  void clear_has_top_back();
  void set_has_left_down();
  void clear_has_left_down();
  void set_has_right_down();
  void clear_has_right_down();
  void set_has_optional();
  void clear_has_optional();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ReactionProto::StereoCenterComponent* a_;
  ::ReactionProto::StereoCenterComponent* top_front_;
  ::ReactionProto::StereoCenterComponent* top_back_;
  ::ReactionProto::StereoCenterComponent* left_down_;
  ::ReactionProto::StereoCenterComponent* right_down_;
  bool optional_;
  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BondToBeMade : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.BondToBeMade) */ {
 public:
  BondToBeMade();
  virtual ~BondToBeMade();

  BondToBeMade(const BondToBeMade& from);

  inline BondToBeMade& operator=(const BondToBeMade& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BondToBeMade(BondToBeMade&& from) noexcept
    : BondToBeMade() {
    *this = ::std::move(from);
  }

  inline BondToBeMade& operator=(BondToBeMade&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BondToBeMade& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BondToBeMade* internal_default_instance() {
    return reinterpret_cast<const BondToBeMade*>(
               &_BondToBeMade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(BondToBeMade* other);
  friend void swap(BondToBeMade& a, BondToBeMade& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BondToBeMade* New() const final {
    return CreateMaybeMessage<BondToBeMade>(NULL);
  }

  BondToBeMade* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BondToBeMade>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BondToBeMade& from);
  void MergeFrom(const BondToBeMade& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BondToBeMade* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 a1 = 1;
  bool has_a1() const;
  void clear_a1();
  static const int kA1FieldNumber = 1;
  ::google::protobuf::int32 a1() const;
  void set_a1(::google::protobuf::int32 value);

  // optional int32 a2 = 2;
  bool has_a2() const;
  void clear_a2();
  static const int kA2FieldNumber = 2;
  ::google::protobuf::int32 a2() const;
  void set_a2(::google::protobuf::int32 value);

  // optional .SubstructureSearch.BondType btype = 3;
  bool has_btype() const;
  void clear_btype();
  static const int kBtypeFieldNumber = 3;
  ::SubstructureSearch::BondType btype() const;
  void set_btype(::SubstructureSearch::BondType value);

  // @@protoc_insertion_point(class_scope:ReactionProto.BondToBeMade)
 private:
  void set_has_a1();
  void clear_has_a1();
  void set_has_a2();
  void clear_has_a2();
  void set_has_btype();
  void clear_has_btype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 a1_;
  ::google::protobuf::int32 a2_;
  int btype_;
  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InterParticleBond : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.InterParticleBond) */ {
 public:
  InterParticleBond();
  virtual ~InterParticleBond();

  InterParticleBond(const InterParticleBond& from);

  inline InterParticleBond& operator=(const InterParticleBond& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InterParticleBond(InterParticleBond&& from) noexcept
    : InterParticleBond() {
    *this = ::std::move(from);
  }

  inline InterParticleBond& operator=(InterParticleBond&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InterParticleBond& default_instance();

  enum Atom1Case {
    kA1 = 1,
    kC1 = 2,
    ATOM1_NOT_SET = 0,
  };

  enum Atom2Case {
    kA2 = 3,
    kC2 = 4,
    ATOM2_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterParticleBond* internal_default_instance() {
    return reinterpret_cast<const InterParticleBond*>(
               &_InterParticleBond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(InterParticleBond* other);
  friend void swap(InterParticleBond& a, InterParticleBond& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InterParticleBond* New() const final {
    return CreateMaybeMessage<InterParticleBond>(NULL);
  }

  InterParticleBond* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InterParticleBond>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InterParticleBond& from);
  void MergeFrom(const InterParticleBond& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterParticleBond* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SubstructureSearch.BondType btype = 5;
  bool has_btype() const;
  void clear_btype();
  static const int kBtypeFieldNumber = 5;
  ::SubstructureSearch::BondType btype() const;
  void set_btype(::SubstructureSearch::BondType value);

  // optional uint32 a1 = 1;
  bool has_a1() const;
  void clear_a1();
  static const int kA1FieldNumber = 1;
  ::google::protobuf::uint32 a1() const;
  void set_a1(::google::protobuf::uint32 value);

  // optional .ReactionProto.MatchedAtomInComponent c1 = 2;
  bool has_c1() const;
  void clear_c1();
  static const int kC1FieldNumber = 2;
  private:
  const ::ReactionProto::MatchedAtomInComponent& _internal_c1() const;
  public:
  const ::ReactionProto::MatchedAtomInComponent& c1() const;
  ::ReactionProto::MatchedAtomInComponent* release_c1();
  ::ReactionProto::MatchedAtomInComponent* mutable_c1();
  void set_allocated_c1(::ReactionProto::MatchedAtomInComponent* c1);

  // optional uint32 a2 = 3;
  bool has_a2() const;
  void clear_a2();
  static const int kA2FieldNumber = 3;
  ::google::protobuf::uint32 a2() const;
  void set_a2(::google::protobuf::uint32 value);

  // optional .ReactionProto.MatchedAtomInComponent c2 = 4;
  bool has_c2() const;
  void clear_c2();
  static const int kC2FieldNumber = 4;
  private:
  const ::ReactionProto::MatchedAtomInComponent& _internal_c2() const;
  public:
  const ::ReactionProto::MatchedAtomInComponent& c2() const;
  ::ReactionProto::MatchedAtomInComponent* release_c2();
  ::ReactionProto::MatchedAtomInComponent* mutable_c2();
  void set_allocated_c2(::ReactionProto::MatchedAtomInComponent* c2);

  void clear_atom1();
  Atom1Case atom1_case() const;
  void clear_atom2();
  Atom2Case atom2_case() const;
  // @@protoc_insertion_point(class_scope:ReactionProto.InterParticleBond)
 private:
  void set_has_a1();
  void set_has_c1();
  void set_has_a2();
  void set_has_c2();
  void set_has_btype();
  void clear_has_btype();

  inline bool has_atom1() const;
  inline void clear_has_atom1();

  inline bool has_atom2() const;
  inline void clear_has_atom2();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int btype_;
  union Atom1Union {
    Atom1Union() {}
    ::google::protobuf::uint32 a1_;
    ::ReactionProto::MatchedAtomInComponent* c1_;
  } atom1_;
  union Atom2Union {
    Atom2Union() {}
    ::google::protobuf::uint32 a2_;
    ::ReactionProto::MatchedAtomInComponent* c2_;
  } atom2_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReplaceAtom : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.ReplaceAtom) */ {
 public:
  ReplaceAtom();
  virtual ~ReplaceAtom();

  ReplaceAtom(const ReplaceAtom& from);

  inline ReplaceAtom& operator=(const ReplaceAtom& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReplaceAtom(ReplaceAtom&& from) noexcept
    : ReplaceAtom() {
    *this = ::std::move(from);
  }

  inline ReplaceAtom& operator=(ReplaceAtom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplaceAtom& default_instance();

  enum Atom1Case {
    kA1 = 1,
    kC1 = 2,
    ATOM1_NOT_SET = 0,
  };

  enum Atom2Case {
    kA2 = 3,
    kC2 = 4,
    ATOM2_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplaceAtom* internal_default_instance() {
    return reinterpret_cast<const ReplaceAtom*>(
               &_ReplaceAtom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ReplaceAtom* other);
  friend void swap(ReplaceAtom& a, ReplaceAtom& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReplaceAtom* New() const final {
    return CreateMaybeMessage<ReplaceAtom>(NULL);
  }

  ReplaceAtom* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReplaceAtom>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReplaceAtom& from);
  void MergeFrom(const ReplaceAtom& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplaceAtom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 a1 = 1;
  bool has_a1() const;
  void clear_a1();
  static const int kA1FieldNumber = 1;
  ::google::protobuf::uint32 a1() const;
  void set_a1(::google::protobuf::uint32 value);

  // optional .ReactionProto.MatchedAtomInComponent c1 = 2;
  bool has_c1() const;
  void clear_c1();
  static const int kC1FieldNumber = 2;
  private:
  const ::ReactionProto::MatchedAtomInComponent& _internal_c1() const;
  public:
  const ::ReactionProto::MatchedAtomInComponent& c1() const;
  ::ReactionProto::MatchedAtomInComponent* release_c1();
  ::ReactionProto::MatchedAtomInComponent* mutable_c1();
  void set_allocated_c1(::ReactionProto::MatchedAtomInComponent* c1);

  // optional uint32 a2 = 3;
  bool has_a2() const;
  void clear_a2();
  static const int kA2FieldNumber = 3;
  ::google::protobuf::uint32 a2() const;
  void set_a2(::google::protobuf::uint32 value);

  // optional .ReactionProto.MatchedAtomInComponent c2 = 4;
  bool has_c2() const;
  void clear_c2();
  static const int kC2FieldNumber = 4;
  private:
  const ::ReactionProto::MatchedAtomInComponent& _internal_c2() const;
  public:
  const ::ReactionProto::MatchedAtomInComponent& c2() const;
  ::ReactionProto::MatchedAtomInComponent* release_c2();
  ::ReactionProto::MatchedAtomInComponent* mutable_c2();
  void set_allocated_c2(::ReactionProto::MatchedAtomInComponent* c2);

  void clear_atom1();
  Atom1Case atom1_case() const;
  void clear_atom2();
  Atom2Case atom2_case() const;
  // @@protoc_insertion_point(class_scope:ReactionProto.ReplaceAtom)
 private:
  void set_has_a1();
  void set_has_c1();
  void set_has_a2();
  void set_has_c2();

  inline bool has_atom1() const;
  inline void clear_has_atom1();

  inline bool has_atom2() const;
  inline void clear_has_atom2();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union Atom1Union {
    Atom1Union() {}
    ::google::protobuf::uint32 a1_;
    ::ReactionProto::MatchedAtomInComponent* c1_;
  } atom1_;
  union Atom2Union {
    Atom2Union() {}
    ::google::protobuf::uint32 a2_;
    ::ReactionProto::MatchedAtomInComponent* c2_;
  } atom2_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WedgeBond : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.WedgeBond) */ {
 public:
  WedgeBond();
  virtual ~WedgeBond();

  WedgeBond(const WedgeBond& from);

  inline WedgeBond& operator=(const WedgeBond& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WedgeBond(WedgeBond&& from) noexcept
    : WedgeBond() {
    *this = ::std::move(from);
  }

  inline WedgeBond& operator=(WedgeBond&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WedgeBond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WedgeBond* internal_default_instance() {
    return reinterpret_cast<const WedgeBond*>(
               &_WedgeBond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(WedgeBond* other);
  friend void swap(WedgeBond& a, WedgeBond& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WedgeBond* New() const final {
    return CreateMaybeMessage<WedgeBond>(NULL);
  }

  WedgeBond* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WedgeBond>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WedgeBond& from);
  void MergeFrom(const WedgeBond& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WedgeBond* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 a1 = 1;
  bool has_a1() const;
  void clear_a1();
  static const int kA1FieldNumber = 1;
  ::google::protobuf::int32 a1() const;
  void set_a1(::google::protobuf::int32 value);

  // optional int32 a2 = 2;
  bool has_a2() const;
  void clear_a2();
  static const int kA2FieldNumber = 2;
  ::google::protobuf::int32 a2() const;
  void set_a2(::google::protobuf::int32 value);

  // optional int32 direction = 3;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 3;
  ::google::protobuf::int32 direction() const;
  void set_direction(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ReactionProto.WedgeBond)
 private:
  void set_has_a1();
  void clear_has_a1();
  void set_has_a2();
  void clear_has_a2();
  void set_has_direction();
  void clear_has_direction();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 a1_;
  ::google::protobuf::int32 a2_;
  ::google::protobuf::int32 direction_;
  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChangeElement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.ChangeElement) */ {
 public:
  ChangeElement();
  virtual ~ChangeElement();

  ChangeElement(const ChangeElement& from);

  inline ChangeElement& operator=(const ChangeElement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeElement(ChangeElement&& from) noexcept
    : ChangeElement() {
    *this = ::std::move(from);
  }

  inline ChangeElement& operator=(ChangeElement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeElement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeElement* internal_default_instance() {
    return reinterpret_cast<const ChangeElement*>(
               &_ChangeElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ChangeElement* other);
  friend void swap(ChangeElement& a, ChangeElement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeElement* New() const final {
    return CreateMaybeMessage<ChangeElement>(NULL);
  }

  ChangeElement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChangeElement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChangeElement& from);
  void MergeFrom(const ChangeElement& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeElement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string element = 2;
  bool has_element() const;
  void clear_element();
  static const int kElementFieldNumber = 2;
  const ::std::string& element() const;
  void set_element(const ::std::string& value);
  #if LANG_CXX11
  void set_element(::std::string&& value);
  #endif
  void set_element(const char* value);
  void set_element(const char* value, size_t size);
  ::std::string* mutable_element();
  ::std::string* release_element();
  void set_allocated_element(::std::string* element);

  // optional int32 atom = 1;
  bool has_atom() const;
  void clear_atom();
  static const int kAtomFieldNumber = 1;
  ::google::protobuf::int32 atom() const;
  void set_atom(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ReactionProto.ChangeElement)
 private:
  void set_has_atom();
  void clear_has_atom();
  void set_has_element();
  void clear_has_element();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr element_;
  ::google::protobuf::int32 atom_;
  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FormalCharge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.FormalCharge) */ {
 public:
  FormalCharge();
  virtual ~FormalCharge();

  FormalCharge(const FormalCharge& from);

  inline FormalCharge& operator=(const FormalCharge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FormalCharge(FormalCharge&& from) noexcept
    : FormalCharge() {
    *this = ::std::move(from);
  }

  inline FormalCharge& operator=(FormalCharge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FormalCharge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FormalCharge* internal_default_instance() {
    return reinterpret_cast<const FormalCharge*>(
               &_FormalCharge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(FormalCharge* other);
  friend void swap(FormalCharge& a, FormalCharge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FormalCharge* New() const final {
    return CreateMaybeMessage<FormalCharge>(NULL);
  }

  FormalCharge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FormalCharge>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FormalCharge& from);
  void MergeFrom(const FormalCharge& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormalCharge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 atom = 1;
  bool has_atom() const;
  void clear_atom();
  static const int kAtomFieldNumber = 1;
  ::google::protobuf::int32 atom() const;
  void set_atom(::google::protobuf::int32 value);

  // optional int32 formal_charge = 2;
  bool has_formal_charge() const;
  void clear_formal_charge();
  static const int kFormalChargeFieldNumber = 2;
  ::google::protobuf::int32 formal_charge() const;
  void set_formal_charge(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ReactionProto.FormalCharge)
 private:
  void set_has_atom();
  void clear_has_atom();
  void set_has_formal_charge();
  void clear_has_formal_charge();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 atom_;
  ::google::protobuf::int32 formal_charge_;
  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChangeFormalCharge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.ChangeFormalCharge) */ {
 public:
  ChangeFormalCharge();
  virtual ~ChangeFormalCharge();

  ChangeFormalCharge(const ChangeFormalCharge& from);

  inline ChangeFormalCharge& operator=(const ChangeFormalCharge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeFormalCharge(ChangeFormalCharge&& from) noexcept
    : ChangeFormalCharge() {
    *this = ::std::move(from);
  }

  inline ChangeFormalCharge& operator=(ChangeFormalCharge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeFormalCharge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeFormalCharge* internal_default_instance() {
    return reinterpret_cast<const ChangeFormalCharge*>(
               &_ChangeFormalCharge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(ChangeFormalCharge* other);
  friend void swap(ChangeFormalCharge& a, ChangeFormalCharge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeFormalCharge* New() const final {
    return CreateMaybeMessage<ChangeFormalCharge>(NULL);
  }

  ChangeFormalCharge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChangeFormalCharge>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChangeFormalCharge& from);
  void MergeFrom(const ChangeFormalCharge& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeFormalCharge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 atom = 1;
  bool has_atom() const;
  void clear_atom();
  static const int kAtomFieldNumber = 1;
  ::google::protobuf::int32 atom() const;
  void set_atom(::google::protobuf::int32 value);

  // optional int32 delta = 2;
  bool has_delta() const;
  void clear_delta();
  static const int kDeltaFieldNumber = 2;
  ::google::protobuf::int32 delta() const;
  void set_delta(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ReactionProto.ChangeFormalCharge)
 private:
  void set_has_atom();
  void clear_has_atom();
  void set_has_delta();
  void clear_has_delta();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 atom_;
  ::google::protobuf::int32 delta_;
  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlaceIsotope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.PlaceIsotope) */ {
 public:
  PlaceIsotope();
  virtual ~PlaceIsotope();

  PlaceIsotope(const PlaceIsotope& from);

  inline PlaceIsotope& operator=(const PlaceIsotope& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlaceIsotope(PlaceIsotope&& from) noexcept
    : PlaceIsotope() {
    *this = ::std::move(from);
  }

  inline PlaceIsotope& operator=(PlaceIsotope&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlaceIsotope& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaceIsotope* internal_default_instance() {
    return reinterpret_cast<const PlaceIsotope*>(
               &_PlaceIsotope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(PlaceIsotope* other);
  friend void swap(PlaceIsotope& a, PlaceIsotope& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlaceIsotope* New() const final {
    return CreateMaybeMessage<PlaceIsotope>(NULL);
  }

  PlaceIsotope* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlaceIsotope>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlaceIsotope& from);
  void MergeFrom(const PlaceIsotope& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceIsotope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 atom = 1;
  bool has_atom() const;
  void clear_atom();
  static const int kAtomFieldNumber = 1;
  ::google::protobuf::int32 atom() const;
  void set_atom(::google::protobuf::int32 value);

  // optional int32 isotope = 2;
  bool has_isotope() const;
  void clear_isotope();
  static const int kIsotopeFieldNumber = 2;
  ::google::protobuf::int32 isotope() const;
  void set_isotope(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ReactionProto.PlaceIsotope)
 private:
  void set_has_atom();
  void clear_has_atom();
  void set_has_isotope();
  void clear_has_isotope();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 atom_;
  ::google::protobuf::int32 isotope_;
  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IncrementIsotope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.IncrementIsotope) */ {
 public:
  IncrementIsotope();
  virtual ~IncrementIsotope();

  IncrementIsotope(const IncrementIsotope& from);

  inline IncrementIsotope& operator=(const IncrementIsotope& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IncrementIsotope(IncrementIsotope&& from) noexcept
    : IncrementIsotope() {
    *this = ::std::move(from);
  }

  inline IncrementIsotope& operator=(IncrementIsotope&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IncrementIsotope& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncrementIsotope* internal_default_instance() {
    return reinterpret_cast<const IncrementIsotope*>(
               &_IncrementIsotope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(IncrementIsotope* other);
  friend void swap(IncrementIsotope& a, IncrementIsotope& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IncrementIsotope* New() const final {
    return CreateMaybeMessage<IncrementIsotope>(NULL);
  }

  IncrementIsotope* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IncrementIsotope>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IncrementIsotope& from);
  void MergeFrom(const IncrementIsotope& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncrementIsotope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 atom = 1;
  bool has_atom() const;
  void clear_atom();
  static const int kAtomFieldNumber = 1;
  ::google::protobuf::int32 atom() const;
  void set_atom(::google::protobuf::int32 value);

  // optional int32 delta = 2;
  bool has_delta() const;
  void clear_delta();
  static const int kDeltaFieldNumber = 2;
  ::google::protobuf::int32 delta() const;
  void set_delta(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ReactionProto.IncrementIsotope)
 private:
  void set_has_atom();
  void clear_has_atom();
  void set_has_delta();
  void clear_has_delta();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 atom_;
  ::google::protobuf::int32 delta_;
  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BondLength : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.BondLength) */ {
 public:
  BondLength();
  virtual ~BondLength();

  BondLength(const BondLength& from);

  inline BondLength& operator=(const BondLength& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BondLength(BondLength&& from) noexcept
    : BondLength() {
    *this = ::std::move(from);
  }

  inline BondLength& operator=(BondLength&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BondLength& default_instance();

  enum FirstAtomCase {
    kA1 = 1,
    kC1 = 2,
    FIRST_ATOM_NOT_SET = 0,
  };

  enum SecondAtomCase {
    kA2 = 3,
    kC2 = 4,
    SECOND_ATOM_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BondLength* internal_default_instance() {
    return reinterpret_cast<const BondLength*>(
               &_BondLength_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(BondLength* other);
  friend void swap(BondLength& a, BondLength& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BondLength* New() const final {
    return CreateMaybeMessage<BondLength>(NULL);
  }

  BondLength* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BondLength>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BondLength& from);
  void MergeFrom(const BondLength& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BondLength* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float distance = 5;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 5;
  float distance() const;
  void set_distance(float value);

  // optional uint32 a1 = 1;
  bool has_a1() const;
  void clear_a1();
  static const int kA1FieldNumber = 1;
  ::google::protobuf::uint32 a1() const;
  void set_a1(::google::protobuf::uint32 value);

  // optional .ReactionProto.MatchedAtomInComponent c1 = 2;
  bool has_c1() const;
  void clear_c1();
  static const int kC1FieldNumber = 2;
  private:
  const ::ReactionProto::MatchedAtomInComponent& _internal_c1() const;
  public:
  const ::ReactionProto::MatchedAtomInComponent& c1() const;
  ::ReactionProto::MatchedAtomInComponent* release_c1();
  ::ReactionProto::MatchedAtomInComponent* mutable_c1();
  void set_allocated_c1(::ReactionProto::MatchedAtomInComponent* c1);

  // optional uint32 a2 = 3;
  bool has_a2() const;
  void clear_a2();
  static const int kA2FieldNumber = 3;
  ::google::protobuf::uint32 a2() const;
  void set_a2(::google::protobuf::uint32 value);

  // optional .ReactionProto.MatchedAtomInComponent c2 = 4;
  bool has_c2() const;
  void clear_c2();
  static const int kC2FieldNumber = 4;
  private:
  const ::ReactionProto::MatchedAtomInComponent& _internal_c2() const;
  public:
  const ::ReactionProto::MatchedAtomInComponent& c2() const;
  ::ReactionProto::MatchedAtomInComponent* release_c2();
  ::ReactionProto::MatchedAtomInComponent* mutable_c2();
  void set_allocated_c2(::ReactionProto::MatchedAtomInComponent* c2);

  void clear_first_atom();
  FirstAtomCase first_atom_case() const;
  void clear_second_atom();
  SecondAtomCase second_atom_case() const;
  // @@protoc_insertion_point(class_scope:ReactionProto.BondLength)
 private:
  void set_has_a1();
  void set_has_c1();
  void set_has_a2();
  void set_has_c2();
  void set_has_distance();
  void clear_has_distance();

  inline bool has_first_atom() const;
  inline void clear_has_first_atom();

  inline bool has_second_atom() const;
  inline void clear_has_second_atom();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float distance_;
  union FirstAtomUnion {
    FirstAtomUnion() {}
    ::google::protobuf::uint32 a1_;
    ::ReactionProto::MatchedAtomInComponent* c1_;
  } first_atom_;
  union SecondAtomUnion {
    SecondAtomUnion() {}
    ::google::protobuf::uint32 a2_;
    ::ReactionProto::MatchedAtomInComponent* c2_;
  } second_atom_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BondAngle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.BondAngle) */ {
 public:
  BondAngle();
  virtual ~BondAngle();

  BondAngle(const BondAngle& from);

  inline BondAngle& operator=(const BondAngle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BondAngle(BondAngle&& from) noexcept
    : BondAngle() {
    *this = ::std::move(from);
  }

  inline BondAngle& operator=(BondAngle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BondAngle& default_instance();

  enum Atom1Case {
    kA1 = 1,
    kC1 = 2,
    ATOM1_NOT_SET = 0,
  };

  enum Atom2Case {
    kA2 = 3,
    kC2 = 4,
    ATOM2_NOT_SET = 0,
  };

  enum Atom3Case {
    kA3 = 5,
    kC3 = 6,
    ATOM3_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BondAngle* internal_default_instance() {
    return reinterpret_cast<const BondAngle*>(
               &_BondAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(BondAngle* other);
  friend void swap(BondAngle& a, BondAngle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BondAngle* New() const final {
    return CreateMaybeMessage<BondAngle>(NULL);
  }

  BondAngle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BondAngle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BondAngle& from);
  void MergeFrom(const BondAngle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BondAngle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float angle = 7;
  bool has_angle() const;
  void clear_angle();
  static const int kAngleFieldNumber = 7;
  float angle() const;
  void set_angle(float value);

  // optional uint32 a1 = 1;
  bool has_a1() const;
  void clear_a1();
  static const int kA1FieldNumber = 1;
  ::google::protobuf::uint32 a1() const;
  void set_a1(::google::protobuf::uint32 value);

  // optional .ReactionProto.MatchedAtomInComponent c1 = 2;
  bool has_c1() const;
  void clear_c1();
  static const int kC1FieldNumber = 2;
  private:
  const ::ReactionProto::MatchedAtomInComponent& _internal_c1() const;
  public:
  const ::ReactionProto::MatchedAtomInComponent& c1() const;
  ::ReactionProto::MatchedAtomInComponent* release_c1();
  ::ReactionProto::MatchedAtomInComponent* mutable_c1();
  void set_allocated_c1(::ReactionProto::MatchedAtomInComponent* c1);

  // optional uint32 a2 = 3;
  bool has_a2() const;
  void clear_a2();
  static const int kA2FieldNumber = 3;
  ::google::protobuf::uint32 a2() const;
  void set_a2(::google::protobuf::uint32 value);

  // optional .ReactionProto.MatchedAtomInComponent c2 = 4;
  bool has_c2() const;
  void clear_c2();
  static const int kC2FieldNumber = 4;
  private:
  const ::ReactionProto::MatchedAtomInComponent& _internal_c2() const;
  public:
  const ::ReactionProto::MatchedAtomInComponent& c2() const;
  ::ReactionProto::MatchedAtomInComponent* release_c2();
  ::ReactionProto::MatchedAtomInComponent* mutable_c2();
  void set_allocated_c2(::ReactionProto::MatchedAtomInComponent* c2);

  // optional uint32 a3 = 5;
  bool has_a3() const;
  void clear_a3();
  static const int kA3FieldNumber = 5;
  ::google::protobuf::uint32 a3() const;
  void set_a3(::google::protobuf::uint32 value);

  // optional .ReactionProto.MatchedAtomInComponent c3 = 6;
  bool has_c3() const;
  void clear_c3();
  static const int kC3FieldNumber = 6;
  private:
  const ::ReactionProto::MatchedAtomInComponent& _internal_c3() const;
  public:
  const ::ReactionProto::MatchedAtomInComponent& c3() const;
  ::ReactionProto::MatchedAtomInComponent* release_c3();
  ::ReactionProto::MatchedAtomInComponent* mutable_c3();
  void set_allocated_c3(::ReactionProto::MatchedAtomInComponent* c3);

  void clear_atom1();
  Atom1Case atom1_case() const;
  void clear_atom2();
  Atom2Case atom2_case() const;
  void clear_atom3();
  Atom3Case atom3_case() const;
  // @@protoc_insertion_point(class_scope:ReactionProto.BondAngle)
 private:
  void set_has_a1();
  void set_has_c1();
  void set_has_a2();
  void set_has_c2();
  void set_has_a3();
  void set_has_c3();
  void set_has_angle();
  void clear_has_angle();

  inline bool has_atom1() const;
  inline void clear_has_atom1();

  inline bool has_atom2() const;
  inline void clear_has_atom2();

  inline bool has_atom3() const;
  inline void clear_has_atom3();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float angle_;
  union Atom1Union {
    Atom1Union() {}
    ::google::protobuf::uint32 a1_;
    ::ReactionProto::MatchedAtomInComponent* c1_;
  } atom1_;
  union Atom2Union {
    Atom2Union() {}
    ::google::protobuf::uint32 a2_;
    ::ReactionProto::MatchedAtomInComponent* c2_;
  } atom2_;
  union Atom3Union {
    Atom3Union() {}
    ::google::protobuf::uint32 a3_;
    ::ReactionProto::MatchedAtomInComponent* c3_;
  } atom3_;
  ::google::protobuf::uint32 _oneof_case_[3];

  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DihedralAngle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.DihedralAngle) */ {
 public:
  DihedralAngle();
  virtual ~DihedralAngle();

  DihedralAngle(const DihedralAngle& from);

  inline DihedralAngle& operator=(const DihedralAngle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DihedralAngle(DihedralAngle&& from) noexcept
    : DihedralAngle() {
    *this = ::std::move(from);
  }

  inline DihedralAngle& operator=(DihedralAngle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DihedralAngle& default_instance();

  enum Atom1Case {
    kA1 = 1,
    kC1 = 2,
    ATOM1_NOT_SET = 0,
  };

  enum Atom2Case {
    kA2 = 3,
    kC2 = 4,
    ATOM2_NOT_SET = 0,
  };

  enum Atom3Case {
    kA3 = 5,
    kC3 = 6,
    ATOM3_NOT_SET = 0,
  };

  enum Atom4Case {
    kA4 = 7,
    kC4 = 8,
    ATOM4_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DihedralAngle* internal_default_instance() {
    return reinterpret_cast<const DihedralAngle*>(
               &_DihedralAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(DihedralAngle* other);
  friend void swap(DihedralAngle& a, DihedralAngle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DihedralAngle* New() const final {
    return CreateMaybeMessage<DihedralAngle>(NULL);
  }

  DihedralAngle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DihedralAngle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DihedralAngle& from);
  void MergeFrom(const DihedralAngle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DihedralAngle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float angle = 9;
  bool has_angle() const;
  void clear_angle();
  static const int kAngleFieldNumber = 9;
  float angle() const;
  void set_angle(float value);

  // optional uint32 a1 = 1;
  bool has_a1() const;
  void clear_a1();
  static const int kA1FieldNumber = 1;
  ::google::protobuf::uint32 a1() const;
  void set_a1(::google::protobuf::uint32 value);

  // optional .ReactionProto.MatchedAtomInComponent c1 = 2;
  bool has_c1() const;
  void clear_c1();
  static const int kC1FieldNumber = 2;
  private:
  const ::ReactionProto::MatchedAtomInComponent& _internal_c1() const;
  public:
  const ::ReactionProto::MatchedAtomInComponent& c1() const;
  ::ReactionProto::MatchedAtomInComponent* release_c1();
  ::ReactionProto::MatchedAtomInComponent* mutable_c1();
  void set_allocated_c1(::ReactionProto::MatchedAtomInComponent* c1);

  // optional uint32 a2 = 3;
  bool has_a2() const;
  void clear_a2();
  static const int kA2FieldNumber = 3;
  ::google::protobuf::uint32 a2() const;
  void set_a2(::google::protobuf::uint32 value);

  // optional .ReactionProto.MatchedAtomInComponent c2 = 4;
  bool has_c2() const;
  void clear_c2();
  static const int kC2FieldNumber = 4;
  private:
  const ::ReactionProto::MatchedAtomInComponent& _internal_c2() const;
  public:
  const ::ReactionProto::MatchedAtomInComponent& c2() const;
  ::ReactionProto::MatchedAtomInComponent* release_c2();
  ::ReactionProto::MatchedAtomInComponent* mutable_c2();
  void set_allocated_c2(::ReactionProto::MatchedAtomInComponent* c2);

  // optional uint32 a3 = 5;
  bool has_a3() const;
  void clear_a3();
  static const int kA3FieldNumber = 5;
  ::google::protobuf::uint32 a3() const;
  void set_a3(::google::protobuf::uint32 value);

  // optional .ReactionProto.MatchedAtomInComponent c3 = 6;
  bool has_c3() const;
  void clear_c3();
  static const int kC3FieldNumber = 6;
  private:
  const ::ReactionProto::MatchedAtomInComponent& _internal_c3() const;
  public:
  const ::ReactionProto::MatchedAtomInComponent& c3() const;
  ::ReactionProto::MatchedAtomInComponent* release_c3();
  ::ReactionProto::MatchedAtomInComponent* mutable_c3();
  void set_allocated_c3(::ReactionProto::MatchedAtomInComponent* c3);

  // optional uint32 a4 = 7;
  bool has_a4() const;
  void clear_a4();
  static const int kA4FieldNumber = 7;
  ::google::protobuf::uint32 a4() const;
  void set_a4(::google::protobuf::uint32 value);

  // optional .ReactionProto.MatchedAtomInComponent c4 = 8;
  bool has_c4() const;
  void clear_c4();
  static const int kC4FieldNumber = 8;
  private:
  const ::ReactionProto::MatchedAtomInComponent& _internal_c4() const;
  public:
  const ::ReactionProto::MatchedAtomInComponent& c4() const;
  ::ReactionProto::MatchedAtomInComponent* release_c4();
  ::ReactionProto::MatchedAtomInComponent* mutable_c4();
  void set_allocated_c4(::ReactionProto::MatchedAtomInComponent* c4);

  void clear_atom1();
  Atom1Case atom1_case() const;
  void clear_atom2();
  Atom2Case atom2_case() const;
  void clear_atom3();
  Atom3Case atom3_case() const;
  void clear_atom4();
  Atom4Case atom4_case() const;
  // @@protoc_insertion_point(class_scope:ReactionProto.DihedralAngle)
 private:
  void set_has_a1();
  void set_has_c1();
  void set_has_a2();
  void set_has_c2();
  void set_has_a3();
  void set_has_c3();
  void set_has_a4();
  void set_has_c4();
  void set_has_angle();
  void clear_has_angle();

  inline bool has_atom1() const;
  inline void clear_has_atom1();

  inline bool has_atom2() const;
  inline void clear_has_atom2();

  inline bool has_atom3() const;
  inline void clear_has_atom3();

  inline bool has_atom4() const;
  inline void clear_has_atom4();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float angle_;
  union Atom1Union {
    Atom1Union() {}
    ::google::protobuf::uint32 a1_;
    ::ReactionProto::MatchedAtomInComponent* c1_;
  } atom1_;
  union Atom2Union {
    Atom2Union() {}
    ::google::protobuf::uint32 a2_;
    ::ReactionProto::MatchedAtomInComponent* c2_;
  } atom2_;
  union Atom3Union {
    Atom3Union() {}
    ::google::protobuf::uint32 a3_;
    ::ReactionProto::MatchedAtomInComponent* c3_;
  } atom3_;
  union Atom4Union {
    Atom4Union() {}
    ::google::protobuf::uint32 a4_;
    ::ReactionProto::MatchedAtomInComponent* c4_;
  } atom4_;
  ::google::protobuf::uint32 _oneof_case_[4];

  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RotateFragment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.RotateFragment) */ {
 public:
  RotateFragment();
  virtual ~RotateFragment();

  RotateFragment(const RotateFragment& from);

  inline RotateFragment& operator=(const RotateFragment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RotateFragment(RotateFragment&& from) noexcept
    : RotateFragment() {
    *this = ::std::move(from);
  }

  inline RotateFragment& operator=(RotateFragment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RotateFragment& default_instance();

  enum TheAtomCase {
    kAtom = 1,
    kCspec = 2,
    THE_ATOM_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RotateFragment* internal_default_instance() {
    return reinterpret_cast<const RotateFragment*>(
               &_RotateFragment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(RotateFragment* other);
  friend void swap(RotateFragment& a, RotateFragment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RotateFragment* New() const final {
    return CreateMaybeMessage<RotateFragment>(NULL);
  }

  RotateFragment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RotateFragment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RotateFragment& from);
  void MergeFrom(const RotateFragment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RotateFragment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float angle = 3;
  bool has_angle() const;
  void clear_angle();
  static const int kAngleFieldNumber = 3;
  float angle() const;
  void set_angle(float value);

  // optional uint32 atom = 1;
  bool has_atom() const;
  void clear_atom();
  static const int kAtomFieldNumber = 1;
  ::google::protobuf::uint32 atom() const;
  void set_atom(::google::protobuf::uint32 value);

  // optional .ReactionProto.MatchedAtomInComponent cspec = 2;
  bool has_cspec() const;
  void clear_cspec();
  static const int kCspecFieldNumber = 2;
  private:
  const ::ReactionProto::MatchedAtomInComponent& _internal_cspec() const;
  public:
  const ::ReactionProto::MatchedAtomInComponent& cspec() const;
  ::ReactionProto::MatchedAtomInComponent* release_cspec();
  ::ReactionProto::MatchedAtomInComponent* mutable_cspec();
  void set_allocated_cspec(::ReactionProto::MatchedAtomInComponent* cspec);

  void clear_the_atom();
  TheAtomCase the_atom_case() const;
  // @@protoc_insertion_point(class_scope:ReactionProto.RotateFragment)
 private:
  void set_has_atom();
  void set_has_cspec();
  void set_has_angle();
  void clear_has_angle();

  inline bool has_the_atom() const;
  inline void clear_has_the_atom();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float angle_;
  union TheAtomUnion {
    TheAtomUnion() {}
    ::google::protobuf::uint32 atom_;
    ::ReactionProto::MatchedAtomInComponent* cspec_;
  } the_atom_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ThreeDReplace : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.ThreeDReplace) */ {
 public:
  ThreeDReplace();
  virtual ~ThreeDReplace();

  ThreeDReplace(const ThreeDReplace& from);

  inline ThreeDReplace& operator=(const ThreeDReplace& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ThreeDReplace(ThreeDReplace&& from) noexcept
    : ThreeDReplace() {
    *this = ::std::move(from);
  }

  inline ThreeDReplace& operator=(ThreeDReplace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThreeDReplace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThreeDReplace* internal_default_instance() {
    return reinterpret_cast<const ThreeDReplace*>(
               &_ThreeDReplace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(ThreeDReplace* other);
  friend void swap(ThreeDReplace& a, ThreeDReplace& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ThreeDReplace* New() const final {
    return CreateMaybeMessage<ThreeDReplace>(NULL);
  }

  ThreeDReplace* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ThreeDReplace>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ThreeDReplace& from);
  void MergeFrom(const ThreeDReplace& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThreeDReplace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ReactionProto.MatchedAtomInComponent a1 = 1;
  int a1_size() const;
  void clear_a1();
  static const int kA1FieldNumber = 1;
  ::ReactionProto::MatchedAtomInComponent* mutable_a1(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::MatchedAtomInComponent >*
      mutable_a1();
  const ::ReactionProto::MatchedAtomInComponent& a1(int index) const;
  ::ReactionProto::MatchedAtomInComponent* add_a1();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::MatchedAtomInComponent >&
      a1() const;

  // repeated .ReactionProto.MatchedAtomInComponent a2 = 2;
  int a2_size() const;
  void clear_a2();
  static const int kA2FieldNumber = 2;
  ::ReactionProto::MatchedAtomInComponent* mutable_a2(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::MatchedAtomInComponent >*
      mutable_a2();
  const ::ReactionProto::MatchedAtomInComponent& a2(int index) const;
  ::ReactionProto::MatchedAtomInComponent* add_a2();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::MatchedAtomInComponent >&
      a2() const;

  // @@protoc_insertion_point(class_scope:ReactionProto.ThreeDReplace)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::MatchedAtomInComponent > a1_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::MatchedAtomInComponent > a2_;
  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NoReaction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.NoReaction) */ {
 public:
  NoReaction();
  virtual ~NoReaction();

  NoReaction(const NoReaction& from);

  inline NoReaction& operator=(const NoReaction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NoReaction(NoReaction&& from) noexcept
    : NoReaction() {
    *this = ::std::move(from);
  }

  inline NoReaction& operator=(NoReaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoReaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NoReaction* internal_default_instance() {
    return reinterpret_cast<const NoReaction*>(
               &_NoReaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(NoReaction* other);
  friend void swap(NoReaction& a, NoReaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NoReaction* New() const final {
    return CreateMaybeMessage<NoReaction>(NULL);
  }

  NoReaction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NoReaction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NoReaction& from);
  void MergeFrom(const NoReaction& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoReaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string comment = 1;
  bool has_comment() const;
  void clear_comment();
  static const int kCommentFieldNumber = 1;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // optional .SubstructureSearch.SubstructureQuery scaffold_no_reaction = 2;
  bool has_scaffold_no_reaction() const;
  void clear_scaffold_no_reaction();
  static const int kScaffoldNoReactionFieldNumber = 2;
  private:
  const ::SubstructureSearch::SubstructureQuery& _internal_scaffold_no_reaction() const;
  public:
  const ::SubstructureSearch::SubstructureQuery& scaffold_no_reaction() const;
  ::SubstructureSearch::SubstructureQuery* release_scaffold_no_reaction();
  ::SubstructureSearch::SubstructureQuery* mutable_scaffold_no_reaction();
  void set_allocated_scaffold_no_reaction(::SubstructureSearch::SubstructureQuery* scaffold_no_reaction);

  // optional .SubstructureSearch.SubstructureQuery sidechain_no_reaction = 3;
  bool has_sidechain_no_reaction() const;
  void clear_sidechain_no_reaction();
  static const int kSidechainNoReactionFieldNumber = 3;
  private:
  const ::SubstructureSearch::SubstructureQuery& _internal_sidechain_no_reaction() const;
  public:
  const ::SubstructureSearch::SubstructureQuery& sidechain_no_reaction() const;
  ::SubstructureSearch::SubstructureQuery* release_sidechain_no_reaction();
  ::SubstructureSearch::SubstructureQuery* mutable_sidechain_no_reaction();
  void set_allocated_sidechain_no_reaction(::SubstructureSearch::SubstructureQuery* sidechain_no_reaction);

  // @@protoc_insertion_point(class_scope:ReactionProto.NoReaction)
 private:
  void set_has_comment();
  void clear_has_comment();
  void set_has_scaffold_no_reaction();
  void clear_has_scaffold_no_reaction();
  void set_has_sidechain_no_reaction();
  void clear_has_sidechain_no_reaction();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::SubstructureSearch::SubstructureQuery* scaffold_no_reaction_;
  ::SubstructureSearch::SubstructureQuery* sidechain_no_reaction_;
  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReactionSite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.ReactionSite) */ {
 public:
  ReactionSite();
  virtual ~ReactionSite();

  ReactionSite(const ReactionSite& from);

  inline ReactionSite& operator=(const ReactionSite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReactionSite(ReactionSite&& from) noexcept
    : ReactionSite() {
    *this = ::std::move(from);
  }

  inline ReactionSite& operator=(ReactionSite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReactionSite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReactionSite* internal_default_instance() {
    return reinterpret_cast<const ReactionSite*>(
               &_ReactionSite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(ReactionSite* other);
  friend void swap(ReactionSite& a, ReactionSite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReactionSite* New() const final {
    return CreateMaybeMessage<ReactionSite>(NULL);
  }

  ReactionSite* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReactionSite>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReactionSite& from);
  void MergeFrom(const ReactionSite& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReactionSite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ReactionProto.BondToBeMade make_bond = 3;
  int make_bond_size() const;
  void clear_make_bond();
  static const int kMakeBondFieldNumber = 3;
  ::ReactionProto::BondToBeMade* mutable_make_bond(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondToBeMade >*
      mutable_make_bond();
  const ::ReactionProto::BondToBeMade& make_bond(int index) const;
  ::ReactionProto::BondToBeMade* add_make_bond();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondToBeMade >&
      make_bond() const;

  // repeated .ReactionProto.PairOfAtoms break_bond = 4;
  int break_bond_size() const;
  void clear_break_bond();
  static const int kBreakBondFieldNumber = 4;
  ::ReactionProto::PairOfAtoms* mutable_break_bond(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::PairOfAtoms >*
      mutable_break_bond();
  const ::ReactionProto::PairOfAtoms& break_bond(int index) const;
  ::ReactionProto::PairOfAtoms* add_break_bond();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::PairOfAtoms >&
      break_bond() const;

  // repeated int32 remove_atom = 5;
  int remove_atom_size() const;
  void clear_remove_atom();
  static const int kRemoveAtomFieldNumber = 5;
  ::google::protobuf::int32 remove_atom(int index) const;
  void set_remove_atom(int index, ::google::protobuf::int32 value);
  void add_remove_atom(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      remove_atom() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_remove_atom();

  // repeated int32 remove_fragment = 6;
  int remove_fragment_size() const;
  void clear_remove_fragment();
  static const int kRemoveFragmentFieldNumber = 6;
  ::google::protobuf::int32 remove_fragment(int index) const;
  void set_remove_fragment(int index, ::google::protobuf::int32 value);
  void add_remove_fragment(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      remove_fragment() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_remove_fragment();

  // repeated int32 keep_fragment = 7;
  int keep_fragment_size() const;
  void clear_keep_fragment();
  static const int kKeepFragmentFieldNumber = 7;
  ::google::protobuf::int32 keep_fragment(int index) const;
  void set_keep_fragment(int index, ::google::protobuf::int32 value);
  void add_keep_fragment(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      keep_fragment() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_keep_fragment();

  // repeated .ReactionProto.ChangeElement change_element = 8;
  int change_element_size() const;
  void clear_change_element();
  static const int kChangeElementFieldNumber = 8;
  ::ReactionProto::ChangeElement* mutable_change_element(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeElement >*
      mutable_change_element();
  const ::ReactionProto::ChangeElement& change_element(int index) const;
  ::ReactionProto::ChangeElement* add_change_element();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeElement >&
      change_element() const;

  // repeated .ReactionProto.FormalCharge formal_charge = 9;
  int formal_charge_size() const;
  void clear_formal_charge();
  static const int kFormalChargeFieldNumber = 9;
  ::ReactionProto::FormalCharge* mutable_formal_charge(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::FormalCharge >*
      mutable_formal_charge();
  const ::ReactionProto::FormalCharge& formal_charge(int index) const;
  ::ReactionProto::FormalCharge* add_formal_charge();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::FormalCharge >&
      formal_charge() const;

  // repeated .ReactionProto.ChangeFormalCharge change_formal_charge = 10;
  int change_formal_charge_size() const;
  void clear_change_formal_charge();
  static const int kChangeFormalChargeFieldNumber = 10;
  ::ReactionProto::ChangeFormalCharge* mutable_change_formal_charge(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeFormalCharge >*
      mutable_change_formal_charge();
  const ::ReactionProto::ChangeFormalCharge& change_formal_charge(int index) const;
  ::ReactionProto::ChangeFormalCharge* add_change_formal_charge();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeFormalCharge >&
      change_formal_charge() const;

  // repeated .ReactionProto.PlaceIsotope isotope = 11;
  int isotope_size() const;
  void clear_isotope();
  static const int kIsotopeFieldNumber = 11;
  ::ReactionProto::PlaceIsotope* mutable_isotope(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >*
      mutable_isotope();
  const ::ReactionProto::PlaceIsotope& isotope(int index) const;
  ::ReactionProto::PlaceIsotope* add_isotope();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >&
      isotope() const;

  // repeated .ReactionProto.IncrementIsotope change_isotope = 12;
  int change_isotope_size() const;
  void clear_change_isotope();
  static const int kChangeIsotopeFieldNumber = 12;
  ::ReactionProto::IncrementIsotope* mutable_change_isotope(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::IncrementIsotope >*
      mutable_change_isotope();
  const ::ReactionProto::IncrementIsotope& change_isotope(int index) const;
  ::ReactionProto::IncrementIsotope* add_change_isotope();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::IncrementIsotope >&
      change_isotope() const;

  // repeated .ReactionProto.PlaceIsotope invert_isotope = 13;
  int invert_isotope_size() const;
  void clear_invert_isotope();
  static const int kInvertIsotopeFieldNumber = 13;
  ::ReactionProto::PlaceIsotope* mutable_invert_isotope(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >*
      mutable_invert_isotope();
  const ::ReactionProto::PlaceIsotope& invert_isotope(int index) const;
  ::ReactionProto::PlaceIsotope* add_invert_isotope();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >&
      invert_isotope() const;

  // repeated .ReactionProto.BondLength bond_length = 14;
  int bond_length_size() const;
  void clear_bond_length();
  static const int kBondLengthFieldNumber = 14;
  ::ReactionProto::BondLength* mutable_bond_length(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondLength >*
      mutable_bond_length();
  const ::ReactionProto::BondLength& bond_length(int index) const;
  ::ReactionProto::BondLength* add_bond_length();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondLength >&
      bond_length() const;

  // repeated .ReactionProto.BondAngle bond_angle = 15;
  int bond_angle_size() const;
  void clear_bond_angle();
  static const int kBondAngleFieldNumber = 15;
  ::ReactionProto::BondAngle* mutable_bond_angle(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondAngle >*
      mutable_bond_angle();
  const ::ReactionProto::BondAngle& bond_angle(int index) const;
  ::ReactionProto::BondAngle* add_bond_angle();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondAngle >&
      bond_angle() const;

  // repeated .ReactionProto.DihedralAngle dihedral_angle = 16;
  int dihedral_angle_size() const;
  void clear_dihedral_angle();
  static const int kDihedralAngleFieldNumber = 16;
  ::ReactionProto::DihedralAngle* mutable_dihedral_angle(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::DihedralAngle >*
      mutable_dihedral_angle();
  const ::ReactionProto::DihedralAngle& dihedral_angle(int index) const;
  ::ReactionProto::DihedralAngle* add_dihedral_angle();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::DihedralAngle >&
      dihedral_angle() const;

  // repeated .ReactionProto.ThreeDReplace reaction_3d_replace = 17;
  int reaction_3d_replace_size() const;
  void clear_reaction_3d_replace();
  static const int kReaction3DReplaceFieldNumber = 17;
  ::ReactionProto::ThreeDReplace* mutable_reaction_3d_replace(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ThreeDReplace >*
      mutable_reaction_3d_replace();
  const ::ReactionProto::ThreeDReplace& reaction_3d_replace(int index) const;
  ::ReactionProto::ThreeDReplace* add_reaction_3d_replace();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ThreeDReplace >&
      reaction_3d_replace() const;

  // repeated .ReactionProto.WedgeBond wedge_bonds = 18;
  int wedge_bonds_size() const;
  void clear_wedge_bonds();
  static const int kWedgeBondsFieldNumber = 18;
  ::ReactionProto::WedgeBond* mutable_wedge_bonds(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::WedgeBond >*
      mutable_wedge_bonds();
  const ::ReactionProto::WedgeBond& wedge_bonds(int index) const;
  ::ReactionProto::WedgeBond* add_wedge_bonds();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::WedgeBond >&
      wedge_bonds() const;

  // repeated .ReactionProto.ReplaceAtom replace_atom = 19;
  int replace_atom_size() const;
  void clear_replace_atom();
  static const int kReplaceAtomFieldNumber = 19;
  ::ReactionProto::ReplaceAtom* mutable_replace_atom(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ReplaceAtom >*
      mutable_replace_atom();
  const ::ReactionProto::ReplaceAtom& replace_atom(int index) const;
  ::ReactionProto::ReplaceAtom* add_replace_atom();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ReplaceAtom >&
      replace_atom() const;

  // repeated int32 unfix_implicit_hydrogens = 20;
  int unfix_implicit_hydrogens_size() const;
  void clear_unfix_implicit_hydrogens();
  static const int kUnfixImplicitHydrogensFieldNumber = 20;
  ::google::protobuf::int32 unfix_implicit_hydrogens(int index) const;
  void set_unfix_implicit_hydrogens(int index, ::google::protobuf::int32 value);
  void add_unfix_implicit_hydrogens(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      unfix_implicit_hydrogens() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_unfix_implicit_hydrogens();

  // repeated .SubstructureSearch.SubstructureQuery inactive = 21;
  int inactive_size() const;
  void clear_inactive();
  static const int kInactiveFieldNumber = 21;
  ::SubstructureSearch::SubstructureQuery* mutable_inactive(int index);
  ::google::protobuf::RepeatedPtrField< ::SubstructureSearch::SubstructureQuery >*
      mutable_inactive();
  const ::SubstructureSearch::SubstructureQuery& inactive(int index) const;
  ::SubstructureSearch::SubstructureQuery* add_inactive();
  const ::google::protobuf::RepeatedPtrField< ::SubstructureSearch::SubstructureQuery >&
      inactive() const;

  // repeated int32 invert_chirality = 22;
  int invert_chirality_size() const;
  void clear_invert_chirality();
  static const int kInvertChiralityFieldNumber = 22;
  ::google::protobuf::int32 invert_chirality(int index) const;
  void set_invert_chirality(int index, ::google::protobuf::int32 value);
  void add_invert_chirality(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      invert_chirality() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_invert_chirality();

  // repeated int32 remove_chirality = 23;
  int remove_chirality_size() const;
  void clear_remove_chirality();
  static const int kRemoveChiralityFieldNumber = 23;
  ::google::protobuf::int32 remove_chirality(int index) const;
  void set_remove_chirality(int index, ::google::protobuf::int32 value);
  void add_remove_chirality(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      remove_chirality() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_remove_chirality();

  // optional string comment = 2;
  bool has_comment() const;
  void clear_comment();
  static const int kCommentFieldNumber = 2;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // optional .SubstructureSearch.SubstructureQuery query = 1;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  private:
  const ::SubstructureSearch::SubstructureQuery& _internal_query() const;
  public:
  const ::SubstructureSearch::SubstructureQuery& query() const;
  ::SubstructureSearch::SubstructureQuery* release_query();
  ::SubstructureSearch::SubstructureQuery* mutable_query();
  void set_allocated_query(::SubstructureSearch::SubstructureQuery* query);

  // optional .ToggleKekuleForm.ToggleKekuleForm toggle_kekule_form = 24;
  bool has_toggle_kekule_form() const;
  void clear_toggle_kekule_form();
  static const int kToggleKekuleFormFieldNumber = 24;
  private:
  const ::ToggleKekuleForm::ToggleKekuleForm& _internal_toggle_kekule_form() const;
  public:
  const ::ToggleKekuleForm::ToggleKekuleForm& toggle_kekule_form() const;
  ::ToggleKekuleForm::ToggleKekuleForm* release_toggle_kekule_form();
  ::ToggleKekuleForm::ToggleKekuleForm* mutable_toggle_kekule_form();
  void set_allocated_toggle_kekule_form(::ToggleKekuleForm::ToggleKekuleForm* toggle_kekule_form);

  // optional bool ignore_multiple_matches_involving_atoms_not_changing = 25;
  bool has_ignore_multiple_matches_involving_atoms_not_changing() const;
  void clear_ignore_multiple_matches_involving_atoms_not_changing();
  static const int kIgnoreMultipleMatchesInvolvingAtomsNotChangingFieldNumber = 25;
  bool ignore_multiple_matches_involving_atoms_not_changing() const;
  void set_ignore_multiple_matches_involving_atoms_not_changing(bool value);

  // optional bool ignore_multiple_matches_involving_changing_atoms = 27;
  bool has_ignore_multiple_matches_involving_changing_atoms() const;
  void clear_ignore_multiple_matches_involving_changing_atoms();
  static const int kIgnoreMultipleMatchesInvolvingChangingAtomsFieldNumber = 27;
  bool ignore_multiple_matches_involving_changing_atoms() const;
  void set_ignore_multiple_matches_involving_changing_atoms(bool value);

  // optional bool noop_reaction = 28;
  bool has_noop_reaction() const;
  void clear_noop_reaction();
  static const int kNoopReactionFieldNumber = 28;
  bool noop_reaction() const;
  void set_noop_reaction(bool value);

  // @@protoc_insertion_point(class_scope:ReactionProto.ReactionSite)
 private:
  void set_has_query();
  void clear_has_query();
  void set_has_comment();
  void clear_has_comment();
  void set_has_toggle_kekule_form();
  void clear_has_toggle_kekule_form();
  void set_has_ignore_multiple_matches_involving_atoms_not_changing();
  void clear_has_ignore_multiple_matches_involving_atoms_not_changing();
  void set_has_ignore_multiple_matches_involving_changing_atoms();
  void clear_has_ignore_multiple_matches_involving_changing_atoms();
  void set_has_noop_reaction();
  void clear_has_noop_reaction();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondToBeMade > make_bond_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::PairOfAtoms > break_bond_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > remove_atom_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > remove_fragment_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > keep_fragment_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeElement > change_element_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::FormalCharge > formal_charge_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeFormalCharge > change_formal_charge_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope > isotope_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::IncrementIsotope > change_isotope_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope > invert_isotope_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondLength > bond_length_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondAngle > bond_angle_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::DihedralAngle > dihedral_angle_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ThreeDReplace > reaction_3d_replace_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::WedgeBond > wedge_bonds_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ReplaceAtom > replace_atom_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > unfix_implicit_hydrogens_;
  ::google::protobuf::RepeatedPtrField< ::SubstructureSearch::SubstructureQuery > inactive_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > invert_chirality_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > remove_chirality_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::SubstructureSearch::SubstructureQuery* query_;
  ::ToggleKekuleForm::ToggleKekuleForm* toggle_kekule_form_;
  bool ignore_multiple_matches_involving_atoms_not_changing_;
  bool ignore_multiple_matches_involving_changing_atoms_;
  bool noop_reaction_;
  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScaffoldReactionSite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.ScaffoldReactionSite) */ {
 public:
  ScaffoldReactionSite();
  virtual ~ScaffoldReactionSite();

  ScaffoldReactionSite(const ScaffoldReactionSite& from);

  inline ScaffoldReactionSite& operator=(const ScaffoldReactionSite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScaffoldReactionSite(ScaffoldReactionSite&& from) noexcept
    : ScaffoldReactionSite() {
    *this = ::std::move(from);
  }

  inline ScaffoldReactionSite& operator=(ScaffoldReactionSite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScaffoldReactionSite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScaffoldReactionSite* internal_default_instance() {
    return reinterpret_cast<const ScaffoldReactionSite*>(
               &_ScaffoldReactionSite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(ScaffoldReactionSite* other);
  friend void swap(ScaffoldReactionSite& a, ScaffoldReactionSite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScaffoldReactionSite* New() const final {
    return CreateMaybeMessage<ScaffoldReactionSite>(NULL);
  }

  ScaffoldReactionSite* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScaffoldReactionSite>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScaffoldReactionSite& from);
  void MergeFrom(const ScaffoldReactionSite& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScaffoldReactionSite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ReactionProto.BondToBeMade make_bond = 3;
  int make_bond_size() const;
  void clear_make_bond();
  static const int kMakeBondFieldNumber = 3;
  ::ReactionProto::BondToBeMade* mutable_make_bond(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondToBeMade >*
      mutable_make_bond();
  const ::ReactionProto::BondToBeMade& make_bond(int index) const;
  ::ReactionProto::BondToBeMade* add_make_bond();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondToBeMade >&
      make_bond() const;

  // repeated .ReactionProto.PairOfAtoms break_bond = 4;
  int break_bond_size() const;
  void clear_break_bond();
  static const int kBreakBondFieldNumber = 4;
  ::ReactionProto::PairOfAtoms* mutable_break_bond(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::PairOfAtoms >*
      mutable_break_bond();
  const ::ReactionProto::PairOfAtoms& break_bond(int index) const;
  ::ReactionProto::PairOfAtoms* add_break_bond();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::PairOfAtoms >&
      break_bond() const;

  // repeated int32 remove_atom = 5;
  int remove_atom_size() const;
  void clear_remove_atom();
  static const int kRemoveAtomFieldNumber = 5;
  ::google::protobuf::int32 remove_atom(int index) const;
  void set_remove_atom(int index, ::google::protobuf::int32 value);
  void add_remove_atom(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      remove_atom() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_remove_atom();

  // repeated int32 remove_fragment = 6;
  int remove_fragment_size() const;
  void clear_remove_fragment();
  static const int kRemoveFragmentFieldNumber = 6;
  ::google::protobuf::int32 remove_fragment(int index) const;
  void set_remove_fragment(int index, ::google::protobuf::int32 value);
  void add_remove_fragment(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      remove_fragment() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_remove_fragment();

  // repeated int32 keep_fragment = 7;
  int keep_fragment_size() const;
  void clear_keep_fragment();
  static const int kKeepFragmentFieldNumber = 7;
  ::google::protobuf::int32 keep_fragment(int index) const;
  void set_keep_fragment(int index, ::google::protobuf::int32 value);
  void add_keep_fragment(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      keep_fragment() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_keep_fragment();

  // repeated .ReactionProto.ChangeElement change_element = 8;
  int change_element_size() const;
  void clear_change_element();
  static const int kChangeElementFieldNumber = 8;
  ::ReactionProto::ChangeElement* mutable_change_element(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeElement >*
      mutable_change_element();
  const ::ReactionProto::ChangeElement& change_element(int index) const;
  ::ReactionProto::ChangeElement* add_change_element();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeElement >&
      change_element() const;

  // repeated .ReactionProto.FormalCharge formal_charge = 9;
  int formal_charge_size() const;
  void clear_formal_charge();
  static const int kFormalChargeFieldNumber = 9;
  ::ReactionProto::FormalCharge* mutable_formal_charge(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::FormalCharge >*
      mutable_formal_charge();
  const ::ReactionProto::FormalCharge& formal_charge(int index) const;
  ::ReactionProto::FormalCharge* add_formal_charge();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::FormalCharge >&
      formal_charge() const;

  // repeated .ReactionProto.ChangeFormalCharge change_formal_charge = 10;
  int change_formal_charge_size() const;
  void clear_change_formal_charge();
  static const int kChangeFormalChargeFieldNumber = 10;
  ::ReactionProto::ChangeFormalCharge* mutable_change_formal_charge(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeFormalCharge >*
      mutable_change_formal_charge();
  const ::ReactionProto::ChangeFormalCharge& change_formal_charge(int index) const;
  ::ReactionProto::ChangeFormalCharge* add_change_formal_charge();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeFormalCharge >&
      change_formal_charge() const;

  // repeated .ReactionProto.PlaceIsotope isotope = 11;
  int isotope_size() const;
  void clear_isotope();
  static const int kIsotopeFieldNumber = 11;
  ::ReactionProto::PlaceIsotope* mutable_isotope(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >*
      mutable_isotope();
  const ::ReactionProto::PlaceIsotope& isotope(int index) const;
  ::ReactionProto::PlaceIsotope* add_isotope();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >&
      isotope() const;

  // repeated .ReactionProto.IncrementIsotope change_isotope = 12;
  int change_isotope_size() const;
  void clear_change_isotope();
  static const int kChangeIsotopeFieldNumber = 12;
  ::ReactionProto::IncrementIsotope* mutable_change_isotope(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::IncrementIsotope >*
      mutable_change_isotope();
  const ::ReactionProto::IncrementIsotope& change_isotope(int index) const;
  ::ReactionProto::IncrementIsotope* add_change_isotope();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::IncrementIsotope >&
      change_isotope() const;

  // repeated .ReactionProto.PlaceIsotope invert_isotope = 13;
  int invert_isotope_size() const;
  void clear_invert_isotope();
  static const int kInvertIsotopeFieldNumber = 13;
  ::ReactionProto::PlaceIsotope* mutable_invert_isotope(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >*
      mutable_invert_isotope();
  const ::ReactionProto::PlaceIsotope& invert_isotope(int index) const;
  ::ReactionProto::PlaceIsotope* add_invert_isotope();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >&
      invert_isotope() const;

  // repeated .ReactionProto.BondLength bond_length = 14;
  int bond_length_size() const;
  void clear_bond_length();
  static const int kBondLengthFieldNumber = 14;
  ::ReactionProto::BondLength* mutable_bond_length(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondLength >*
      mutable_bond_length();
  const ::ReactionProto::BondLength& bond_length(int index) const;
  ::ReactionProto::BondLength* add_bond_length();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondLength >&
      bond_length() const;

  // repeated .ReactionProto.BondAngle bond_angle = 15;
  int bond_angle_size() const;
  void clear_bond_angle();
  static const int kBondAngleFieldNumber = 15;
  ::ReactionProto::BondAngle* mutable_bond_angle(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondAngle >*
      mutable_bond_angle();
  const ::ReactionProto::BondAngle& bond_angle(int index) const;
  ::ReactionProto::BondAngle* add_bond_angle();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondAngle >&
      bond_angle() const;

  // repeated .ReactionProto.DihedralAngle dihedral_angle = 16;
  int dihedral_angle_size() const;
  void clear_dihedral_angle();
  static const int kDihedralAngleFieldNumber = 16;
  ::ReactionProto::DihedralAngle* mutable_dihedral_angle(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::DihedralAngle >*
      mutable_dihedral_angle();
  const ::ReactionProto::DihedralAngle& dihedral_angle(int index) const;
  ::ReactionProto::DihedralAngle* add_dihedral_angle();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::DihedralAngle >&
      dihedral_angle() const;

  // repeated .ReactionProto.ThreeDReplace reaction_3d_replace = 17;
  int reaction_3d_replace_size() const;
  void clear_reaction_3d_replace();
  static const int kReaction3DReplaceFieldNumber = 17;
  ::ReactionProto::ThreeDReplace* mutable_reaction_3d_replace(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ThreeDReplace >*
      mutable_reaction_3d_replace();
  const ::ReactionProto::ThreeDReplace& reaction_3d_replace(int index) const;
  ::ReactionProto::ThreeDReplace* add_reaction_3d_replace();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ThreeDReplace >&
      reaction_3d_replace() const;

  // repeated .ReactionProto.WedgeBond wedge_bonds = 18;
  int wedge_bonds_size() const;
  void clear_wedge_bonds();
  static const int kWedgeBondsFieldNumber = 18;
  ::ReactionProto::WedgeBond* mutable_wedge_bonds(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::WedgeBond >*
      mutable_wedge_bonds();
  const ::ReactionProto::WedgeBond& wedge_bonds(int index) const;
  ::ReactionProto::WedgeBond* add_wedge_bonds();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::WedgeBond >&
      wedge_bonds() const;

  // repeated .ReactionProto.ReplaceAtom replace_atom = 19;
  int replace_atom_size() const;
  void clear_replace_atom();
  static const int kReplaceAtomFieldNumber = 19;
  ::ReactionProto::ReplaceAtom* mutable_replace_atom(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ReplaceAtom >*
      mutable_replace_atom();
  const ::ReactionProto::ReplaceAtom& replace_atom(int index) const;
  ::ReactionProto::ReplaceAtom* add_replace_atom();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ReplaceAtom >&
      replace_atom() const;

  // repeated int32 unfix_implicit_hydrogens = 20;
  int unfix_implicit_hydrogens_size() const;
  void clear_unfix_implicit_hydrogens();
  static const int kUnfixImplicitHydrogensFieldNumber = 20;
  ::google::protobuf::int32 unfix_implicit_hydrogens(int index) const;
  void set_unfix_implicit_hydrogens(int index, ::google::protobuf::int32 value);
  void add_unfix_implicit_hydrogens(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      unfix_implicit_hydrogens() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_unfix_implicit_hydrogens();

  // repeated .SubstructureSearch.SubstructureQuery inactive = 21;
  int inactive_size() const;
  void clear_inactive();
  static const int kInactiveFieldNumber = 21;
  ::SubstructureSearch::SubstructureQuery* mutable_inactive(int index);
  ::google::protobuf::RepeatedPtrField< ::SubstructureSearch::SubstructureQuery >*
      mutable_inactive();
  const ::SubstructureSearch::SubstructureQuery& inactive(int index) const;
  ::SubstructureSearch::SubstructureQuery* add_inactive();
  const ::google::protobuf::RepeatedPtrField< ::SubstructureSearch::SubstructureQuery >&
      inactive() const;

  // repeated int32 invert_chirality = 22;
  int invert_chirality_size() const;
  void clear_invert_chirality();
  static const int kInvertChiralityFieldNumber = 22;
  ::google::protobuf::int32 invert_chirality(int index) const;
  void set_invert_chirality(int index, ::google::protobuf::int32 value);
  void add_invert_chirality(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      invert_chirality() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_invert_chirality();

  // repeated int32 remove_chirality = 23;
  int remove_chirality_size() const;
  void clear_remove_chirality();
  static const int kRemoveChiralityFieldNumber = 23;
  ::google::protobuf::int32 remove_chirality(int index) const;
  void set_remove_chirality(int index, ::google::protobuf::int32 value);
  void add_remove_chirality(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      remove_chirality() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_remove_chirality();

  // optional string comment = 29;
  bool has_comment() const;
  void clear_comment();
  static const int kCommentFieldNumber = 29;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // optional string smarts = 30;
  bool has_smarts() const;
  void clear_smarts();
  static const int kSmartsFieldNumber = 30;
  const ::std::string& smarts() const;
  void set_smarts(const ::std::string& value);
  #if LANG_CXX11
  void set_smarts(::std::string&& value);
  #endif
  void set_smarts(const char* value);
  void set_smarts(const char* value, size_t size);
  ::std::string* mutable_smarts();
  ::std::string* release_smarts();
  void set_allocated_smarts(::std::string* smarts);

  // optional .SubstructureSearch.SubstructureQuery query = 2;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 2;
  private:
  const ::SubstructureSearch::SubstructureQuery& _internal_query() const;
  public:
  const ::SubstructureSearch::SubstructureQuery& query() const;
  ::SubstructureSearch::SubstructureQuery* release_query();
  ::SubstructureSearch::SubstructureQuery* mutable_query();
  void set_allocated_query(::SubstructureSearch::SubstructureQuery* query);

  // optional .ToggleKekuleForm.ToggleKekuleForm toggle_kekule_form = 24;
  bool has_toggle_kekule_form() const;
  void clear_toggle_kekule_form();
  static const int kToggleKekuleFormFieldNumber = 24;
  private:
  const ::ToggleKekuleForm::ToggleKekuleForm& _internal_toggle_kekule_form() const;
  public:
  const ::ToggleKekuleForm::ToggleKekuleForm& toggle_kekule_form() const;
  ::ToggleKekuleForm::ToggleKekuleForm* release_toggle_kekule_form();
  ::ToggleKekuleForm::ToggleKekuleForm* mutable_toggle_kekule_form();
  void set_allocated_toggle_kekule_form(::ToggleKekuleForm::ToggleKekuleForm* toggle_kekule_form);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional bool ignore_multiple_matches_involving_atoms_not_changing = 25;
  bool has_ignore_multiple_matches_involving_atoms_not_changing() const;
  void clear_ignore_multiple_matches_involving_atoms_not_changing();
  static const int kIgnoreMultipleMatchesInvolvingAtomsNotChangingFieldNumber = 25;
  bool ignore_multiple_matches_involving_atoms_not_changing() const;
  void set_ignore_multiple_matches_involving_atoms_not_changing(bool value);

  // optional bool ignore_multiple_matches_involving_changing_atoms = 27;
  bool has_ignore_multiple_matches_involving_changing_atoms() const;
  void clear_ignore_multiple_matches_involving_changing_atoms();
  static const int kIgnoreMultipleMatchesInvolvingChangingAtomsFieldNumber = 27;
  bool ignore_multiple_matches_involving_changing_atoms() const;
  void set_ignore_multiple_matches_involving_changing_atoms(bool value);

  // optional bool noop_reaction = 28;
  bool has_noop_reaction() const;
  void clear_noop_reaction();
  static const int kNoopReactionFieldNumber = 28;
  bool noop_reaction() const;
  void set_noop_reaction(bool value);

  // @@protoc_insertion_point(class_scope:ReactionProto.ScaffoldReactionSite)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_query();
  void clear_has_query();
  void set_has_toggle_kekule_form();
  void clear_has_toggle_kekule_form();
  void set_has_ignore_multiple_matches_involving_atoms_not_changing();
  void clear_has_ignore_multiple_matches_involving_atoms_not_changing();
  void set_has_ignore_multiple_matches_involving_changing_atoms();
  void clear_has_ignore_multiple_matches_involving_changing_atoms();
  void set_has_noop_reaction();
  void clear_has_noop_reaction();
  void set_has_comment();
  void clear_has_comment();
  void set_has_smarts();
  void clear_has_smarts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondToBeMade > make_bond_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::PairOfAtoms > break_bond_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > remove_atom_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > remove_fragment_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > keep_fragment_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeElement > change_element_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::FormalCharge > formal_charge_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeFormalCharge > change_formal_charge_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope > isotope_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::IncrementIsotope > change_isotope_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope > invert_isotope_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondLength > bond_length_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondAngle > bond_angle_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::DihedralAngle > dihedral_angle_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ThreeDReplace > reaction_3d_replace_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::WedgeBond > wedge_bonds_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ReplaceAtom > replace_atom_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > unfix_implicit_hydrogens_;
  ::google::protobuf::RepeatedPtrField< ::SubstructureSearch::SubstructureQuery > inactive_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > invert_chirality_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > remove_chirality_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::google::protobuf::internal::ArenaStringPtr smarts_;
  ::SubstructureSearch::SubstructureQuery* query_;
  ::ToggleKekuleForm::ToggleKekuleForm* toggle_kekule_form_;
  ::google::protobuf::int32 id_;
  bool ignore_multiple_matches_involving_atoms_not_changing_;
  bool ignore_multiple_matches_involving_changing_atoms_;
  bool noop_reaction_;
  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SidechainReactionSite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.SidechainReactionSite) */ {
 public:
  SidechainReactionSite();
  virtual ~SidechainReactionSite();

  SidechainReactionSite(const SidechainReactionSite& from);

  inline SidechainReactionSite& operator=(const SidechainReactionSite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SidechainReactionSite(SidechainReactionSite&& from) noexcept
    : SidechainReactionSite() {
    *this = ::std::move(from);
  }

  inline SidechainReactionSite& operator=(SidechainReactionSite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SidechainReactionSite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SidechainReactionSite* internal_default_instance() {
    return reinterpret_cast<const SidechainReactionSite*>(
               &_SidechainReactionSite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(SidechainReactionSite* other);
  friend void swap(SidechainReactionSite& a, SidechainReactionSite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SidechainReactionSite* New() const final {
    return CreateMaybeMessage<SidechainReactionSite>(NULL);
  }

  SidechainReactionSite* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SidechainReactionSite>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SidechainReactionSite& from);
  void MergeFrom(const SidechainReactionSite& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SidechainReactionSite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ReactionProto.BondToBeMade make_bond = 3;
  int make_bond_size() const;
  void clear_make_bond();
  static const int kMakeBondFieldNumber = 3;
  ::ReactionProto::BondToBeMade* mutable_make_bond(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondToBeMade >*
      mutable_make_bond();
  const ::ReactionProto::BondToBeMade& make_bond(int index) const;
  ::ReactionProto::BondToBeMade* add_make_bond();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondToBeMade >&
      make_bond() const;

  // repeated .ReactionProto.PairOfAtoms break_bond = 4;
  int break_bond_size() const;
  void clear_break_bond();
  static const int kBreakBondFieldNumber = 4;
  ::ReactionProto::PairOfAtoms* mutable_break_bond(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::PairOfAtoms >*
      mutable_break_bond();
  const ::ReactionProto::PairOfAtoms& break_bond(int index) const;
  ::ReactionProto::PairOfAtoms* add_break_bond();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::PairOfAtoms >&
      break_bond() const;

  // repeated int32 remove_atom = 5;
  int remove_atom_size() const;
  void clear_remove_atom();
  static const int kRemoveAtomFieldNumber = 5;
  ::google::protobuf::int32 remove_atom(int index) const;
  void set_remove_atom(int index, ::google::protobuf::int32 value);
  void add_remove_atom(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      remove_atom() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_remove_atom();

  // repeated int32 remove_fragment = 6;
  int remove_fragment_size() const;
  void clear_remove_fragment();
  static const int kRemoveFragmentFieldNumber = 6;
  ::google::protobuf::int32 remove_fragment(int index) const;
  void set_remove_fragment(int index, ::google::protobuf::int32 value);
  void add_remove_fragment(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      remove_fragment() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_remove_fragment();

  // repeated int32 keep_fragment = 7;
  int keep_fragment_size() const;
  void clear_keep_fragment();
  static const int kKeepFragmentFieldNumber = 7;
  ::google::protobuf::int32 keep_fragment(int index) const;
  void set_keep_fragment(int index, ::google::protobuf::int32 value);
  void add_keep_fragment(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      keep_fragment() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_keep_fragment();

  // repeated .ReactionProto.ChangeElement change_element = 8;
  int change_element_size() const;
  void clear_change_element();
  static const int kChangeElementFieldNumber = 8;
  ::ReactionProto::ChangeElement* mutable_change_element(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeElement >*
      mutable_change_element();
  const ::ReactionProto::ChangeElement& change_element(int index) const;
  ::ReactionProto::ChangeElement* add_change_element();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeElement >&
      change_element() const;

  // repeated .ReactionProto.FormalCharge formal_charge = 9;
  int formal_charge_size() const;
  void clear_formal_charge();
  static const int kFormalChargeFieldNumber = 9;
  ::ReactionProto::FormalCharge* mutable_formal_charge(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::FormalCharge >*
      mutable_formal_charge();
  const ::ReactionProto::FormalCharge& formal_charge(int index) const;
  ::ReactionProto::FormalCharge* add_formal_charge();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::FormalCharge >&
      formal_charge() const;

  // repeated .ReactionProto.ChangeFormalCharge change_formal_charge = 10;
  int change_formal_charge_size() const;
  void clear_change_formal_charge();
  static const int kChangeFormalChargeFieldNumber = 10;
  ::ReactionProto::ChangeFormalCharge* mutable_change_formal_charge(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeFormalCharge >*
      mutable_change_formal_charge();
  const ::ReactionProto::ChangeFormalCharge& change_formal_charge(int index) const;
  ::ReactionProto::ChangeFormalCharge* add_change_formal_charge();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeFormalCharge >&
      change_formal_charge() const;

  // repeated .ReactionProto.PlaceIsotope isotope = 11;
  int isotope_size() const;
  void clear_isotope();
  static const int kIsotopeFieldNumber = 11;
  ::ReactionProto::PlaceIsotope* mutable_isotope(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >*
      mutable_isotope();
  const ::ReactionProto::PlaceIsotope& isotope(int index) const;
  ::ReactionProto::PlaceIsotope* add_isotope();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >&
      isotope() const;

  // repeated .ReactionProto.IncrementIsotope change_isotope = 12;
  int change_isotope_size() const;
  void clear_change_isotope();
  static const int kChangeIsotopeFieldNumber = 12;
  ::ReactionProto::IncrementIsotope* mutable_change_isotope(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::IncrementIsotope >*
      mutable_change_isotope();
  const ::ReactionProto::IncrementIsotope& change_isotope(int index) const;
  ::ReactionProto::IncrementIsotope* add_change_isotope();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::IncrementIsotope >&
      change_isotope() const;

  // repeated .ReactionProto.PlaceIsotope invert_isotope = 13;
  int invert_isotope_size() const;
  void clear_invert_isotope();
  static const int kInvertIsotopeFieldNumber = 13;
  ::ReactionProto::PlaceIsotope* mutable_invert_isotope(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >*
      mutable_invert_isotope();
  const ::ReactionProto::PlaceIsotope& invert_isotope(int index) const;
  ::ReactionProto::PlaceIsotope* add_invert_isotope();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >&
      invert_isotope() const;

  // repeated .ReactionProto.BondLength bond_length = 14;
  int bond_length_size() const;
  void clear_bond_length();
  static const int kBondLengthFieldNumber = 14;
  ::ReactionProto::BondLength* mutable_bond_length(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondLength >*
      mutable_bond_length();
  const ::ReactionProto::BondLength& bond_length(int index) const;
  ::ReactionProto::BondLength* add_bond_length();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondLength >&
      bond_length() const;

  // repeated .ReactionProto.BondAngle bond_angle = 15;
  int bond_angle_size() const;
  void clear_bond_angle();
  static const int kBondAngleFieldNumber = 15;
  ::ReactionProto::BondAngle* mutable_bond_angle(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondAngle >*
      mutable_bond_angle();
  const ::ReactionProto::BondAngle& bond_angle(int index) const;
  ::ReactionProto::BondAngle* add_bond_angle();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondAngle >&
      bond_angle() const;

  // repeated .ReactionProto.DihedralAngle dihedral_angle = 16;
  int dihedral_angle_size() const;
  void clear_dihedral_angle();
  static const int kDihedralAngleFieldNumber = 16;
  ::ReactionProto::DihedralAngle* mutable_dihedral_angle(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::DihedralAngle >*
      mutable_dihedral_angle();
  const ::ReactionProto::DihedralAngle& dihedral_angle(int index) const;
  ::ReactionProto::DihedralAngle* add_dihedral_angle();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::DihedralAngle >&
      dihedral_angle() const;

  // repeated .ReactionProto.ThreeDReplace reaction_3d_replace = 17;
  int reaction_3d_replace_size() const;
  void clear_reaction_3d_replace();
  static const int kReaction3DReplaceFieldNumber = 17;
  ::ReactionProto::ThreeDReplace* mutable_reaction_3d_replace(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ThreeDReplace >*
      mutable_reaction_3d_replace();
  const ::ReactionProto::ThreeDReplace& reaction_3d_replace(int index) const;
  ::ReactionProto::ThreeDReplace* add_reaction_3d_replace();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ThreeDReplace >&
      reaction_3d_replace() const;

  // repeated .ReactionProto.WedgeBond wedge_bonds = 18;
  int wedge_bonds_size() const;
  void clear_wedge_bonds();
  static const int kWedgeBondsFieldNumber = 18;
  ::ReactionProto::WedgeBond* mutable_wedge_bonds(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::WedgeBond >*
      mutable_wedge_bonds();
  const ::ReactionProto::WedgeBond& wedge_bonds(int index) const;
  ::ReactionProto::WedgeBond* add_wedge_bonds();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::WedgeBond >&
      wedge_bonds() const;

  // repeated .ReactionProto.ReplaceAtom replace_atom = 19;
  int replace_atom_size() const;
  void clear_replace_atom();
  static const int kReplaceAtomFieldNumber = 19;
  ::ReactionProto::ReplaceAtom* mutable_replace_atom(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ReplaceAtom >*
      mutable_replace_atom();
  const ::ReactionProto::ReplaceAtom& replace_atom(int index) const;
  ::ReactionProto::ReplaceAtom* add_replace_atom();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ReplaceAtom >&
      replace_atom() const;

  // repeated int32 unfix_implicit_hydrogens = 20;
  int unfix_implicit_hydrogens_size() const;
  void clear_unfix_implicit_hydrogens();
  static const int kUnfixImplicitHydrogensFieldNumber = 20;
  ::google::protobuf::int32 unfix_implicit_hydrogens(int index) const;
  void set_unfix_implicit_hydrogens(int index, ::google::protobuf::int32 value);
  void add_unfix_implicit_hydrogens(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      unfix_implicit_hydrogens() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_unfix_implicit_hydrogens();

  // repeated .SubstructureSearch.SubstructureQuery inactive = 21;
  int inactive_size() const;
  void clear_inactive();
  static const int kInactiveFieldNumber = 21;
  ::SubstructureSearch::SubstructureQuery* mutable_inactive(int index);
  ::google::protobuf::RepeatedPtrField< ::SubstructureSearch::SubstructureQuery >*
      mutable_inactive();
  const ::SubstructureSearch::SubstructureQuery& inactive(int index) const;
  ::SubstructureSearch::SubstructureQuery* add_inactive();
  const ::google::protobuf::RepeatedPtrField< ::SubstructureSearch::SubstructureQuery >&
      inactive() const;

  // repeated int32 invert_chirality = 22;
  int invert_chirality_size() const;
  void clear_invert_chirality();
  static const int kInvertChiralityFieldNumber = 22;
  ::google::protobuf::int32 invert_chirality(int index) const;
  void set_invert_chirality(int index, ::google::protobuf::int32 value);
  void add_invert_chirality(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      invert_chirality() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_invert_chirality();

  // repeated int32 remove_chirality = 23;
  int remove_chirality_size() const;
  void clear_remove_chirality();
  static const int kRemoveChiralityFieldNumber = 23;
  ::google::protobuf::int32 remove_chirality(int index) const;
  void set_remove_chirality(int index, ::google::protobuf::int32 value);
  void add_remove_chirality(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      remove_chirality() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_remove_chirality();

  // repeated string reagent = 40;
  int reagent_size() const;
  void clear_reagent();
  static const int kReagentFieldNumber = 40;
  const ::std::string& reagent(int index) const;
  ::std::string* mutable_reagent(int index);
  void set_reagent(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_reagent(int index, ::std::string&& value);
  #endif
  void set_reagent(int index, const char* value);
  void set_reagent(int index, const char* value, size_t size);
  ::std::string* add_reagent();
  void add_reagent(const ::std::string& value);
  #if LANG_CXX11
  void add_reagent(::std::string&& value);
  #endif
  void add_reagent(const char* value);
  void add_reagent(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& reagent() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_reagent();

  // repeated .ReactionProto.InterParticleBond join = 41;
  int join_size() const;
  void clear_join();
  static const int kJoinFieldNumber = 41;
  ::ReactionProto::InterParticleBond* mutable_join(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::InterParticleBond >*
      mutable_join();
  const ::ReactionProto::InterParticleBond& join(int index) const;
  ::ReactionProto::InterParticleBond* add_join();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::InterParticleBond >&
      join() const;

  // repeated .ReactionProto.NoReaction no_reaction = 42;
  int no_reaction_size() const;
  void clear_no_reaction();
  static const int kNoReactionFieldNumber = 42;
  ::ReactionProto::NoReaction* mutable_no_reaction(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::NoReaction >*
      mutable_no_reaction();
  const ::ReactionProto::NoReaction& no_reaction(int index) const;
  ::ReactionProto::NoReaction* add_no_reaction();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::NoReaction >&
      no_reaction() const;

  // optional string comment = 29;
  bool has_comment() const;
  void clear_comment();
  static const int kCommentFieldNumber = 29;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // optional string smarts = 30;
  bool has_smarts() const;
  void clear_smarts();
  static const int kSmartsFieldNumber = 30;
  const ::std::string& smarts() const;
  void set_smarts(const ::std::string& value);
  #if LANG_CXX11
  void set_smarts(::std::string&& value);
  #endif
  void set_smarts(const char* value);
  void set_smarts(const char* value, size_t size);
  ::std::string* mutable_smarts();
  ::std::string* release_smarts();
  void set_allocated_smarts(::std::string* smarts);

  // optional .SubstructureSearch.SubstructureQuery query = 2;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 2;
  private:
  const ::SubstructureSearch::SubstructureQuery& _internal_query() const;
  public:
  const ::SubstructureSearch::SubstructureQuery& query() const;
  ::SubstructureSearch::SubstructureQuery* release_query();
  ::SubstructureSearch::SubstructureQuery* mutable_query();
  void set_allocated_query(::SubstructureSearch::SubstructureQuery* query);

  // optional .ToggleKekuleForm.ToggleKekuleForm toggle_kekule_form = 24;
  bool has_toggle_kekule_form() const;
  void clear_toggle_kekule_form();
  static const int kToggleKekuleFormFieldNumber = 24;
  private:
  const ::ToggleKekuleForm::ToggleKekuleForm& _internal_toggle_kekule_form() const;
  public:
  const ::ToggleKekuleForm::ToggleKekuleForm& toggle_kekule_form() const;
  ::ToggleKekuleForm::ToggleKekuleForm* release_toggle_kekule_form();
  ::ToggleKekuleForm::ToggleKekuleForm* mutable_toggle_kekule_form();
  void set_allocated_toggle_kekule_form(::ToggleKekuleForm::ToggleKekuleForm* toggle_kekule_form);

  // optional .ReactionProto.SidechainMatchConditions match_conditions = 44;
  bool has_match_conditions() const;
  void clear_match_conditions();
  static const int kMatchConditionsFieldNumber = 44;
  private:
  const ::ReactionProto::SidechainMatchConditions& _internal_match_conditions() const;
  public:
  const ::ReactionProto::SidechainMatchConditions& match_conditions() const;
  ::ReactionProto::SidechainMatchConditions* release_match_conditions();
  ::ReactionProto::SidechainMatchConditions* mutable_match_conditions();
  void set_allocated_match_conditions(::ReactionProto::SidechainMatchConditions* match_conditions);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional bool ignore_multiple_matches_involving_atoms_not_changing = 25;
  bool has_ignore_multiple_matches_involving_atoms_not_changing() const;
  void clear_ignore_multiple_matches_involving_atoms_not_changing();
  static const int kIgnoreMultipleMatchesInvolvingAtomsNotChangingFieldNumber = 25;
  bool ignore_multiple_matches_involving_atoms_not_changing() const;
  void set_ignore_multiple_matches_involving_atoms_not_changing(bool value);

  // optional bool ignore_multiple_matches_involving_changing_atoms = 27;
  bool has_ignore_multiple_matches_involving_changing_atoms() const;
  void clear_ignore_multiple_matches_involving_changing_atoms();
  static const int kIgnoreMultipleMatchesInvolvingChangingAtomsFieldNumber = 27;
  bool ignore_multiple_matches_involving_changing_atoms() const;
  void set_ignore_multiple_matches_involving_changing_atoms(bool value);

  // optional bool noop_reaction = 28;
  bool has_noop_reaction() const;
  void clear_noop_reaction();
  static const int kNoopReactionFieldNumber = 28;
  bool noop_reaction() const;
  void set_noop_reaction(bool value);

  // optional bool make_implicit_hydrogens_explicit = 43;
  bool has_make_implicit_hydrogens_explicit() const;
  void clear_make_implicit_hydrogens_explicit();
  static const int kMakeImplicitHydrogensExplicitFieldNumber = 43;
  bool make_implicit_hydrogens_explicit() const;
  void set_make_implicit_hydrogens_explicit(bool value);

  // @@protoc_insertion_point(class_scope:ReactionProto.SidechainReactionSite)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_query();
  void clear_has_query();
  void set_has_toggle_kekule_form();
  void clear_has_toggle_kekule_form();
  void set_has_ignore_multiple_matches_involving_atoms_not_changing();
  void clear_has_ignore_multiple_matches_involving_atoms_not_changing();
  void set_has_ignore_multiple_matches_involving_changing_atoms();
  void clear_has_ignore_multiple_matches_involving_changing_atoms();
  void set_has_noop_reaction();
  void clear_has_noop_reaction();
  void set_has_comment();
  void clear_has_comment();
  void set_has_smarts();
  void clear_has_smarts();
  void set_has_make_implicit_hydrogens_explicit();
  void clear_has_make_implicit_hydrogens_explicit();
  void set_has_match_conditions();
  void clear_has_match_conditions();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondToBeMade > make_bond_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::PairOfAtoms > break_bond_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > remove_atom_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > remove_fragment_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > keep_fragment_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeElement > change_element_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::FormalCharge > formal_charge_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeFormalCharge > change_formal_charge_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope > isotope_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::IncrementIsotope > change_isotope_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope > invert_isotope_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondLength > bond_length_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondAngle > bond_angle_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::DihedralAngle > dihedral_angle_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ThreeDReplace > reaction_3d_replace_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::WedgeBond > wedge_bonds_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::ReplaceAtom > replace_atom_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > unfix_implicit_hydrogens_;
  ::google::protobuf::RepeatedPtrField< ::SubstructureSearch::SubstructureQuery > inactive_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > invert_chirality_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > remove_chirality_;
  ::google::protobuf::RepeatedPtrField< ::std::string> reagent_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::InterParticleBond > join_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::NoReaction > no_reaction_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::google::protobuf::internal::ArenaStringPtr smarts_;
  ::SubstructureSearch::SubstructureQuery* query_;
  ::ToggleKekuleForm::ToggleKekuleForm* toggle_kekule_form_;
  ::ReactionProto::SidechainMatchConditions* match_conditions_;
  ::google::protobuf::int32 id_;
  bool ignore_multiple_matches_involving_atoms_not_changing_;
  bool ignore_multiple_matches_involving_changing_atoms_;
  bool noop_reaction_;
  bool make_implicit_hydrogens_explicit_;
  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Reaction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReactionProto.Reaction) */ {
 public:
  Reaction();
  virtual ~Reaction();

  Reaction(const Reaction& from);

  inline Reaction& operator=(const Reaction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reaction(Reaction&& from) noexcept
    : Reaction() {
    *this = ::std::move(from);
  }

  inline Reaction& operator=(Reaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reaction* internal_default_instance() {
    return reinterpret_cast<const Reaction*>(
               &_Reaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(Reaction* other);
  friend void swap(Reaction& a, Reaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reaction* New() const final {
    return CreateMaybeMessage<Reaction>(NULL);
  }

  Reaction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Reaction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Reaction& from);
  void MergeFrom(const Reaction& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ReactionProto.SidechainReactionSite sidechain = 3;
  int sidechain_size() const;
  void clear_sidechain();
  static const int kSidechainFieldNumber = 3;
  ::ReactionProto::SidechainReactionSite* mutable_sidechain(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::SidechainReactionSite >*
      mutable_sidechain();
  const ::ReactionProto::SidechainReactionSite& sidechain(int index) const;
  ::ReactionProto::SidechainReactionSite* add_sidechain();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::SidechainReactionSite >&
      sidechain() const;

  // repeated .ReactionProto.StereoCenter reaction_stereo_center = 4;
  int reaction_stereo_center_size() const;
  void clear_reaction_stereo_center();
  static const int kReactionStereoCenterFieldNumber = 4;
  ::ReactionProto::StereoCenter* mutable_reaction_stereo_center(int index);
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::StereoCenter >*
      mutable_reaction_stereo_center();
  const ::ReactionProto::StereoCenter& reaction_stereo_center(int index) const;
  ::ReactionProto::StereoCenter* add_reaction_stereo_center();
  const ::google::protobuf::RepeatedPtrField< ::ReactionProto::StereoCenter >&
      reaction_stereo_center() const;

  // optional string comment = 1;
  bool has_comment() const;
  void clear_comment();
  static const int kCommentFieldNumber = 1;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // optional string append_to_name = 6;
  bool has_append_to_name() const;
  void clear_append_to_name();
  static const int kAppendToNameFieldNumber = 6;
  const ::std::string& append_to_name() const;
  void set_append_to_name(const ::std::string& value);
  #if LANG_CXX11
  void set_append_to_name(::std::string&& value);
  #endif
  void set_append_to_name(const char* value);
  void set_append_to_name(const char* value, size_t size);
  ::std::string* mutable_append_to_name();
  ::std::string* release_append_to_name();
  void set_allocated_append_to_name(::std::string* append_to_name);

  // optional string reaction_directory = 9;
  bool has_reaction_directory() const;
  void clear_reaction_directory();
  static const int kReactionDirectoryFieldNumber = 9;
  const ::std::string& reaction_directory() const;
  void set_reaction_directory(const ::std::string& value);
  #if LANG_CXX11
  void set_reaction_directory(::std::string&& value);
  #endif
  void set_reaction_directory(const char* value);
  void set_reaction_directory(const char* value, size_t size);
  ::std::string* mutable_reaction_directory();
  ::std::string* release_reaction_directory();
  void set_allocated_reaction_directory(::std::string* reaction_directory);

  // optional .ReactionProto.ScaffoldReactionSite scaffold = 2;
  bool has_scaffold() const;
  void clear_scaffold();
  static const int kScaffoldFieldNumber = 2;
  private:
  const ::ReactionProto::ScaffoldReactionSite& _internal_scaffold() const;
  public:
  const ::ReactionProto::ScaffoldReactionSite& scaffold() const;
  ::ReactionProto::ScaffoldReactionSite* release_scaffold();
  ::ReactionProto::ScaffoldReactionSite* mutable_scaffold();
  void set_allocated_scaffold(::ReactionProto::ScaffoldReactionSite* scaffold);

  // optional .ReactionProto.ScaffoldMatchConditions scaffold_match_conditions = 12;
  bool has_scaffold_match_conditions() const;
  void clear_scaffold_match_conditions();
  static const int kScaffoldMatchConditionsFieldNumber = 12;
  private:
  const ::ReactionProto::ScaffoldMatchConditions& _internal_scaffold_match_conditions() const;
  public:
  const ::ReactionProto::ScaffoldMatchConditions& scaffold_match_conditions() const;
  ::ReactionProto::ScaffoldMatchConditions* release_scaffold_match_conditions();
  ::ReactionProto::ScaffoldMatchConditions* mutable_scaffold_match_conditions();
  void set_allocated_scaffold_match_conditions(::ReactionProto::ScaffoldMatchConditions* scaffold_match_conditions);

  // optional bool append_reagent_name = 5;
  bool has_append_reagent_name() const;
  void clear_append_reagent_name();
  static const int kAppendReagentNameFieldNumber = 5;
  bool append_reagent_name() const;
  void set_append_reagent_name(bool value);

  // optional bool query_files_in_current_directory = 8;
  bool has_query_files_in_current_directory() const;
  void clear_query_files_in_current_directory();
  static const int kQueryFilesInCurrentDirectoryFieldNumber = 8;
  bool query_files_in_current_directory() const;
  void set_query_files_in_current_directory(bool value);

  // optional bool find_kekule_forms_for_bad_valence = 10;
  bool has_find_kekule_forms_for_bad_valence() const;
  void clear_find_kekule_forms_for_bad_valence();
  static const int kFindKekuleFormsForBadValenceFieldNumber = 10;
  bool find_kekule_forms_for_bad_valence() const;
  void set_find_kekule_forms_for_bad_valence(bool value);

  // optional bool make_implicit_hydrogens_explicit = 11;
  bool has_make_implicit_hydrogens_explicit() const;
  void clear_make_implicit_hydrogens_explicit();
  static const int kMakeImplicitHydrogensExplicitFieldNumber = 11;
  bool make_implicit_hydrogens_explicit() const;
  void set_make_implicit_hydrogens_explicit(bool value);

  // optional bool noop_reaction = 13;
  bool has_noop_reaction() const;
  void clear_noop_reaction();
  static const int kNoopReactionFieldNumber = 13;
  bool noop_reaction() const;
  void set_noop_reaction(bool value);

  // @@protoc_insertion_point(class_scope:ReactionProto.Reaction)
 private:
  void set_has_comment();
  void clear_has_comment();
  void set_has_scaffold();
  void clear_has_scaffold();
  void set_has_append_reagent_name();
  void clear_has_append_reagent_name();
  void set_has_append_to_name();
  void clear_has_append_to_name();
  void set_has_query_files_in_current_directory();
  void clear_has_query_files_in_current_directory();
  void set_has_reaction_directory();
  void clear_has_reaction_directory();
  void set_has_find_kekule_forms_for_bad_valence();
  void clear_has_find_kekule_forms_for_bad_valence();
  void set_has_make_implicit_hydrogens_explicit();
  void clear_has_make_implicit_hydrogens_explicit();
  void set_has_scaffold_match_conditions();
  void clear_has_scaffold_match_conditions();
  void set_has_noop_reaction();
  void clear_has_noop_reaction();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::SidechainReactionSite > sidechain_;
  ::google::protobuf::RepeatedPtrField< ::ReactionProto::StereoCenter > reaction_stereo_center_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::google::protobuf::internal::ArenaStringPtr append_to_name_;
  ::google::protobuf::internal::ArenaStringPtr reaction_directory_;
  ::ReactionProto::ScaffoldReactionSite* scaffold_;
  ::ReactionProto::ScaffoldMatchConditions* scaffold_match_conditions_;
  bool append_reagent_name_;
  bool query_files_in_current_directory_;
  bool find_kekule_forms_for_bad_valence_;
  bool make_implicit_hydrogens_explicit_;
  bool noop_reaction_;
  friend struct ::protobuf_reaction_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MatchConditions

// optional bool ignore_not_reacting = 1;
inline bool MatchConditions::has_ignore_not_reacting() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchConditions::set_has_ignore_not_reacting() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchConditions::clear_has_ignore_not_reacting() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchConditions::clear_ignore_not_reacting() {
  ignore_not_reacting_ = false;
  clear_has_ignore_not_reacting();
}
inline bool MatchConditions::ignore_not_reacting() const {
  // @@protoc_insertion_point(field_get:ReactionProto.MatchConditions.ignore_not_reacting)
  return ignore_not_reacting_;
}
inline void MatchConditions::set_ignore_not_reacting(bool value) {
  set_has_ignore_not_reacting();
  ignore_not_reacting_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.MatchConditions.ignore_not_reacting)
}

// optional bool find_unique_embeddings = 2;
inline bool MatchConditions::has_find_unique_embeddings() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchConditions::set_has_find_unique_embeddings() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchConditions::clear_has_find_unique_embeddings() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchConditions::clear_find_unique_embeddings() {
  find_unique_embeddings_ = false;
  clear_has_find_unique_embeddings();
}
inline bool MatchConditions::find_unique_embeddings() const {
  // @@protoc_insertion_point(field_get:ReactionProto.MatchConditions.find_unique_embeddings)
  return find_unique_embeddings_;
}
inline void MatchConditions::set_find_unique_embeddings(bool value) {
  set_has_find_unique_embeddings();
  find_unique_embeddings_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.MatchConditions.find_unique_embeddings)
}

// optional int32 process_hit_number = 3;
inline bool MatchConditions::has_process_hit_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchConditions::set_has_process_hit_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchConditions::clear_has_process_hit_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchConditions::clear_process_hit_number() {
  process_hit_number_ = 0;
  clear_has_process_hit_number();
}
inline ::google::protobuf::int32 MatchConditions::process_hit_number() const {
  // @@protoc_insertion_point(field_get:ReactionProto.MatchConditions.process_hit_number)
  return process_hit_number_;
}
inline void MatchConditions::set_process_hit_number(::google::protobuf::int32 value) {
  set_has_process_hit_number();
  process_hit_number_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.MatchConditions.process_hit_number)
}

// optional bool one_embedding_per_start_atom = 4;
inline bool MatchConditions::has_one_embedding_per_start_atom() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MatchConditions::set_has_one_embedding_per_start_atom() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MatchConditions::clear_has_one_embedding_per_start_atom() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MatchConditions::clear_one_embedding_per_start_atom() {
  one_embedding_per_start_atom_ = false;
  clear_has_one_embedding_per_start_atom();
}
inline bool MatchConditions::one_embedding_per_start_atom() const {
  // @@protoc_insertion_point(field_get:ReactionProto.MatchConditions.one_embedding_per_start_atom)
  return one_embedding_per_start_atom_;
}
inline void MatchConditions::set_one_embedding_per_start_atom(bool value) {
  set_has_one_embedding_per_start_atom();
  one_embedding_per_start_atom_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.MatchConditions.one_embedding_per_start_atom)
}

// optional bool ignore_symmetry_related_matches = 5;
inline bool MatchConditions::has_ignore_symmetry_related_matches() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MatchConditions::set_has_ignore_symmetry_related_matches() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MatchConditions::clear_has_ignore_symmetry_related_matches() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MatchConditions::clear_ignore_symmetry_related_matches() {
  ignore_symmetry_related_matches_ = false;
  clear_has_ignore_symmetry_related_matches();
}
inline bool MatchConditions::ignore_symmetry_related_matches() const {
  // @@protoc_insertion_point(field_get:ReactionProto.MatchConditions.ignore_symmetry_related_matches)
  return ignore_symmetry_related_matches_;
}
inline void MatchConditions::set_ignore_symmetry_related_matches(bool value) {
  set_has_ignore_symmetry_related_matches();
  ignore_symmetry_related_matches_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.MatchConditions.ignore_symmetry_related_matches)
}

// optional string multiple_match_string = 6;
inline bool MatchConditions::has_multiple_match_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchConditions::set_has_multiple_match_string() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchConditions::clear_has_multiple_match_string() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchConditions::clear_multiple_match_string() {
  multiple_match_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_multiple_match_string();
}
inline const ::std::string& MatchConditions::multiple_match_string() const {
  // @@protoc_insertion_point(field_get:ReactionProto.MatchConditions.multiple_match_string)
  return multiple_match_string_.GetNoArena();
}
inline void MatchConditions::set_multiple_match_string(const ::std::string& value) {
  set_has_multiple_match_string();
  multiple_match_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReactionProto.MatchConditions.multiple_match_string)
}
#if LANG_CXX11
inline void MatchConditions::set_multiple_match_string(::std::string&& value) {
  set_has_multiple_match_string();
  multiple_match_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReactionProto.MatchConditions.multiple_match_string)
}
#endif
inline void MatchConditions::set_multiple_match_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_multiple_match_string();
  multiple_match_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReactionProto.MatchConditions.multiple_match_string)
}
inline void MatchConditions::set_multiple_match_string(const char* value, size_t size) {
  set_has_multiple_match_string();
  multiple_match_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReactionProto.MatchConditions.multiple_match_string)
}
inline ::std::string* MatchConditions::mutable_multiple_match_string() {
  set_has_multiple_match_string();
  // @@protoc_insertion_point(field_mutable:ReactionProto.MatchConditions.multiple_match_string)
  return multiple_match_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchConditions::release_multiple_match_string() {
  // @@protoc_insertion_point(field_release:ReactionProto.MatchConditions.multiple_match_string)
  if (!has_multiple_match_string()) {
    return NULL;
  }
  clear_has_multiple_match_string();
  return multiple_match_string_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchConditions::set_allocated_multiple_match_string(::std::string* multiple_match_string) {
  if (multiple_match_string != NULL) {
    set_has_multiple_match_string();
  } else {
    clear_has_multiple_match_string();
  }
  multiple_match_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), multiple_match_string);
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.MatchConditions.multiple_match_string)
}

// optional int32 suppress_if_more_than_this_many_substructure_search_hits = 7;
inline bool MatchConditions::has_suppress_if_more_than_this_many_substructure_search_hits() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MatchConditions::set_has_suppress_if_more_than_this_many_substructure_search_hits() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MatchConditions::clear_has_suppress_if_more_than_this_many_substructure_search_hits() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MatchConditions::clear_suppress_if_more_than_this_many_substructure_search_hits() {
  suppress_if_more_than_this_many_substructure_search_hits_ = 0;
  clear_has_suppress_if_more_than_this_many_substructure_search_hits();
}
inline ::google::protobuf::int32 MatchConditions::suppress_if_more_than_this_many_substructure_search_hits() const {
  // @@protoc_insertion_point(field_get:ReactionProto.MatchConditions.suppress_if_more_than_this_many_substructure_search_hits)
  return suppress_if_more_than_this_many_substructure_search_hits_;
}
inline void MatchConditions::set_suppress_if_more_than_this_many_substructure_search_hits(::google::protobuf::int32 value) {
  set_has_suppress_if_more_than_this_many_substructure_search_hits();
  suppress_if_more_than_this_many_substructure_search_hits_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.MatchConditions.suppress_if_more_than_this_many_substructure_search_hits)
}

// -------------------------------------------------------------------

// ScaffoldMatchConditions

// optional .ReactionProto.MatchConditions match_conditions = 1;
inline bool ScaffoldMatchConditions::has_match_conditions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScaffoldMatchConditions::set_has_match_conditions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScaffoldMatchConditions::clear_has_match_conditions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScaffoldMatchConditions::clear_match_conditions() {
  if (match_conditions_ != NULL) match_conditions_->Clear();
  clear_has_match_conditions();
}
inline const ::ReactionProto::MatchConditions& ScaffoldMatchConditions::_internal_match_conditions() const {
  return *match_conditions_;
}
inline const ::ReactionProto::MatchConditions& ScaffoldMatchConditions::match_conditions() const {
  const ::ReactionProto::MatchConditions* p = match_conditions_;
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldMatchConditions.match_conditions)
  return p != NULL ? *p : *reinterpret_cast<const ::ReactionProto::MatchConditions*>(
      &::ReactionProto::_MatchConditions_default_instance_);
}
inline ::ReactionProto::MatchConditions* ScaffoldMatchConditions::release_match_conditions() {
  // @@protoc_insertion_point(field_release:ReactionProto.ScaffoldMatchConditions.match_conditions)
  clear_has_match_conditions();
  ::ReactionProto::MatchConditions* temp = match_conditions_;
  match_conditions_ = NULL;
  return temp;
}
inline ::ReactionProto::MatchConditions* ScaffoldMatchConditions::mutable_match_conditions() {
  set_has_match_conditions();
  if (match_conditions_ == NULL) {
    auto* p = CreateMaybeMessage<::ReactionProto::MatchConditions>(GetArenaNoVirtual());
    match_conditions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.ScaffoldMatchConditions.match_conditions)
  return match_conditions_;
}
inline void ScaffoldMatchConditions::set_allocated_match_conditions(::ReactionProto::MatchConditions* match_conditions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete match_conditions_;
  }
  if (match_conditions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      match_conditions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, match_conditions, submessage_arena);
    }
    set_has_match_conditions();
  } else {
    clear_has_match_conditions();
  }
  match_conditions_ = match_conditions;
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.ScaffoldMatchConditions.match_conditions)
}

// optional bool enumerate_scaffold_hits_individually = 2;
inline bool ScaffoldMatchConditions::has_enumerate_scaffold_hits_individually() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScaffoldMatchConditions::set_has_enumerate_scaffold_hits_individually() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScaffoldMatchConditions::clear_has_enumerate_scaffold_hits_individually() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScaffoldMatchConditions::clear_enumerate_scaffold_hits_individually() {
  enumerate_scaffold_hits_individually_ = false;
  clear_has_enumerate_scaffold_hits_individually();
}
inline bool ScaffoldMatchConditions::enumerate_scaffold_hits_individually() const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldMatchConditions.enumerate_scaffold_hits_individually)
  return enumerate_scaffold_hits_individually_;
}
inline void ScaffoldMatchConditions::set_enumerate_scaffold_hits_individually(bool value) {
  set_has_enumerate_scaffold_hits_individually();
  enumerate_scaffold_hits_individually_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.ScaffoldMatchConditions.enumerate_scaffold_hits_individually)
}

// optional int32 combinatorial_expansion_of_scaffold_hits = 3;
inline bool ScaffoldMatchConditions::has_combinatorial_expansion_of_scaffold_hits() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScaffoldMatchConditions::set_has_combinatorial_expansion_of_scaffold_hits() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScaffoldMatchConditions::clear_has_combinatorial_expansion_of_scaffold_hits() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScaffoldMatchConditions::clear_combinatorial_expansion_of_scaffold_hits() {
  combinatorial_expansion_of_scaffold_hits_ = 0;
  clear_has_combinatorial_expansion_of_scaffold_hits();
}
inline ::google::protobuf::int32 ScaffoldMatchConditions::combinatorial_expansion_of_scaffold_hits() const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldMatchConditions.combinatorial_expansion_of_scaffold_hits)
  return combinatorial_expansion_of_scaffold_hits_;
}
inline void ScaffoldMatchConditions::set_combinatorial_expansion_of_scaffold_hits(::google::protobuf::int32 value) {
  set_has_combinatorial_expansion_of_scaffold_hits();
  combinatorial_expansion_of_scaffold_hits_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.ScaffoldMatchConditions.combinatorial_expansion_of_scaffold_hits)
}

// -------------------------------------------------------------------

// SidechainMatchConditions

// optional .ReactionProto.MatchConditions match_conditions = 1;
inline bool SidechainMatchConditions::has_match_conditions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SidechainMatchConditions::set_has_match_conditions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SidechainMatchConditions::clear_has_match_conditions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SidechainMatchConditions::clear_match_conditions() {
  if (match_conditions_ != NULL) match_conditions_->Clear();
  clear_has_match_conditions();
}
inline const ::ReactionProto::MatchConditions& SidechainMatchConditions::_internal_match_conditions() const {
  return *match_conditions_;
}
inline const ::ReactionProto::MatchConditions& SidechainMatchConditions::match_conditions() const {
  const ::ReactionProto::MatchConditions* p = match_conditions_;
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainMatchConditions.match_conditions)
  return p != NULL ? *p : *reinterpret_cast<const ::ReactionProto::MatchConditions*>(
      &::ReactionProto::_MatchConditions_default_instance_);
}
inline ::ReactionProto::MatchConditions* SidechainMatchConditions::release_match_conditions() {
  // @@protoc_insertion_point(field_release:ReactionProto.SidechainMatchConditions.match_conditions)
  clear_has_match_conditions();
  ::ReactionProto::MatchConditions* temp = match_conditions_;
  match_conditions_ = NULL;
  return temp;
}
inline ::ReactionProto::MatchConditions* SidechainMatchConditions::mutable_match_conditions() {
  set_has_match_conditions();
  if (match_conditions_ == NULL) {
    auto* p = CreateMaybeMessage<::ReactionProto::MatchConditions>(GetArenaNoVirtual());
    match_conditions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainMatchConditions.match_conditions)
  return match_conditions_;
}
inline void SidechainMatchConditions::set_allocated_match_conditions(::ReactionProto::MatchConditions* match_conditions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete match_conditions_;
  }
  if (match_conditions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      match_conditions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, match_conditions, submessage_arena);
    }
    set_has_match_conditions();
  } else {
    clear_has_match_conditions();
  }
  match_conditions_ = match_conditions;
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.SidechainMatchConditions.match_conditions)
}

// optional bool make_new_reagent_for_each_hit = 2;
inline bool SidechainMatchConditions::has_make_new_reagent_for_each_hit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SidechainMatchConditions::set_has_make_new_reagent_for_each_hit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SidechainMatchConditions::clear_has_make_new_reagent_for_each_hit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SidechainMatchConditions::clear_make_new_reagent_for_each_hit() {
  make_new_reagent_for_each_hit_ = false;
  clear_has_make_new_reagent_for_each_hit();
}
inline bool SidechainMatchConditions::make_new_reagent_for_each_hit() const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainMatchConditions.make_new_reagent_for_each_hit)
  return make_new_reagent_for_each_hit_;
}
inline void SidechainMatchConditions::set_make_new_reagent_for_each_hit(bool value) {
  set_has_make_new_reagent_for_each_hit();
  make_new_reagent_for_each_hit_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.SidechainMatchConditions.make_new_reagent_for_each_hit)
}

// optional int32 max_matches_to_find = 3;
inline bool SidechainMatchConditions::has_max_matches_to_find() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SidechainMatchConditions::set_has_max_matches_to_find() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SidechainMatchConditions::clear_has_max_matches_to_find() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SidechainMatchConditions::clear_max_matches_to_find() {
  max_matches_to_find_ = 0;
  clear_has_max_matches_to_find();
}
inline ::google::protobuf::int32 SidechainMatchConditions::max_matches_to_find() const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainMatchConditions.max_matches_to_find)
  return max_matches_to_find_;
}
inline void SidechainMatchConditions::set_max_matches_to_find(::google::protobuf::int32 value) {
  set_has_max_matches_to_find();
  max_matches_to_find_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.SidechainMatchConditions.max_matches_to_find)
}

// optional bool strip_reagents_to_largest_fragment = 4;
inline bool SidechainMatchConditions::has_strip_reagents_to_largest_fragment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SidechainMatchConditions::set_has_strip_reagents_to_largest_fragment() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SidechainMatchConditions::clear_has_strip_reagents_to_largest_fragment() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SidechainMatchConditions::clear_strip_reagents_to_largest_fragment() {
  strip_reagents_to_largest_fragment_ = false;
  clear_has_strip_reagents_to_largest_fragment();
}
inline bool SidechainMatchConditions::strip_reagents_to_largest_fragment() const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainMatchConditions.strip_reagents_to_largest_fragment)
  return strip_reagents_to_largest_fragment_;
}
inline void SidechainMatchConditions::set_strip_reagents_to_largest_fragment(bool value) {
  set_has_strip_reagents_to_largest_fragment();
  strip_reagents_to_largest_fragment_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.SidechainMatchConditions.strip_reagents_to_largest_fragment)
}

// -------------------------------------------------------------------

// PairOfAtoms

// optional int32 a1 = 1;
inline bool PairOfAtoms::has_a1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PairOfAtoms::set_has_a1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PairOfAtoms::clear_has_a1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PairOfAtoms::clear_a1() {
  a1_ = 0;
  clear_has_a1();
}
inline ::google::protobuf::int32 PairOfAtoms::a1() const {
  // @@protoc_insertion_point(field_get:ReactionProto.PairOfAtoms.a1)
  return a1_;
}
inline void PairOfAtoms::set_a1(::google::protobuf::int32 value) {
  set_has_a1();
  a1_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.PairOfAtoms.a1)
}

// optional int32 a2 = 2;
inline bool PairOfAtoms::has_a2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PairOfAtoms::set_has_a2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PairOfAtoms::clear_has_a2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PairOfAtoms::clear_a2() {
  a2_ = 0;
  clear_has_a2();
}
inline ::google::protobuf::int32 PairOfAtoms::a2() const {
  // @@protoc_insertion_point(field_get:ReactionProto.PairOfAtoms.a2)
  return a2_;
}
inline void PairOfAtoms::set_a2(::google::protobuf::int32 value) {
  set_has_a2();
  a2_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.PairOfAtoms.a2)
}

// -------------------------------------------------------------------

// MatchedAtomInComponent

// optional int32 component = 1;
inline bool MatchedAtomInComponent::has_component() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchedAtomInComponent::set_has_component() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchedAtomInComponent::clear_has_component() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchedAtomInComponent::clear_component() {
  component_ = 0;
  clear_has_component();
}
inline ::google::protobuf::int32 MatchedAtomInComponent::component() const {
  // @@protoc_insertion_point(field_get:ReactionProto.MatchedAtomInComponent.component)
  return component_;
}
inline void MatchedAtomInComponent::set_component(::google::protobuf::int32 value) {
  set_has_component();
  component_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.MatchedAtomInComponent.component)
}

// optional int32 atom = 2;
inline bool MatchedAtomInComponent::has_atom() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchedAtomInComponent::set_has_atom() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchedAtomInComponent::clear_has_atom() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchedAtomInComponent::clear_atom() {
  atom_ = 0;
  clear_has_atom();
}
inline ::google::protobuf::int32 MatchedAtomInComponent::atom() const {
  // @@protoc_insertion_point(field_get:ReactionProto.MatchedAtomInComponent.atom)
  return atom_;
}
inline void MatchedAtomInComponent::set_atom(::google::protobuf::int32 value) {
  set_has_atom();
  atom_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.MatchedAtomInComponent.atom)
}

// optional string component_and_atom = 3;
inline bool MatchedAtomInComponent::has_component_and_atom() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchedAtomInComponent::set_has_component_and_atom() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchedAtomInComponent::clear_has_component_and_atom() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchedAtomInComponent::clear_component_and_atom() {
  component_and_atom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_component_and_atom();
}
inline const ::std::string& MatchedAtomInComponent::component_and_atom() const {
  // @@protoc_insertion_point(field_get:ReactionProto.MatchedAtomInComponent.component_and_atom)
  return component_and_atom_.GetNoArena();
}
inline void MatchedAtomInComponent::set_component_and_atom(const ::std::string& value) {
  set_has_component_and_atom();
  component_and_atom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReactionProto.MatchedAtomInComponent.component_and_atom)
}
#if LANG_CXX11
inline void MatchedAtomInComponent::set_component_and_atom(::std::string&& value) {
  set_has_component_and_atom();
  component_and_atom_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReactionProto.MatchedAtomInComponent.component_and_atom)
}
#endif
inline void MatchedAtomInComponent::set_component_and_atom(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_component_and_atom();
  component_and_atom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReactionProto.MatchedAtomInComponent.component_and_atom)
}
inline void MatchedAtomInComponent::set_component_and_atom(const char* value, size_t size) {
  set_has_component_and_atom();
  component_and_atom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReactionProto.MatchedAtomInComponent.component_and_atom)
}
inline ::std::string* MatchedAtomInComponent::mutable_component_and_atom() {
  set_has_component_and_atom();
  // @@protoc_insertion_point(field_mutable:ReactionProto.MatchedAtomInComponent.component_and_atom)
  return component_and_atom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchedAtomInComponent::release_component_and_atom() {
  // @@protoc_insertion_point(field_release:ReactionProto.MatchedAtomInComponent.component_and_atom)
  if (!has_component_and_atom()) {
    return NULL;
  }
  clear_has_component_and_atom();
  return component_and_atom_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchedAtomInComponent::set_allocated_component_and_atom(::std::string* component_and_atom) {
  if (component_and_atom != NULL) {
    set_has_component_and_atom();
  } else {
    clear_has_component_and_atom();
  }
  component_and_atom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), component_and_atom);
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.MatchedAtomInComponent.component_and_atom)
}

// -------------------------------------------------------------------

// StereoCenterComponent

// optional .ReactionProto.MatchedAtomInComponent atom = 1;
inline bool StereoCenterComponent::has_atom() const {
  return AtomOrHydrogen_case() == kAtom;
}
inline void StereoCenterComponent::set_has_atom() {
  _oneof_case_[0] = kAtom;
}
inline void StereoCenterComponent::clear_atom() {
  if (has_atom()) {
    delete AtomOrHydrogen_.atom_;
    clear_has_AtomOrHydrogen();
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& StereoCenterComponent::_internal_atom() const {
  return *AtomOrHydrogen_.atom_;
}
inline ::ReactionProto::MatchedAtomInComponent* StereoCenterComponent::release_atom() {
  // @@protoc_insertion_point(field_release:ReactionProto.StereoCenterComponent.atom)
  if (has_atom()) {
    clear_has_AtomOrHydrogen();
      ::ReactionProto::MatchedAtomInComponent* temp = AtomOrHydrogen_.atom_;
    AtomOrHydrogen_.atom_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& StereoCenterComponent::atom() const {
  // @@protoc_insertion_point(field_get:ReactionProto.StereoCenterComponent.atom)
  return has_atom()
      ? *AtomOrHydrogen_.atom_
      : *reinterpret_cast< ::ReactionProto::MatchedAtomInComponent*>(&::ReactionProto::_MatchedAtomInComponent_default_instance_);
}
inline ::ReactionProto::MatchedAtomInComponent* StereoCenterComponent::mutable_atom() {
  if (!has_atom()) {
    clear_AtomOrHydrogen();
    set_has_atom();
    AtomOrHydrogen_.atom_ = CreateMaybeMessage< ::ReactionProto::MatchedAtomInComponent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.StereoCenterComponent.atom)
  return AtomOrHydrogen_.atom_;
}

// optional bool implicit_hydrogen = 2;
inline bool StereoCenterComponent::has_implicit_hydrogen() const {
  return AtomOrHydrogen_case() == kImplicitHydrogen;
}
inline void StereoCenterComponent::set_has_implicit_hydrogen() {
  _oneof_case_[0] = kImplicitHydrogen;
}
inline void StereoCenterComponent::clear_implicit_hydrogen() {
  if (has_implicit_hydrogen()) {
    AtomOrHydrogen_.implicit_hydrogen_ = false;
    clear_has_AtomOrHydrogen();
  }
}
inline bool StereoCenterComponent::implicit_hydrogen() const {
  // @@protoc_insertion_point(field_get:ReactionProto.StereoCenterComponent.implicit_hydrogen)
  if (has_implicit_hydrogen()) {
    return AtomOrHydrogen_.implicit_hydrogen_;
  }
  return false;
}
inline void StereoCenterComponent::set_implicit_hydrogen(bool value) {
  if (!has_implicit_hydrogen()) {
    clear_AtomOrHydrogen();
    set_has_implicit_hydrogen();
  }
  AtomOrHydrogen_.implicit_hydrogen_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.StereoCenterComponent.implicit_hydrogen)
}

inline bool StereoCenterComponent::has_AtomOrHydrogen() const {
  return AtomOrHydrogen_case() != ATOMORHYDROGEN_NOT_SET;
}
inline void StereoCenterComponent::clear_has_AtomOrHydrogen() {
  _oneof_case_[0] = ATOMORHYDROGEN_NOT_SET;
}
inline StereoCenterComponent::AtomOrHydrogenCase StereoCenterComponent::AtomOrHydrogen_case() const {
  return StereoCenterComponent::AtomOrHydrogenCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StereoCenter

// optional .ReactionProto.StereoCenterComponent a = 1;
inline bool StereoCenter::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StereoCenter::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StereoCenter::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StereoCenter::clear_a() {
  if (a_ != NULL) a_->Clear();
  clear_has_a();
}
inline const ::ReactionProto::StereoCenterComponent& StereoCenter::_internal_a() const {
  return *a_;
}
inline const ::ReactionProto::StereoCenterComponent& StereoCenter::a() const {
  const ::ReactionProto::StereoCenterComponent* p = a_;
  // @@protoc_insertion_point(field_get:ReactionProto.StereoCenter.a)
  return p != NULL ? *p : *reinterpret_cast<const ::ReactionProto::StereoCenterComponent*>(
      &::ReactionProto::_StereoCenterComponent_default_instance_);
}
inline ::ReactionProto::StereoCenterComponent* StereoCenter::release_a() {
  // @@protoc_insertion_point(field_release:ReactionProto.StereoCenter.a)
  clear_has_a();
  ::ReactionProto::StereoCenterComponent* temp = a_;
  a_ = NULL;
  return temp;
}
inline ::ReactionProto::StereoCenterComponent* StereoCenter::mutable_a() {
  set_has_a();
  if (a_ == NULL) {
    auto* p = CreateMaybeMessage<::ReactionProto::StereoCenterComponent>(GetArenaNoVirtual());
    a_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.StereoCenter.a)
  return a_;
}
inline void StereoCenter::set_allocated_a(::ReactionProto::StereoCenterComponent* a) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete a_;
  }
  if (a) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      a = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, a, submessage_arena);
    }
    set_has_a();
  } else {
    clear_has_a();
  }
  a_ = a;
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.StereoCenter.a)
}

// optional .ReactionProto.StereoCenterComponent top_front = 2;
inline bool StereoCenter::has_top_front() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StereoCenter::set_has_top_front() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StereoCenter::clear_has_top_front() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StereoCenter::clear_top_front() {
  if (top_front_ != NULL) top_front_->Clear();
  clear_has_top_front();
}
inline const ::ReactionProto::StereoCenterComponent& StereoCenter::_internal_top_front() const {
  return *top_front_;
}
inline const ::ReactionProto::StereoCenterComponent& StereoCenter::top_front() const {
  const ::ReactionProto::StereoCenterComponent* p = top_front_;
  // @@protoc_insertion_point(field_get:ReactionProto.StereoCenter.top_front)
  return p != NULL ? *p : *reinterpret_cast<const ::ReactionProto::StereoCenterComponent*>(
      &::ReactionProto::_StereoCenterComponent_default_instance_);
}
inline ::ReactionProto::StereoCenterComponent* StereoCenter::release_top_front() {
  // @@protoc_insertion_point(field_release:ReactionProto.StereoCenter.top_front)
  clear_has_top_front();
  ::ReactionProto::StereoCenterComponent* temp = top_front_;
  top_front_ = NULL;
  return temp;
}
inline ::ReactionProto::StereoCenterComponent* StereoCenter::mutable_top_front() {
  set_has_top_front();
  if (top_front_ == NULL) {
    auto* p = CreateMaybeMessage<::ReactionProto::StereoCenterComponent>(GetArenaNoVirtual());
    top_front_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.StereoCenter.top_front)
  return top_front_;
}
inline void StereoCenter::set_allocated_top_front(::ReactionProto::StereoCenterComponent* top_front) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete top_front_;
  }
  if (top_front) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      top_front = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, top_front, submessage_arena);
    }
    set_has_top_front();
  } else {
    clear_has_top_front();
  }
  top_front_ = top_front;
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.StereoCenter.top_front)
}

// optional .ReactionProto.StereoCenterComponent top_back = 3;
inline bool StereoCenter::has_top_back() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StereoCenter::set_has_top_back() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StereoCenter::clear_has_top_back() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StereoCenter::clear_top_back() {
  if (top_back_ != NULL) top_back_->Clear();
  clear_has_top_back();
}
inline const ::ReactionProto::StereoCenterComponent& StereoCenter::_internal_top_back() const {
  return *top_back_;
}
inline const ::ReactionProto::StereoCenterComponent& StereoCenter::top_back() const {
  const ::ReactionProto::StereoCenterComponent* p = top_back_;
  // @@protoc_insertion_point(field_get:ReactionProto.StereoCenter.top_back)
  return p != NULL ? *p : *reinterpret_cast<const ::ReactionProto::StereoCenterComponent*>(
      &::ReactionProto::_StereoCenterComponent_default_instance_);
}
inline ::ReactionProto::StereoCenterComponent* StereoCenter::release_top_back() {
  // @@protoc_insertion_point(field_release:ReactionProto.StereoCenter.top_back)
  clear_has_top_back();
  ::ReactionProto::StereoCenterComponent* temp = top_back_;
  top_back_ = NULL;
  return temp;
}
inline ::ReactionProto::StereoCenterComponent* StereoCenter::mutable_top_back() {
  set_has_top_back();
  if (top_back_ == NULL) {
    auto* p = CreateMaybeMessage<::ReactionProto::StereoCenterComponent>(GetArenaNoVirtual());
    top_back_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.StereoCenter.top_back)
  return top_back_;
}
inline void StereoCenter::set_allocated_top_back(::ReactionProto::StereoCenterComponent* top_back) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete top_back_;
  }
  if (top_back) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      top_back = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, top_back, submessage_arena);
    }
    set_has_top_back();
  } else {
    clear_has_top_back();
  }
  top_back_ = top_back;
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.StereoCenter.top_back)
}

// optional .ReactionProto.StereoCenterComponent left_down = 4;
inline bool StereoCenter::has_left_down() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StereoCenter::set_has_left_down() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StereoCenter::clear_has_left_down() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StereoCenter::clear_left_down() {
  if (left_down_ != NULL) left_down_->Clear();
  clear_has_left_down();
}
inline const ::ReactionProto::StereoCenterComponent& StereoCenter::_internal_left_down() const {
  return *left_down_;
}
inline const ::ReactionProto::StereoCenterComponent& StereoCenter::left_down() const {
  const ::ReactionProto::StereoCenterComponent* p = left_down_;
  // @@protoc_insertion_point(field_get:ReactionProto.StereoCenter.left_down)
  return p != NULL ? *p : *reinterpret_cast<const ::ReactionProto::StereoCenterComponent*>(
      &::ReactionProto::_StereoCenterComponent_default_instance_);
}
inline ::ReactionProto::StereoCenterComponent* StereoCenter::release_left_down() {
  // @@protoc_insertion_point(field_release:ReactionProto.StereoCenter.left_down)
  clear_has_left_down();
  ::ReactionProto::StereoCenterComponent* temp = left_down_;
  left_down_ = NULL;
  return temp;
}
inline ::ReactionProto::StereoCenterComponent* StereoCenter::mutable_left_down() {
  set_has_left_down();
  if (left_down_ == NULL) {
    auto* p = CreateMaybeMessage<::ReactionProto::StereoCenterComponent>(GetArenaNoVirtual());
    left_down_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.StereoCenter.left_down)
  return left_down_;
}
inline void StereoCenter::set_allocated_left_down(::ReactionProto::StereoCenterComponent* left_down) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete left_down_;
  }
  if (left_down) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      left_down = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, left_down, submessage_arena);
    }
    set_has_left_down();
  } else {
    clear_has_left_down();
  }
  left_down_ = left_down;
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.StereoCenter.left_down)
}

// optional .ReactionProto.StereoCenterComponent right_down = 5;
inline bool StereoCenter::has_right_down() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StereoCenter::set_has_right_down() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StereoCenter::clear_has_right_down() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StereoCenter::clear_right_down() {
  if (right_down_ != NULL) right_down_->Clear();
  clear_has_right_down();
}
inline const ::ReactionProto::StereoCenterComponent& StereoCenter::_internal_right_down() const {
  return *right_down_;
}
inline const ::ReactionProto::StereoCenterComponent& StereoCenter::right_down() const {
  const ::ReactionProto::StereoCenterComponent* p = right_down_;
  // @@protoc_insertion_point(field_get:ReactionProto.StereoCenter.right_down)
  return p != NULL ? *p : *reinterpret_cast<const ::ReactionProto::StereoCenterComponent*>(
      &::ReactionProto::_StereoCenterComponent_default_instance_);
}
inline ::ReactionProto::StereoCenterComponent* StereoCenter::release_right_down() {
  // @@protoc_insertion_point(field_release:ReactionProto.StereoCenter.right_down)
  clear_has_right_down();
  ::ReactionProto::StereoCenterComponent* temp = right_down_;
  right_down_ = NULL;
  return temp;
}
inline ::ReactionProto::StereoCenterComponent* StereoCenter::mutable_right_down() {
  set_has_right_down();
  if (right_down_ == NULL) {
    auto* p = CreateMaybeMessage<::ReactionProto::StereoCenterComponent>(GetArenaNoVirtual());
    right_down_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.StereoCenter.right_down)
  return right_down_;
}
inline void StereoCenter::set_allocated_right_down(::ReactionProto::StereoCenterComponent* right_down) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete right_down_;
  }
  if (right_down) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      right_down = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, right_down, submessage_arena);
    }
    set_has_right_down();
  } else {
    clear_has_right_down();
  }
  right_down_ = right_down;
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.StereoCenter.right_down)
}

// optional bool optional = 6;
inline bool StereoCenter::has_optional() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StereoCenter::set_has_optional() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StereoCenter::clear_has_optional() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StereoCenter::clear_optional() {
  optional_ = false;
  clear_has_optional();
}
inline bool StereoCenter::optional() const {
  // @@protoc_insertion_point(field_get:ReactionProto.StereoCenter.optional)
  return optional_;
}
inline void StereoCenter::set_optional(bool value) {
  set_has_optional();
  optional_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.StereoCenter.optional)
}

// -------------------------------------------------------------------

// BondToBeMade

// optional int32 a1 = 1;
inline bool BondToBeMade::has_a1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BondToBeMade::set_has_a1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BondToBeMade::clear_has_a1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BondToBeMade::clear_a1() {
  a1_ = 0;
  clear_has_a1();
}
inline ::google::protobuf::int32 BondToBeMade::a1() const {
  // @@protoc_insertion_point(field_get:ReactionProto.BondToBeMade.a1)
  return a1_;
}
inline void BondToBeMade::set_a1(::google::protobuf::int32 value) {
  set_has_a1();
  a1_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.BondToBeMade.a1)
}

// optional int32 a2 = 2;
inline bool BondToBeMade::has_a2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BondToBeMade::set_has_a2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BondToBeMade::clear_has_a2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BondToBeMade::clear_a2() {
  a2_ = 0;
  clear_has_a2();
}
inline ::google::protobuf::int32 BondToBeMade::a2() const {
  // @@protoc_insertion_point(field_get:ReactionProto.BondToBeMade.a2)
  return a2_;
}
inline void BondToBeMade::set_a2(::google::protobuf::int32 value) {
  set_has_a2();
  a2_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.BondToBeMade.a2)
}

// optional .SubstructureSearch.BondType btype = 3;
inline bool BondToBeMade::has_btype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BondToBeMade::set_has_btype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BondToBeMade::clear_has_btype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BondToBeMade::clear_btype() {
  btype_ = 3;
  clear_has_btype();
}
inline ::SubstructureSearch::BondType BondToBeMade::btype() const {
  // @@protoc_insertion_point(field_get:ReactionProto.BondToBeMade.btype)
  return static_cast< ::SubstructureSearch::BondType >(btype_);
}
inline void BondToBeMade::set_btype(::SubstructureSearch::BondType value) {
  assert(::SubstructureSearch::BondType_IsValid(value));
  set_has_btype();
  btype_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.BondToBeMade.btype)
}

// -------------------------------------------------------------------

// InterParticleBond

// optional uint32 a1 = 1;
inline bool InterParticleBond::has_a1() const {
  return atom1_case() == kA1;
}
inline void InterParticleBond::set_has_a1() {
  _oneof_case_[0] = kA1;
}
inline void InterParticleBond::clear_a1() {
  if (has_a1()) {
    atom1_.a1_ = 0u;
    clear_has_atom1();
  }
}
inline ::google::protobuf::uint32 InterParticleBond::a1() const {
  // @@protoc_insertion_point(field_get:ReactionProto.InterParticleBond.a1)
  if (has_a1()) {
    return atom1_.a1_;
  }
  return 0u;
}
inline void InterParticleBond::set_a1(::google::protobuf::uint32 value) {
  if (!has_a1()) {
    clear_atom1();
    set_has_a1();
  }
  atom1_.a1_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.InterParticleBond.a1)
}

// optional .ReactionProto.MatchedAtomInComponent c1 = 2;
inline bool InterParticleBond::has_c1() const {
  return atom1_case() == kC1;
}
inline void InterParticleBond::set_has_c1() {
  _oneof_case_[0] = kC1;
}
inline void InterParticleBond::clear_c1() {
  if (has_c1()) {
    delete atom1_.c1_;
    clear_has_atom1();
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& InterParticleBond::_internal_c1() const {
  return *atom1_.c1_;
}
inline ::ReactionProto::MatchedAtomInComponent* InterParticleBond::release_c1() {
  // @@protoc_insertion_point(field_release:ReactionProto.InterParticleBond.c1)
  if (has_c1()) {
    clear_has_atom1();
      ::ReactionProto::MatchedAtomInComponent* temp = atom1_.c1_;
    atom1_.c1_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& InterParticleBond::c1() const {
  // @@protoc_insertion_point(field_get:ReactionProto.InterParticleBond.c1)
  return has_c1()
      ? *atom1_.c1_
      : *reinterpret_cast< ::ReactionProto::MatchedAtomInComponent*>(&::ReactionProto::_MatchedAtomInComponent_default_instance_);
}
inline ::ReactionProto::MatchedAtomInComponent* InterParticleBond::mutable_c1() {
  if (!has_c1()) {
    clear_atom1();
    set_has_c1();
    atom1_.c1_ = CreateMaybeMessage< ::ReactionProto::MatchedAtomInComponent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.InterParticleBond.c1)
  return atom1_.c1_;
}

// optional uint32 a2 = 3;
inline bool InterParticleBond::has_a2() const {
  return atom2_case() == kA2;
}
inline void InterParticleBond::set_has_a2() {
  _oneof_case_[1] = kA2;
}
inline void InterParticleBond::clear_a2() {
  if (has_a2()) {
    atom2_.a2_ = 0u;
    clear_has_atom2();
  }
}
inline ::google::protobuf::uint32 InterParticleBond::a2() const {
  // @@protoc_insertion_point(field_get:ReactionProto.InterParticleBond.a2)
  if (has_a2()) {
    return atom2_.a2_;
  }
  return 0u;
}
inline void InterParticleBond::set_a2(::google::protobuf::uint32 value) {
  if (!has_a2()) {
    clear_atom2();
    set_has_a2();
  }
  atom2_.a2_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.InterParticleBond.a2)
}

// optional .ReactionProto.MatchedAtomInComponent c2 = 4;
inline bool InterParticleBond::has_c2() const {
  return atom2_case() == kC2;
}
inline void InterParticleBond::set_has_c2() {
  _oneof_case_[1] = kC2;
}
inline void InterParticleBond::clear_c2() {
  if (has_c2()) {
    delete atom2_.c2_;
    clear_has_atom2();
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& InterParticleBond::_internal_c2() const {
  return *atom2_.c2_;
}
inline ::ReactionProto::MatchedAtomInComponent* InterParticleBond::release_c2() {
  // @@protoc_insertion_point(field_release:ReactionProto.InterParticleBond.c2)
  if (has_c2()) {
    clear_has_atom2();
      ::ReactionProto::MatchedAtomInComponent* temp = atom2_.c2_;
    atom2_.c2_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& InterParticleBond::c2() const {
  // @@protoc_insertion_point(field_get:ReactionProto.InterParticleBond.c2)
  return has_c2()
      ? *atom2_.c2_
      : *reinterpret_cast< ::ReactionProto::MatchedAtomInComponent*>(&::ReactionProto::_MatchedAtomInComponent_default_instance_);
}
inline ::ReactionProto::MatchedAtomInComponent* InterParticleBond::mutable_c2() {
  if (!has_c2()) {
    clear_atom2();
    set_has_c2();
    atom2_.c2_ = CreateMaybeMessage< ::ReactionProto::MatchedAtomInComponent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.InterParticleBond.c2)
  return atom2_.c2_;
}

// optional .SubstructureSearch.BondType btype = 5;
inline bool InterParticleBond::has_btype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InterParticleBond::set_has_btype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InterParticleBond::clear_has_btype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InterParticleBond::clear_btype() {
  btype_ = 3;
  clear_has_btype();
}
inline ::SubstructureSearch::BondType InterParticleBond::btype() const {
  // @@protoc_insertion_point(field_get:ReactionProto.InterParticleBond.btype)
  return static_cast< ::SubstructureSearch::BondType >(btype_);
}
inline void InterParticleBond::set_btype(::SubstructureSearch::BondType value) {
  assert(::SubstructureSearch::BondType_IsValid(value));
  set_has_btype();
  btype_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.InterParticleBond.btype)
}

inline bool InterParticleBond::has_atom1() const {
  return atom1_case() != ATOM1_NOT_SET;
}
inline void InterParticleBond::clear_has_atom1() {
  _oneof_case_[0] = ATOM1_NOT_SET;
}
inline bool InterParticleBond::has_atom2() const {
  return atom2_case() != ATOM2_NOT_SET;
}
inline void InterParticleBond::clear_has_atom2() {
  _oneof_case_[1] = ATOM2_NOT_SET;
}
inline InterParticleBond::Atom1Case InterParticleBond::atom1_case() const {
  return InterParticleBond::Atom1Case(_oneof_case_[0]);
}
inline InterParticleBond::Atom2Case InterParticleBond::atom2_case() const {
  return InterParticleBond::Atom2Case(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// ReplaceAtom

// optional uint32 a1 = 1;
inline bool ReplaceAtom::has_a1() const {
  return atom1_case() == kA1;
}
inline void ReplaceAtom::set_has_a1() {
  _oneof_case_[0] = kA1;
}
inline void ReplaceAtom::clear_a1() {
  if (has_a1()) {
    atom1_.a1_ = 0u;
    clear_has_atom1();
  }
}
inline ::google::protobuf::uint32 ReplaceAtom::a1() const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReplaceAtom.a1)
  if (has_a1()) {
    return atom1_.a1_;
  }
  return 0u;
}
inline void ReplaceAtom::set_a1(::google::protobuf::uint32 value) {
  if (!has_a1()) {
    clear_atom1();
    set_has_a1();
  }
  atom1_.a1_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.ReplaceAtom.a1)
}

// optional .ReactionProto.MatchedAtomInComponent c1 = 2;
inline bool ReplaceAtom::has_c1() const {
  return atom1_case() == kC1;
}
inline void ReplaceAtom::set_has_c1() {
  _oneof_case_[0] = kC1;
}
inline void ReplaceAtom::clear_c1() {
  if (has_c1()) {
    delete atom1_.c1_;
    clear_has_atom1();
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& ReplaceAtom::_internal_c1() const {
  return *atom1_.c1_;
}
inline ::ReactionProto::MatchedAtomInComponent* ReplaceAtom::release_c1() {
  // @@protoc_insertion_point(field_release:ReactionProto.ReplaceAtom.c1)
  if (has_c1()) {
    clear_has_atom1();
      ::ReactionProto::MatchedAtomInComponent* temp = atom1_.c1_;
    atom1_.c1_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& ReplaceAtom::c1() const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReplaceAtom.c1)
  return has_c1()
      ? *atom1_.c1_
      : *reinterpret_cast< ::ReactionProto::MatchedAtomInComponent*>(&::ReactionProto::_MatchedAtomInComponent_default_instance_);
}
inline ::ReactionProto::MatchedAtomInComponent* ReplaceAtom::mutable_c1() {
  if (!has_c1()) {
    clear_atom1();
    set_has_c1();
    atom1_.c1_ = CreateMaybeMessage< ::ReactionProto::MatchedAtomInComponent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.ReplaceAtom.c1)
  return atom1_.c1_;
}

// optional uint32 a2 = 3;
inline bool ReplaceAtom::has_a2() const {
  return atom2_case() == kA2;
}
inline void ReplaceAtom::set_has_a2() {
  _oneof_case_[1] = kA2;
}
inline void ReplaceAtom::clear_a2() {
  if (has_a2()) {
    atom2_.a2_ = 0u;
    clear_has_atom2();
  }
}
inline ::google::protobuf::uint32 ReplaceAtom::a2() const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReplaceAtom.a2)
  if (has_a2()) {
    return atom2_.a2_;
  }
  return 0u;
}
inline void ReplaceAtom::set_a2(::google::protobuf::uint32 value) {
  if (!has_a2()) {
    clear_atom2();
    set_has_a2();
  }
  atom2_.a2_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.ReplaceAtom.a2)
}

// optional .ReactionProto.MatchedAtomInComponent c2 = 4;
inline bool ReplaceAtom::has_c2() const {
  return atom2_case() == kC2;
}
inline void ReplaceAtom::set_has_c2() {
  _oneof_case_[1] = kC2;
}
inline void ReplaceAtom::clear_c2() {
  if (has_c2()) {
    delete atom2_.c2_;
    clear_has_atom2();
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& ReplaceAtom::_internal_c2() const {
  return *atom2_.c2_;
}
inline ::ReactionProto::MatchedAtomInComponent* ReplaceAtom::release_c2() {
  // @@protoc_insertion_point(field_release:ReactionProto.ReplaceAtom.c2)
  if (has_c2()) {
    clear_has_atom2();
      ::ReactionProto::MatchedAtomInComponent* temp = atom2_.c2_;
    atom2_.c2_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& ReplaceAtom::c2() const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReplaceAtom.c2)
  return has_c2()
      ? *atom2_.c2_
      : *reinterpret_cast< ::ReactionProto::MatchedAtomInComponent*>(&::ReactionProto::_MatchedAtomInComponent_default_instance_);
}
inline ::ReactionProto::MatchedAtomInComponent* ReplaceAtom::mutable_c2() {
  if (!has_c2()) {
    clear_atom2();
    set_has_c2();
    atom2_.c2_ = CreateMaybeMessage< ::ReactionProto::MatchedAtomInComponent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.ReplaceAtom.c2)
  return atom2_.c2_;
}

inline bool ReplaceAtom::has_atom1() const {
  return atom1_case() != ATOM1_NOT_SET;
}
inline void ReplaceAtom::clear_has_atom1() {
  _oneof_case_[0] = ATOM1_NOT_SET;
}
inline bool ReplaceAtom::has_atom2() const {
  return atom2_case() != ATOM2_NOT_SET;
}
inline void ReplaceAtom::clear_has_atom2() {
  _oneof_case_[1] = ATOM2_NOT_SET;
}
inline ReplaceAtom::Atom1Case ReplaceAtom::atom1_case() const {
  return ReplaceAtom::Atom1Case(_oneof_case_[0]);
}
inline ReplaceAtom::Atom2Case ReplaceAtom::atom2_case() const {
  return ReplaceAtom::Atom2Case(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// WedgeBond

// optional int32 a1 = 1;
inline bool WedgeBond::has_a1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WedgeBond::set_has_a1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WedgeBond::clear_has_a1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WedgeBond::clear_a1() {
  a1_ = 0;
  clear_has_a1();
}
inline ::google::protobuf::int32 WedgeBond::a1() const {
  // @@protoc_insertion_point(field_get:ReactionProto.WedgeBond.a1)
  return a1_;
}
inline void WedgeBond::set_a1(::google::protobuf::int32 value) {
  set_has_a1();
  a1_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.WedgeBond.a1)
}

// optional int32 a2 = 2;
inline bool WedgeBond::has_a2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WedgeBond::set_has_a2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WedgeBond::clear_has_a2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WedgeBond::clear_a2() {
  a2_ = 0;
  clear_has_a2();
}
inline ::google::protobuf::int32 WedgeBond::a2() const {
  // @@protoc_insertion_point(field_get:ReactionProto.WedgeBond.a2)
  return a2_;
}
inline void WedgeBond::set_a2(::google::protobuf::int32 value) {
  set_has_a2();
  a2_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.WedgeBond.a2)
}

// optional int32 direction = 3;
inline bool WedgeBond::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WedgeBond::set_has_direction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WedgeBond::clear_has_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WedgeBond::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
inline ::google::protobuf::int32 WedgeBond::direction() const {
  // @@protoc_insertion_point(field_get:ReactionProto.WedgeBond.direction)
  return direction_;
}
inline void WedgeBond::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.WedgeBond.direction)
}

// -------------------------------------------------------------------

// ChangeElement

// optional int32 atom = 1;
inline bool ChangeElement::has_atom() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeElement::set_has_atom() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeElement::clear_has_atom() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeElement::clear_atom() {
  atom_ = 0;
  clear_has_atom();
}
inline ::google::protobuf::int32 ChangeElement::atom() const {
  // @@protoc_insertion_point(field_get:ReactionProto.ChangeElement.atom)
  return atom_;
}
inline void ChangeElement::set_atom(::google::protobuf::int32 value) {
  set_has_atom();
  atom_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.ChangeElement.atom)
}

// optional string element = 2;
inline bool ChangeElement::has_element() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeElement::set_has_element() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeElement::clear_has_element() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeElement::clear_element() {
  element_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_element();
}
inline const ::std::string& ChangeElement::element() const {
  // @@protoc_insertion_point(field_get:ReactionProto.ChangeElement.element)
  return element_.GetNoArena();
}
inline void ChangeElement::set_element(const ::std::string& value) {
  set_has_element();
  element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReactionProto.ChangeElement.element)
}
#if LANG_CXX11
inline void ChangeElement::set_element(::std::string&& value) {
  set_has_element();
  element_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReactionProto.ChangeElement.element)
}
#endif
inline void ChangeElement::set_element(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_element();
  element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReactionProto.ChangeElement.element)
}
inline void ChangeElement::set_element(const char* value, size_t size) {
  set_has_element();
  element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReactionProto.ChangeElement.element)
}
inline ::std::string* ChangeElement::mutable_element() {
  set_has_element();
  // @@protoc_insertion_point(field_mutable:ReactionProto.ChangeElement.element)
  return element_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeElement::release_element() {
  // @@protoc_insertion_point(field_release:ReactionProto.ChangeElement.element)
  if (!has_element()) {
    return NULL;
  }
  clear_has_element();
  return element_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeElement::set_allocated_element(::std::string* element) {
  if (element != NULL) {
    set_has_element();
  } else {
    clear_has_element();
  }
  element_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), element);
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.ChangeElement.element)
}

// -------------------------------------------------------------------

// FormalCharge

// optional int32 atom = 1;
inline bool FormalCharge::has_atom() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FormalCharge::set_has_atom() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FormalCharge::clear_has_atom() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FormalCharge::clear_atom() {
  atom_ = 0;
  clear_has_atom();
}
inline ::google::protobuf::int32 FormalCharge::atom() const {
  // @@protoc_insertion_point(field_get:ReactionProto.FormalCharge.atom)
  return atom_;
}
inline void FormalCharge::set_atom(::google::protobuf::int32 value) {
  set_has_atom();
  atom_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.FormalCharge.atom)
}

// optional int32 formal_charge = 2;
inline bool FormalCharge::has_formal_charge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FormalCharge::set_has_formal_charge() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FormalCharge::clear_has_formal_charge() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FormalCharge::clear_formal_charge() {
  formal_charge_ = 0;
  clear_has_formal_charge();
}
inline ::google::protobuf::int32 FormalCharge::formal_charge() const {
  // @@protoc_insertion_point(field_get:ReactionProto.FormalCharge.formal_charge)
  return formal_charge_;
}
inline void FormalCharge::set_formal_charge(::google::protobuf::int32 value) {
  set_has_formal_charge();
  formal_charge_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.FormalCharge.formal_charge)
}

// -------------------------------------------------------------------

// ChangeFormalCharge

// optional int32 atom = 1;
inline bool ChangeFormalCharge::has_atom() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeFormalCharge::set_has_atom() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeFormalCharge::clear_has_atom() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeFormalCharge::clear_atom() {
  atom_ = 0;
  clear_has_atom();
}
inline ::google::protobuf::int32 ChangeFormalCharge::atom() const {
  // @@protoc_insertion_point(field_get:ReactionProto.ChangeFormalCharge.atom)
  return atom_;
}
inline void ChangeFormalCharge::set_atom(::google::protobuf::int32 value) {
  set_has_atom();
  atom_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.ChangeFormalCharge.atom)
}

// optional int32 delta = 2;
inline bool ChangeFormalCharge::has_delta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeFormalCharge::set_has_delta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeFormalCharge::clear_has_delta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeFormalCharge::clear_delta() {
  delta_ = 0;
  clear_has_delta();
}
inline ::google::protobuf::int32 ChangeFormalCharge::delta() const {
  // @@protoc_insertion_point(field_get:ReactionProto.ChangeFormalCharge.delta)
  return delta_;
}
inline void ChangeFormalCharge::set_delta(::google::protobuf::int32 value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.ChangeFormalCharge.delta)
}

// -------------------------------------------------------------------

// PlaceIsotope

// optional int32 atom = 1;
inline bool PlaceIsotope::has_atom() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlaceIsotope::set_has_atom() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlaceIsotope::clear_has_atom() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlaceIsotope::clear_atom() {
  atom_ = 0;
  clear_has_atom();
}
inline ::google::protobuf::int32 PlaceIsotope::atom() const {
  // @@protoc_insertion_point(field_get:ReactionProto.PlaceIsotope.atom)
  return atom_;
}
inline void PlaceIsotope::set_atom(::google::protobuf::int32 value) {
  set_has_atom();
  atom_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.PlaceIsotope.atom)
}

// optional int32 isotope = 2;
inline bool PlaceIsotope::has_isotope() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlaceIsotope::set_has_isotope() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlaceIsotope::clear_has_isotope() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlaceIsotope::clear_isotope() {
  isotope_ = 0;
  clear_has_isotope();
}
inline ::google::protobuf::int32 PlaceIsotope::isotope() const {
  // @@protoc_insertion_point(field_get:ReactionProto.PlaceIsotope.isotope)
  return isotope_;
}
inline void PlaceIsotope::set_isotope(::google::protobuf::int32 value) {
  set_has_isotope();
  isotope_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.PlaceIsotope.isotope)
}

// -------------------------------------------------------------------

// IncrementIsotope

// optional int32 atom = 1;
inline bool IncrementIsotope::has_atom() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IncrementIsotope::set_has_atom() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IncrementIsotope::clear_has_atom() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IncrementIsotope::clear_atom() {
  atom_ = 0;
  clear_has_atom();
}
inline ::google::protobuf::int32 IncrementIsotope::atom() const {
  // @@protoc_insertion_point(field_get:ReactionProto.IncrementIsotope.atom)
  return atom_;
}
inline void IncrementIsotope::set_atom(::google::protobuf::int32 value) {
  set_has_atom();
  atom_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.IncrementIsotope.atom)
}

// optional int32 delta = 2;
inline bool IncrementIsotope::has_delta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IncrementIsotope::set_has_delta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IncrementIsotope::clear_has_delta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IncrementIsotope::clear_delta() {
  delta_ = 0;
  clear_has_delta();
}
inline ::google::protobuf::int32 IncrementIsotope::delta() const {
  // @@protoc_insertion_point(field_get:ReactionProto.IncrementIsotope.delta)
  return delta_;
}
inline void IncrementIsotope::set_delta(::google::protobuf::int32 value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.IncrementIsotope.delta)
}

// -------------------------------------------------------------------

// BondLength

// optional uint32 a1 = 1;
inline bool BondLength::has_a1() const {
  return first_atom_case() == kA1;
}
inline void BondLength::set_has_a1() {
  _oneof_case_[0] = kA1;
}
inline void BondLength::clear_a1() {
  if (has_a1()) {
    first_atom_.a1_ = 0u;
    clear_has_first_atom();
  }
}
inline ::google::protobuf::uint32 BondLength::a1() const {
  // @@protoc_insertion_point(field_get:ReactionProto.BondLength.a1)
  if (has_a1()) {
    return first_atom_.a1_;
  }
  return 0u;
}
inline void BondLength::set_a1(::google::protobuf::uint32 value) {
  if (!has_a1()) {
    clear_first_atom();
    set_has_a1();
  }
  first_atom_.a1_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.BondLength.a1)
}

// optional .ReactionProto.MatchedAtomInComponent c1 = 2;
inline bool BondLength::has_c1() const {
  return first_atom_case() == kC1;
}
inline void BondLength::set_has_c1() {
  _oneof_case_[0] = kC1;
}
inline void BondLength::clear_c1() {
  if (has_c1()) {
    delete first_atom_.c1_;
    clear_has_first_atom();
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& BondLength::_internal_c1() const {
  return *first_atom_.c1_;
}
inline ::ReactionProto::MatchedAtomInComponent* BondLength::release_c1() {
  // @@protoc_insertion_point(field_release:ReactionProto.BondLength.c1)
  if (has_c1()) {
    clear_has_first_atom();
      ::ReactionProto::MatchedAtomInComponent* temp = first_atom_.c1_;
    first_atom_.c1_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& BondLength::c1() const {
  // @@protoc_insertion_point(field_get:ReactionProto.BondLength.c1)
  return has_c1()
      ? *first_atom_.c1_
      : *reinterpret_cast< ::ReactionProto::MatchedAtomInComponent*>(&::ReactionProto::_MatchedAtomInComponent_default_instance_);
}
inline ::ReactionProto::MatchedAtomInComponent* BondLength::mutable_c1() {
  if (!has_c1()) {
    clear_first_atom();
    set_has_c1();
    first_atom_.c1_ = CreateMaybeMessage< ::ReactionProto::MatchedAtomInComponent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.BondLength.c1)
  return first_atom_.c1_;
}

// optional uint32 a2 = 3;
inline bool BondLength::has_a2() const {
  return second_atom_case() == kA2;
}
inline void BondLength::set_has_a2() {
  _oneof_case_[1] = kA2;
}
inline void BondLength::clear_a2() {
  if (has_a2()) {
    second_atom_.a2_ = 0u;
    clear_has_second_atom();
  }
}
inline ::google::protobuf::uint32 BondLength::a2() const {
  // @@protoc_insertion_point(field_get:ReactionProto.BondLength.a2)
  if (has_a2()) {
    return second_atom_.a2_;
  }
  return 0u;
}
inline void BondLength::set_a2(::google::protobuf::uint32 value) {
  if (!has_a2()) {
    clear_second_atom();
    set_has_a2();
  }
  second_atom_.a2_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.BondLength.a2)
}

// optional .ReactionProto.MatchedAtomInComponent c2 = 4;
inline bool BondLength::has_c2() const {
  return second_atom_case() == kC2;
}
inline void BondLength::set_has_c2() {
  _oneof_case_[1] = kC2;
}
inline void BondLength::clear_c2() {
  if (has_c2()) {
    delete second_atom_.c2_;
    clear_has_second_atom();
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& BondLength::_internal_c2() const {
  return *second_atom_.c2_;
}
inline ::ReactionProto::MatchedAtomInComponent* BondLength::release_c2() {
  // @@protoc_insertion_point(field_release:ReactionProto.BondLength.c2)
  if (has_c2()) {
    clear_has_second_atom();
      ::ReactionProto::MatchedAtomInComponent* temp = second_atom_.c2_;
    second_atom_.c2_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& BondLength::c2() const {
  // @@protoc_insertion_point(field_get:ReactionProto.BondLength.c2)
  return has_c2()
      ? *second_atom_.c2_
      : *reinterpret_cast< ::ReactionProto::MatchedAtomInComponent*>(&::ReactionProto::_MatchedAtomInComponent_default_instance_);
}
inline ::ReactionProto::MatchedAtomInComponent* BondLength::mutable_c2() {
  if (!has_c2()) {
    clear_second_atom();
    set_has_c2();
    second_atom_.c2_ = CreateMaybeMessage< ::ReactionProto::MatchedAtomInComponent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.BondLength.c2)
  return second_atom_.c2_;
}

// optional float distance = 5;
inline bool BondLength::has_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BondLength::set_has_distance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BondLength::clear_has_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BondLength::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float BondLength::distance() const {
  // @@protoc_insertion_point(field_get:ReactionProto.BondLength.distance)
  return distance_;
}
inline void BondLength::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.BondLength.distance)
}

inline bool BondLength::has_first_atom() const {
  return first_atom_case() != FIRST_ATOM_NOT_SET;
}
inline void BondLength::clear_has_first_atom() {
  _oneof_case_[0] = FIRST_ATOM_NOT_SET;
}
inline bool BondLength::has_second_atom() const {
  return second_atom_case() != SECOND_ATOM_NOT_SET;
}
inline void BondLength::clear_has_second_atom() {
  _oneof_case_[1] = SECOND_ATOM_NOT_SET;
}
inline BondLength::FirstAtomCase BondLength::first_atom_case() const {
  return BondLength::FirstAtomCase(_oneof_case_[0]);
}
inline BondLength::SecondAtomCase BondLength::second_atom_case() const {
  return BondLength::SecondAtomCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// BondAngle

// optional uint32 a1 = 1;
inline bool BondAngle::has_a1() const {
  return atom1_case() == kA1;
}
inline void BondAngle::set_has_a1() {
  _oneof_case_[0] = kA1;
}
inline void BondAngle::clear_a1() {
  if (has_a1()) {
    atom1_.a1_ = 0u;
    clear_has_atom1();
  }
}
inline ::google::protobuf::uint32 BondAngle::a1() const {
  // @@protoc_insertion_point(field_get:ReactionProto.BondAngle.a1)
  if (has_a1()) {
    return atom1_.a1_;
  }
  return 0u;
}
inline void BondAngle::set_a1(::google::protobuf::uint32 value) {
  if (!has_a1()) {
    clear_atom1();
    set_has_a1();
  }
  atom1_.a1_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.BondAngle.a1)
}

// optional .ReactionProto.MatchedAtomInComponent c1 = 2;
inline bool BondAngle::has_c1() const {
  return atom1_case() == kC1;
}
inline void BondAngle::set_has_c1() {
  _oneof_case_[0] = kC1;
}
inline void BondAngle::clear_c1() {
  if (has_c1()) {
    delete atom1_.c1_;
    clear_has_atom1();
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& BondAngle::_internal_c1() const {
  return *atom1_.c1_;
}
inline ::ReactionProto::MatchedAtomInComponent* BondAngle::release_c1() {
  // @@protoc_insertion_point(field_release:ReactionProto.BondAngle.c1)
  if (has_c1()) {
    clear_has_atom1();
      ::ReactionProto::MatchedAtomInComponent* temp = atom1_.c1_;
    atom1_.c1_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& BondAngle::c1() const {
  // @@protoc_insertion_point(field_get:ReactionProto.BondAngle.c1)
  return has_c1()
      ? *atom1_.c1_
      : *reinterpret_cast< ::ReactionProto::MatchedAtomInComponent*>(&::ReactionProto::_MatchedAtomInComponent_default_instance_);
}
inline ::ReactionProto::MatchedAtomInComponent* BondAngle::mutable_c1() {
  if (!has_c1()) {
    clear_atom1();
    set_has_c1();
    atom1_.c1_ = CreateMaybeMessage< ::ReactionProto::MatchedAtomInComponent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.BondAngle.c1)
  return atom1_.c1_;
}

// optional uint32 a2 = 3;
inline bool BondAngle::has_a2() const {
  return atom2_case() == kA2;
}
inline void BondAngle::set_has_a2() {
  _oneof_case_[1] = kA2;
}
inline void BondAngle::clear_a2() {
  if (has_a2()) {
    atom2_.a2_ = 0u;
    clear_has_atom2();
  }
}
inline ::google::protobuf::uint32 BondAngle::a2() const {
  // @@protoc_insertion_point(field_get:ReactionProto.BondAngle.a2)
  if (has_a2()) {
    return atom2_.a2_;
  }
  return 0u;
}
inline void BondAngle::set_a2(::google::protobuf::uint32 value) {
  if (!has_a2()) {
    clear_atom2();
    set_has_a2();
  }
  atom2_.a2_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.BondAngle.a2)
}

// optional .ReactionProto.MatchedAtomInComponent c2 = 4;
inline bool BondAngle::has_c2() const {
  return atom2_case() == kC2;
}
inline void BondAngle::set_has_c2() {
  _oneof_case_[1] = kC2;
}
inline void BondAngle::clear_c2() {
  if (has_c2()) {
    delete atom2_.c2_;
    clear_has_atom2();
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& BondAngle::_internal_c2() const {
  return *atom2_.c2_;
}
inline ::ReactionProto::MatchedAtomInComponent* BondAngle::release_c2() {
  // @@protoc_insertion_point(field_release:ReactionProto.BondAngle.c2)
  if (has_c2()) {
    clear_has_atom2();
      ::ReactionProto::MatchedAtomInComponent* temp = atom2_.c2_;
    atom2_.c2_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& BondAngle::c2() const {
  // @@protoc_insertion_point(field_get:ReactionProto.BondAngle.c2)
  return has_c2()
      ? *atom2_.c2_
      : *reinterpret_cast< ::ReactionProto::MatchedAtomInComponent*>(&::ReactionProto::_MatchedAtomInComponent_default_instance_);
}
inline ::ReactionProto::MatchedAtomInComponent* BondAngle::mutable_c2() {
  if (!has_c2()) {
    clear_atom2();
    set_has_c2();
    atom2_.c2_ = CreateMaybeMessage< ::ReactionProto::MatchedAtomInComponent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.BondAngle.c2)
  return atom2_.c2_;
}

// optional uint32 a3 = 5;
inline bool BondAngle::has_a3() const {
  return atom3_case() == kA3;
}
inline void BondAngle::set_has_a3() {
  _oneof_case_[2] = kA3;
}
inline void BondAngle::clear_a3() {
  if (has_a3()) {
    atom3_.a3_ = 0u;
    clear_has_atom3();
  }
}
inline ::google::protobuf::uint32 BondAngle::a3() const {
  // @@protoc_insertion_point(field_get:ReactionProto.BondAngle.a3)
  if (has_a3()) {
    return atom3_.a3_;
  }
  return 0u;
}
inline void BondAngle::set_a3(::google::protobuf::uint32 value) {
  if (!has_a3()) {
    clear_atom3();
    set_has_a3();
  }
  atom3_.a3_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.BondAngle.a3)
}

// optional .ReactionProto.MatchedAtomInComponent c3 = 6;
inline bool BondAngle::has_c3() const {
  return atom3_case() == kC3;
}
inline void BondAngle::set_has_c3() {
  _oneof_case_[2] = kC3;
}
inline void BondAngle::clear_c3() {
  if (has_c3()) {
    delete atom3_.c3_;
    clear_has_atom3();
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& BondAngle::_internal_c3() const {
  return *atom3_.c3_;
}
inline ::ReactionProto::MatchedAtomInComponent* BondAngle::release_c3() {
  // @@protoc_insertion_point(field_release:ReactionProto.BondAngle.c3)
  if (has_c3()) {
    clear_has_atom3();
      ::ReactionProto::MatchedAtomInComponent* temp = atom3_.c3_;
    atom3_.c3_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& BondAngle::c3() const {
  // @@protoc_insertion_point(field_get:ReactionProto.BondAngle.c3)
  return has_c3()
      ? *atom3_.c3_
      : *reinterpret_cast< ::ReactionProto::MatchedAtomInComponent*>(&::ReactionProto::_MatchedAtomInComponent_default_instance_);
}
inline ::ReactionProto::MatchedAtomInComponent* BondAngle::mutable_c3() {
  if (!has_c3()) {
    clear_atom3();
    set_has_c3();
    atom3_.c3_ = CreateMaybeMessage< ::ReactionProto::MatchedAtomInComponent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.BondAngle.c3)
  return atom3_.c3_;
}

// optional float angle = 7;
inline bool BondAngle::has_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BondAngle::set_has_angle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BondAngle::clear_has_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BondAngle::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline float BondAngle::angle() const {
  // @@protoc_insertion_point(field_get:ReactionProto.BondAngle.angle)
  return angle_;
}
inline void BondAngle::set_angle(float value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.BondAngle.angle)
}

inline bool BondAngle::has_atom1() const {
  return atom1_case() != ATOM1_NOT_SET;
}
inline void BondAngle::clear_has_atom1() {
  _oneof_case_[0] = ATOM1_NOT_SET;
}
inline bool BondAngle::has_atom2() const {
  return atom2_case() != ATOM2_NOT_SET;
}
inline void BondAngle::clear_has_atom2() {
  _oneof_case_[1] = ATOM2_NOT_SET;
}
inline bool BondAngle::has_atom3() const {
  return atom3_case() != ATOM3_NOT_SET;
}
inline void BondAngle::clear_has_atom3() {
  _oneof_case_[2] = ATOM3_NOT_SET;
}
inline BondAngle::Atom1Case BondAngle::atom1_case() const {
  return BondAngle::Atom1Case(_oneof_case_[0]);
}
inline BondAngle::Atom2Case BondAngle::atom2_case() const {
  return BondAngle::Atom2Case(_oneof_case_[1]);
}
inline BondAngle::Atom3Case BondAngle::atom3_case() const {
  return BondAngle::Atom3Case(_oneof_case_[2]);
}
// -------------------------------------------------------------------

// DihedralAngle

// optional uint32 a1 = 1;
inline bool DihedralAngle::has_a1() const {
  return atom1_case() == kA1;
}
inline void DihedralAngle::set_has_a1() {
  _oneof_case_[0] = kA1;
}
inline void DihedralAngle::clear_a1() {
  if (has_a1()) {
    atom1_.a1_ = 0u;
    clear_has_atom1();
  }
}
inline ::google::protobuf::uint32 DihedralAngle::a1() const {
  // @@protoc_insertion_point(field_get:ReactionProto.DihedralAngle.a1)
  if (has_a1()) {
    return atom1_.a1_;
  }
  return 0u;
}
inline void DihedralAngle::set_a1(::google::protobuf::uint32 value) {
  if (!has_a1()) {
    clear_atom1();
    set_has_a1();
  }
  atom1_.a1_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.DihedralAngle.a1)
}

// optional .ReactionProto.MatchedAtomInComponent c1 = 2;
inline bool DihedralAngle::has_c1() const {
  return atom1_case() == kC1;
}
inline void DihedralAngle::set_has_c1() {
  _oneof_case_[0] = kC1;
}
inline void DihedralAngle::clear_c1() {
  if (has_c1()) {
    delete atom1_.c1_;
    clear_has_atom1();
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& DihedralAngle::_internal_c1() const {
  return *atom1_.c1_;
}
inline ::ReactionProto::MatchedAtomInComponent* DihedralAngle::release_c1() {
  // @@protoc_insertion_point(field_release:ReactionProto.DihedralAngle.c1)
  if (has_c1()) {
    clear_has_atom1();
      ::ReactionProto::MatchedAtomInComponent* temp = atom1_.c1_;
    atom1_.c1_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& DihedralAngle::c1() const {
  // @@protoc_insertion_point(field_get:ReactionProto.DihedralAngle.c1)
  return has_c1()
      ? *atom1_.c1_
      : *reinterpret_cast< ::ReactionProto::MatchedAtomInComponent*>(&::ReactionProto::_MatchedAtomInComponent_default_instance_);
}
inline ::ReactionProto::MatchedAtomInComponent* DihedralAngle::mutable_c1() {
  if (!has_c1()) {
    clear_atom1();
    set_has_c1();
    atom1_.c1_ = CreateMaybeMessage< ::ReactionProto::MatchedAtomInComponent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.DihedralAngle.c1)
  return atom1_.c1_;
}

// optional uint32 a2 = 3;
inline bool DihedralAngle::has_a2() const {
  return atom2_case() == kA2;
}
inline void DihedralAngle::set_has_a2() {
  _oneof_case_[1] = kA2;
}
inline void DihedralAngle::clear_a2() {
  if (has_a2()) {
    atom2_.a2_ = 0u;
    clear_has_atom2();
  }
}
inline ::google::protobuf::uint32 DihedralAngle::a2() const {
  // @@protoc_insertion_point(field_get:ReactionProto.DihedralAngle.a2)
  if (has_a2()) {
    return atom2_.a2_;
  }
  return 0u;
}
inline void DihedralAngle::set_a2(::google::protobuf::uint32 value) {
  if (!has_a2()) {
    clear_atom2();
    set_has_a2();
  }
  atom2_.a2_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.DihedralAngle.a2)
}

// optional .ReactionProto.MatchedAtomInComponent c2 = 4;
inline bool DihedralAngle::has_c2() const {
  return atom2_case() == kC2;
}
inline void DihedralAngle::set_has_c2() {
  _oneof_case_[1] = kC2;
}
inline void DihedralAngle::clear_c2() {
  if (has_c2()) {
    delete atom2_.c2_;
    clear_has_atom2();
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& DihedralAngle::_internal_c2() const {
  return *atom2_.c2_;
}
inline ::ReactionProto::MatchedAtomInComponent* DihedralAngle::release_c2() {
  // @@protoc_insertion_point(field_release:ReactionProto.DihedralAngle.c2)
  if (has_c2()) {
    clear_has_atom2();
      ::ReactionProto::MatchedAtomInComponent* temp = atom2_.c2_;
    atom2_.c2_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& DihedralAngle::c2() const {
  // @@protoc_insertion_point(field_get:ReactionProto.DihedralAngle.c2)
  return has_c2()
      ? *atom2_.c2_
      : *reinterpret_cast< ::ReactionProto::MatchedAtomInComponent*>(&::ReactionProto::_MatchedAtomInComponent_default_instance_);
}
inline ::ReactionProto::MatchedAtomInComponent* DihedralAngle::mutable_c2() {
  if (!has_c2()) {
    clear_atom2();
    set_has_c2();
    atom2_.c2_ = CreateMaybeMessage< ::ReactionProto::MatchedAtomInComponent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.DihedralAngle.c2)
  return atom2_.c2_;
}

// optional uint32 a3 = 5;
inline bool DihedralAngle::has_a3() const {
  return atom3_case() == kA3;
}
inline void DihedralAngle::set_has_a3() {
  _oneof_case_[2] = kA3;
}
inline void DihedralAngle::clear_a3() {
  if (has_a3()) {
    atom3_.a3_ = 0u;
    clear_has_atom3();
  }
}
inline ::google::protobuf::uint32 DihedralAngle::a3() const {
  // @@protoc_insertion_point(field_get:ReactionProto.DihedralAngle.a3)
  if (has_a3()) {
    return atom3_.a3_;
  }
  return 0u;
}
inline void DihedralAngle::set_a3(::google::protobuf::uint32 value) {
  if (!has_a3()) {
    clear_atom3();
    set_has_a3();
  }
  atom3_.a3_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.DihedralAngle.a3)
}

// optional .ReactionProto.MatchedAtomInComponent c3 = 6;
inline bool DihedralAngle::has_c3() const {
  return atom3_case() == kC3;
}
inline void DihedralAngle::set_has_c3() {
  _oneof_case_[2] = kC3;
}
inline void DihedralAngle::clear_c3() {
  if (has_c3()) {
    delete atom3_.c3_;
    clear_has_atom3();
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& DihedralAngle::_internal_c3() const {
  return *atom3_.c3_;
}
inline ::ReactionProto::MatchedAtomInComponent* DihedralAngle::release_c3() {
  // @@protoc_insertion_point(field_release:ReactionProto.DihedralAngle.c3)
  if (has_c3()) {
    clear_has_atom3();
      ::ReactionProto::MatchedAtomInComponent* temp = atom3_.c3_;
    atom3_.c3_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& DihedralAngle::c3() const {
  // @@protoc_insertion_point(field_get:ReactionProto.DihedralAngle.c3)
  return has_c3()
      ? *atom3_.c3_
      : *reinterpret_cast< ::ReactionProto::MatchedAtomInComponent*>(&::ReactionProto::_MatchedAtomInComponent_default_instance_);
}
inline ::ReactionProto::MatchedAtomInComponent* DihedralAngle::mutable_c3() {
  if (!has_c3()) {
    clear_atom3();
    set_has_c3();
    atom3_.c3_ = CreateMaybeMessage< ::ReactionProto::MatchedAtomInComponent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.DihedralAngle.c3)
  return atom3_.c3_;
}

// optional uint32 a4 = 7;
inline bool DihedralAngle::has_a4() const {
  return atom4_case() == kA4;
}
inline void DihedralAngle::set_has_a4() {
  _oneof_case_[3] = kA4;
}
inline void DihedralAngle::clear_a4() {
  if (has_a4()) {
    atom4_.a4_ = 0u;
    clear_has_atom4();
  }
}
inline ::google::protobuf::uint32 DihedralAngle::a4() const {
  // @@protoc_insertion_point(field_get:ReactionProto.DihedralAngle.a4)
  if (has_a4()) {
    return atom4_.a4_;
  }
  return 0u;
}
inline void DihedralAngle::set_a4(::google::protobuf::uint32 value) {
  if (!has_a4()) {
    clear_atom4();
    set_has_a4();
  }
  atom4_.a4_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.DihedralAngle.a4)
}

// optional .ReactionProto.MatchedAtomInComponent c4 = 8;
inline bool DihedralAngle::has_c4() const {
  return atom4_case() == kC4;
}
inline void DihedralAngle::set_has_c4() {
  _oneof_case_[3] = kC4;
}
inline void DihedralAngle::clear_c4() {
  if (has_c4()) {
    delete atom4_.c4_;
    clear_has_atom4();
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& DihedralAngle::_internal_c4() const {
  return *atom4_.c4_;
}
inline ::ReactionProto::MatchedAtomInComponent* DihedralAngle::release_c4() {
  // @@protoc_insertion_point(field_release:ReactionProto.DihedralAngle.c4)
  if (has_c4()) {
    clear_has_atom4();
      ::ReactionProto::MatchedAtomInComponent* temp = atom4_.c4_;
    atom4_.c4_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& DihedralAngle::c4() const {
  // @@protoc_insertion_point(field_get:ReactionProto.DihedralAngle.c4)
  return has_c4()
      ? *atom4_.c4_
      : *reinterpret_cast< ::ReactionProto::MatchedAtomInComponent*>(&::ReactionProto::_MatchedAtomInComponent_default_instance_);
}
inline ::ReactionProto::MatchedAtomInComponent* DihedralAngle::mutable_c4() {
  if (!has_c4()) {
    clear_atom4();
    set_has_c4();
    atom4_.c4_ = CreateMaybeMessage< ::ReactionProto::MatchedAtomInComponent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.DihedralAngle.c4)
  return atom4_.c4_;
}

// optional float angle = 9;
inline bool DihedralAngle::has_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DihedralAngle::set_has_angle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DihedralAngle::clear_has_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DihedralAngle::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline float DihedralAngle::angle() const {
  // @@protoc_insertion_point(field_get:ReactionProto.DihedralAngle.angle)
  return angle_;
}
inline void DihedralAngle::set_angle(float value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.DihedralAngle.angle)
}

inline bool DihedralAngle::has_atom1() const {
  return atom1_case() != ATOM1_NOT_SET;
}
inline void DihedralAngle::clear_has_atom1() {
  _oneof_case_[0] = ATOM1_NOT_SET;
}
inline bool DihedralAngle::has_atom2() const {
  return atom2_case() != ATOM2_NOT_SET;
}
inline void DihedralAngle::clear_has_atom2() {
  _oneof_case_[1] = ATOM2_NOT_SET;
}
inline bool DihedralAngle::has_atom3() const {
  return atom3_case() != ATOM3_NOT_SET;
}
inline void DihedralAngle::clear_has_atom3() {
  _oneof_case_[2] = ATOM3_NOT_SET;
}
inline bool DihedralAngle::has_atom4() const {
  return atom4_case() != ATOM4_NOT_SET;
}
inline void DihedralAngle::clear_has_atom4() {
  _oneof_case_[3] = ATOM4_NOT_SET;
}
inline DihedralAngle::Atom1Case DihedralAngle::atom1_case() const {
  return DihedralAngle::Atom1Case(_oneof_case_[0]);
}
inline DihedralAngle::Atom2Case DihedralAngle::atom2_case() const {
  return DihedralAngle::Atom2Case(_oneof_case_[1]);
}
inline DihedralAngle::Atom3Case DihedralAngle::atom3_case() const {
  return DihedralAngle::Atom3Case(_oneof_case_[2]);
}
inline DihedralAngle::Atom4Case DihedralAngle::atom4_case() const {
  return DihedralAngle::Atom4Case(_oneof_case_[3]);
}
// -------------------------------------------------------------------

// RotateFragment

// optional uint32 atom = 1;
inline bool RotateFragment::has_atom() const {
  return the_atom_case() == kAtom;
}
inline void RotateFragment::set_has_atom() {
  _oneof_case_[0] = kAtom;
}
inline void RotateFragment::clear_atom() {
  if (has_atom()) {
    the_atom_.atom_ = 0u;
    clear_has_the_atom();
  }
}
inline ::google::protobuf::uint32 RotateFragment::atom() const {
  // @@protoc_insertion_point(field_get:ReactionProto.RotateFragment.atom)
  if (has_atom()) {
    return the_atom_.atom_;
  }
  return 0u;
}
inline void RotateFragment::set_atom(::google::protobuf::uint32 value) {
  if (!has_atom()) {
    clear_the_atom();
    set_has_atom();
  }
  the_atom_.atom_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.RotateFragment.atom)
}

// optional .ReactionProto.MatchedAtomInComponent cspec = 2;
inline bool RotateFragment::has_cspec() const {
  return the_atom_case() == kCspec;
}
inline void RotateFragment::set_has_cspec() {
  _oneof_case_[0] = kCspec;
}
inline void RotateFragment::clear_cspec() {
  if (has_cspec()) {
    delete the_atom_.cspec_;
    clear_has_the_atom();
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& RotateFragment::_internal_cspec() const {
  return *the_atom_.cspec_;
}
inline ::ReactionProto::MatchedAtomInComponent* RotateFragment::release_cspec() {
  // @@protoc_insertion_point(field_release:ReactionProto.RotateFragment.cspec)
  if (has_cspec()) {
    clear_has_the_atom();
      ::ReactionProto::MatchedAtomInComponent* temp = the_atom_.cspec_;
    the_atom_.cspec_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ReactionProto::MatchedAtomInComponent& RotateFragment::cspec() const {
  // @@protoc_insertion_point(field_get:ReactionProto.RotateFragment.cspec)
  return has_cspec()
      ? *the_atom_.cspec_
      : *reinterpret_cast< ::ReactionProto::MatchedAtomInComponent*>(&::ReactionProto::_MatchedAtomInComponent_default_instance_);
}
inline ::ReactionProto::MatchedAtomInComponent* RotateFragment::mutable_cspec() {
  if (!has_cspec()) {
    clear_the_atom();
    set_has_cspec();
    the_atom_.cspec_ = CreateMaybeMessage< ::ReactionProto::MatchedAtomInComponent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.RotateFragment.cspec)
  return the_atom_.cspec_;
}

// optional float angle = 3;
inline bool RotateFragment::has_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RotateFragment::set_has_angle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RotateFragment::clear_has_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RotateFragment::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline float RotateFragment::angle() const {
  // @@protoc_insertion_point(field_get:ReactionProto.RotateFragment.angle)
  return angle_;
}
inline void RotateFragment::set_angle(float value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.RotateFragment.angle)
}

inline bool RotateFragment::has_the_atom() const {
  return the_atom_case() != THE_ATOM_NOT_SET;
}
inline void RotateFragment::clear_has_the_atom() {
  _oneof_case_[0] = THE_ATOM_NOT_SET;
}
inline RotateFragment::TheAtomCase RotateFragment::the_atom_case() const {
  return RotateFragment::TheAtomCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ThreeDReplace

// repeated .ReactionProto.MatchedAtomInComponent a1 = 1;
inline int ThreeDReplace::a1_size() const {
  return a1_.size();
}
inline void ThreeDReplace::clear_a1() {
  a1_.Clear();
}
inline ::ReactionProto::MatchedAtomInComponent* ThreeDReplace::mutable_a1(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ThreeDReplace.a1)
  return a1_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::MatchedAtomInComponent >*
ThreeDReplace::mutable_a1() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ThreeDReplace.a1)
  return &a1_;
}
inline const ::ReactionProto::MatchedAtomInComponent& ThreeDReplace::a1(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ThreeDReplace.a1)
  return a1_.Get(index);
}
inline ::ReactionProto::MatchedAtomInComponent* ThreeDReplace::add_a1() {
  // @@protoc_insertion_point(field_add:ReactionProto.ThreeDReplace.a1)
  return a1_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::MatchedAtomInComponent >&
ThreeDReplace::a1() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ThreeDReplace.a1)
  return a1_;
}

// repeated .ReactionProto.MatchedAtomInComponent a2 = 2;
inline int ThreeDReplace::a2_size() const {
  return a2_.size();
}
inline void ThreeDReplace::clear_a2() {
  a2_.Clear();
}
inline ::ReactionProto::MatchedAtomInComponent* ThreeDReplace::mutable_a2(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ThreeDReplace.a2)
  return a2_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::MatchedAtomInComponent >*
ThreeDReplace::mutable_a2() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ThreeDReplace.a2)
  return &a2_;
}
inline const ::ReactionProto::MatchedAtomInComponent& ThreeDReplace::a2(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ThreeDReplace.a2)
  return a2_.Get(index);
}
inline ::ReactionProto::MatchedAtomInComponent* ThreeDReplace::add_a2() {
  // @@protoc_insertion_point(field_add:ReactionProto.ThreeDReplace.a2)
  return a2_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::MatchedAtomInComponent >&
ThreeDReplace::a2() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ThreeDReplace.a2)
  return a2_;
}

// -------------------------------------------------------------------

// NoReaction

// optional string comment = 1;
inline bool NoReaction::has_comment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NoReaction::set_has_comment() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NoReaction::clear_has_comment() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NoReaction::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment();
}
inline const ::std::string& NoReaction::comment() const {
  // @@protoc_insertion_point(field_get:ReactionProto.NoReaction.comment)
  return comment_.GetNoArena();
}
inline void NoReaction::set_comment(const ::std::string& value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReactionProto.NoReaction.comment)
}
#if LANG_CXX11
inline void NoReaction::set_comment(::std::string&& value) {
  set_has_comment();
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReactionProto.NoReaction.comment)
}
#endif
inline void NoReaction::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReactionProto.NoReaction.comment)
}
inline void NoReaction::set_comment(const char* value, size_t size) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReactionProto.NoReaction.comment)
}
inline ::std::string* NoReaction::mutable_comment() {
  set_has_comment();
  // @@protoc_insertion_point(field_mutable:ReactionProto.NoReaction.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NoReaction::release_comment() {
  // @@protoc_insertion_point(field_release:ReactionProto.NoReaction.comment)
  if (!has_comment()) {
    return NULL;
  }
  clear_has_comment();
  return comment_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NoReaction::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.NoReaction.comment)
}

// optional .SubstructureSearch.SubstructureQuery scaffold_no_reaction = 2;
inline bool NoReaction::has_scaffold_no_reaction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NoReaction::set_has_scaffold_no_reaction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NoReaction::clear_has_scaffold_no_reaction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::SubstructureSearch::SubstructureQuery& NoReaction::_internal_scaffold_no_reaction() const {
  return *scaffold_no_reaction_;
}
inline const ::SubstructureSearch::SubstructureQuery& NoReaction::scaffold_no_reaction() const {
  const ::SubstructureSearch::SubstructureQuery* p = scaffold_no_reaction_;
  // @@protoc_insertion_point(field_get:ReactionProto.NoReaction.scaffold_no_reaction)
  return p != NULL ? *p : *reinterpret_cast<const ::SubstructureSearch::SubstructureQuery*>(
      &::SubstructureSearch::_SubstructureQuery_default_instance_);
}
inline ::SubstructureSearch::SubstructureQuery* NoReaction::release_scaffold_no_reaction() {
  // @@protoc_insertion_point(field_release:ReactionProto.NoReaction.scaffold_no_reaction)
  clear_has_scaffold_no_reaction();
  ::SubstructureSearch::SubstructureQuery* temp = scaffold_no_reaction_;
  scaffold_no_reaction_ = NULL;
  return temp;
}
inline ::SubstructureSearch::SubstructureQuery* NoReaction::mutable_scaffold_no_reaction() {
  set_has_scaffold_no_reaction();
  if (scaffold_no_reaction_ == NULL) {
    auto* p = CreateMaybeMessage<::SubstructureSearch::SubstructureQuery>(GetArenaNoVirtual());
    scaffold_no_reaction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.NoReaction.scaffold_no_reaction)
  return scaffold_no_reaction_;
}
inline void NoReaction::set_allocated_scaffold_no_reaction(::SubstructureSearch::SubstructureQuery* scaffold_no_reaction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scaffold_no_reaction_);
  }
  if (scaffold_no_reaction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scaffold_no_reaction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scaffold_no_reaction, submessage_arena);
    }
    set_has_scaffold_no_reaction();
  } else {
    clear_has_scaffold_no_reaction();
  }
  scaffold_no_reaction_ = scaffold_no_reaction;
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.NoReaction.scaffold_no_reaction)
}

// optional .SubstructureSearch.SubstructureQuery sidechain_no_reaction = 3;
inline bool NoReaction::has_sidechain_no_reaction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NoReaction::set_has_sidechain_no_reaction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NoReaction::clear_has_sidechain_no_reaction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::SubstructureSearch::SubstructureQuery& NoReaction::_internal_sidechain_no_reaction() const {
  return *sidechain_no_reaction_;
}
inline const ::SubstructureSearch::SubstructureQuery& NoReaction::sidechain_no_reaction() const {
  const ::SubstructureSearch::SubstructureQuery* p = sidechain_no_reaction_;
  // @@protoc_insertion_point(field_get:ReactionProto.NoReaction.sidechain_no_reaction)
  return p != NULL ? *p : *reinterpret_cast<const ::SubstructureSearch::SubstructureQuery*>(
      &::SubstructureSearch::_SubstructureQuery_default_instance_);
}
inline ::SubstructureSearch::SubstructureQuery* NoReaction::release_sidechain_no_reaction() {
  // @@protoc_insertion_point(field_release:ReactionProto.NoReaction.sidechain_no_reaction)
  clear_has_sidechain_no_reaction();
  ::SubstructureSearch::SubstructureQuery* temp = sidechain_no_reaction_;
  sidechain_no_reaction_ = NULL;
  return temp;
}
inline ::SubstructureSearch::SubstructureQuery* NoReaction::mutable_sidechain_no_reaction() {
  set_has_sidechain_no_reaction();
  if (sidechain_no_reaction_ == NULL) {
    auto* p = CreateMaybeMessage<::SubstructureSearch::SubstructureQuery>(GetArenaNoVirtual());
    sidechain_no_reaction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.NoReaction.sidechain_no_reaction)
  return sidechain_no_reaction_;
}
inline void NoReaction::set_allocated_sidechain_no_reaction(::SubstructureSearch::SubstructureQuery* sidechain_no_reaction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sidechain_no_reaction_);
  }
  if (sidechain_no_reaction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sidechain_no_reaction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sidechain_no_reaction, submessage_arena);
    }
    set_has_sidechain_no_reaction();
  } else {
    clear_has_sidechain_no_reaction();
  }
  sidechain_no_reaction_ = sidechain_no_reaction;
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.NoReaction.sidechain_no_reaction)
}

// -------------------------------------------------------------------

// ReactionSite

// optional .SubstructureSearch.SubstructureQuery query = 1;
inline bool ReactionSite::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReactionSite::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReactionSite::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::SubstructureSearch::SubstructureQuery& ReactionSite::_internal_query() const {
  return *query_;
}
inline const ::SubstructureSearch::SubstructureQuery& ReactionSite::query() const {
  const ::SubstructureSearch::SubstructureQuery* p = query_;
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.query)
  return p != NULL ? *p : *reinterpret_cast<const ::SubstructureSearch::SubstructureQuery*>(
      &::SubstructureSearch::_SubstructureQuery_default_instance_);
}
inline ::SubstructureSearch::SubstructureQuery* ReactionSite::release_query() {
  // @@protoc_insertion_point(field_release:ReactionProto.ReactionSite.query)
  clear_has_query();
  ::SubstructureSearch::SubstructureQuery* temp = query_;
  query_ = NULL;
  return temp;
}
inline ::SubstructureSearch::SubstructureQuery* ReactionSite::mutable_query() {
  set_has_query();
  if (query_ == NULL) {
    auto* p = CreateMaybeMessage<::SubstructureSearch::SubstructureQuery>(GetArenaNoVirtual());
    query_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.ReactionSite.query)
  return query_;
}
inline void ReactionSite::set_allocated_query(::SubstructureSearch::SubstructureQuery* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(query_);
  }
  if (query) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
  } else {
    clear_has_query();
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.ReactionSite.query)
}

// optional string comment = 2;
inline bool ReactionSite::has_comment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReactionSite::set_has_comment() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReactionSite::clear_has_comment() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReactionSite::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment();
}
inline const ::std::string& ReactionSite::comment() const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.comment)
  return comment_.GetNoArena();
}
inline void ReactionSite::set_comment(const ::std::string& value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReactionProto.ReactionSite.comment)
}
#if LANG_CXX11
inline void ReactionSite::set_comment(::std::string&& value) {
  set_has_comment();
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReactionProto.ReactionSite.comment)
}
#endif
inline void ReactionSite::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReactionProto.ReactionSite.comment)
}
inline void ReactionSite::set_comment(const char* value, size_t size) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReactionProto.ReactionSite.comment)
}
inline ::std::string* ReactionSite::mutable_comment() {
  set_has_comment();
  // @@protoc_insertion_point(field_mutable:ReactionProto.ReactionSite.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReactionSite::release_comment() {
  // @@protoc_insertion_point(field_release:ReactionProto.ReactionSite.comment)
  if (!has_comment()) {
    return NULL;
  }
  clear_has_comment();
  return comment_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReactionSite::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.ReactionSite.comment)
}

// repeated .ReactionProto.BondToBeMade make_bond = 3;
inline int ReactionSite::make_bond_size() const {
  return make_bond_.size();
}
inline void ReactionSite::clear_make_bond() {
  make_bond_.Clear();
}
inline ::ReactionProto::BondToBeMade* ReactionSite::mutable_make_bond(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ReactionSite.make_bond)
  return make_bond_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondToBeMade >*
ReactionSite::mutable_make_bond() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ReactionSite.make_bond)
  return &make_bond_;
}
inline const ::ReactionProto::BondToBeMade& ReactionSite::make_bond(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.make_bond)
  return make_bond_.Get(index);
}
inline ::ReactionProto::BondToBeMade* ReactionSite::add_make_bond() {
  // @@protoc_insertion_point(field_add:ReactionProto.ReactionSite.make_bond)
  return make_bond_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondToBeMade >&
ReactionSite::make_bond() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ReactionSite.make_bond)
  return make_bond_;
}

// repeated .ReactionProto.PairOfAtoms break_bond = 4;
inline int ReactionSite::break_bond_size() const {
  return break_bond_.size();
}
inline void ReactionSite::clear_break_bond() {
  break_bond_.Clear();
}
inline ::ReactionProto::PairOfAtoms* ReactionSite::mutable_break_bond(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ReactionSite.break_bond)
  return break_bond_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::PairOfAtoms >*
ReactionSite::mutable_break_bond() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ReactionSite.break_bond)
  return &break_bond_;
}
inline const ::ReactionProto::PairOfAtoms& ReactionSite::break_bond(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.break_bond)
  return break_bond_.Get(index);
}
inline ::ReactionProto::PairOfAtoms* ReactionSite::add_break_bond() {
  // @@protoc_insertion_point(field_add:ReactionProto.ReactionSite.break_bond)
  return break_bond_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::PairOfAtoms >&
ReactionSite::break_bond() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ReactionSite.break_bond)
  return break_bond_;
}

// repeated int32 remove_atom = 5;
inline int ReactionSite::remove_atom_size() const {
  return remove_atom_.size();
}
inline void ReactionSite::clear_remove_atom() {
  remove_atom_.Clear();
}
inline ::google::protobuf::int32 ReactionSite::remove_atom(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.remove_atom)
  return remove_atom_.Get(index);
}
inline void ReactionSite::set_remove_atom(int index, ::google::protobuf::int32 value) {
  remove_atom_.Set(index, value);
  // @@protoc_insertion_point(field_set:ReactionProto.ReactionSite.remove_atom)
}
inline void ReactionSite::add_remove_atom(::google::protobuf::int32 value) {
  remove_atom_.Add(value);
  // @@protoc_insertion_point(field_add:ReactionProto.ReactionSite.remove_atom)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReactionSite::remove_atom() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ReactionSite.remove_atom)
  return remove_atom_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReactionSite::mutable_remove_atom() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ReactionSite.remove_atom)
  return &remove_atom_;
}

// repeated int32 remove_fragment = 6;
inline int ReactionSite::remove_fragment_size() const {
  return remove_fragment_.size();
}
inline void ReactionSite::clear_remove_fragment() {
  remove_fragment_.Clear();
}
inline ::google::protobuf::int32 ReactionSite::remove_fragment(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.remove_fragment)
  return remove_fragment_.Get(index);
}
inline void ReactionSite::set_remove_fragment(int index, ::google::protobuf::int32 value) {
  remove_fragment_.Set(index, value);
  // @@protoc_insertion_point(field_set:ReactionProto.ReactionSite.remove_fragment)
}
inline void ReactionSite::add_remove_fragment(::google::protobuf::int32 value) {
  remove_fragment_.Add(value);
  // @@protoc_insertion_point(field_add:ReactionProto.ReactionSite.remove_fragment)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReactionSite::remove_fragment() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ReactionSite.remove_fragment)
  return remove_fragment_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReactionSite::mutable_remove_fragment() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ReactionSite.remove_fragment)
  return &remove_fragment_;
}

// repeated int32 keep_fragment = 7;
inline int ReactionSite::keep_fragment_size() const {
  return keep_fragment_.size();
}
inline void ReactionSite::clear_keep_fragment() {
  keep_fragment_.Clear();
}
inline ::google::protobuf::int32 ReactionSite::keep_fragment(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.keep_fragment)
  return keep_fragment_.Get(index);
}
inline void ReactionSite::set_keep_fragment(int index, ::google::protobuf::int32 value) {
  keep_fragment_.Set(index, value);
  // @@protoc_insertion_point(field_set:ReactionProto.ReactionSite.keep_fragment)
}
inline void ReactionSite::add_keep_fragment(::google::protobuf::int32 value) {
  keep_fragment_.Add(value);
  // @@protoc_insertion_point(field_add:ReactionProto.ReactionSite.keep_fragment)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReactionSite::keep_fragment() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ReactionSite.keep_fragment)
  return keep_fragment_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReactionSite::mutable_keep_fragment() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ReactionSite.keep_fragment)
  return &keep_fragment_;
}

// repeated .ReactionProto.ChangeElement change_element = 8;
inline int ReactionSite::change_element_size() const {
  return change_element_.size();
}
inline void ReactionSite::clear_change_element() {
  change_element_.Clear();
}
inline ::ReactionProto::ChangeElement* ReactionSite::mutable_change_element(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ReactionSite.change_element)
  return change_element_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeElement >*
ReactionSite::mutable_change_element() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ReactionSite.change_element)
  return &change_element_;
}
inline const ::ReactionProto::ChangeElement& ReactionSite::change_element(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.change_element)
  return change_element_.Get(index);
}
inline ::ReactionProto::ChangeElement* ReactionSite::add_change_element() {
  // @@protoc_insertion_point(field_add:ReactionProto.ReactionSite.change_element)
  return change_element_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeElement >&
ReactionSite::change_element() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ReactionSite.change_element)
  return change_element_;
}

// repeated .ReactionProto.FormalCharge formal_charge = 9;
inline int ReactionSite::formal_charge_size() const {
  return formal_charge_.size();
}
inline void ReactionSite::clear_formal_charge() {
  formal_charge_.Clear();
}
inline ::ReactionProto::FormalCharge* ReactionSite::mutable_formal_charge(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ReactionSite.formal_charge)
  return formal_charge_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::FormalCharge >*
ReactionSite::mutable_formal_charge() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ReactionSite.formal_charge)
  return &formal_charge_;
}
inline const ::ReactionProto::FormalCharge& ReactionSite::formal_charge(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.formal_charge)
  return formal_charge_.Get(index);
}
inline ::ReactionProto::FormalCharge* ReactionSite::add_formal_charge() {
  // @@protoc_insertion_point(field_add:ReactionProto.ReactionSite.formal_charge)
  return formal_charge_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::FormalCharge >&
ReactionSite::formal_charge() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ReactionSite.formal_charge)
  return formal_charge_;
}

// repeated .ReactionProto.ChangeFormalCharge change_formal_charge = 10;
inline int ReactionSite::change_formal_charge_size() const {
  return change_formal_charge_.size();
}
inline void ReactionSite::clear_change_formal_charge() {
  change_formal_charge_.Clear();
}
inline ::ReactionProto::ChangeFormalCharge* ReactionSite::mutable_change_formal_charge(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ReactionSite.change_formal_charge)
  return change_formal_charge_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeFormalCharge >*
ReactionSite::mutable_change_formal_charge() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ReactionSite.change_formal_charge)
  return &change_formal_charge_;
}
inline const ::ReactionProto::ChangeFormalCharge& ReactionSite::change_formal_charge(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.change_formal_charge)
  return change_formal_charge_.Get(index);
}
inline ::ReactionProto::ChangeFormalCharge* ReactionSite::add_change_formal_charge() {
  // @@protoc_insertion_point(field_add:ReactionProto.ReactionSite.change_formal_charge)
  return change_formal_charge_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeFormalCharge >&
ReactionSite::change_formal_charge() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ReactionSite.change_formal_charge)
  return change_formal_charge_;
}

// repeated .ReactionProto.PlaceIsotope isotope = 11;
inline int ReactionSite::isotope_size() const {
  return isotope_.size();
}
inline void ReactionSite::clear_isotope() {
  isotope_.Clear();
}
inline ::ReactionProto::PlaceIsotope* ReactionSite::mutable_isotope(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ReactionSite.isotope)
  return isotope_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >*
ReactionSite::mutable_isotope() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ReactionSite.isotope)
  return &isotope_;
}
inline const ::ReactionProto::PlaceIsotope& ReactionSite::isotope(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.isotope)
  return isotope_.Get(index);
}
inline ::ReactionProto::PlaceIsotope* ReactionSite::add_isotope() {
  // @@protoc_insertion_point(field_add:ReactionProto.ReactionSite.isotope)
  return isotope_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >&
ReactionSite::isotope() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ReactionSite.isotope)
  return isotope_;
}

// repeated .ReactionProto.IncrementIsotope change_isotope = 12;
inline int ReactionSite::change_isotope_size() const {
  return change_isotope_.size();
}
inline void ReactionSite::clear_change_isotope() {
  change_isotope_.Clear();
}
inline ::ReactionProto::IncrementIsotope* ReactionSite::mutable_change_isotope(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ReactionSite.change_isotope)
  return change_isotope_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::IncrementIsotope >*
ReactionSite::mutable_change_isotope() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ReactionSite.change_isotope)
  return &change_isotope_;
}
inline const ::ReactionProto::IncrementIsotope& ReactionSite::change_isotope(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.change_isotope)
  return change_isotope_.Get(index);
}
inline ::ReactionProto::IncrementIsotope* ReactionSite::add_change_isotope() {
  // @@protoc_insertion_point(field_add:ReactionProto.ReactionSite.change_isotope)
  return change_isotope_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::IncrementIsotope >&
ReactionSite::change_isotope() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ReactionSite.change_isotope)
  return change_isotope_;
}

// repeated .ReactionProto.PlaceIsotope invert_isotope = 13;
inline int ReactionSite::invert_isotope_size() const {
  return invert_isotope_.size();
}
inline void ReactionSite::clear_invert_isotope() {
  invert_isotope_.Clear();
}
inline ::ReactionProto::PlaceIsotope* ReactionSite::mutable_invert_isotope(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ReactionSite.invert_isotope)
  return invert_isotope_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >*
ReactionSite::mutable_invert_isotope() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ReactionSite.invert_isotope)
  return &invert_isotope_;
}
inline const ::ReactionProto::PlaceIsotope& ReactionSite::invert_isotope(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.invert_isotope)
  return invert_isotope_.Get(index);
}
inline ::ReactionProto::PlaceIsotope* ReactionSite::add_invert_isotope() {
  // @@protoc_insertion_point(field_add:ReactionProto.ReactionSite.invert_isotope)
  return invert_isotope_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >&
ReactionSite::invert_isotope() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ReactionSite.invert_isotope)
  return invert_isotope_;
}

// repeated .ReactionProto.BondLength bond_length = 14;
inline int ReactionSite::bond_length_size() const {
  return bond_length_.size();
}
inline void ReactionSite::clear_bond_length() {
  bond_length_.Clear();
}
inline ::ReactionProto::BondLength* ReactionSite::mutable_bond_length(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ReactionSite.bond_length)
  return bond_length_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondLength >*
ReactionSite::mutable_bond_length() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ReactionSite.bond_length)
  return &bond_length_;
}
inline const ::ReactionProto::BondLength& ReactionSite::bond_length(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.bond_length)
  return bond_length_.Get(index);
}
inline ::ReactionProto::BondLength* ReactionSite::add_bond_length() {
  // @@protoc_insertion_point(field_add:ReactionProto.ReactionSite.bond_length)
  return bond_length_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondLength >&
ReactionSite::bond_length() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ReactionSite.bond_length)
  return bond_length_;
}

// repeated .ReactionProto.BondAngle bond_angle = 15;
inline int ReactionSite::bond_angle_size() const {
  return bond_angle_.size();
}
inline void ReactionSite::clear_bond_angle() {
  bond_angle_.Clear();
}
inline ::ReactionProto::BondAngle* ReactionSite::mutable_bond_angle(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ReactionSite.bond_angle)
  return bond_angle_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondAngle >*
ReactionSite::mutable_bond_angle() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ReactionSite.bond_angle)
  return &bond_angle_;
}
inline const ::ReactionProto::BondAngle& ReactionSite::bond_angle(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.bond_angle)
  return bond_angle_.Get(index);
}
inline ::ReactionProto::BondAngle* ReactionSite::add_bond_angle() {
  // @@protoc_insertion_point(field_add:ReactionProto.ReactionSite.bond_angle)
  return bond_angle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondAngle >&
ReactionSite::bond_angle() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ReactionSite.bond_angle)
  return bond_angle_;
}

// repeated .ReactionProto.DihedralAngle dihedral_angle = 16;
inline int ReactionSite::dihedral_angle_size() const {
  return dihedral_angle_.size();
}
inline void ReactionSite::clear_dihedral_angle() {
  dihedral_angle_.Clear();
}
inline ::ReactionProto::DihedralAngle* ReactionSite::mutable_dihedral_angle(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ReactionSite.dihedral_angle)
  return dihedral_angle_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::DihedralAngle >*
ReactionSite::mutable_dihedral_angle() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ReactionSite.dihedral_angle)
  return &dihedral_angle_;
}
inline const ::ReactionProto::DihedralAngle& ReactionSite::dihedral_angle(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.dihedral_angle)
  return dihedral_angle_.Get(index);
}
inline ::ReactionProto::DihedralAngle* ReactionSite::add_dihedral_angle() {
  // @@protoc_insertion_point(field_add:ReactionProto.ReactionSite.dihedral_angle)
  return dihedral_angle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::DihedralAngle >&
ReactionSite::dihedral_angle() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ReactionSite.dihedral_angle)
  return dihedral_angle_;
}

// repeated .ReactionProto.ThreeDReplace reaction_3d_replace = 17;
inline int ReactionSite::reaction_3d_replace_size() const {
  return reaction_3d_replace_.size();
}
inline void ReactionSite::clear_reaction_3d_replace() {
  reaction_3d_replace_.Clear();
}
inline ::ReactionProto::ThreeDReplace* ReactionSite::mutable_reaction_3d_replace(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ReactionSite.reaction_3d_replace)
  return reaction_3d_replace_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::ThreeDReplace >*
ReactionSite::mutable_reaction_3d_replace() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ReactionSite.reaction_3d_replace)
  return &reaction_3d_replace_;
}
inline const ::ReactionProto::ThreeDReplace& ReactionSite::reaction_3d_replace(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.reaction_3d_replace)
  return reaction_3d_replace_.Get(index);
}
inline ::ReactionProto::ThreeDReplace* ReactionSite::add_reaction_3d_replace() {
  // @@protoc_insertion_point(field_add:ReactionProto.ReactionSite.reaction_3d_replace)
  return reaction_3d_replace_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ThreeDReplace >&
ReactionSite::reaction_3d_replace() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ReactionSite.reaction_3d_replace)
  return reaction_3d_replace_;
}

// repeated .ReactionProto.WedgeBond wedge_bonds = 18;
inline int ReactionSite::wedge_bonds_size() const {
  return wedge_bonds_.size();
}
inline void ReactionSite::clear_wedge_bonds() {
  wedge_bonds_.Clear();
}
inline ::ReactionProto::WedgeBond* ReactionSite::mutable_wedge_bonds(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ReactionSite.wedge_bonds)
  return wedge_bonds_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::WedgeBond >*
ReactionSite::mutable_wedge_bonds() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ReactionSite.wedge_bonds)
  return &wedge_bonds_;
}
inline const ::ReactionProto::WedgeBond& ReactionSite::wedge_bonds(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.wedge_bonds)
  return wedge_bonds_.Get(index);
}
inline ::ReactionProto::WedgeBond* ReactionSite::add_wedge_bonds() {
  // @@protoc_insertion_point(field_add:ReactionProto.ReactionSite.wedge_bonds)
  return wedge_bonds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::WedgeBond >&
ReactionSite::wedge_bonds() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ReactionSite.wedge_bonds)
  return wedge_bonds_;
}

// repeated .ReactionProto.ReplaceAtom replace_atom = 19;
inline int ReactionSite::replace_atom_size() const {
  return replace_atom_.size();
}
inline void ReactionSite::clear_replace_atom() {
  replace_atom_.Clear();
}
inline ::ReactionProto::ReplaceAtom* ReactionSite::mutable_replace_atom(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ReactionSite.replace_atom)
  return replace_atom_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::ReplaceAtom >*
ReactionSite::mutable_replace_atom() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ReactionSite.replace_atom)
  return &replace_atom_;
}
inline const ::ReactionProto::ReplaceAtom& ReactionSite::replace_atom(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.replace_atom)
  return replace_atom_.Get(index);
}
inline ::ReactionProto::ReplaceAtom* ReactionSite::add_replace_atom() {
  // @@protoc_insertion_point(field_add:ReactionProto.ReactionSite.replace_atom)
  return replace_atom_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ReplaceAtom >&
ReactionSite::replace_atom() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ReactionSite.replace_atom)
  return replace_atom_;
}

// repeated int32 unfix_implicit_hydrogens = 20;
inline int ReactionSite::unfix_implicit_hydrogens_size() const {
  return unfix_implicit_hydrogens_.size();
}
inline void ReactionSite::clear_unfix_implicit_hydrogens() {
  unfix_implicit_hydrogens_.Clear();
}
inline ::google::protobuf::int32 ReactionSite::unfix_implicit_hydrogens(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.unfix_implicit_hydrogens)
  return unfix_implicit_hydrogens_.Get(index);
}
inline void ReactionSite::set_unfix_implicit_hydrogens(int index, ::google::protobuf::int32 value) {
  unfix_implicit_hydrogens_.Set(index, value);
  // @@protoc_insertion_point(field_set:ReactionProto.ReactionSite.unfix_implicit_hydrogens)
}
inline void ReactionSite::add_unfix_implicit_hydrogens(::google::protobuf::int32 value) {
  unfix_implicit_hydrogens_.Add(value);
  // @@protoc_insertion_point(field_add:ReactionProto.ReactionSite.unfix_implicit_hydrogens)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReactionSite::unfix_implicit_hydrogens() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ReactionSite.unfix_implicit_hydrogens)
  return unfix_implicit_hydrogens_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReactionSite::mutable_unfix_implicit_hydrogens() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ReactionSite.unfix_implicit_hydrogens)
  return &unfix_implicit_hydrogens_;
}

// repeated .SubstructureSearch.SubstructureQuery inactive = 21;
inline int ReactionSite::inactive_size() const {
  return inactive_.size();
}
inline ::SubstructureSearch::SubstructureQuery* ReactionSite::mutable_inactive(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ReactionSite.inactive)
  return inactive_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::SubstructureSearch::SubstructureQuery >*
ReactionSite::mutable_inactive() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ReactionSite.inactive)
  return &inactive_;
}
inline const ::SubstructureSearch::SubstructureQuery& ReactionSite::inactive(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.inactive)
  return inactive_.Get(index);
}
inline ::SubstructureSearch::SubstructureQuery* ReactionSite::add_inactive() {
  // @@protoc_insertion_point(field_add:ReactionProto.ReactionSite.inactive)
  return inactive_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SubstructureSearch::SubstructureQuery >&
ReactionSite::inactive() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ReactionSite.inactive)
  return inactive_;
}

// repeated int32 invert_chirality = 22;
inline int ReactionSite::invert_chirality_size() const {
  return invert_chirality_.size();
}
inline void ReactionSite::clear_invert_chirality() {
  invert_chirality_.Clear();
}
inline ::google::protobuf::int32 ReactionSite::invert_chirality(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.invert_chirality)
  return invert_chirality_.Get(index);
}
inline void ReactionSite::set_invert_chirality(int index, ::google::protobuf::int32 value) {
  invert_chirality_.Set(index, value);
  // @@protoc_insertion_point(field_set:ReactionProto.ReactionSite.invert_chirality)
}
inline void ReactionSite::add_invert_chirality(::google::protobuf::int32 value) {
  invert_chirality_.Add(value);
  // @@protoc_insertion_point(field_add:ReactionProto.ReactionSite.invert_chirality)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReactionSite::invert_chirality() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ReactionSite.invert_chirality)
  return invert_chirality_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReactionSite::mutable_invert_chirality() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ReactionSite.invert_chirality)
  return &invert_chirality_;
}

// repeated int32 remove_chirality = 23;
inline int ReactionSite::remove_chirality_size() const {
  return remove_chirality_.size();
}
inline void ReactionSite::clear_remove_chirality() {
  remove_chirality_.Clear();
}
inline ::google::protobuf::int32 ReactionSite::remove_chirality(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.remove_chirality)
  return remove_chirality_.Get(index);
}
inline void ReactionSite::set_remove_chirality(int index, ::google::protobuf::int32 value) {
  remove_chirality_.Set(index, value);
  // @@protoc_insertion_point(field_set:ReactionProto.ReactionSite.remove_chirality)
}
inline void ReactionSite::add_remove_chirality(::google::protobuf::int32 value) {
  remove_chirality_.Add(value);
  // @@protoc_insertion_point(field_add:ReactionProto.ReactionSite.remove_chirality)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReactionSite::remove_chirality() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ReactionSite.remove_chirality)
  return remove_chirality_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReactionSite::mutable_remove_chirality() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ReactionSite.remove_chirality)
  return &remove_chirality_;
}

// optional .ToggleKekuleForm.ToggleKekuleForm toggle_kekule_form = 24;
inline bool ReactionSite::has_toggle_kekule_form() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReactionSite::set_has_toggle_kekule_form() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReactionSite::clear_has_toggle_kekule_form() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ToggleKekuleForm::ToggleKekuleForm& ReactionSite::_internal_toggle_kekule_form() const {
  return *toggle_kekule_form_;
}
inline const ::ToggleKekuleForm::ToggleKekuleForm& ReactionSite::toggle_kekule_form() const {
  const ::ToggleKekuleForm::ToggleKekuleForm* p = toggle_kekule_form_;
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.toggle_kekule_form)
  return p != NULL ? *p : *reinterpret_cast<const ::ToggleKekuleForm::ToggleKekuleForm*>(
      &::ToggleKekuleForm::_ToggleKekuleForm_default_instance_);
}
inline ::ToggleKekuleForm::ToggleKekuleForm* ReactionSite::release_toggle_kekule_form() {
  // @@protoc_insertion_point(field_release:ReactionProto.ReactionSite.toggle_kekule_form)
  clear_has_toggle_kekule_form();
  ::ToggleKekuleForm::ToggleKekuleForm* temp = toggle_kekule_form_;
  toggle_kekule_form_ = NULL;
  return temp;
}
inline ::ToggleKekuleForm::ToggleKekuleForm* ReactionSite::mutable_toggle_kekule_form() {
  set_has_toggle_kekule_form();
  if (toggle_kekule_form_ == NULL) {
    auto* p = CreateMaybeMessage<::ToggleKekuleForm::ToggleKekuleForm>(GetArenaNoVirtual());
    toggle_kekule_form_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.ReactionSite.toggle_kekule_form)
  return toggle_kekule_form_;
}
inline void ReactionSite::set_allocated_toggle_kekule_form(::ToggleKekuleForm::ToggleKekuleForm* toggle_kekule_form) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(toggle_kekule_form_);
  }
  if (toggle_kekule_form) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      toggle_kekule_form = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, toggle_kekule_form, submessage_arena);
    }
    set_has_toggle_kekule_form();
  } else {
    clear_has_toggle_kekule_form();
  }
  toggle_kekule_form_ = toggle_kekule_form;
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.ReactionSite.toggle_kekule_form)
}

// optional bool ignore_multiple_matches_involving_atoms_not_changing = 25;
inline bool ReactionSite::has_ignore_multiple_matches_involving_atoms_not_changing() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReactionSite::set_has_ignore_multiple_matches_involving_atoms_not_changing() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReactionSite::clear_has_ignore_multiple_matches_involving_atoms_not_changing() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReactionSite::clear_ignore_multiple_matches_involving_atoms_not_changing() {
  ignore_multiple_matches_involving_atoms_not_changing_ = false;
  clear_has_ignore_multiple_matches_involving_atoms_not_changing();
}
inline bool ReactionSite::ignore_multiple_matches_involving_atoms_not_changing() const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.ignore_multiple_matches_involving_atoms_not_changing)
  return ignore_multiple_matches_involving_atoms_not_changing_;
}
inline void ReactionSite::set_ignore_multiple_matches_involving_atoms_not_changing(bool value) {
  set_has_ignore_multiple_matches_involving_atoms_not_changing();
  ignore_multiple_matches_involving_atoms_not_changing_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.ReactionSite.ignore_multiple_matches_involving_atoms_not_changing)
}

// optional bool ignore_multiple_matches_involving_changing_atoms = 27;
inline bool ReactionSite::has_ignore_multiple_matches_involving_changing_atoms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReactionSite::set_has_ignore_multiple_matches_involving_changing_atoms() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReactionSite::clear_has_ignore_multiple_matches_involving_changing_atoms() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReactionSite::clear_ignore_multiple_matches_involving_changing_atoms() {
  ignore_multiple_matches_involving_changing_atoms_ = false;
  clear_has_ignore_multiple_matches_involving_changing_atoms();
}
inline bool ReactionSite::ignore_multiple_matches_involving_changing_atoms() const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.ignore_multiple_matches_involving_changing_atoms)
  return ignore_multiple_matches_involving_changing_atoms_;
}
inline void ReactionSite::set_ignore_multiple_matches_involving_changing_atoms(bool value) {
  set_has_ignore_multiple_matches_involving_changing_atoms();
  ignore_multiple_matches_involving_changing_atoms_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.ReactionSite.ignore_multiple_matches_involving_changing_atoms)
}

// optional bool noop_reaction = 28;
inline bool ReactionSite::has_noop_reaction() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReactionSite::set_has_noop_reaction() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReactionSite::clear_has_noop_reaction() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReactionSite::clear_noop_reaction() {
  noop_reaction_ = false;
  clear_has_noop_reaction();
}
inline bool ReactionSite::noop_reaction() const {
  // @@protoc_insertion_point(field_get:ReactionProto.ReactionSite.noop_reaction)
  return noop_reaction_;
}
inline void ReactionSite::set_noop_reaction(bool value) {
  set_has_noop_reaction();
  noop_reaction_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.ReactionSite.noop_reaction)
}

// -------------------------------------------------------------------

// ScaffoldReactionSite

// optional int32 id = 1;
inline bool ScaffoldReactionSite::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScaffoldReactionSite::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScaffoldReactionSite::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScaffoldReactionSite::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ScaffoldReactionSite::id() const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.id)
  return id_;
}
inline void ScaffoldReactionSite::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.ScaffoldReactionSite.id)
}

// optional .SubstructureSearch.SubstructureQuery query = 2;
inline bool ScaffoldReactionSite::has_query() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScaffoldReactionSite::set_has_query() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScaffoldReactionSite::clear_has_query() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::SubstructureSearch::SubstructureQuery& ScaffoldReactionSite::_internal_query() const {
  return *query_;
}
inline const ::SubstructureSearch::SubstructureQuery& ScaffoldReactionSite::query() const {
  const ::SubstructureSearch::SubstructureQuery* p = query_;
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.query)
  return p != NULL ? *p : *reinterpret_cast<const ::SubstructureSearch::SubstructureQuery*>(
      &::SubstructureSearch::_SubstructureQuery_default_instance_);
}
inline ::SubstructureSearch::SubstructureQuery* ScaffoldReactionSite::release_query() {
  // @@protoc_insertion_point(field_release:ReactionProto.ScaffoldReactionSite.query)
  clear_has_query();
  ::SubstructureSearch::SubstructureQuery* temp = query_;
  query_ = NULL;
  return temp;
}
inline ::SubstructureSearch::SubstructureQuery* ScaffoldReactionSite::mutable_query() {
  set_has_query();
  if (query_ == NULL) {
    auto* p = CreateMaybeMessage<::SubstructureSearch::SubstructureQuery>(GetArenaNoVirtual());
    query_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.ScaffoldReactionSite.query)
  return query_;
}
inline void ScaffoldReactionSite::set_allocated_query(::SubstructureSearch::SubstructureQuery* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(query_);
  }
  if (query) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
  } else {
    clear_has_query();
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.ScaffoldReactionSite.query)
}

// repeated .ReactionProto.BondToBeMade make_bond = 3;
inline int ScaffoldReactionSite::make_bond_size() const {
  return make_bond_.size();
}
inline void ScaffoldReactionSite::clear_make_bond() {
  make_bond_.Clear();
}
inline ::ReactionProto::BondToBeMade* ScaffoldReactionSite::mutable_make_bond(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ScaffoldReactionSite.make_bond)
  return make_bond_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondToBeMade >*
ScaffoldReactionSite::mutable_make_bond() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ScaffoldReactionSite.make_bond)
  return &make_bond_;
}
inline const ::ReactionProto::BondToBeMade& ScaffoldReactionSite::make_bond(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.make_bond)
  return make_bond_.Get(index);
}
inline ::ReactionProto::BondToBeMade* ScaffoldReactionSite::add_make_bond() {
  // @@protoc_insertion_point(field_add:ReactionProto.ScaffoldReactionSite.make_bond)
  return make_bond_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondToBeMade >&
ScaffoldReactionSite::make_bond() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ScaffoldReactionSite.make_bond)
  return make_bond_;
}

// repeated .ReactionProto.PairOfAtoms break_bond = 4;
inline int ScaffoldReactionSite::break_bond_size() const {
  return break_bond_.size();
}
inline void ScaffoldReactionSite::clear_break_bond() {
  break_bond_.Clear();
}
inline ::ReactionProto::PairOfAtoms* ScaffoldReactionSite::mutable_break_bond(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ScaffoldReactionSite.break_bond)
  return break_bond_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::PairOfAtoms >*
ScaffoldReactionSite::mutable_break_bond() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ScaffoldReactionSite.break_bond)
  return &break_bond_;
}
inline const ::ReactionProto::PairOfAtoms& ScaffoldReactionSite::break_bond(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.break_bond)
  return break_bond_.Get(index);
}
inline ::ReactionProto::PairOfAtoms* ScaffoldReactionSite::add_break_bond() {
  // @@protoc_insertion_point(field_add:ReactionProto.ScaffoldReactionSite.break_bond)
  return break_bond_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::PairOfAtoms >&
ScaffoldReactionSite::break_bond() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ScaffoldReactionSite.break_bond)
  return break_bond_;
}

// repeated int32 remove_atom = 5;
inline int ScaffoldReactionSite::remove_atom_size() const {
  return remove_atom_.size();
}
inline void ScaffoldReactionSite::clear_remove_atom() {
  remove_atom_.Clear();
}
inline ::google::protobuf::int32 ScaffoldReactionSite::remove_atom(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.remove_atom)
  return remove_atom_.Get(index);
}
inline void ScaffoldReactionSite::set_remove_atom(int index, ::google::protobuf::int32 value) {
  remove_atom_.Set(index, value);
  // @@protoc_insertion_point(field_set:ReactionProto.ScaffoldReactionSite.remove_atom)
}
inline void ScaffoldReactionSite::add_remove_atom(::google::protobuf::int32 value) {
  remove_atom_.Add(value);
  // @@protoc_insertion_point(field_add:ReactionProto.ScaffoldReactionSite.remove_atom)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ScaffoldReactionSite::remove_atom() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ScaffoldReactionSite.remove_atom)
  return remove_atom_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ScaffoldReactionSite::mutable_remove_atom() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ScaffoldReactionSite.remove_atom)
  return &remove_atom_;
}

// repeated int32 remove_fragment = 6;
inline int ScaffoldReactionSite::remove_fragment_size() const {
  return remove_fragment_.size();
}
inline void ScaffoldReactionSite::clear_remove_fragment() {
  remove_fragment_.Clear();
}
inline ::google::protobuf::int32 ScaffoldReactionSite::remove_fragment(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.remove_fragment)
  return remove_fragment_.Get(index);
}
inline void ScaffoldReactionSite::set_remove_fragment(int index, ::google::protobuf::int32 value) {
  remove_fragment_.Set(index, value);
  // @@protoc_insertion_point(field_set:ReactionProto.ScaffoldReactionSite.remove_fragment)
}
inline void ScaffoldReactionSite::add_remove_fragment(::google::protobuf::int32 value) {
  remove_fragment_.Add(value);
  // @@protoc_insertion_point(field_add:ReactionProto.ScaffoldReactionSite.remove_fragment)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ScaffoldReactionSite::remove_fragment() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ScaffoldReactionSite.remove_fragment)
  return remove_fragment_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ScaffoldReactionSite::mutable_remove_fragment() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ScaffoldReactionSite.remove_fragment)
  return &remove_fragment_;
}

// repeated int32 keep_fragment = 7;
inline int ScaffoldReactionSite::keep_fragment_size() const {
  return keep_fragment_.size();
}
inline void ScaffoldReactionSite::clear_keep_fragment() {
  keep_fragment_.Clear();
}
inline ::google::protobuf::int32 ScaffoldReactionSite::keep_fragment(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.keep_fragment)
  return keep_fragment_.Get(index);
}
inline void ScaffoldReactionSite::set_keep_fragment(int index, ::google::protobuf::int32 value) {
  keep_fragment_.Set(index, value);
  // @@protoc_insertion_point(field_set:ReactionProto.ScaffoldReactionSite.keep_fragment)
}
inline void ScaffoldReactionSite::add_keep_fragment(::google::protobuf::int32 value) {
  keep_fragment_.Add(value);
  // @@protoc_insertion_point(field_add:ReactionProto.ScaffoldReactionSite.keep_fragment)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ScaffoldReactionSite::keep_fragment() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ScaffoldReactionSite.keep_fragment)
  return keep_fragment_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ScaffoldReactionSite::mutable_keep_fragment() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ScaffoldReactionSite.keep_fragment)
  return &keep_fragment_;
}

// repeated .ReactionProto.ChangeElement change_element = 8;
inline int ScaffoldReactionSite::change_element_size() const {
  return change_element_.size();
}
inline void ScaffoldReactionSite::clear_change_element() {
  change_element_.Clear();
}
inline ::ReactionProto::ChangeElement* ScaffoldReactionSite::mutable_change_element(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ScaffoldReactionSite.change_element)
  return change_element_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeElement >*
ScaffoldReactionSite::mutable_change_element() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ScaffoldReactionSite.change_element)
  return &change_element_;
}
inline const ::ReactionProto::ChangeElement& ScaffoldReactionSite::change_element(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.change_element)
  return change_element_.Get(index);
}
inline ::ReactionProto::ChangeElement* ScaffoldReactionSite::add_change_element() {
  // @@protoc_insertion_point(field_add:ReactionProto.ScaffoldReactionSite.change_element)
  return change_element_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeElement >&
ScaffoldReactionSite::change_element() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ScaffoldReactionSite.change_element)
  return change_element_;
}

// repeated .ReactionProto.FormalCharge formal_charge = 9;
inline int ScaffoldReactionSite::formal_charge_size() const {
  return formal_charge_.size();
}
inline void ScaffoldReactionSite::clear_formal_charge() {
  formal_charge_.Clear();
}
inline ::ReactionProto::FormalCharge* ScaffoldReactionSite::mutable_formal_charge(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ScaffoldReactionSite.formal_charge)
  return formal_charge_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::FormalCharge >*
ScaffoldReactionSite::mutable_formal_charge() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ScaffoldReactionSite.formal_charge)
  return &formal_charge_;
}
inline const ::ReactionProto::FormalCharge& ScaffoldReactionSite::formal_charge(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.formal_charge)
  return formal_charge_.Get(index);
}
inline ::ReactionProto::FormalCharge* ScaffoldReactionSite::add_formal_charge() {
  // @@protoc_insertion_point(field_add:ReactionProto.ScaffoldReactionSite.formal_charge)
  return formal_charge_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::FormalCharge >&
ScaffoldReactionSite::formal_charge() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ScaffoldReactionSite.formal_charge)
  return formal_charge_;
}

// repeated .ReactionProto.ChangeFormalCharge change_formal_charge = 10;
inline int ScaffoldReactionSite::change_formal_charge_size() const {
  return change_formal_charge_.size();
}
inline void ScaffoldReactionSite::clear_change_formal_charge() {
  change_formal_charge_.Clear();
}
inline ::ReactionProto::ChangeFormalCharge* ScaffoldReactionSite::mutable_change_formal_charge(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ScaffoldReactionSite.change_formal_charge)
  return change_formal_charge_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeFormalCharge >*
ScaffoldReactionSite::mutable_change_formal_charge() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ScaffoldReactionSite.change_formal_charge)
  return &change_formal_charge_;
}
inline const ::ReactionProto::ChangeFormalCharge& ScaffoldReactionSite::change_formal_charge(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.change_formal_charge)
  return change_formal_charge_.Get(index);
}
inline ::ReactionProto::ChangeFormalCharge* ScaffoldReactionSite::add_change_formal_charge() {
  // @@protoc_insertion_point(field_add:ReactionProto.ScaffoldReactionSite.change_formal_charge)
  return change_formal_charge_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeFormalCharge >&
ScaffoldReactionSite::change_formal_charge() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ScaffoldReactionSite.change_formal_charge)
  return change_formal_charge_;
}

// repeated .ReactionProto.PlaceIsotope isotope = 11;
inline int ScaffoldReactionSite::isotope_size() const {
  return isotope_.size();
}
inline void ScaffoldReactionSite::clear_isotope() {
  isotope_.Clear();
}
inline ::ReactionProto::PlaceIsotope* ScaffoldReactionSite::mutable_isotope(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ScaffoldReactionSite.isotope)
  return isotope_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >*
ScaffoldReactionSite::mutable_isotope() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ScaffoldReactionSite.isotope)
  return &isotope_;
}
inline const ::ReactionProto::PlaceIsotope& ScaffoldReactionSite::isotope(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.isotope)
  return isotope_.Get(index);
}
inline ::ReactionProto::PlaceIsotope* ScaffoldReactionSite::add_isotope() {
  // @@protoc_insertion_point(field_add:ReactionProto.ScaffoldReactionSite.isotope)
  return isotope_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >&
ScaffoldReactionSite::isotope() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ScaffoldReactionSite.isotope)
  return isotope_;
}

// repeated .ReactionProto.IncrementIsotope change_isotope = 12;
inline int ScaffoldReactionSite::change_isotope_size() const {
  return change_isotope_.size();
}
inline void ScaffoldReactionSite::clear_change_isotope() {
  change_isotope_.Clear();
}
inline ::ReactionProto::IncrementIsotope* ScaffoldReactionSite::mutable_change_isotope(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ScaffoldReactionSite.change_isotope)
  return change_isotope_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::IncrementIsotope >*
ScaffoldReactionSite::mutable_change_isotope() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ScaffoldReactionSite.change_isotope)
  return &change_isotope_;
}
inline const ::ReactionProto::IncrementIsotope& ScaffoldReactionSite::change_isotope(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.change_isotope)
  return change_isotope_.Get(index);
}
inline ::ReactionProto::IncrementIsotope* ScaffoldReactionSite::add_change_isotope() {
  // @@protoc_insertion_point(field_add:ReactionProto.ScaffoldReactionSite.change_isotope)
  return change_isotope_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::IncrementIsotope >&
ScaffoldReactionSite::change_isotope() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ScaffoldReactionSite.change_isotope)
  return change_isotope_;
}

// repeated .ReactionProto.PlaceIsotope invert_isotope = 13;
inline int ScaffoldReactionSite::invert_isotope_size() const {
  return invert_isotope_.size();
}
inline void ScaffoldReactionSite::clear_invert_isotope() {
  invert_isotope_.Clear();
}
inline ::ReactionProto::PlaceIsotope* ScaffoldReactionSite::mutable_invert_isotope(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ScaffoldReactionSite.invert_isotope)
  return invert_isotope_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >*
ScaffoldReactionSite::mutable_invert_isotope() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ScaffoldReactionSite.invert_isotope)
  return &invert_isotope_;
}
inline const ::ReactionProto::PlaceIsotope& ScaffoldReactionSite::invert_isotope(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.invert_isotope)
  return invert_isotope_.Get(index);
}
inline ::ReactionProto::PlaceIsotope* ScaffoldReactionSite::add_invert_isotope() {
  // @@protoc_insertion_point(field_add:ReactionProto.ScaffoldReactionSite.invert_isotope)
  return invert_isotope_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >&
ScaffoldReactionSite::invert_isotope() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ScaffoldReactionSite.invert_isotope)
  return invert_isotope_;
}

// repeated .ReactionProto.BondLength bond_length = 14;
inline int ScaffoldReactionSite::bond_length_size() const {
  return bond_length_.size();
}
inline void ScaffoldReactionSite::clear_bond_length() {
  bond_length_.Clear();
}
inline ::ReactionProto::BondLength* ScaffoldReactionSite::mutable_bond_length(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ScaffoldReactionSite.bond_length)
  return bond_length_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondLength >*
ScaffoldReactionSite::mutable_bond_length() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ScaffoldReactionSite.bond_length)
  return &bond_length_;
}
inline const ::ReactionProto::BondLength& ScaffoldReactionSite::bond_length(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.bond_length)
  return bond_length_.Get(index);
}
inline ::ReactionProto::BondLength* ScaffoldReactionSite::add_bond_length() {
  // @@protoc_insertion_point(field_add:ReactionProto.ScaffoldReactionSite.bond_length)
  return bond_length_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondLength >&
ScaffoldReactionSite::bond_length() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ScaffoldReactionSite.bond_length)
  return bond_length_;
}

// repeated .ReactionProto.BondAngle bond_angle = 15;
inline int ScaffoldReactionSite::bond_angle_size() const {
  return bond_angle_.size();
}
inline void ScaffoldReactionSite::clear_bond_angle() {
  bond_angle_.Clear();
}
inline ::ReactionProto::BondAngle* ScaffoldReactionSite::mutable_bond_angle(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ScaffoldReactionSite.bond_angle)
  return bond_angle_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondAngle >*
ScaffoldReactionSite::mutable_bond_angle() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ScaffoldReactionSite.bond_angle)
  return &bond_angle_;
}
inline const ::ReactionProto::BondAngle& ScaffoldReactionSite::bond_angle(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.bond_angle)
  return bond_angle_.Get(index);
}
inline ::ReactionProto::BondAngle* ScaffoldReactionSite::add_bond_angle() {
  // @@protoc_insertion_point(field_add:ReactionProto.ScaffoldReactionSite.bond_angle)
  return bond_angle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondAngle >&
ScaffoldReactionSite::bond_angle() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ScaffoldReactionSite.bond_angle)
  return bond_angle_;
}

// repeated .ReactionProto.DihedralAngle dihedral_angle = 16;
inline int ScaffoldReactionSite::dihedral_angle_size() const {
  return dihedral_angle_.size();
}
inline void ScaffoldReactionSite::clear_dihedral_angle() {
  dihedral_angle_.Clear();
}
inline ::ReactionProto::DihedralAngle* ScaffoldReactionSite::mutable_dihedral_angle(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ScaffoldReactionSite.dihedral_angle)
  return dihedral_angle_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::DihedralAngle >*
ScaffoldReactionSite::mutable_dihedral_angle() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ScaffoldReactionSite.dihedral_angle)
  return &dihedral_angle_;
}
inline const ::ReactionProto::DihedralAngle& ScaffoldReactionSite::dihedral_angle(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.dihedral_angle)
  return dihedral_angle_.Get(index);
}
inline ::ReactionProto::DihedralAngle* ScaffoldReactionSite::add_dihedral_angle() {
  // @@protoc_insertion_point(field_add:ReactionProto.ScaffoldReactionSite.dihedral_angle)
  return dihedral_angle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::DihedralAngle >&
ScaffoldReactionSite::dihedral_angle() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ScaffoldReactionSite.dihedral_angle)
  return dihedral_angle_;
}

// repeated .ReactionProto.ThreeDReplace reaction_3d_replace = 17;
inline int ScaffoldReactionSite::reaction_3d_replace_size() const {
  return reaction_3d_replace_.size();
}
inline void ScaffoldReactionSite::clear_reaction_3d_replace() {
  reaction_3d_replace_.Clear();
}
inline ::ReactionProto::ThreeDReplace* ScaffoldReactionSite::mutable_reaction_3d_replace(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ScaffoldReactionSite.reaction_3d_replace)
  return reaction_3d_replace_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::ThreeDReplace >*
ScaffoldReactionSite::mutable_reaction_3d_replace() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ScaffoldReactionSite.reaction_3d_replace)
  return &reaction_3d_replace_;
}
inline const ::ReactionProto::ThreeDReplace& ScaffoldReactionSite::reaction_3d_replace(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.reaction_3d_replace)
  return reaction_3d_replace_.Get(index);
}
inline ::ReactionProto::ThreeDReplace* ScaffoldReactionSite::add_reaction_3d_replace() {
  // @@protoc_insertion_point(field_add:ReactionProto.ScaffoldReactionSite.reaction_3d_replace)
  return reaction_3d_replace_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ThreeDReplace >&
ScaffoldReactionSite::reaction_3d_replace() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ScaffoldReactionSite.reaction_3d_replace)
  return reaction_3d_replace_;
}

// repeated .ReactionProto.WedgeBond wedge_bonds = 18;
inline int ScaffoldReactionSite::wedge_bonds_size() const {
  return wedge_bonds_.size();
}
inline void ScaffoldReactionSite::clear_wedge_bonds() {
  wedge_bonds_.Clear();
}
inline ::ReactionProto::WedgeBond* ScaffoldReactionSite::mutable_wedge_bonds(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ScaffoldReactionSite.wedge_bonds)
  return wedge_bonds_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::WedgeBond >*
ScaffoldReactionSite::mutable_wedge_bonds() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ScaffoldReactionSite.wedge_bonds)
  return &wedge_bonds_;
}
inline const ::ReactionProto::WedgeBond& ScaffoldReactionSite::wedge_bonds(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.wedge_bonds)
  return wedge_bonds_.Get(index);
}
inline ::ReactionProto::WedgeBond* ScaffoldReactionSite::add_wedge_bonds() {
  // @@protoc_insertion_point(field_add:ReactionProto.ScaffoldReactionSite.wedge_bonds)
  return wedge_bonds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::WedgeBond >&
ScaffoldReactionSite::wedge_bonds() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ScaffoldReactionSite.wedge_bonds)
  return wedge_bonds_;
}

// repeated .ReactionProto.ReplaceAtom replace_atom = 19;
inline int ScaffoldReactionSite::replace_atom_size() const {
  return replace_atom_.size();
}
inline void ScaffoldReactionSite::clear_replace_atom() {
  replace_atom_.Clear();
}
inline ::ReactionProto::ReplaceAtom* ScaffoldReactionSite::mutable_replace_atom(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ScaffoldReactionSite.replace_atom)
  return replace_atom_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::ReplaceAtom >*
ScaffoldReactionSite::mutable_replace_atom() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ScaffoldReactionSite.replace_atom)
  return &replace_atom_;
}
inline const ::ReactionProto::ReplaceAtom& ScaffoldReactionSite::replace_atom(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.replace_atom)
  return replace_atom_.Get(index);
}
inline ::ReactionProto::ReplaceAtom* ScaffoldReactionSite::add_replace_atom() {
  // @@protoc_insertion_point(field_add:ReactionProto.ScaffoldReactionSite.replace_atom)
  return replace_atom_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ReplaceAtom >&
ScaffoldReactionSite::replace_atom() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ScaffoldReactionSite.replace_atom)
  return replace_atom_;
}

// repeated int32 unfix_implicit_hydrogens = 20;
inline int ScaffoldReactionSite::unfix_implicit_hydrogens_size() const {
  return unfix_implicit_hydrogens_.size();
}
inline void ScaffoldReactionSite::clear_unfix_implicit_hydrogens() {
  unfix_implicit_hydrogens_.Clear();
}
inline ::google::protobuf::int32 ScaffoldReactionSite::unfix_implicit_hydrogens(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.unfix_implicit_hydrogens)
  return unfix_implicit_hydrogens_.Get(index);
}
inline void ScaffoldReactionSite::set_unfix_implicit_hydrogens(int index, ::google::protobuf::int32 value) {
  unfix_implicit_hydrogens_.Set(index, value);
  // @@protoc_insertion_point(field_set:ReactionProto.ScaffoldReactionSite.unfix_implicit_hydrogens)
}
inline void ScaffoldReactionSite::add_unfix_implicit_hydrogens(::google::protobuf::int32 value) {
  unfix_implicit_hydrogens_.Add(value);
  // @@protoc_insertion_point(field_add:ReactionProto.ScaffoldReactionSite.unfix_implicit_hydrogens)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ScaffoldReactionSite::unfix_implicit_hydrogens() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ScaffoldReactionSite.unfix_implicit_hydrogens)
  return unfix_implicit_hydrogens_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ScaffoldReactionSite::mutable_unfix_implicit_hydrogens() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ScaffoldReactionSite.unfix_implicit_hydrogens)
  return &unfix_implicit_hydrogens_;
}

// repeated .SubstructureSearch.SubstructureQuery inactive = 21;
inline int ScaffoldReactionSite::inactive_size() const {
  return inactive_.size();
}
inline ::SubstructureSearch::SubstructureQuery* ScaffoldReactionSite::mutable_inactive(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.ScaffoldReactionSite.inactive)
  return inactive_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::SubstructureSearch::SubstructureQuery >*
ScaffoldReactionSite::mutable_inactive() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ScaffoldReactionSite.inactive)
  return &inactive_;
}
inline const ::SubstructureSearch::SubstructureQuery& ScaffoldReactionSite::inactive(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.inactive)
  return inactive_.Get(index);
}
inline ::SubstructureSearch::SubstructureQuery* ScaffoldReactionSite::add_inactive() {
  // @@protoc_insertion_point(field_add:ReactionProto.ScaffoldReactionSite.inactive)
  return inactive_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SubstructureSearch::SubstructureQuery >&
ScaffoldReactionSite::inactive() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ScaffoldReactionSite.inactive)
  return inactive_;
}

// repeated int32 invert_chirality = 22;
inline int ScaffoldReactionSite::invert_chirality_size() const {
  return invert_chirality_.size();
}
inline void ScaffoldReactionSite::clear_invert_chirality() {
  invert_chirality_.Clear();
}
inline ::google::protobuf::int32 ScaffoldReactionSite::invert_chirality(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.invert_chirality)
  return invert_chirality_.Get(index);
}
inline void ScaffoldReactionSite::set_invert_chirality(int index, ::google::protobuf::int32 value) {
  invert_chirality_.Set(index, value);
  // @@protoc_insertion_point(field_set:ReactionProto.ScaffoldReactionSite.invert_chirality)
}
inline void ScaffoldReactionSite::add_invert_chirality(::google::protobuf::int32 value) {
  invert_chirality_.Add(value);
  // @@protoc_insertion_point(field_add:ReactionProto.ScaffoldReactionSite.invert_chirality)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ScaffoldReactionSite::invert_chirality() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ScaffoldReactionSite.invert_chirality)
  return invert_chirality_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ScaffoldReactionSite::mutable_invert_chirality() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ScaffoldReactionSite.invert_chirality)
  return &invert_chirality_;
}

// repeated int32 remove_chirality = 23;
inline int ScaffoldReactionSite::remove_chirality_size() const {
  return remove_chirality_.size();
}
inline void ScaffoldReactionSite::clear_remove_chirality() {
  remove_chirality_.Clear();
}
inline ::google::protobuf::int32 ScaffoldReactionSite::remove_chirality(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.remove_chirality)
  return remove_chirality_.Get(index);
}
inline void ScaffoldReactionSite::set_remove_chirality(int index, ::google::protobuf::int32 value) {
  remove_chirality_.Set(index, value);
  // @@protoc_insertion_point(field_set:ReactionProto.ScaffoldReactionSite.remove_chirality)
}
inline void ScaffoldReactionSite::add_remove_chirality(::google::protobuf::int32 value) {
  remove_chirality_.Add(value);
  // @@protoc_insertion_point(field_add:ReactionProto.ScaffoldReactionSite.remove_chirality)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ScaffoldReactionSite::remove_chirality() const {
  // @@protoc_insertion_point(field_list:ReactionProto.ScaffoldReactionSite.remove_chirality)
  return remove_chirality_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ScaffoldReactionSite::mutable_remove_chirality() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.ScaffoldReactionSite.remove_chirality)
  return &remove_chirality_;
}

// optional .ToggleKekuleForm.ToggleKekuleForm toggle_kekule_form = 24;
inline bool ScaffoldReactionSite::has_toggle_kekule_form() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScaffoldReactionSite::set_has_toggle_kekule_form() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScaffoldReactionSite::clear_has_toggle_kekule_form() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ToggleKekuleForm::ToggleKekuleForm& ScaffoldReactionSite::_internal_toggle_kekule_form() const {
  return *toggle_kekule_form_;
}
inline const ::ToggleKekuleForm::ToggleKekuleForm& ScaffoldReactionSite::toggle_kekule_form() const {
  const ::ToggleKekuleForm::ToggleKekuleForm* p = toggle_kekule_form_;
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.toggle_kekule_form)
  return p != NULL ? *p : *reinterpret_cast<const ::ToggleKekuleForm::ToggleKekuleForm*>(
      &::ToggleKekuleForm::_ToggleKekuleForm_default_instance_);
}
inline ::ToggleKekuleForm::ToggleKekuleForm* ScaffoldReactionSite::release_toggle_kekule_form() {
  // @@protoc_insertion_point(field_release:ReactionProto.ScaffoldReactionSite.toggle_kekule_form)
  clear_has_toggle_kekule_form();
  ::ToggleKekuleForm::ToggleKekuleForm* temp = toggle_kekule_form_;
  toggle_kekule_form_ = NULL;
  return temp;
}
inline ::ToggleKekuleForm::ToggleKekuleForm* ScaffoldReactionSite::mutable_toggle_kekule_form() {
  set_has_toggle_kekule_form();
  if (toggle_kekule_form_ == NULL) {
    auto* p = CreateMaybeMessage<::ToggleKekuleForm::ToggleKekuleForm>(GetArenaNoVirtual());
    toggle_kekule_form_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.ScaffoldReactionSite.toggle_kekule_form)
  return toggle_kekule_form_;
}
inline void ScaffoldReactionSite::set_allocated_toggle_kekule_form(::ToggleKekuleForm::ToggleKekuleForm* toggle_kekule_form) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(toggle_kekule_form_);
  }
  if (toggle_kekule_form) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      toggle_kekule_form = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, toggle_kekule_form, submessage_arena);
    }
    set_has_toggle_kekule_form();
  } else {
    clear_has_toggle_kekule_form();
  }
  toggle_kekule_form_ = toggle_kekule_form;
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.ScaffoldReactionSite.toggle_kekule_form)
}

// optional bool ignore_multiple_matches_involving_atoms_not_changing = 25;
inline bool ScaffoldReactionSite::has_ignore_multiple_matches_involving_atoms_not_changing() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ScaffoldReactionSite::set_has_ignore_multiple_matches_involving_atoms_not_changing() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ScaffoldReactionSite::clear_has_ignore_multiple_matches_involving_atoms_not_changing() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ScaffoldReactionSite::clear_ignore_multiple_matches_involving_atoms_not_changing() {
  ignore_multiple_matches_involving_atoms_not_changing_ = false;
  clear_has_ignore_multiple_matches_involving_atoms_not_changing();
}
inline bool ScaffoldReactionSite::ignore_multiple_matches_involving_atoms_not_changing() const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.ignore_multiple_matches_involving_atoms_not_changing)
  return ignore_multiple_matches_involving_atoms_not_changing_;
}
inline void ScaffoldReactionSite::set_ignore_multiple_matches_involving_atoms_not_changing(bool value) {
  set_has_ignore_multiple_matches_involving_atoms_not_changing();
  ignore_multiple_matches_involving_atoms_not_changing_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.ScaffoldReactionSite.ignore_multiple_matches_involving_atoms_not_changing)
}

// optional bool ignore_multiple_matches_involving_changing_atoms = 27;
inline bool ScaffoldReactionSite::has_ignore_multiple_matches_involving_changing_atoms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ScaffoldReactionSite::set_has_ignore_multiple_matches_involving_changing_atoms() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ScaffoldReactionSite::clear_has_ignore_multiple_matches_involving_changing_atoms() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ScaffoldReactionSite::clear_ignore_multiple_matches_involving_changing_atoms() {
  ignore_multiple_matches_involving_changing_atoms_ = false;
  clear_has_ignore_multiple_matches_involving_changing_atoms();
}
inline bool ScaffoldReactionSite::ignore_multiple_matches_involving_changing_atoms() const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.ignore_multiple_matches_involving_changing_atoms)
  return ignore_multiple_matches_involving_changing_atoms_;
}
inline void ScaffoldReactionSite::set_ignore_multiple_matches_involving_changing_atoms(bool value) {
  set_has_ignore_multiple_matches_involving_changing_atoms();
  ignore_multiple_matches_involving_changing_atoms_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.ScaffoldReactionSite.ignore_multiple_matches_involving_changing_atoms)
}

// optional bool noop_reaction = 28;
inline bool ScaffoldReactionSite::has_noop_reaction() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ScaffoldReactionSite::set_has_noop_reaction() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ScaffoldReactionSite::clear_has_noop_reaction() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ScaffoldReactionSite::clear_noop_reaction() {
  noop_reaction_ = false;
  clear_has_noop_reaction();
}
inline bool ScaffoldReactionSite::noop_reaction() const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.noop_reaction)
  return noop_reaction_;
}
inline void ScaffoldReactionSite::set_noop_reaction(bool value) {
  set_has_noop_reaction();
  noop_reaction_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.ScaffoldReactionSite.noop_reaction)
}

// optional string comment = 29;
inline bool ScaffoldReactionSite::has_comment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScaffoldReactionSite::set_has_comment() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScaffoldReactionSite::clear_has_comment() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScaffoldReactionSite::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment();
}
inline const ::std::string& ScaffoldReactionSite::comment() const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.comment)
  return comment_.GetNoArena();
}
inline void ScaffoldReactionSite::set_comment(const ::std::string& value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReactionProto.ScaffoldReactionSite.comment)
}
#if LANG_CXX11
inline void ScaffoldReactionSite::set_comment(::std::string&& value) {
  set_has_comment();
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReactionProto.ScaffoldReactionSite.comment)
}
#endif
inline void ScaffoldReactionSite::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReactionProto.ScaffoldReactionSite.comment)
}
inline void ScaffoldReactionSite::set_comment(const char* value, size_t size) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReactionProto.ScaffoldReactionSite.comment)
}
inline ::std::string* ScaffoldReactionSite::mutable_comment() {
  set_has_comment();
  // @@protoc_insertion_point(field_mutable:ReactionProto.ScaffoldReactionSite.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScaffoldReactionSite::release_comment() {
  // @@protoc_insertion_point(field_release:ReactionProto.ScaffoldReactionSite.comment)
  if (!has_comment()) {
    return NULL;
  }
  clear_has_comment();
  return comment_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScaffoldReactionSite::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.ScaffoldReactionSite.comment)
}

// optional string smarts = 30;
inline bool ScaffoldReactionSite::has_smarts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScaffoldReactionSite::set_has_smarts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScaffoldReactionSite::clear_has_smarts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScaffoldReactionSite::clear_smarts() {
  smarts_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smarts();
}
inline const ::std::string& ScaffoldReactionSite::smarts() const {
  // @@protoc_insertion_point(field_get:ReactionProto.ScaffoldReactionSite.smarts)
  return smarts_.GetNoArena();
}
inline void ScaffoldReactionSite::set_smarts(const ::std::string& value) {
  set_has_smarts();
  smarts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReactionProto.ScaffoldReactionSite.smarts)
}
#if LANG_CXX11
inline void ScaffoldReactionSite::set_smarts(::std::string&& value) {
  set_has_smarts();
  smarts_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReactionProto.ScaffoldReactionSite.smarts)
}
#endif
inline void ScaffoldReactionSite::set_smarts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smarts();
  smarts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReactionProto.ScaffoldReactionSite.smarts)
}
inline void ScaffoldReactionSite::set_smarts(const char* value, size_t size) {
  set_has_smarts();
  smarts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReactionProto.ScaffoldReactionSite.smarts)
}
inline ::std::string* ScaffoldReactionSite::mutable_smarts() {
  set_has_smarts();
  // @@protoc_insertion_point(field_mutable:ReactionProto.ScaffoldReactionSite.smarts)
  return smarts_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScaffoldReactionSite::release_smarts() {
  // @@protoc_insertion_point(field_release:ReactionProto.ScaffoldReactionSite.smarts)
  if (!has_smarts()) {
    return NULL;
  }
  clear_has_smarts();
  return smarts_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScaffoldReactionSite::set_allocated_smarts(::std::string* smarts) {
  if (smarts != NULL) {
    set_has_smarts();
  } else {
    clear_has_smarts();
  }
  smarts_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smarts);
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.ScaffoldReactionSite.smarts)
}

// -------------------------------------------------------------------

// SidechainReactionSite

// optional int32 id = 1;
inline bool SidechainReactionSite::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SidechainReactionSite::set_has_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SidechainReactionSite::clear_has_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SidechainReactionSite::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SidechainReactionSite::id() const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.id)
  return id_;
}
inline void SidechainReactionSite::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.SidechainReactionSite.id)
}

// optional .SubstructureSearch.SubstructureQuery query = 2;
inline bool SidechainReactionSite::has_query() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SidechainReactionSite::set_has_query() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SidechainReactionSite::clear_has_query() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::SubstructureSearch::SubstructureQuery& SidechainReactionSite::_internal_query() const {
  return *query_;
}
inline const ::SubstructureSearch::SubstructureQuery& SidechainReactionSite::query() const {
  const ::SubstructureSearch::SubstructureQuery* p = query_;
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.query)
  return p != NULL ? *p : *reinterpret_cast<const ::SubstructureSearch::SubstructureQuery*>(
      &::SubstructureSearch::_SubstructureQuery_default_instance_);
}
inline ::SubstructureSearch::SubstructureQuery* SidechainReactionSite::release_query() {
  // @@protoc_insertion_point(field_release:ReactionProto.SidechainReactionSite.query)
  clear_has_query();
  ::SubstructureSearch::SubstructureQuery* temp = query_;
  query_ = NULL;
  return temp;
}
inline ::SubstructureSearch::SubstructureQuery* SidechainReactionSite::mutable_query() {
  set_has_query();
  if (query_ == NULL) {
    auto* p = CreateMaybeMessage<::SubstructureSearch::SubstructureQuery>(GetArenaNoVirtual());
    query_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainReactionSite.query)
  return query_;
}
inline void SidechainReactionSite::set_allocated_query(::SubstructureSearch::SubstructureQuery* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(query_);
  }
  if (query) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
  } else {
    clear_has_query();
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.SidechainReactionSite.query)
}

// repeated .ReactionProto.BondToBeMade make_bond = 3;
inline int SidechainReactionSite::make_bond_size() const {
  return make_bond_.size();
}
inline void SidechainReactionSite::clear_make_bond() {
  make_bond_.Clear();
}
inline ::ReactionProto::BondToBeMade* SidechainReactionSite::mutable_make_bond(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainReactionSite.make_bond)
  return make_bond_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondToBeMade >*
SidechainReactionSite::mutable_make_bond() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.make_bond)
  return &make_bond_;
}
inline const ::ReactionProto::BondToBeMade& SidechainReactionSite::make_bond(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.make_bond)
  return make_bond_.Get(index);
}
inline ::ReactionProto::BondToBeMade* SidechainReactionSite::add_make_bond() {
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.make_bond)
  return make_bond_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondToBeMade >&
SidechainReactionSite::make_bond() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.make_bond)
  return make_bond_;
}

// repeated .ReactionProto.PairOfAtoms break_bond = 4;
inline int SidechainReactionSite::break_bond_size() const {
  return break_bond_.size();
}
inline void SidechainReactionSite::clear_break_bond() {
  break_bond_.Clear();
}
inline ::ReactionProto::PairOfAtoms* SidechainReactionSite::mutable_break_bond(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainReactionSite.break_bond)
  return break_bond_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::PairOfAtoms >*
SidechainReactionSite::mutable_break_bond() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.break_bond)
  return &break_bond_;
}
inline const ::ReactionProto::PairOfAtoms& SidechainReactionSite::break_bond(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.break_bond)
  return break_bond_.Get(index);
}
inline ::ReactionProto::PairOfAtoms* SidechainReactionSite::add_break_bond() {
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.break_bond)
  return break_bond_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::PairOfAtoms >&
SidechainReactionSite::break_bond() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.break_bond)
  return break_bond_;
}

// repeated int32 remove_atom = 5;
inline int SidechainReactionSite::remove_atom_size() const {
  return remove_atom_.size();
}
inline void SidechainReactionSite::clear_remove_atom() {
  remove_atom_.Clear();
}
inline ::google::protobuf::int32 SidechainReactionSite::remove_atom(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.remove_atom)
  return remove_atom_.Get(index);
}
inline void SidechainReactionSite::set_remove_atom(int index, ::google::protobuf::int32 value) {
  remove_atom_.Set(index, value);
  // @@protoc_insertion_point(field_set:ReactionProto.SidechainReactionSite.remove_atom)
}
inline void SidechainReactionSite::add_remove_atom(::google::protobuf::int32 value) {
  remove_atom_.Add(value);
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.remove_atom)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SidechainReactionSite::remove_atom() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.remove_atom)
  return remove_atom_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SidechainReactionSite::mutable_remove_atom() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.remove_atom)
  return &remove_atom_;
}

// repeated int32 remove_fragment = 6;
inline int SidechainReactionSite::remove_fragment_size() const {
  return remove_fragment_.size();
}
inline void SidechainReactionSite::clear_remove_fragment() {
  remove_fragment_.Clear();
}
inline ::google::protobuf::int32 SidechainReactionSite::remove_fragment(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.remove_fragment)
  return remove_fragment_.Get(index);
}
inline void SidechainReactionSite::set_remove_fragment(int index, ::google::protobuf::int32 value) {
  remove_fragment_.Set(index, value);
  // @@protoc_insertion_point(field_set:ReactionProto.SidechainReactionSite.remove_fragment)
}
inline void SidechainReactionSite::add_remove_fragment(::google::protobuf::int32 value) {
  remove_fragment_.Add(value);
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.remove_fragment)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SidechainReactionSite::remove_fragment() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.remove_fragment)
  return remove_fragment_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SidechainReactionSite::mutable_remove_fragment() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.remove_fragment)
  return &remove_fragment_;
}

// repeated int32 keep_fragment = 7;
inline int SidechainReactionSite::keep_fragment_size() const {
  return keep_fragment_.size();
}
inline void SidechainReactionSite::clear_keep_fragment() {
  keep_fragment_.Clear();
}
inline ::google::protobuf::int32 SidechainReactionSite::keep_fragment(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.keep_fragment)
  return keep_fragment_.Get(index);
}
inline void SidechainReactionSite::set_keep_fragment(int index, ::google::protobuf::int32 value) {
  keep_fragment_.Set(index, value);
  // @@protoc_insertion_point(field_set:ReactionProto.SidechainReactionSite.keep_fragment)
}
inline void SidechainReactionSite::add_keep_fragment(::google::protobuf::int32 value) {
  keep_fragment_.Add(value);
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.keep_fragment)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SidechainReactionSite::keep_fragment() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.keep_fragment)
  return keep_fragment_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SidechainReactionSite::mutable_keep_fragment() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.keep_fragment)
  return &keep_fragment_;
}

// repeated .ReactionProto.ChangeElement change_element = 8;
inline int SidechainReactionSite::change_element_size() const {
  return change_element_.size();
}
inline void SidechainReactionSite::clear_change_element() {
  change_element_.Clear();
}
inline ::ReactionProto::ChangeElement* SidechainReactionSite::mutable_change_element(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainReactionSite.change_element)
  return change_element_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeElement >*
SidechainReactionSite::mutable_change_element() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.change_element)
  return &change_element_;
}
inline const ::ReactionProto::ChangeElement& SidechainReactionSite::change_element(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.change_element)
  return change_element_.Get(index);
}
inline ::ReactionProto::ChangeElement* SidechainReactionSite::add_change_element() {
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.change_element)
  return change_element_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeElement >&
SidechainReactionSite::change_element() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.change_element)
  return change_element_;
}

// repeated .ReactionProto.FormalCharge formal_charge = 9;
inline int SidechainReactionSite::formal_charge_size() const {
  return formal_charge_.size();
}
inline void SidechainReactionSite::clear_formal_charge() {
  formal_charge_.Clear();
}
inline ::ReactionProto::FormalCharge* SidechainReactionSite::mutable_formal_charge(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainReactionSite.formal_charge)
  return formal_charge_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::FormalCharge >*
SidechainReactionSite::mutable_formal_charge() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.formal_charge)
  return &formal_charge_;
}
inline const ::ReactionProto::FormalCharge& SidechainReactionSite::formal_charge(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.formal_charge)
  return formal_charge_.Get(index);
}
inline ::ReactionProto::FormalCharge* SidechainReactionSite::add_formal_charge() {
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.formal_charge)
  return formal_charge_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::FormalCharge >&
SidechainReactionSite::formal_charge() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.formal_charge)
  return formal_charge_;
}

// repeated .ReactionProto.ChangeFormalCharge change_formal_charge = 10;
inline int SidechainReactionSite::change_formal_charge_size() const {
  return change_formal_charge_.size();
}
inline void SidechainReactionSite::clear_change_formal_charge() {
  change_formal_charge_.Clear();
}
inline ::ReactionProto::ChangeFormalCharge* SidechainReactionSite::mutable_change_formal_charge(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainReactionSite.change_formal_charge)
  return change_formal_charge_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeFormalCharge >*
SidechainReactionSite::mutable_change_formal_charge() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.change_formal_charge)
  return &change_formal_charge_;
}
inline const ::ReactionProto::ChangeFormalCharge& SidechainReactionSite::change_formal_charge(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.change_formal_charge)
  return change_formal_charge_.Get(index);
}
inline ::ReactionProto::ChangeFormalCharge* SidechainReactionSite::add_change_formal_charge() {
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.change_formal_charge)
  return change_formal_charge_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ChangeFormalCharge >&
SidechainReactionSite::change_formal_charge() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.change_formal_charge)
  return change_formal_charge_;
}

// repeated .ReactionProto.PlaceIsotope isotope = 11;
inline int SidechainReactionSite::isotope_size() const {
  return isotope_.size();
}
inline void SidechainReactionSite::clear_isotope() {
  isotope_.Clear();
}
inline ::ReactionProto::PlaceIsotope* SidechainReactionSite::mutable_isotope(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainReactionSite.isotope)
  return isotope_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >*
SidechainReactionSite::mutable_isotope() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.isotope)
  return &isotope_;
}
inline const ::ReactionProto::PlaceIsotope& SidechainReactionSite::isotope(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.isotope)
  return isotope_.Get(index);
}
inline ::ReactionProto::PlaceIsotope* SidechainReactionSite::add_isotope() {
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.isotope)
  return isotope_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >&
SidechainReactionSite::isotope() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.isotope)
  return isotope_;
}

// repeated .ReactionProto.IncrementIsotope change_isotope = 12;
inline int SidechainReactionSite::change_isotope_size() const {
  return change_isotope_.size();
}
inline void SidechainReactionSite::clear_change_isotope() {
  change_isotope_.Clear();
}
inline ::ReactionProto::IncrementIsotope* SidechainReactionSite::mutable_change_isotope(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainReactionSite.change_isotope)
  return change_isotope_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::IncrementIsotope >*
SidechainReactionSite::mutable_change_isotope() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.change_isotope)
  return &change_isotope_;
}
inline const ::ReactionProto::IncrementIsotope& SidechainReactionSite::change_isotope(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.change_isotope)
  return change_isotope_.Get(index);
}
inline ::ReactionProto::IncrementIsotope* SidechainReactionSite::add_change_isotope() {
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.change_isotope)
  return change_isotope_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::IncrementIsotope >&
SidechainReactionSite::change_isotope() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.change_isotope)
  return change_isotope_;
}

// repeated .ReactionProto.PlaceIsotope invert_isotope = 13;
inline int SidechainReactionSite::invert_isotope_size() const {
  return invert_isotope_.size();
}
inline void SidechainReactionSite::clear_invert_isotope() {
  invert_isotope_.Clear();
}
inline ::ReactionProto::PlaceIsotope* SidechainReactionSite::mutable_invert_isotope(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainReactionSite.invert_isotope)
  return invert_isotope_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >*
SidechainReactionSite::mutable_invert_isotope() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.invert_isotope)
  return &invert_isotope_;
}
inline const ::ReactionProto::PlaceIsotope& SidechainReactionSite::invert_isotope(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.invert_isotope)
  return invert_isotope_.Get(index);
}
inline ::ReactionProto::PlaceIsotope* SidechainReactionSite::add_invert_isotope() {
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.invert_isotope)
  return invert_isotope_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::PlaceIsotope >&
SidechainReactionSite::invert_isotope() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.invert_isotope)
  return invert_isotope_;
}

// repeated .ReactionProto.BondLength bond_length = 14;
inline int SidechainReactionSite::bond_length_size() const {
  return bond_length_.size();
}
inline void SidechainReactionSite::clear_bond_length() {
  bond_length_.Clear();
}
inline ::ReactionProto::BondLength* SidechainReactionSite::mutable_bond_length(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainReactionSite.bond_length)
  return bond_length_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondLength >*
SidechainReactionSite::mutable_bond_length() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.bond_length)
  return &bond_length_;
}
inline const ::ReactionProto::BondLength& SidechainReactionSite::bond_length(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.bond_length)
  return bond_length_.Get(index);
}
inline ::ReactionProto::BondLength* SidechainReactionSite::add_bond_length() {
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.bond_length)
  return bond_length_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondLength >&
SidechainReactionSite::bond_length() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.bond_length)
  return bond_length_;
}

// repeated .ReactionProto.BondAngle bond_angle = 15;
inline int SidechainReactionSite::bond_angle_size() const {
  return bond_angle_.size();
}
inline void SidechainReactionSite::clear_bond_angle() {
  bond_angle_.Clear();
}
inline ::ReactionProto::BondAngle* SidechainReactionSite::mutable_bond_angle(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainReactionSite.bond_angle)
  return bond_angle_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondAngle >*
SidechainReactionSite::mutable_bond_angle() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.bond_angle)
  return &bond_angle_;
}
inline const ::ReactionProto::BondAngle& SidechainReactionSite::bond_angle(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.bond_angle)
  return bond_angle_.Get(index);
}
inline ::ReactionProto::BondAngle* SidechainReactionSite::add_bond_angle() {
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.bond_angle)
  return bond_angle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::BondAngle >&
SidechainReactionSite::bond_angle() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.bond_angle)
  return bond_angle_;
}

// repeated .ReactionProto.DihedralAngle dihedral_angle = 16;
inline int SidechainReactionSite::dihedral_angle_size() const {
  return dihedral_angle_.size();
}
inline void SidechainReactionSite::clear_dihedral_angle() {
  dihedral_angle_.Clear();
}
inline ::ReactionProto::DihedralAngle* SidechainReactionSite::mutable_dihedral_angle(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainReactionSite.dihedral_angle)
  return dihedral_angle_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::DihedralAngle >*
SidechainReactionSite::mutable_dihedral_angle() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.dihedral_angle)
  return &dihedral_angle_;
}
inline const ::ReactionProto::DihedralAngle& SidechainReactionSite::dihedral_angle(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.dihedral_angle)
  return dihedral_angle_.Get(index);
}
inline ::ReactionProto::DihedralAngle* SidechainReactionSite::add_dihedral_angle() {
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.dihedral_angle)
  return dihedral_angle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::DihedralAngle >&
SidechainReactionSite::dihedral_angle() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.dihedral_angle)
  return dihedral_angle_;
}

// repeated .ReactionProto.ThreeDReplace reaction_3d_replace = 17;
inline int SidechainReactionSite::reaction_3d_replace_size() const {
  return reaction_3d_replace_.size();
}
inline void SidechainReactionSite::clear_reaction_3d_replace() {
  reaction_3d_replace_.Clear();
}
inline ::ReactionProto::ThreeDReplace* SidechainReactionSite::mutable_reaction_3d_replace(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainReactionSite.reaction_3d_replace)
  return reaction_3d_replace_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::ThreeDReplace >*
SidechainReactionSite::mutable_reaction_3d_replace() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.reaction_3d_replace)
  return &reaction_3d_replace_;
}
inline const ::ReactionProto::ThreeDReplace& SidechainReactionSite::reaction_3d_replace(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.reaction_3d_replace)
  return reaction_3d_replace_.Get(index);
}
inline ::ReactionProto::ThreeDReplace* SidechainReactionSite::add_reaction_3d_replace() {
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.reaction_3d_replace)
  return reaction_3d_replace_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ThreeDReplace >&
SidechainReactionSite::reaction_3d_replace() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.reaction_3d_replace)
  return reaction_3d_replace_;
}

// repeated .ReactionProto.WedgeBond wedge_bonds = 18;
inline int SidechainReactionSite::wedge_bonds_size() const {
  return wedge_bonds_.size();
}
inline void SidechainReactionSite::clear_wedge_bonds() {
  wedge_bonds_.Clear();
}
inline ::ReactionProto::WedgeBond* SidechainReactionSite::mutable_wedge_bonds(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainReactionSite.wedge_bonds)
  return wedge_bonds_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::WedgeBond >*
SidechainReactionSite::mutable_wedge_bonds() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.wedge_bonds)
  return &wedge_bonds_;
}
inline const ::ReactionProto::WedgeBond& SidechainReactionSite::wedge_bonds(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.wedge_bonds)
  return wedge_bonds_.Get(index);
}
inline ::ReactionProto::WedgeBond* SidechainReactionSite::add_wedge_bonds() {
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.wedge_bonds)
  return wedge_bonds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::WedgeBond >&
SidechainReactionSite::wedge_bonds() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.wedge_bonds)
  return wedge_bonds_;
}

// repeated .ReactionProto.ReplaceAtom replace_atom = 19;
inline int SidechainReactionSite::replace_atom_size() const {
  return replace_atom_.size();
}
inline void SidechainReactionSite::clear_replace_atom() {
  replace_atom_.Clear();
}
inline ::ReactionProto::ReplaceAtom* SidechainReactionSite::mutable_replace_atom(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainReactionSite.replace_atom)
  return replace_atom_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::ReplaceAtom >*
SidechainReactionSite::mutable_replace_atom() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.replace_atom)
  return &replace_atom_;
}
inline const ::ReactionProto::ReplaceAtom& SidechainReactionSite::replace_atom(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.replace_atom)
  return replace_atom_.Get(index);
}
inline ::ReactionProto::ReplaceAtom* SidechainReactionSite::add_replace_atom() {
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.replace_atom)
  return replace_atom_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::ReplaceAtom >&
SidechainReactionSite::replace_atom() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.replace_atom)
  return replace_atom_;
}

// repeated int32 unfix_implicit_hydrogens = 20;
inline int SidechainReactionSite::unfix_implicit_hydrogens_size() const {
  return unfix_implicit_hydrogens_.size();
}
inline void SidechainReactionSite::clear_unfix_implicit_hydrogens() {
  unfix_implicit_hydrogens_.Clear();
}
inline ::google::protobuf::int32 SidechainReactionSite::unfix_implicit_hydrogens(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.unfix_implicit_hydrogens)
  return unfix_implicit_hydrogens_.Get(index);
}
inline void SidechainReactionSite::set_unfix_implicit_hydrogens(int index, ::google::protobuf::int32 value) {
  unfix_implicit_hydrogens_.Set(index, value);
  // @@protoc_insertion_point(field_set:ReactionProto.SidechainReactionSite.unfix_implicit_hydrogens)
}
inline void SidechainReactionSite::add_unfix_implicit_hydrogens(::google::protobuf::int32 value) {
  unfix_implicit_hydrogens_.Add(value);
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.unfix_implicit_hydrogens)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SidechainReactionSite::unfix_implicit_hydrogens() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.unfix_implicit_hydrogens)
  return unfix_implicit_hydrogens_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SidechainReactionSite::mutable_unfix_implicit_hydrogens() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.unfix_implicit_hydrogens)
  return &unfix_implicit_hydrogens_;
}

// repeated .SubstructureSearch.SubstructureQuery inactive = 21;
inline int SidechainReactionSite::inactive_size() const {
  return inactive_.size();
}
inline ::SubstructureSearch::SubstructureQuery* SidechainReactionSite::mutable_inactive(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainReactionSite.inactive)
  return inactive_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::SubstructureSearch::SubstructureQuery >*
SidechainReactionSite::mutable_inactive() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.inactive)
  return &inactive_;
}
inline const ::SubstructureSearch::SubstructureQuery& SidechainReactionSite::inactive(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.inactive)
  return inactive_.Get(index);
}
inline ::SubstructureSearch::SubstructureQuery* SidechainReactionSite::add_inactive() {
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.inactive)
  return inactive_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SubstructureSearch::SubstructureQuery >&
SidechainReactionSite::inactive() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.inactive)
  return inactive_;
}

// repeated int32 invert_chirality = 22;
inline int SidechainReactionSite::invert_chirality_size() const {
  return invert_chirality_.size();
}
inline void SidechainReactionSite::clear_invert_chirality() {
  invert_chirality_.Clear();
}
inline ::google::protobuf::int32 SidechainReactionSite::invert_chirality(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.invert_chirality)
  return invert_chirality_.Get(index);
}
inline void SidechainReactionSite::set_invert_chirality(int index, ::google::protobuf::int32 value) {
  invert_chirality_.Set(index, value);
  // @@protoc_insertion_point(field_set:ReactionProto.SidechainReactionSite.invert_chirality)
}
inline void SidechainReactionSite::add_invert_chirality(::google::protobuf::int32 value) {
  invert_chirality_.Add(value);
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.invert_chirality)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SidechainReactionSite::invert_chirality() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.invert_chirality)
  return invert_chirality_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SidechainReactionSite::mutable_invert_chirality() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.invert_chirality)
  return &invert_chirality_;
}

// repeated int32 remove_chirality = 23;
inline int SidechainReactionSite::remove_chirality_size() const {
  return remove_chirality_.size();
}
inline void SidechainReactionSite::clear_remove_chirality() {
  remove_chirality_.Clear();
}
inline ::google::protobuf::int32 SidechainReactionSite::remove_chirality(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.remove_chirality)
  return remove_chirality_.Get(index);
}
inline void SidechainReactionSite::set_remove_chirality(int index, ::google::protobuf::int32 value) {
  remove_chirality_.Set(index, value);
  // @@protoc_insertion_point(field_set:ReactionProto.SidechainReactionSite.remove_chirality)
}
inline void SidechainReactionSite::add_remove_chirality(::google::protobuf::int32 value) {
  remove_chirality_.Add(value);
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.remove_chirality)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SidechainReactionSite::remove_chirality() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.remove_chirality)
  return remove_chirality_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SidechainReactionSite::mutable_remove_chirality() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.remove_chirality)
  return &remove_chirality_;
}

// optional .ToggleKekuleForm.ToggleKekuleForm toggle_kekule_form = 24;
inline bool SidechainReactionSite::has_toggle_kekule_form() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SidechainReactionSite::set_has_toggle_kekule_form() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SidechainReactionSite::clear_has_toggle_kekule_form() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ToggleKekuleForm::ToggleKekuleForm& SidechainReactionSite::_internal_toggle_kekule_form() const {
  return *toggle_kekule_form_;
}
inline const ::ToggleKekuleForm::ToggleKekuleForm& SidechainReactionSite::toggle_kekule_form() const {
  const ::ToggleKekuleForm::ToggleKekuleForm* p = toggle_kekule_form_;
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.toggle_kekule_form)
  return p != NULL ? *p : *reinterpret_cast<const ::ToggleKekuleForm::ToggleKekuleForm*>(
      &::ToggleKekuleForm::_ToggleKekuleForm_default_instance_);
}
inline ::ToggleKekuleForm::ToggleKekuleForm* SidechainReactionSite::release_toggle_kekule_form() {
  // @@protoc_insertion_point(field_release:ReactionProto.SidechainReactionSite.toggle_kekule_form)
  clear_has_toggle_kekule_form();
  ::ToggleKekuleForm::ToggleKekuleForm* temp = toggle_kekule_form_;
  toggle_kekule_form_ = NULL;
  return temp;
}
inline ::ToggleKekuleForm::ToggleKekuleForm* SidechainReactionSite::mutable_toggle_kekule_form() {
  set_has_toggle_kekule_form();
  if (toggle_kekule_form_ == NULL) {
    auto* p = CreateMaybeMessage<::ToggleKekuleForm::ToggleKekuleForm>(GetArenaNoVirtual());
    toggle_kekule_form_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainReactionSite.toggle_kekule_form)
  return toggle_kekule_form_;
}
inline void SidechainReactionSite::set_allocated_toggle_kekule_form(::ToggleKekuleForm::ToggleKekuleForm* toggle_kekule_form) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(toggle_kekule_form_);
  }
  if (toggle_kekule_form) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      toggle_kekule_form = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, toggle_kekule_form, submessage_arena);
    }
    set_has_toggle_kekule_form();
  } else {
    clear_has_toggle_kekule_form();
  }
  toggle_kekule_form_ = toggle_kekule_form;
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.SidechainReactionSite.toggle_kekule_form)
}

// optional bool ignore_multiple_matches_involving_atoms_not_changing = 25;
inline bool SidechainReactionSite::has_ignore_multiple_matches_involving_atoms_not_changing() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SidechainReactionSite::set_has_ignore_multiple_matches_involving_atoms_not_changing() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SidechainReactionSite::clear_has_ignore_multiple_matches_involving_atoms_not_changing() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SidechainReactionSite::clear_ignore_multiple_matches_involving_atoms_not_changing() {
  ignore_multiple_matches_involving_atoms_not_changing_ = false;
  clear_has_ignore_multiple_matches_involving_atoms_not_changing();
}
inline bool SidechainReactionSite::ignore_multiple_matches_involving_atoms_not_changing() const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.ignore_multiple_matches_involving_atoms_not_changing)
  return ignore_multiple_matches_involving_atoms_not_changing_;
}
inline void SidechainReactionSite::set_ignore_multiple_matches_involving_atoms_not_changing(bool value) {
  set_has_ignore_multiple_matches_involving_atoms_not_changing();
  ignore_multiple_matches_involving_atoms_not_changing_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.SidechainReactionSite.ignore_multiple_matches_involving_atoms_not_changing)
}

// optional bool ignore_multiple_matches_involving_changing_atoms = 27;
inline bool SidechainReactionSite::has_ignore_multiple_matches_involving_changing_atoms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SidechainReactionSite::set_has_ignore_multiple_matches_involving_changing_atoms() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SidechainReactionSite::clear_has_ignore_multiple_matches_involving_changing_atoms() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SidechainReactionSite::clear_ignore_multiple_matches_involving_changing_atoms() {
  ignore_multiple_matches_involving_changing_atoms_ = false;
  clear_has_ignore_multiple_matches_involving_changing_atoms();
}
inline bool SidechainReactionSite::ignore_multiple_matches_involving_changing_atoms() const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.ignore_multiple_matches_involving_changing_atoms)
  return ignore_multiple_matches_involving_changing_atoms_;
}
inline void SidechainReactionSite::set_ignore_multiple_matches_involving_changing_atoms(bool value) {
  set_has_ignore_multiple_matches_involving_changing_atoms();
  ignore_multiple_matches_involving_changing_atoms_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.SidechainReactionSite.ignore_multiple_matches_involving_changing_atoms)
}

// optional bool noop_reaction = 28;
inline bool SidechainReactionSite::has_noop_reaction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SidechainReactionSite::set_has_noop_reaction() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SidechainReactionSite::clear_has_noop_reaction() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SidechainReactionSite::clear_noop_reaction() {
  noop_reaction_ = false;
  clear_has_noop_reaction();
}
inline bool SidechainReactionSite::noop_reaction() const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.noop_reaction)
  return noop_reaction_;
}
inline void SidechainReactionSite::set_noop_reaction(bool value) {
  set_has_noop_reaction();
  noop_reaction_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.SidechainReactionSite.noop_reaction)
}

// optional string comment = 29;
inline bool SidechainReactionSite::has_comment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SidechainReactionSite::set_has_comment() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SidechainReactionSite::clear_has_comment() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SidechainReactionSite::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment();
}
inline const ::std::string& SidechainReactionSite::comment() const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.comment)
  return comment_.GetNoArena();
}
inline void SidechainReactionSite::set_comment(const ::std::string& value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReactionProto.SidechainReactionSite.comment)
}
#if LANG_CXX11
inline void SidechainReactionSite::set_comment(::std::string&& value) {
  set_has_comment();
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReactionProto.SidechainReactionSite.comment)
}
#endif
inline void SidechainReactionSite::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReactionProto.SidechainReactionSite.comment)
}
inline void SidechainReactionSite::set_comment(const char* value, size_t size) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReactionProto.SidechainReactionSite.comment)
}
inline ::std::string* SidechainReactionSite::mutable_comment() {
  set_has_comment();
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainReactionSite.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SidechainReactionSite::release_comment() {
  // @@protoc_insertion_point(field_release:ReactionProto.SidechainReactionSite.comment)
  if (!has_comment()) {
    return NULL;
  }
  clear_has_comment();
  return comment_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SidechainReactionSite::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.SidechainReactionSite.comment)
}

// optional string smarts = 30;
inline bool SidechainReactionSite::has_smarts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SidechainReactionSite::set_has_smarts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SidechainReactionSite::clear_has_smarts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SidechainReactionSite::clear_smarts() {
  smarts_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smarts();
}
inline const ::std::string& SidechainReactionSite::smarts() const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.smarts)
  return smarts_.GetNoArena();
}
inline void SidechainReactionSite::set_smarts(const ::std::string& value) {
  set_has_smarts();
  smarts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReactionProto.SidechainReactionSite.smarts)
}
#if LANG_CXX11
inline void SidechainReactionSite::set_smarts(::std::string&& value) {
  set_has_smarts();
  smarts_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReactionProto.SidechainReactionSite.smarts)
}
#endif
inline void SidechainReactionSite::set_smarts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smarts();
  smarts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReactionProto.SidechainReactionSite.smarts)
}
inline void SidechainReactionSite::set_smarts(const char* value, size_t size) {
  set_has_smarts();
  smarts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReactionProto.SidechainReactionSite.smarts)
}
inline ::std::string* SidechainReactionSite::mutable_smarts() {
  set_has_smarts();
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainReactionSite.smarts)
  return smarts_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SidechainReactionSite::release_smarts() {
  // @@protoc_insertion_point(field_release:ReactionProto.SidechainReactionSite.smarts)
  if (!has_smarts()) {
    return NULL;
  }
  clear_has_smarts();
  return smarts_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SidechainReactionSite::set_allocated_smarts(::std::string* smarts) {
  if (smarts != NULL) {
    set_has_smarts();
  } else {
    clear_has_smarts();
  }
  smarts_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smarts);
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.SidechainReactionSite.smarts)
}

// repeated string reagent = 40;
inline int SidechainReactionSite::reagent_size() const {
  return reagent_.size();
}
inline void SidechainReactionSite::clear_reagent() {
  reagent_.Clear();
}
inline const ::std::string& SidechainReactionSite::reagent(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.reagent)
  return reagent_.Get(index);
}
inline ::std::string* SidechainReactionSite::mutable_reagent(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainReactionSite.reagent)
  return reagent_.Mutable(index);
}
inline void SidechainReactionSite::set_reagent(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ReactionProto.SidechainReactionSite.reagent)
  reagent_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SidechainReactionSite::set_reagent(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ReactionProto.SidechainReactionSite.reagent)
  reagent_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SidechainReactionSite::set_reagent(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  reagent_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ReactionProto.SidechainReactionSite.reagent)
}
inline void SidechainReactionSite::set_reagent(int index, const char* value, size_t size) {
  reagent_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ReactionProto.SidechainReactionSite.reagent)
}
inline ::std::string* SidechainReactionSite::add_reagent() {
  // @@protoc_insertion_point(field_add_mutable:ReactionProto.SidechainReactionSite.reagent)
  return reagent_.Add();
}
inline void SidechainReactionSite::add_reagent(const ::std::string& value) {
  reagent_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.reagent)
}
#if LANG_CXX11
inline void SidechainReactionSite::add_reagent(::std::string&& value) {
  reagent_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.reagent)
}
#endif
inline void SidechainReactionSite::add_reagent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  reagent_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ReactionProto.SidechainReactionSite.reagent)
}
inline void SidechainReactionSite::add_reagent(const char* value, size_t size) {
  reagent_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ReactionProto.SidechainReactionSite.reagent)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SidechainReactionSite::reagent() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.reagent)
  return reagent_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SidechainReactionSite::mutable_reagent() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.reagent)
  return &reagent_;
}

// repeated .ReactionProto.InterParticleBond join = 41;
inline int SidechainReactionSite::join_size() const {
  return join_.size();
}
inline void SidechainReactionSite::clear_join() {
  join_.Clear();
}
inline ::ReactionProto::InterParticleBond* SidechainReactionSite::mutable_join(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainReactionSite.join)
  return join_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::InterParticleBond >*
SidechainReactionSite::mutable_join() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.join)
  return &join_;
}
inline const ::ReactionProto::InterParticleBond& SidechainReactionSite::join(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.join)
  return join_.Get(index);
}
inline ::ReactionProto::InterParticleBond* SidechainReactionSite::add_join() {
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.join)
  return join_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::InterParticleBond >&
SidechainReactionSite::join() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.join)
  return join_;
}

// repeated .ReactionProto.NoReaction no_reaction = 42;
inline int SidechainReactionSite::no_reaction_size() const {
  return no_reaction_.size();
}
inline void SidechainReactionSite::clear_no_reaction() {
  no_reaction_.Clear();
}
inline ::ReactionProto::NoReaction* SidechainReactionSite::mutable_no_reaction(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainReactionSite.no_reaction)
  return no_reaction_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::NoReaction >*
SidechainReactionSite::mutable_no_reaction() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.SidechainReactionSite.no_reaction)
  return &no_reaction_;
}
inline const ::ReactionProto::NoReaction& SidechainReactionSite::no_reaction(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.no_reaction)
  return no_reaction_.Get(index);
}
inline ::ReactionProto::NoReaction* SidechainReactionSite::add_no_reaction() {
  // @@protoc_insertion_point(field_add:ReactionProto.SidechainReactionSite.no_reaction)
  return no_reaction_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::NoReaction >&
SidechainReactionSite::no_reaction() const {
  // @@protoc_insertion_point(field_list:ReactionProto.SidechainReactionSite.no_reaction)
  return no_reaction_;
}

// optional bool make_implicit_hydrogens_explicit = 43;
inline bool SidechainReactionSite::has_make_implicit_hydrogens_explicit() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SidechainReactionSite::set_has_make_implicit_hydrogens_explicit() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SidechainReactionSite::clear_has_make_implicit_hydrogens_explicit() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SidechainReactionSite::clear_make_implicit_hydrogens_explicit() {
  make_implicit_hydrogens_explicit_ = false;
  clear_has_make_implicit_hydrogens_explicit();
}
inline bool SidechainReactionSite::make_implicit_hydrogens_explicit() const {
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.make_implicit_hydrogens_explicit)
  return make_implicit_hydrogens_explicit_;
}
inline void SidechainReactionSite::set_make_implicit_hydrogens_explicit(bool value) {
  set_has_make_implicit_hydrogens_explicit();
  make_implicit_hydrogens_explicit_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.SidechainReactionSite.make_implicit_hydrogens_explicit)
}

// optional .ReactionProto.SidechainMatchConditions match_conditions = 44;
inline bool SidechainReactionSite::has_match_conditions() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SidechainReactionSite::set_has_match_conditions() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SidechainReactionSite::clear_has_match_conditions() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SidechainReactionSite::clear_match_conditions() {
  if (match_conditions_ != NULL) match_conditions_->Clear();
  clear_has_match_conditions();
}
inline const ::ReactionProto::SidechainMatchConditions& SidechainReactionSite::_internal_match_conditions() const {
  return *match_conditions_;
}
inline const ::ReactionProto::SidechainMatchConditions& SidechainReactionSite::match_conditions() const {
  const ::ReactionProto::SidechainMatchConditions* p = match_conditions_;
  // @@protoc_insertion_point(field_get:ReactionProto.SidechainReactionSite.match_conditions)
  return p != NULL ? *p : *reinterpret_cast<const ::ReactionProto::SidechainMatchConditions*>(
      &::ReactionProto::_SidechainMatchConditions_default_instance_);
}
inline ::ReactionProto::SidechainMatchConditions* SidechainReactionSite::release_match_conditions() {
  // @@protoc_insertion_point(field_release:ReactionProto.SidechainReactionSite.match_conditions)
  clear_has_match_conditions();
  ::ReactionProto::SidechainMatchConditions* temp = match_conditions_;
  match_conditions_ = NULL;
  return temp;
}
inline ::ReactionProto::SidechainMatchConditions* SidechainReactionSite::mutable_match_conditions() {
  set_has_match_conditions();
  if (match_conditions_ == NULL) {
    auto* p = CreateMaybeMessage<::ReactionProto::SidechainMatchConditions>(GetArenaNoVirtual());
    match_conditions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.SidechainReactionSite.match_conditions)
  return match_conditions_;
}
inline void SidechainReactionSite::set_allocated_match_conditions(::ReactionProto::SidechainMatchConditions* match_conditions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete match_conditions_;
  }
  if (match_conditions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      match_conditions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, match_conditions, submessage_arena);
    }
    set_has_match_conditions();
  } else {
    clear_has_match_conditions();
  }
  match_conditions_ = match_conditions;
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.SidechainReactionSite.match_conditions)
}

// -------------------------------------------------------------------

// Reaction

// optional string comment = 1;
inline bool Reaction::has_comment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Reaction::set_has_comment() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Reaction::clear_has_comment() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Reaction::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment();
}
inline const ::std::string& Reaction::comment() const {
  // @@protoc_insertion_point(field_get:ReactionProto.Reaction.comment)
  return comment_.GetNoArena();
}
inline void Reaction::set_comment(const ::std::string& value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReactionProto.Reaction.comment)
}
#if LANG_CXX11
inline void Reaction::set_comment(::std::string&& value) {
  set_has_comment();
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReactionProto.Reaction.comment)
}
#endif
inline void Reaction::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReactionProto.Reaction.comment)
}
inline void Reaction::set_comment(const char* value, size_t size) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReactionProto.Reaction.comment)
}
inline ::std::string* Reaction::mutable_comment() {
  set_has_comment();
  // @@protoc_insertion_point(field_mutable:ReactionProto.Reaction.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Reaction::release_comment() {
  // @@protoc_insertion_point(field_release:ReactionProto.Reaction.comment)
  if (!has_comment()) {
    return NULL;
  }
  clear_has_comment();
  return comment_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Reaction::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.Reaction.comment)
}

// optional .ReactionProto.ScaffoldReactionSite scaffold = 2;
inline bool Reaction::has_scaffold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Reaction::set_has_scaffold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Reaction::clear_has_scaffold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Reaction::clear_scaffold() {
  if (scaffold_ != NULL) scaffold_->Clear();
  clear_has_scaffold();
}
inline const ::ReactionProto::ScaffoldReactionSite& Reaction::_internal_scaffold() const {
  return *scaffold_;
}
inline const ::ReactionProto::ScaffoldReactionSite& Reaction::scaffold() const {
  const ::ReactionProto::ScaffoldReactionSite* p = scaffold_;
  // @@protoc_insertion_point(field_get:ReactionProto.Reaction.scaffold)
  return p != NULL ? *p : *reinterpret_cast<const ::ReactionProto::ScaffoldReactionSite*>(
      &::ReactionProto::_ScaffoldReactionSite_default_instance_);
}
inline ::ReactionProto::ScaffoldReactionSite* Reaction::release_scaffold() {
  // @@protoc_insertion_point(field_release:ReactionProto.Reaction.scaffold)
  clear_has_scaffold();
  ::ReactionProto::ScaffoldReactionSite* temp = scaffold_;
  scaffold_ = NULL;
  return temp;
}
inline ::ReactionProto::ScaffoldReactionSite* Reaction::mutable_scaffold() {
  set_has_scaffold();
  if (scaffold_ == NULL) {
    auto* p = CreateMaybeMessage<::ReactionProto::ScaffoldReactionSite>(GetArenaNoVirtual());
    scaffold_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.Reaction.scaffold)
  return scaffold_;
}
inline void Reaction::set_allocated_scaffold(::ReactionProto::ScaffoldReactionSite* scaffold) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scaffold_;
  }
  if (scaffold) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scaffold = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scaffold, submessage_arena);
    }
    set_has_scaffold();
  } else {
    clear_has_scaffold();
  }
  scaffold_ = scaffold;
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.Reaction.scaffold)
}

// repeated .ReactionProto.SidechainReactionSite sidechain = 3;
inline int Reaction::sidechain_size() const {
  return sidechain_.size();
}
inline void Reaction::clear_sidechain() {
  sidechain_.Clear();
}
inline ::ReactionProto::SidechainReactionSite* Reaction::mutable_sidechain(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.Reaction.sidechain)
  return sidechain_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::SidechainReactionSite >*
Reaction::mutable_sidechain() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.Reaction.sidechain)
  return &sidechain_;
}
inline const ::ReactionProto::SidechainReactionSite& Reaction::sidechain(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.Reaction.sidechain)
  return sidechain_.Get(index);
}
inline ::ReactionProto::SidechainReactionSite* Reaction::add_sidechain() {
  // @@protoc_insertion_point(field_add:ReactionProto.Reaction.sidechain)
  return sidechain_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::SidechainReactionSite >&
Reaction::sidechain() const {
  // @@protoc_insertion_point(field_list:ReactionProto.Reaction.sidechain)
  return sidechain_;
}

// repeated .ReactionProto.StereoCenter reaction_stereo_center = 4;
inline int Reaction::reaction_stereo_center_size() const {
  return reaction_stereo_center_.size();
}
inline void Reaction::clear_reaction_stereo_center() {
  reaction_stereo_center_.Clear();
}
inline ::ReactionProto::StereoCenter* Reaction::mutable_reaction_stereo_center(int index) {
  // @@protoc_insertion_point(field_mutable:ReactionProto.Reaction.reaction_stereo_center)
  return reaction_stereo_center_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ReactionProto::StereoCenter >*
Reaction::mutable_reaction_stereo_center() {
  // @@protoc_insertion_point(field_mutable_list:ReactionProto.Reaction.reaction_stereo_center)
  return &reaction_stereo_center_;
}
inline const ::ReactionProto::StereoCenter& Reaction::reaction_stereo_center(int index) const {
  // @@protoc_insertion_point(field_get:ReactionProto.Reaction.reaction_stereo_center)
  return reaction_stereo_center_.Get(index);
}
inline ::ReactionProto::StereoCenter* Reaction::add_reaction_stereo_center() {
  // @@protoc_insertion_point(field_add:ReactionProto.Reaction.reaction_stereo_center)
  return reaction_stereo_center_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ReactionProto::StereoCenter >&
Reaction::reaction_stereo_center() const {
  // @@protoc_insertion_point(field_list:ReactionProto.Reaction.reaction_stereo_center)
  return reaction_stereo_center_;
}

// optional bool append_reagent_name = 5;
inline bool Reaction::has_append_reagent_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Reaction::set_has_append_reagent_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Reaction::clear_has_append_reagent_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Reaction::clear_append_reagent_name() {
  append_reagent_name_ = false;
  clear_has_append_reagent_name();
}
inline bool Reaction::append_reagent_name() const {
  // @@protoc_insertion_point(field_get:ReactionProto.Reaction.append_reagent_name)
  return append_reagent_name_;
}
inline void Reaction::set_append_reagent_name(bool value) {
  set_has_append_reagent_name();
  append_reagent_name_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.Reaction.append_reagent_name)
}

// optional string append_to_name = 6;
inline bool Reaction::has_append_to_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Reaction::set_has_append_to_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Reaction::clear_has_append_to_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Reaction::clear_append_to_name() {
  append_to_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_append_to_name();
}
inline const ::std::string& Reaction::append_to_name() const {
  // @@protoc_insertion_point(field_get:ReactionProto.Reaction.append_to_name)
  return append_to_name_.GetNoArena();
}
inline void Reaction::set_append_to_name(const ::std::string& value) {
  set_has_append_to_name();
  append_to_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReactionProto.Reaction.append_to_name)
}
#if LANG_CXX11
inline void Reaction::set_append_to_name(::std::string&& value) {
  set_has_append_to_name();
  append_to_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReactionProto.Reaction.append_to_name)
}
#endif
inline void Reaction::set_append_to_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_append_to_name();
  append_to_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReactionProto.Reaction.append_to_name)
}
inline void Reaction::set_append_to_name(const char* value, size_t size) {
  set_has_append_to_name();
  append_to_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReactionProto.Reaction.append_to_name)
}
inline ::std::string* Reaction::mutable_append_to_name() {
  set_has_append_to_name();
  // @@protoc_insertion_point(field_mutable:ReactionProto.Reaction.append_to_name)
  return append_to_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Reaction::release_append_to_name() {
  // @@protoc_insertion_point(field_release:ReactionProto.Reaction.append_to_name)
  if (!has_append_to_name()) {
    return NULL;
  }
  clear_has_append_to_name();
  return append_to_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Reaction::set_allocated_append_to_name(::std::string* append_to_name) {
  if (append_to_name != NULL) {
    set_has_append_to_name();
  } else {
    clear_has_append_to_name();
  }
  append_to_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), append_to_name);
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.Reaction.append_to_name)
}

// optional bool query_files_in_current_directory = 8;
inline bool Reaction::has_query_files_in_current_directory() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Reaction::set_has_query_files_in_current_directory() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Reaction::clear_has_query_files_in_current_directory() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Reaction::clear_query_files_in_current_directory() {
  query_files_in_current_directory_ = false;
  clear_has_query_files_in_current_directory();
}
inline bool Reaction::query_files_in_current_directory() const {
  // @@protoc_insertion_point(field_get:ReactionProto.Reaction.query_files_in_current_directory)
  return query_files_in_current_directory_;
}
inline void Reaction::set_query_files_in_current_directory(bool value) {
  set_has_query_files_in_current_directory();
  query_files_in_current_directory_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.Reaction.query_files_in_current_directory)
}

// optional string reaction_directory = 9;
inline bool Reaction::has_reaction_directory() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Reaction::set_has_reaction_directory() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Reaction::clear_has_reaction_directory() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Reaction::clear_reaction_directory() {
  reaction_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reaction_directory();
}
inline const ::std::string& Reaction::reaction_directory() const {
  // @@protoc_insertion_point(field_get:ReactionProto.Reaction.reaction_directory)
  return reaction_directory_.GetNoArena();
}
inline void Reaction::set_reaction_directory(const ::std::string& value) {
  set_has_reaction_directory();
  reaction_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReactionProto.Reaction.reaction_directory)
}
#if LANG_CXX11
inline void Reaction::set_reaction_directory(::std::string&& value) {
  set_has_reaction_directory();
  reaction_directory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReactionProto.Reaction.reaction_directory)
}
#endif
inline void Reaction::set_reaction_directory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reaction_directory();
  reaction_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReactionProto.Reaction.reaction_directory)
}
inline void Reaction::set_reaction_directory(const char* value, size_t size) {
  set_has_reaction_directory();
  reaction_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReactionProto.Reaction.reaction_directory)
}
inline ::std::string* Reaction::mutable_reaction_directory() {
  set_has_reaction_directory();
  // @@protoc_insertion_point(field_mutable:ReactionProto.Reaction.reaction_directory)
  return reaction_directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Reaction::release_reaction_directory() {
  // @@protoc_insertion_point(field_release:ReactionProto.Reaction.reaction_directory)
  if (!has_reaction_directory()) {
    return NULL;
  }
  clear_has_reaction_directory();
  return reaction_directory_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Reaction::set_allocated_reaction_directory(::std::string* reaction_directory) {
  if (reaction_directory != NULL) {
    set_has_reaction_directory();
  } else {
    clear_has_reaction_directory();
  }
  reaction_directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reaction_directory);
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.Reaction.reaction_directory)
}

// optional bool find_kekule_forms_for_bad_valence = 10;
inline bool Reaction::has_find_kekule_forms_for_bad_valence() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Reaction::set_has_find_kekule_forms_for_bad_valence() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Reaction::clear_has_find_kekule_forms_for_bad_valence() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Reaction::clear_find_kekule_forms_for_bad_valence() {
  find_kekule_forms_for_bad_valence_ = false;
  clear_has_find_kekule_forms_for_bad_valence();
}
inline bool Reaction::find_kekule_forms_for_bad_valence() const {
  // @@protoc_insertion_point(field_get:ReactionProto.Reaction.find_kekule_forms_for_bad_valence)
  return find_kekule_forms_for_bad_valence_;
}
inline void Reaction::set_find_kekule_forms_for_bad_valence(bool value) {
  set_has_find_kekule_forms_for_bad_valence();
  find_kekule_forms_for_bad_valence_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.Reaction.find_kekule_forms_for_bad_valence)
}

// optional bool make_implicit_hydrogens_explicit = 11;
inline bool Reaction::has_make_implicit_hydrogens_explicit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Reaction::set_has_make_implicit_hydrogens_explicit() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Reaction::clear_has_make_implicit_hydrogens_explicit() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Reaction::clear_make_implicit_hydrogens_explicit() {
  make_implicit_hydrogens_explicit_ = false;
  clear_has_make_implicit_hydrogens_explicit();
}
inline bool Reaction::make_implicit_hydrogens_explicit() const {
  // @@protoc_insertion_point(field_get:ReactionProto.Reaction.make_implicit_hydrogens_explicit)
  return make_implicit_hydrogens_explicit_;
}
inline void Reaction::set_make_implicit_hydrogens_explicit(bool value) {
  set_has_make_implicit_hydrogens_explicit();
  make_implicit_hydrogens_explicit_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.Reaction.make_implicit_hydrogens_explicit)
}

// optional .ReactionProto.ScaffoldMatchConditions scaffold_match_conditions = 12;
inline bool Reaction::has_scaffold_match_conditions() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Reaction::set_has_scaffold_match_conditions() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Reaction::clear_has_scaffold_match_conditions() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Reaction::clear_scaffold_match_conditions() {
  if (scaffold_match_conditions_ != NULL) scaffold_match_conditions_->Clear();
  clear_has_scaffold_match_conditions();
}
inline const ::ReactionProto::ScaffoldMatchConditions& Reaction::_internal_scaffold_match_conditions() const {
  return *scaffold_match_conditions_;
}
inline const ::ReactionProto::ScaffoldMatchConditions& Reaction::scaffold_match_conditions() const {
  const ::ReactionProto::ScaffoldMatchConditions* p = scaffold_match_conditions_;
  // @@protoc_insertion_point(field_get:ReactionProto.Reaction.scaffold_match_conditions)
  return p != NULL ? *p : *reinterpret_cast<const ::ReactionProto::ScaffoldMatchConditions*>(
      &::ReactionProto::_ScaffoldMatchConditions_default_instance_);
}
inline ::ReactionProto::ScaffoldMatchConditions* Reaction::release_scaffold_match_conditions() {
  // @@protoc_insertion_point(field_release:ReactionProto.Reaction.scaffold_match_conditions)
  clear_has_scaffold_match_conditions();
  ::ReactionProto::ScaffoldMatchConditions* temp = scaffold_match_conditions_;
  scaffold_match_conditions_ = NULL;
  return temp;
}
inline ::ReactionProto::ScaffoldMatchConditions* Reaction::mutable_scaffold_match_conditions() {
  set_has_scaffold_match_conditions();
  if (scaffold_match_conditions_ == NULL) {
    auto* p = CreateMaybeMessage<::ReactionProto::ScaffoldMatchConditions>(GetArenaNoVirtual());
    scaffold_match_conditions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ReactionProto.Reaction.scaffold_match_conditions)
  return scaffold_match_conditions_;
}
inline void Reaction::set_allocated_scaffold_match_conditions(::ReactionProto::ScaffoldMatchConditions* scaffold_match_conditions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scaffold_match_conditions_;
  }
  if (scaffold_match_conditions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scaffold_match_conditions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scaffold_match_conditions, submessage_arena);
    }
    set_has_scaffold_match_conditions();
  } else {
    clear_has_scaffold_match_conditions();
  }
  scaffold_match_conditions_ = scaffold_match_conditions;
  // @@protoc_insertion_point(field_set_allocated:ReactionProto.Reaction.scaffold_match_conditions)
}

// optional bool noop_reaction = 13;
inline bool Reaction::has_noop_reaction() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Reaction::set_has_noop_reaction() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Reaction::clear_has_noop_reaction() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Reaction::clear_noop_reaction() {
  noop_reaction_ = false;
  clear_has_noop_reaction();
}
inline bool Reaction::noop_reaction() const {
  // @@protoc_insertion_point(field_get:ReactionProto.Reaction.noop_reaction)
  return noop_reaction_;
}
inline void Reaction::set_noop_reaction(bool value) {
  set_has_noop_reaction();
  noop_reaction_ = value;
  // @@protoc_insertion_point(field_set:ReactionProto.Reaction.noop_reaction)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ReactionProto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_reaction_2eproto
