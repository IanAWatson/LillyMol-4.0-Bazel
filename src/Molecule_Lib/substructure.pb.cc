// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substructure.proto

#include "substructure.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_substructure_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_substructure_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AtomNumberOrHLp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_substructure_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ElementsNeeded;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_substructure_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EnvironmentAttachment;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_substructure_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LinkAtoms;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_substructure_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NoMatchedAtomsBetween;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_substructure_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_QueryMatchResults_Matches;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_substructure_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RingSizeRequirement;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_substructure_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SubstructureAtomSpecifier;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_substructure_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SubstructureBond;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_substructure_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SubstructureRingBase;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_substructure_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SubstructureChiralCenter;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_substructure_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SubstructureRingSpecification;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_substructure_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SubstructureAtom;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_substructure_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SubstructureEnvironment;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_substructure_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SubstructureRingSystemSpecification;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_substructure_2eproto ::google::protobuf::internal::SCCInfo<8> scc_info_SingleSubstructureQuery;
}  // namespace protobuf_substructure_2eproto
namespace SubstructureSearch {
class AtomNumberOrHLpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AtomNumberOrHLp>
      _instance;
  ::google::protobuf::uint32 atom_number_;
  ::google::protobuf::internal::ArenaStringPtr h_or_lp_;
} _AtomNumberOrHLp_default_instance_;
class SubstructureChiralCenterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubstructureChiralCenter>
      _instance;
} _SubstructureChiralCenter_default_instance_;
class SubstructureBondDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubstructureBond>
      _instance;
} _SubstructureBond_default_instance_;
class SubstructureEnvironmentBondDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubstructureEnvironmentBond>
      _instance;
} _SubstructureEnvironmentBond_default_instance_;
class ElementsNeededDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ElementsNeeded>
      _instance;
  ::google::protobuf::uint32 atomic_number_;
  ::google::protobuf::internal::ArenaStringPtr atomic_symbol_;
} _ElementsNeeded_default_instance_;
class NoMatchedAtomsBetweenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NoMatchedAtomsBetween>
      _instance;
} _NoMatchedAtomsBetween_default_instance_;
class LinkAtomsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LinkAtoms>
      _instance;
} _LinkAtoms_default_instance_;
class EnvironmentAttachmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnvironmentAttachment>
      _instance;
} _EnvironmentAttachment_default_instance_;
class SubstructureRingEnvironmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubstructureRingEnvironment>
      _instance;
} _SubstructureRingEnvironment_default_instance_;
class SubstructureRingBaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubstructureRingBase>
      _instance;
} _SubstructureRingBase_default_instance_;
class SubstructureRingSpecificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubstructureRingSpecification>
      _instance;
} _SubstructureRingSpecification_default_instance_;
class RingSizeRequirementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RingSizeRequirement>
      _instance;
} _RingSizeRequirement_default_instance_;
class SubstructureRingSystemSpecificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubstructureRingSystemSpecification>
      _instance;
} _SubstructureRingSystemSpecification_default_instance_;
class SubstructureAtomSpecifierDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubstructureAtomSpecifier>
      _instance;
} _SubstructureAtomSpecifier_default_instance_;
class SubstructureAtomEnvironmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubstructureAtomEnvironment>
      _instance;
} _SubstructureAtomEnvironment_default_instance_;
class SubstructureAtomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubstructureAtom>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr smarts_;
  ::google::protobuf::internal::ArenaStringPtr atom_smarts_;
  ::google::protobuf::internal::ArenaStringPtr smiles_;
} _SubstructureAtom_default_instance_;
class SubstructureEnvironmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubstructureEnvironment>
      _instance;
} _SubstructureEnvironment_default_instance_;
class SingleSubstructureQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SingleSubstructureQuery>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr smiles_;
  ::google::protobuf::internal::ArenaStringPtr smarts_;
} _SingleSubstructureQuery_default_instance_;
class SubstructureQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubstructureQuery>
      _instance;
} _SubstructureQuery_default_instance_;
class MinMaxSpecifierIntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MinMaxSpecifierInt>
      _instance;
} _MinMaxSpecifierInt_default_instance_;
class MinMaxSpecifierUIntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MinMaxSpecifierUInt>
      _instance;
} _MinMaxSpecifierUInt_default_instance_;
class QueryMatchResults_MatchesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryMatchResults_Matches>
      _instance;
} _QueryMatchResults_Matches_default_instance_;
class QueryMatchResultsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryMatchResults>
      _instance;
} _QueryMatchResults_default_instance_;
}  // namespace SubstructureSearch
namespace protobuf_substructure_2eproto {
static void InitDefaultsAtomNumberOrHLp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_AtomNumberOrHLp_default_instance_;
    new (ptr) ::SubstructureSearch::AtomNumberOrHLp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubstructureSearch::AtomNumberOrHLp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AtomNumberOrHLp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAtomNumberOrHLp}, {}};

static void InitDefaultsSubstructureChiralCenter() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SubstructureChiralCenter_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureChiralCenter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubstructureSearch::SubstructureChiralCenter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SubstructureChiralCenter =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSubstructureChiralCenter}, {
      &protobuf_substructure_2eproto::scc_info_AtomNumberOrHLp.base,}};

static void InitDefaultsSubstructureBond() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SubstructureBond_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureBond();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubstructureSearch::SubstructureBond::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubstructureBond =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubstructureBond}, {}};

static void InitDefaultsSubstructureEnvironmentBond() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SubstructureEnvironmentBond_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureEnvironmentBond();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubstructureSearch::SubstructureEnvironmentBond::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubstructureEnvironmentBond =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubstructureEnvironmentBond}, {}};

static void InitDefaultsElementsNeeded() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_ElementsNeeded_default_instance_;
    new (ptr) ::SubstructureSearch::ElementsNeeded();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubstructureSearch::ElementsNeeded::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ElementsNeeded =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsElementsNeeded}, {}};

static void InitDefaultsNoMatchedAtomsBetween() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_NoMatchedAtomsBetween_default_instance_;
    new (ptr) ::SubstructureSearch::NoMatchedAtomsBetween();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubstructureSearch::NoMatchedAtomsBetween::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NoMatchedAtomsBetween =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNoMatchedAtomsBetween}, {}};

static void InitDefaultsLinkAtoms() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_LinkAtoms_default_instance_;
    new (ptr) ::SubstructureSearch::LinkAtoms();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubstructureSearch::LinkAtoms::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LinkAtoms =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLinkAtoms}, {}};

static void InitDefaultsEnvironmentAttachment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_EnvironmentAttachment_default_instance_;
    new (ptr) ::SubstructureSearch::EnvironmentAttachment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubstructureSearch::EnvironmentAttachment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EnvironmentAttachment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEnvironmentAttachment}, {}};

static void InitDefaultsSubstructureRingEnvironment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SubstructureRingEnvironment_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureRingEnvironment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubstructureSearch::SubstructureRingEnvironment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SubstructureRingEnvironment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSubstructureRingEnvironment}, {
      &protobuf_substructure_2eproto::scc_info_SubstructureAtom.base,}};

static void InitDefaultsSubstructureRingBase() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SubstructureRingBase_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureRingBase();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubstructureSearch::SubstructureRingBase::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubstructureRingBase =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubstructureRingBase}, {}};

static void InitDefaultsSubstructureRingSpecification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SubstructureRingSpecification_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureRingSpecification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubstructureSearch::SubstructureRingSpecification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SubstructureRingSpecification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSubstructureRingSpecification}, {
      &protobuf_substructure_2eproto::scc_info_SubstructureRingBase.base,}};

static void InitDefaultsRingSizeRequirement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_RingSizeRequirement_default_instance_;
    new (ptr) ::SubstructureSearch::RingSizeRequirement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubstructureSearch::RingSizeRequirement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RingSizeRequirement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRingSizeRequirement}, {}};

static void InitDefaultsSubstructureRingSystemSpecification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SubstructureRingSystemSpecification_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureRingSystemSpecification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubstructureSearch::SubstructureRingSystemSpecification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SubstructureRingSystemSpecification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSubstructureRingSystemSpecification}, {
      &protobuf_substructure_2eproto::scc_info_SubstructureRingBase.base,
      &protobuf_substructure_2eproto::scc_info_RingSizeRequirement.base,}};

static void InitDefaultsSubstructureAtomSpecifier() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SubstructureAtomSpecifier_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureAtomSpecifier();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubstructureSearch::SubstructureAtomSpecifier::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubstructureAtomSpecifier =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubstructureAtomSpecifier}, {}};

static void InitDefaultsSubstructureAtom() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SubstructureAtomEnvironment_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureAtomEnvironment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::SubstructureSearch::_SubstructureAtom_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureAtom();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubstructureSearch::SubstructureAtomEnvironment::InitAsDefaultInstance();
  ::SubstructureSearch::SubstructureAtom::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SubstructureAtom =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSubstructureAtom}, {
      &protobuf_substructure_2eproto::scc_info_SubstructureAtomSpecifier.base,
      &protobuf_substructure_2eproto::scc_info_SubstructureBond.base,}};

static void InitDefaultsSubstructureEnvironment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SubstructureEnvironment_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureEnvironment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubstructureSearch::SubstructureEnvironment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SubstructureEnvironment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSubstructureEnvironment}, {
      &protobuf_substructure_2eproto::scc_info_SubstructureAtom.base,
      &protobuf_substructure_2eproto::scc_info_EnvironmentAttachment.base,}};

static void InitDefaultsSingleSubstructureQuery() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SingleSubstructureQuery_default_instance_;
    new (ptr) ::SubstructureSearch::SingleSubstructureQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubstructureSearch::SingleSubstructureQuery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<8> scc_info_SingleSubstructureQuery =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsSingleSubstructureQuery}, {
      &protobuf_substructure_2eproto::scc_info_NoMatchedAtomsBetween.base,
      &protobuf_substructure_2eproto::scc_info_LinkAtoms.base,
      &protobuf_substructure_2eproto::scc_info_SubstructureEnvironment.base,
      &protobuf_substructure_2eproto::scc_info_SubstructureRingSpecification.base,
      &protobuf_substructure_2eproto::scc_info_SubstructureRingSystemSpecification.base,
      &protobuf_substructure_2eproto::scc_info_ElementsNeeded.base,
      &protobuf_substructure_2eproto::scc_info_SubstructureAtom.base,
      &protobuf_substructure_2eproto::scc_info_SubstructureChiralCenter.base,}};

static void InitDefaultsSubstructureQuery() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SubstructureQuery_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubstructureSearch::SubstructureQuery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SubstructureQuery =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSubstructureQuery}, {
      &protobuf_substructure_2eproto::scc_info_SingleSubstructureQuery.base,}};

static void InitDefaultsMinMaxSpecifierInt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_MinMaxSpecifierInt_default_instance_;
    new (ptr) ::SubstructureSearch::MinMaxSpecifierInt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubstructureSearch::MinMaxSpecifierInt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MinMaxSpecifierInt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMinMaxSpecifierInt}, {}};

static void InitDefaultsMinMaxSpecifierUInt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_MinMaxSpecifierUInt_default_instance_;
    new (ptr) ::SubstructureSearch::MinMaxSpecifierUInt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubstructureSearch::MinMaxSpecifierUInt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MinMaxSpecifierUInt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMinMaxSpecifierUInt}, {}};

static void InitDefaultsQueryMatchResults_Matches() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_QueryMatchResults_Matches_default_instance_;
    new (ptr) ::SubstructureSearch::QueryMatchResults_Matches();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubstructureSearch::QueryMatchResults_Matches::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_QueryMatchResults_Matches =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQueryMatchResults_Matches}, {}};

static void InitDefaultsQueryMatchResults() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_QueryMatchResults_default_instance_;
    new (ptr) ::SubstructureSearch::QueryMatchResults();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubstructureSearch::QueryMatchResults::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_QueryMatchResults =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsQueryMatchResults}, {
      &protobuf_substructure_2eproto::scc_info_QueryMatchResults_Matches.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AtomNumberOrHLp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubstructureChiralCenter.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubstructureBond.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubstructureEnvironmentBond.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ElementsNeeded.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NoMatchedAtomsBetween.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LinkAtoms.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EnvironmentAttachment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubstructureRingEnvironment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubstructureRingBase.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubstructureRingSpecification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RingSizeRequirement.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubstructureRingSystemSpecification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubstructureAtomSpecifier.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubstructureAtom.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubstructureEnvironment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SingleSubstructureQuery.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubstructureQuery.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MinMaxSpecifierInt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MinMaxSpecifierUInt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QueryMatchResults_Matches.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QueryMatchResults.base);
}

::google::protobuf::Metadata file_level_metadata[23];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::AtomNumberOrHLp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::AtomNumberOrHLp, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::AtomNumberOrHLp, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::SubstructureSearch::AtomNumberOrHLpDefaultTypeInternal, atom_number_),
  offsetof(::SubstructureSearch::AtomNumberOrHLpDefaultTypeInternal, h_or_lp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::AtomNumberOrHLp, AtomNumberOr_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureChiralCenter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureChiralCenter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureChiralCenter, center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureChiralCenter, top_front_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureChiralCenter, top_back_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureChiralCenter, left_down_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureChiralCenter, right_down_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureBond, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureBond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureBond, bond_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureBond, other_end_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironmentBond, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironmentBond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironmentBond, bond_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironmentBond, other_end_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::ElementsNeeded, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::ElementsNeeded, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::ElementsNeeded, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::SubstructureSearch::ElementsNeededDefaultTypeInternal, atomic_number_),
  offsetof(::SubstructureSearch::ElementsNeededDefaultTypeInternal, atomic_symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::ElementsNeeded, hits_needed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::ElementsNeeded, min_hits_needed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::ElementsNeeded, max_hits_needed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::ElementsNeeded, ElementSpecifier_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::NoMatchedAtomsBetween, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::NoMatchedAtomsBetween, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::NoMatchedAtomsBetween, a1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::NoMatchedAtomsBetween, a2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::NoMatchedAtomsBetween, qualifier_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::LinkAtoms, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::LinkAtoms, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::LinkAtoms, a1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::LinkAtoms, a2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::LinkAtoms, distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::LinkAtoms, min_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::LinkAtoms, max_distance_),
  0,
  1,
  ~0u,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::EnvironmentAttachment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::EnvironmentAttachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::EnvironmentAttachment, attachment_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::EnvironmentAttachment, bond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::EnvironmentAttachment, substructure_bond_),
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingEnvironment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingEnvironment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingEnvironment, substructure_atom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingEnvironment, min_hits_needed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingEnvironment, max_hits_needed_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, match_as_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, hits_needed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, min_hits_needed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, max_hits_needed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, attached_heteroatom_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, min_attached_heteroatom_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, max_attached_heteroatom_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, heteroatom_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, min_heteroatom_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, max_heteroatom_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, ncon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, min_ncon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, max_ncon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, all_hits_in_same_fragment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, within_ring_unsaturation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, min_within_ring_unsaturation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, max_within_ring_unsaturation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, largest_number_of_bonds_shared_with_another_ring_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, min_largest_number_of_bonds_shared_with_another_ring_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, max_largest_number_of_bonds_shared_with_another_ring_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, atoms_with_pi_electrons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, min_atoms_with_pi_electrons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, max_atoms_with_pi_electrons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, strongly_fused_ring_neighbours_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, min_strongly_fused_ring_neighbours_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, max_strongly_fused_ring_neighbours_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, environment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, environment_can_match_in_ring_atoms_),
  8,
  ~0u,
  1,
  2,
  ~0u,
  3,
  4,
  ~0u,
  5,
  6,
  ~0u,
  7,
  11,
  9,
  ~0u,
  12,
  13,
  ~0u,
  14,
  15,
  ~0u,
  16,
  17,
  ~0u,
  18,
  19,
  0,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, ring_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, min_ring_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, max_ring_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, aromatic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, fused_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, min_fused_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, max_fused_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, fused_aromatic_neighbours_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, min_fused_aromatic_neighbours_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, max_fused_aromatic_neighbours_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, fused_non_aromatic_neighbours_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, min_fused_non_aromatic_neighbours_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, max_fused_non_aromatic_neighbours_),
  0,
  ~0u,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  ~0u,
  6,
  7,
  ~0u,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::RingSizeRequirement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::RingSizeRequirement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::RingSizeRequirement, ring_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::RingSizeRequirement, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::RingSizeRequirement, min_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::RingSizeRequirement, max_count_),
  0,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, rings_in_system_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_rings_in_system_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_rings_in_system_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, ring_sizes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_ring_sizes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_ring_sizes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, ring_size_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, aromatic_ring_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_aromatic_ring_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_aromatic_ring_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, non_aromatic_ring_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_non_aromatic_ring_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_non_aromatic_ring_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, degree_of_fusion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_degree_of_fusion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_degree_of_fusion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, atoms_in_system_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_atoms_in_system_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_atoms_in_system_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, number_spinach_groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_number_spinach_groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_number_spinach_groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, number_non_spinach_groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_number_non_spinach_groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_number_non_spinach_groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, atoms_in_spinach_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_atoms_in_spinach_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_atoms_in_spinach_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, length_of_spinach_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_length_of_spinach_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_length_of_spinach_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, distance_to_another_ring_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_distance_to_another_ring_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_distance_to_another_ring_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, strongly_fused_ring_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_strongly_fused_ring_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_strongly_fused_ring_count_),
  0,
  ~0u,
  1,
  2,
  ~0u,
  3,
  4,
  ~0u,
  ~0u,
  5,
  6,
  ~0u,
  7,
  8,
  ~0u,
  9,
  10,
  ~0u,
  11,
  12,
  ~0u,
  13,
  14,
  ~0u,
  15,
  16,
  ~0u,
  17,
  18,
  ~0u,
  19,
  20,
  ~0u,
  21,
  22,
  ~0u,
  23,
  24,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, atomic_symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, atomic_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, ncon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_ncon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_ncon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, ncon2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_ncon2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_ncon2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, nbonds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_nbonds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_nbonds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, formal_charge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_formal_charge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_formal_charge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, nrings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_nrings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_nrings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, ring_bond_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_ring_bond_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_ring_bond_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, ring_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_ring_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_ring_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, hcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_hcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_hcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, aromatic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, chirality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, aromatic_ring_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_aromatic_ring_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_aromatic_ring_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, aliphatic_ring_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_aliphatic_ring_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_aliphatic_ring_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, attached_heteroatom_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_attached_heteroatom_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_attached_heteroatom_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, lone_pair_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_lone_pair_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_lone_pair_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, unsaturation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_unsaturation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_unsaturation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, daylight_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_daylight_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_daylight_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, isotope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_isotope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_isotope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, aryl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_aryl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_aryl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, fused_system_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_fused_system_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_fused_system_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, vinyl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_vinyl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_vinyl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, all_rings_kekule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, heteroatoms_in_ring_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_heteroatoms_in_ring_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_heteroatoms_in_ring_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, match_spinach_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, scaffold_bonds_attached_to_ring_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_scaffold_bonds_attached_to_ring_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_scaffold_bonds_attached_to_ring_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, preference_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, symmetry_degree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_symmetry_degree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_symmetry_degree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, symmetry_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, logical_operator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, user_atom_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, atom_type_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  2,
  3,
  ~0u,
  4,
  5,
  ~0u,
  6,
  7,
  ~0u,
  8,
  9,
  ~0u,
  10,
  11,
  ~0u,
  12,
  13,
  ~0u,
  14,
  15,
  22,
  23,
  ~0u,
  16,
  17,
  ~0u,
  18,
  19,
  ~0u,
  20,
  21,
  ~0u,
  25,
  26,
  ~0u,
  27,
  28,
  ~0u,
  29,
  30,
  ~0u,
  31,
  32,
  ~0u,
  33,
  34,
  ~0u,
  35,
  36,
  ~0u,
  37,
  38,
  24,
  ~0u,
  39,
  40,
  41,
  ~0u,
  42,
  43,
  44,
  ~0u,
  45,
  46,
  47,
  50,
  48,
  49,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomEnvironment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomEnvironment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomEnvironment, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomEnvironment, substructure_atom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomEnvironment, op_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, match_as_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, text_identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, atom_map_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, initial_atom_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, or_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, atom_properties_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, or_operator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, ring_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, fused_system_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, fragment_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, numeric_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, include_in_embedding_),
  offsetof(::SubstructureSearch::SubstructureAtomDefaultTypeInternal, smarts_),
  offsetof(::SubstructureSearch::SubstructureAtomDefaultTypeInternal, atom_smarts_),
  offsetof(::SubstructureSearch::SubstructureAtomDefaultTypeInternal, smiles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, environment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, query_bond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, bond_smarts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, single_bond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, double_bond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, triple_bond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, aromatic_bond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, bond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, preference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, sum_all_preference_hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, unmatched_atoms_attached_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, min_unmatched_atoms_attached_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, max_unmatched_atoms_attached_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, atom_type_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, SmilesOrSmarts_),
  2,
  11,
  0,
  3,
  4,
  5,
  ~0u,
  6,
  7,
  8,
  9,
  10,
  12,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  13,
  ~0u,
  14,
  15,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, smarts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, smiles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, query_atom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, attachment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, bond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, or_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, and_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, hits_needed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, min_hits_needed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, max_hits_needed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, no_other_substituents_allowed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, env_matches_can_share_attachment_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, max_matches_to_find_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, hydrogen_ok_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, max_env_matches_per_anchor_),
  1,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  2,
  3,
  ~0u,
  4,
  5,
  6,
  7,
  9,
  8,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, comment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, one_embedding_per_start_atom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, normalise_rc_per_hits_needed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, subtract_from_rc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_matches_to_find_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, save_matched_atoms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, ncon_ignore_singly_connected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, perceive_symmetric_equivalents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, implicit_ring_condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, all_hits_in_same_fragment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, only_match_largest_fragment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, embeddings_do_not_overlap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, sort_by_preference_value_),
  offsetof(::SubstructureSearch::SingleSubstructureQueryDefaultTypeInternal, smiles_),
  offsetof(::SubstructureSearch::SingleSubstructureQueryDefaultTypeInternal, smarts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, numeric_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, no_matched_atoms_between_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, no_matched_atoms_between_exhaustive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, link_atoms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, fail_if_embeddings_too_close_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, distance_between_hits_ncheck_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, sort_matches_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, attached_heteroatom_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_attached_heteroatom_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_attached_heteroatom_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, hits_needed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_hits_needed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_hits_needed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, ring_atoms_matched_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_ring_atoms_matched_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_ring_atoms_matched_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, heteroatoms_matched_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_heteroatoms_matched_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_heteroatoms_matched_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, heteroatoms_in_molecule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_heteroatoms_in_molecule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_heteroatoms_in_molecule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, natoms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_natoms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_natoms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, nrings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_nrings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_nrings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, ncon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_ncon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_ncon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, fused_rings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_fused_rings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_fused_rings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, strongly_fused_rings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_strongly_fused_rings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_strongly_fused_rings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, isolated_rings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_isolated_rings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_isolated_rings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, isolated_ring_objects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_isolated_ring_objects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_isolated_ring_objects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, aromatic_rings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_aromatic_rings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_aromatic_rings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, non_aromatic_rings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_non_aromatic_rings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_non_aromatic_rings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, distance_between_hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_distance_between_hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_distance_between_hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, number_isotopic_atoms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_number_isotopic_atoms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_number_isotopic_atoms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, number_fragments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_number_fragments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_number_fragments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, distance_between_root_atoms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_distance_between_root_atoms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_distance_between_root_atoms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, atoms_in_spinach_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_atoms_in_spinach_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_atoms_in_spinach_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, inter_ring_atoms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_inter_ring_atoms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_inter_ring_atoms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, unmatched_atoms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_unmatched_atoms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_unmatched_atoms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, net_formal_charge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_net_formal_charge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_net_formal_charge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_fraction_atoms_matched_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_fraction_atoms_matched_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, environment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, environment_no_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, environment_must_match_unmatched_atoms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, env_matches_can_share_attachment_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, ring_specification_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, ring_specification_logexp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, ring_system_specifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, ring_system_specifier_logexp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, element_hits_needed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, elements_needed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, aromatic_atoms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_aromatic_atoms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_aromatic_atoms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, unique_embeddings_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, heteroatoms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, respect_initial_atom_numbering_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, compress_embeddings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, environments_can_share_attachment_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, query_atom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, chiral_centre_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, atom_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, smiles_or_smarts_),
  4,
  0,
  1,
  8,
  5,
  6,
  7,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  40,
  ~0u,
  41,
  17,
  2,
  ~0u,
  18,
  19,
  ~0u,
  20,
  21,
  ~0u,
  22,
  23,
  ~0u,
  24,
  25,
  ~0u,
  26,
  27,
  ~0u,
  28,
  29,
  ~0u,
  30,
  31,
  ~0u,
  32,
  33,
  ~0u,
  34,
  35,
  ~0u,
  36,
  37,
  ~0u,
  38,
  39,
  ~0u,
  44,
  45,
  ~0u,
  46,
  47,
  ~0u,
  48,
  49,
  ~0u,
  50,
  51,
  ~0u,
  52,
  53,
  ~0u,
  54,
  55,
  ~0u,
  56,
  57,
  ~0u,
  58,
  59,
  ~0u,
  60,
  61,
  ~0u,
  62,
  63,
  ~0u,
  64,
  65,
  66,
  67,
  ~0u,
  ~0u,
  42,
  43,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  68,
  69,
  70,
  ~0u,
  71,
  72,
  73,
  ~0u,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureQuery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureQuery, comment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureQuery, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureQuery, logexp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::SubstructureQuery, match_each_component_),
  0,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::MinMaxSpecifierInt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::MinMaxSpecifierInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::MinMaxSpecifierInt, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::MinMaxSpecifierInt, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::MinMaxSpecifierInt, max_),
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::MinMaxSpecifierUInt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::MinMaxSpecifierUInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::MinMaxSpecifierUInt, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::MinMaxSpecifierUInt, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::MinMaxSpecifierUInt, max_),
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::QueryMatchResults_Matches, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::QueryMatchResults_Matches, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::QueryMatchResults_Matches, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::QueryMatchResults_Matches, nhits_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::QueryMatchResults, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::QueryMatchResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::QueryMatchResults, smiles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::QueryMatchResults, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubstructureSearch::QueryMatchResults, matches_),
  0,
  1,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::SubstructureSearch::AtomNumberOrHLp)},
  { 10, 20, sizeof(::SubstructureSearch::SubstructureChiralCenter)},
  { 25, 32, sizeof(::SubstructureSearch::SubstructureBond)},
  { 34, 41, sizeof(::SubstructureSearch::SubstructureEnvironmentBond)},
  { 43, 54, sizeof(::SubstructureSearch::ElementsNeeded)},
  { 59, 67, sizeof(::SubstructureSearch::NoMatchedAtomsBetween)},
  { 70, 80, sizeof(::SubstructureSearch::LinkAtoms)},
  { 85, 93, sizeof(::SubstructureSearch::EnvironmentAttachment)},
  { 96, 104, sizeof(::SubstructureSearch::SubstructureRingEnvironment)},
  { 107, 140, sizeof(::SubstructureSearch::SubstructureRingBase)},
  { 168, 187, sizeof(::SubstructureSearch::SubstructureRingSpecification)},
  { 201, 210, sizeof(::SubstructureSearch::RingSizeRequirement)},
  { 214, 257, sizeof(::SubstructureSearch::SubstructureRingSystemSpecification)},
  { 295, 374, sizeof(::SubstructureSearch::SubstructureAtomSpecifier)},
  { 448, 456, sizeof(::SubstructureSearch::SubstructureAtomEnvironment)},
  { 459, 495, sizeof(::SubstructureSearch::SubstructureAtom)},
  { 525, 546, sizeof(::SubstructureSearch::SubstructureEnvironment)},
  { 562, 681, sizeof(::SubstructureSearch::SingleSubstructureQuery)},
  { 794, 803, sizeof(::SubstructureSearch::SubstructureQuery)},
  { 807, 815, sizeof(::SubstructureSearch::MinMaxSpecifierInt)},
  { 818, 826, sizeof(::SubstructureSearch::MinMaxSpecifierUInt)},
  { 829, 836, sizeof(::SubstructureSearch::QueryMatchResults_Matches)},
  { 838, 846, sizeof(::SubstructureSearch::QueryMatchResults)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubstructureSearch::_AtomNumberOrHLp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubstructureSearch::_SubstructureChiralCenter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubstructureSearch::_SubstructureBond_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubstructureSearch::_SubstructureEnvironmentBond_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubstructureSearch::_ElementsNeeded_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubstructureSearch::_NoMatchedAtomsBetween_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubstructureSearch::_LinkAtoms_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubstructureSearch::_EnvironmentAttachment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubstructureSearch::_SubstructureRingEnvironment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubstructureSearch::_SubstructureRingBase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubstructureSearch::_SubstructureRingSpecification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubstructureSearch::_RingSizeRequirement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubstructureSearch::_SubstructureRingSystemSpecification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubstructureSearch::_SubstructureAtomSpecifier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubstructureSearch::_SubstructureAtomEnvironment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubstructureSearch::_SubstructureAtom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubstructureSearch::_SubstructureEnvironment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubstructureSearch::_SingleSubstructureQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubstructureSearch::_SubstructureQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubstructureSearch::_MinMaxSpecifierInt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubstructureSearch::_MinMaxSpecifierUInt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubstructureSearch::_QueryMatchResults_Matches_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubstructureSearch::_QueryMatchResults_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "substructure.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 23);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022substructure.proto\022\022SubstructureSearch"
      "\"K\n\017AtomNumberOrHLp\022\025\n\013atom_number\030\001 \001(\r"
      "H\000\022\021\n\007h_or_lp\030\002 \001(\tH\000B\016\n\014AtomNumberOr\"\212\002"
      "\n\030SubstructureChiralCenter\022\016\n\006center\030\001 \001"
      "(\r\0226\n\ttop_front\030\002 \001(\0132#.SubstructureSear"
      "ch.AtomNumberOrHLp\0225\n\010top_back\030\003 \001(\0132#.S"
      "ubstructureSearch.AtomNumberOrHLp\0226\n\tlef"
      "t_down\030\004 \001(\0132#.SubstructureSearch.AtomNu"
      "mberOrHLp\0227\n\nright_down\030\005 \001(\0132#.Substruc"
      "tureSearch.AtomNumberOrHLp\"V\n\020Substructu"
      "reBond\022/\n\tbond_type\030\001 \003(\0162\034.Substructure"
      "Search.BondType\022\021\n\tother_end\030\002 \001(\r\"a\n\033Su"
      "bstructureEnvironmentBond\022/\n\tbond_type\030\001"
      " \003(\0162\034.SubstructureSearch.BondType\022\021\n\tot"
      "her_end\030\002 \003(\r\"\235\001\n\016ElementsNeeded\022\027\n\ratom"
      "ic_number\030\001 \001(\rH\000\022\027\n\ratomic_symbol\030\002 \001(\t"
      "H\000\022\023\n\013hits_needed\030\003 \003(\r\022\027\n\017min_hits_need"
      "ed\030\004 \001(\r\022\027\n\017max_hits_needed\030\005 \001(\rB\022\n\020Ele"
      "mentSpecifier\"B\n\025NoMatchedAtomsBetween\022\n"
      "\n\002a1\030\001 \001(\r\022\n\n\002a2\030\002 \001(\r\022\021\n\tqualifier\030\003 \001("
      "\t\"a\n\tLinkAtoms\022\n\n\002a1\030\001 \001(\r\022\n\n\002a2\030\002 \001(\r\022\020"
      "\n\010distance\030\003 \003(\r\022\024\n\014min_distance\030\004 \001(\r\022\024"
      "\n\014max_distance\030\005 \001(\r\"x\n\025EnvironmentAttac"
      "hment\022\030\n\020attachment_point\030\001 \003(\r\022*\n\004bond\030"
      "\002 \003(\0162\034.SubstructureSearch.BondType\022\031\n\021s"
      "ubstructure_bond\030\003 \001(\t\"\220\001\n\033SubstructureR"
      "ingEnvironment\022\?\n\021substructure_atom\030\001 \001("
      "\0132$.SubstructureSearch.SubstructureAtom\022"
      "\027\n\017min_hits_needed\030\002 \001(\r\022\027\n\017max_hits_nee"
      "ded\030\003 \001(\r\"\342\007\n\024SubstructureRingBase\022\026\n\016ma"
      "tch_as_match\030\001 \001(\010\022\023\n\013hits_needed\030\002 \003(\r\022"
      "\027\n\017min_hits_needed\030\003 \001(\r\022\027\n\017max_hits_nee"
      "ded\030\004 \001(\r\022!\n\031attached_heteroatom_count\030\005"
      " \003(\r\022%\n\035min_attached_heteroatom_count\030\006 "
      "\001(\r\022%\n\035max_attached_heteroatom_count\030\007 \001"
      "(\r\022\030\n\020heteroatom_count\030\010 \003(\r\022\034\n\024min_hete"
      "roatom_count\030\t \001(\r\022\034\n\024max_heteroatom_cou"
      "nt\030\n \001(\r\022\014\n\004ncon\030\013 \003(\r\022\020\n\010min_ncon\030\014 \001(\r"
      "\022\020\n\010max_ncon\030\r \001(\r\022!\n\031all_hits_in_same_f"
      "ragment\030\016 \001(\010\022 \n\030within_ring_unsaturatio"
      "n\030\020 \003(\r\022$\n\034min_within_ring_unsaturation\030"
      "\021 \001(\r\022$\n\034max_within_ring_unsaturation\030\022 "
      "\001(\r\0228\n0largest_number_of_bonds_shared_wi"
      "th_another_ring\030\023 \003(\r\022<\n4min_largest_num"
      "ber_of_bonds_shared_with_another_ring\030\024 "
      "\001(\r\022<\n4max_largest_number_of_bonds_share"
      "d_with_another_ring\030\025 \001(\r\022\037\n\027atoms_with_"
      "pi_electrons\030\032 \003(\r\022#\n\033min_atoms_with_pi_"
      "electrons\030\033 \001(\r\022#\n\033max_atoms_with_pi_ele"
      "ctrons\030\034 \001(\r\022&\n\036strongly_fused_ring_neig"
      "hbours\030\035 \003(\r\022*\n\"min_strongly_fused_ring_"
      "neighbours\030\036 \001(\r\022*\n\"max_strongly_fused_r"
      "ing_neighbours\030\037 \001(\r\022\023\n\013environment\030\026 \001("
      "\t\022+\n#environment_can_match_in_ring_atoms"
      "\030\027 \001(\010\"\315\003\n\035SubstructureRingSpecification"
      "\0226\n\004base\030\001 \001(\0132(.SubstructureSearch.Subs"
      "tructureRingBase\022\021\n\tring_size\030\002 \003(\r\022\025\n\rm"
      "in_ring_size\030\003 \001(\r\022\025\n\rmax_ring_size\030\004 \001("
      "\r\022\020\n\010aromatic\030\005 \001(\010\022\r\n\005fused\030\006 \003(\r\022\021\n\tmi"
      "n_fused\030\007 \001(\r\022\021\n\tmax_fused\030\010 \001(\r\022!\n\031fuse"
      "d_aromatic_neighbours\030\t \003(\r\022%\n\035min_fused"
      "_aromatic_neighbours\030\n \001(\r\022%\n\035max_fused_"
      "aromatic_neighbours\030\013 \001(\r\022%\n\035fused_non_a"
      "romatic_neighbours\030\014 \003(\r\022)\n!min_fused_no"
      "n_aromatic_neighbours\030\r \001(\r\022)\n!max_fused"
      "_non_aromatic_neighbours\030\016 \001(\r\"]\n\023RingSi"
      "zeRequirement\022\021\n\tring_size\030\001 \001(\r\022\r\n\005coun"
      "t\030\002 \003(\r\022\021\n\tmin_count\030\003 \001(\r\022\021\n\tmax_count\030"
      "\004 \001(\r\"\261\n\n#SubstructureRingSystemSpecific"
      "ation\0226\n\004base\030\001 \001(\0132(.SubstructureSearch"
      ".SubstructureRingBase\022\027\n\017rings_in_system"
      "\030\002 \003(\r\022\033\n\023min_rings_in_system\030\003 \001(\r\022\033\n\023m"
      "ax_rings_in_system\030\004 \001(\r\022\022\n\nring_sizes\030\005"
      " \003(\r\022\026\n\016min_ring_sizes\030\006 \001(\r\022\026\n\016max_ring"
      "_sizes\030\007 \001(\r\022@\n\017ring_size_count\030\010 \003(\0132\'."
      "SubstructureSearch.RingSizeRequirement\022\033"
      "\n\023aromatic_ring_count\030\013 \003(\r\022\037\n\027min_aroma"
      "tic_ring_count\030\014 \001(\r\022\037\n\027max_aromatic_rin"
      "g_count\030\r \001(\r\022\037\n\027non_aromatic_ring_count"
      "\030\016 \003(\r\022#\n\033min_non_aromatic_ring_count\030\017 "
      "\001(\r\022#\n\033max_non_aromatic_ring_count\030\020 \001(\r"
      "\022\030\n\020degree_of_fusion\030\021 \003(\r\022\034\n\024min_degree"
      "_of_fusion\030\022 \001(\r\022\034\n\024max_degree_of_fusion"
      "\030\023 \001(\r\022\027\n\017atoms_in_system\030\024 \003(\r\022\033\n\023min_a"
      "toms_in_system\030\025 \001(\r\022\033\n\023max_atoms_in_sys"
      "tem\030\026 \001(\r\022\035\n\025number_spinach_groups\030\027 \003(\r"
      "\022!\n\031min_number_spinach_groups\030\030 \001(\r\022!\n\031m"
      "ax_number_spinach_groups\030\031 \001(\r\022!\n\031number"
      "_non_spinach_groups\030\032 \003(\r\022%\n\035min_number_"
      "non_spinach_groups\030\033 \001(\r\022%\n\035max_number_n"
      "on_spinach_groups\030\034 \001(\r\022\036\n\026atoms_in_spin"
      "ach_group\030\035 \003(\r\022\"\n\032min_atoms_in_spinach_"
      "group\030\036 \001(\r\022\"\n\032max_atoms_in_spinach_grou"
      "p\030\037 \001(\r\022\037\n\027length_of_spinach_group\030  \003(\r"
      "\022#\n\033min_length_of_spinach_group\030! \001(\r\022#\n"
      "\033max_length_of_spinach_group\030\" \001(\r\022 \n\030di"
      "stance_to_another_ring\030# \003(\r\022$\n\034min_dist"
      "ance_to_another_ring\030$ \001(\r\022$\n\034max_distan"
      "ce_to_another_ring\030% \001(\r\022!\n\031strongly_fus"
      "ed_ring_count\030& \003(\r\022%\n\035min_strongly_fuse"
      "d_ring_count\030\' \001(\r\022%\n\035max_strongly_fused"
      "_ring_count\030( \001(\r\"\346\016\n\031SubstructureAtomSp"
      "ecifier\022\025\n\ratomic_symbol\030\001 \003(\t\022\025\n\ratomic"
      "_number\030\002 \003(\r\022\014\n\004ncon\030\003 \003(\r\022\020\n\010min_ncon\030"
      "\004 \001(\r\022\020\n\010max_ncon\030\005 \001(\r\022\r\n\005ncon2\030\006 \003(\r\022\021"
      "\n\tmin_ncon2\030\007 \001(\r\022\021\n\tmax_ncon2\030\010 \001(\r\022\016\n\006"
      "nbonds\030\t \003(\r\022\022\n\nmin_nbonds\030\n \001(\r\022\022\n\nmax_"
      "nbonds\030\013 \001(\r\022\025\n\rformal_charge\030\014 \003(\005\022\031\n\021m"
      "in_formal_charge\030\r \001(\005\022\031\n\021max_formal_cha"
      "rge\030\016 \001(\005\022\016\n\006nrings\030\017 \003(\r\022\022\n\nmin_nrings\030"
      "\020 \001(\r\022\022\n\nmax_nrings\030\021 \001(\r\022\027\n\017ring_bond_c"
      "ount\030\022 \003(\r\022\033\n\023min_ring_bond_count\030\023 \001(\r\022"
      "\033\n\023max_ring_bond_count\030\024 \001(\r\022\021\n\tring_siz"
      "e\030\025 \003(\r\022\025\n\rmin_ring_size\030\026 \001(\r\022\025\n\rmax_ri"
      "ng_size\030\027 \001(\r\022\016\n\006hcount\030\030 \003(\r\022\022\n\nmin_hco"
      "unt\030\031 \001(\r\022\022\n\nmax_hcount\030\032 \001(\r\022\020\n\010aromati"
      "c\030\033 \001(\010\022\021\n\tchirality\030\034 \001(\010\022\032\n\022aromatic_r"
      "ing_size\030\036 \003(\r\022\036\n\026min_aromatic_ring_size"
      "\030\037 \001(\r\022\036\n\026max_aromatic_ring_size\030  \001(\r\022\033"
      "\n\023aliphatic_ring_size\030! \003(\r\022\037\n\027min_aliph"
      "atic_ring_size\030\" \001(\r\022\037\n\027max_aliphatic_ri"
      "ng_size\030# \001(\r\022!\n\031attached_heteroatom_cou"
      "nt\030$ \003(\r\022%\n\035min_attached_heteroatom_coun"
      "t\030% \001(\r\022%\n\035max_attached_heteroatom_count"
      "\030& \001(\r\022\027\n\017lone_pair_count\030\' \003(\r\022\033\n\023min_l"
      "one_pair_count\030( \001(\r\022\033\n\023max_lone_pair_co"
      "unt\030) \001(\r\022\024\n\014unsaturation\030* \003(\r\022\030\n\020min_u"
      "nsaturation\030+ \001(\r\022\030\n\020max_unsaturation\030, "
      "\001(\r\022\022\n\ndaylight_x\030- \003(\r\022\026\n\016min_daylight_"
      "x\030. \001(\r\022\026\n\016max_daylight_x\030/ \001(\r\022\017\n\007isoto"
      "pe\0300 \003(\r\022\023\n\013min_isotope\0301 \001(\r\022\023\n\013max_iso"
      "tope\0302 \001(\r\022\014\n\004aryl\0303 \003(\r\022\020\n\010min_aryl\0304 \001"
      "(\r\022\020\n\010max_aryl\0305 \001(\r\022\031\n\021fused_system_siz"
      "e\0306 \003(\r\022\035\n\025min_fused_system_size\0307 \001(\r\022\035"
      "\n\025max_fused_system_size\0308 \001(\r\022\r\n\005vinyl\0309"
      " \003(\r\022\021\n\tmin_vinyl\030: \001(\r\022\021\n\tmax_vinyl\030; \001"
      "(\r\022\030\n\020all_rings_kekule\030< \001(\010\022\033\n\023heteroat"
      "oms_in_ring\030= \003(\r\022\037\n\027min_heteroatoms_in_"
      "ring\030> \001(\r\022\037\n\027max_heteroatoms_in_ring\030\? "
      "\001(\r\022\032\n\022match_spinach_only\030@ \001(\005\022\'\n\037scaff"
      "old_bonds_attached_to_ring\030A \003(\r\022+\n#min_"
      "scaffold_bonds_attached_to_ring\030B \001(\r\022+\n"
      "#max_scaffold_bonds_attached_to_ring\030C \001"
      "(\r\022\030\n\020preference_value\030D \001(\005\022\027\n\017symmetry"
      "_degree\030E \003(\r\022\033\n\023min_symmetry_degree\030F \001"
      "(\r\022\033\n\023max_symmetry_degree\030G \001(\r\022\026\n\016symme"
      "try_group\030H \001(\005\0226\n\020logical_operator\030L \001("
      "\0162\034.SubstructureSearch.Operator\022\026\n\016user_"
      "atom_type\030M \001(\r\022\021\n\tatom_type\030N \001(\r\"v\n\033Su"
      "bstructureAtomEnvironment\022\n\n\002id\030\001 \001(\r\022\?\n"
      "\021substructure_atom\030\002 \003(\0132$.SubstructureS"
      "earch.SubstructureAtom\022\n\n\002op\030\003 \001(\t\"\226\007\n\020S"
      "ubstructureAtom\022\n\n\002id\030\001 \001(\005\022\026\n\016match_as_"
      "match\030\002 \001(\010\022\027\n\017text_identifier\030\003 \001(\t\022\027\n\017"
      "atom_map_number\030\004 \001(\r\022\033\n\023initial_atom_nu"
      "mber\030\005 \001(\r\022\r\n\005or_id\030\006 \001(\r\022F\n\017atom_proper"
      "ties\030\007 \003(\0132-.SubstructureSearch.Substruc"
      "tureAtomSpecifier\022\023\n\013or_operator\030\010 \001(\005\022\017"
      "\n\007ring_id\030\t \001(\005\022\027\n\017fused_system_id\030\n \001(\r"
      "\022\023\n\013fragment_id\030\013 \001(\005\022\025\n\rnumeric_value\030\014"
      " \001(\001\022\034\n\024include_in_embedding\030\r \001(\010\022\020\n\006sm"
      "arts\030\016 \001(\tH\000\022\025\n\013atom_smarts\030\017 \001(\tH\000\022\020\n\006s"
      "miles\030\020 \001(\tH\000\022D\n\013environment\030\021 \003(\0132/.Sub"
      "structureSearch.SubstructureAtomEnvironm"
      "ent\0228\n\nquery_bond\030\025 \003(\0132$.SubstructureSe"
      "arch.SubstructureBond\022\023\n\013bond_smarts\030\026 \001"
      "(\t\022\023\n\013single_bond\030\031 \003(\r\022\023\n\013double_bond\030\032"
      " \003(\r\022\023\n\013triple_bond\030\033 \003(\r\022\025\n\raromatic_bo"
      "nd\030\034 \003(\r\022\014\n\004bond\030\035 \003(\r\022A\n\npreference\030\027 \003"
      "(\0132-.SubstructureSearch.SubstructureAtom"
      "Specifier\022\037\n\027sum_all_preference_hits\030\030 \001"
      "(\010\022 \n\030unmatched_atoms_attached\030\036 \003(\r\022$\n\034"
      "min_unmatched_atoms_attached\030\037 \001(\r\022$\n\034ma"
      "x_unmatched_atoms_attached\030  \001(\r\022\027\n\017atom"
      "_type_group\030! \001(\rB\020\n\016SmilesOrSmarts\"\340\003\n\027"
      "SubstructureEnvironment\022\n\n\002id\030\001 \001(\r\022\016\n\006s"
      "marts\030\003 \003(\t\022\016\n\006smiles\030\004 \003(\t\0228\n\nquery_ato"
      "m\030\005 \003(\0132$.SubstructureSearch.Substructur"
      "eAtom\022=\n\nattachment\030\006 \001(\0132).Substructure"
      "Search.EnvironmentAttachment\022\014\n\004bond\030\007 \003"
      "(\t\022\r\n\005or_id\030\010 \001(\r\022\016\n\006and_id\030\t \001(\r\022\023\n\013hit"
      "s_needed\030\n \003(\r\022\027\n\017min_hits_needed\030\013 \001(\r\022"
      "\027\n\017max_hits_needed\030\014 \001(\r\022%\n\035no_other_sub"
      "stituents_allowed\030\r \001(\010\022/\n\'env_matches_c"
      "an_share_attachment_points\030\017 \001(\010\022\033\n\023max_"
      "matches_to_find\030\020 \001(\r\022\023\n\013hydrogen_ok\030\021 \001"
      "(\010\022\"\n\032max_env_matches_per_anchor\030\022 \001(\r\"\245"
      "\036\n\027SingleSubstructureQuery\022\n\n\002id\030\001 \001(\005\022\r"
      "\n\005label\030\002 \001(\t\022\017\n\007comment\030\003 \001(\t\022$\n\034one_em"
      "bedding_per_start_atom\030\004 \001(\010\022$\n\034normalis"
      "e_rc_per_hits_needed\030\005 \001(\r\022\030\n\020subtract_f"
      "rom_rc\030\006 \001(\r\022\033\n\023max_matches_to_find\030\010 \001("
      "\r\022\032\n\022save_matched_atoms\030\t \001(\010\022$\n\034ncon_ig"
      "nore_singly_connected\030\n \001(\010\022&\n\036perceive_"
      "symmetric_equivalents\030\013 \001(\010\022\037\n\027implicit_"
      "ring_condition\030\014 \001(\r\022!\n\031all_hits_in_same"
      "_fragment\030\r \001(\010\022#\n\033only_match_largest_fr"
      "agment\030\016 \001(\010\022!\n\031embeddings_do_not_overla"
      "p\030\017 \001(\010\022 \n\030sort_by_preference_value\030\020 \001("
      "\010\022\020\n\006smiles\030\021 \001(\tH\000\022\020\n\006smarts\030\022 \001(\tH\000\022\025\n"
      "\rnumeric_value\030\023 \003(\001\022K\n\030no_matched_atoms"
      "_between\030\024 \003(\0132).SubstructureSearch.NoMa"
      "tchedAtomsBetween\022+\n#no_matched_atoms_be"
      "tween_exhaustive\030\025 \001(\010\0221\n\nlink_atoms\030\026 \003"
      "(\0132\035.SubstructureSearch.LinkAtoms\022$\n\034fai"
      "l_if_embeddings_too_close\030\027 \001(\010\022$\n\034dista"
      "nce_between_hits_ncheck\030\030 \001(\r\022\024\n\014sort_ma"
      "tches\030\031 \001(\t\022!\n\031attached_heteroatom_count"
      "\030\032 \003(\r\022%\n\035min_attached_heteroatom_count\030"
      "\033 \001(\r\022%\n\035max_attached_heteroatom_count\030\034"
      " \001(\r\022\023\n\013hits_needed\030\035 \003(\r\022\027\n\017min_hits_ne"
      "eded\030\036 \001(\r\022\027\n\017max_hits_needed\030\037 \001(\r\022\032\n\022r"
      "ing_atoms_matched\030  \003(\r\022\036\n\026min_ring_atom"
      "s_matched\030! \001(\r\022\036\n\026max_ring_atoms_matche"
      "d\030\" \001(\r\022\033\n\023heteroatoms_matched\030# \003(\r\022\037\n\027"
      "min_heteroatoms_matched\030$ \001(\r\022\037\n\027max_het"
      "eroatoms_matched\030% \001(\r\022\037\n\027heteroatoms_in"
      "_molecule\030& \003(\r\022#\n\033min_heteroatoms_in_mo"
      "lecule\030\' \001(\r\022#\n\033max_heteroatoms_in_molec"
      "ule\030( \001(\r\022\016\n\006natoms\030) \003(\r\022\022\n\nmin_natoms\030"
      "* \001(\r\022\022\n\nmax_natoms\030+ \001(\r\022\016\n\006nrings\030, \003("
      "\r\022\022\n\nmin_nrings\030- \001(\r\022\022\n\nmax_nrings\030. \001("
      "\r\022\014\n\004ncon\030/ \003(\r\022\020\n\010min_ncon\0300 \001(\r\022\020\n\010max"
      "_ncon\0301 \001(\r\022\023\n\013fused_rings\0302 \003(\r\022\027\n\017min_"
      "fused_rings\0303 \001(\r\022\027\n\017max_fused_rings\0304 \001"
      "(\r\022\034\n\024strongly_fused_rings\0305 \003(\r\022 \n\030min_"
      "strongly_fused_rings\0306 \001(\r\022 \n\030max_strong"
      "ly_fused_rings\0307 \001(\r\022\026\n\016isolated_rings\0308"
      " \003(\r\022\032\n\022min_isolated_rings\0309 \001(\r\022\032\n\022max_"
      "isolated_rings\030: \001(\r\022\035\n\025isolated_ring_ob"
      "jects\030; \003(\r\022!\n\031min_isolated_ring_objects"
      "\030< \001(\r\022!\n\031max_isolated_ring_objects\030= \001("
      "\r\022\026\n\016aromatic_rings\030> \003(\r\022\032\n\022min_aromati"
      "c_rings\030\? \001(\r\022\032\n\022max_aromatic_rings\030@ \001("
      "\r\022\032\n\022non_aromatic_rings\030A \003(\r\022\036\n\026min_non"
      "_aromatic_rings\030B \001(\r\022\036\n\026max_non_aromati"
      "c_rings\030C \001(\r\022\035\n\025distance_between_hits\030D"
      " \003(\r\022!\n\031min_distance_between_hits\030E \001(\r\022"
      "!\n\031max_distance_between_hits\030F \001(\r\022\035\n\025nu"
      "mber_isotopic_atoms\030G \003(\r\022!\n\031min_number_"
      "isotopic_atoms\030H \001(\r\022!\n\031max_number_isoto"
      "pic_atoms\030I \001(\r\022\030\n\020number_fragments\030J \003("
      "\r\022\034\n\024min_number_fragments\030K \001(\r\022\034\n\024max_n"
      "umber_fragments\030L \001(\r\022#\n\033distance_betwee"
      "n_root_atoms\030M \003(\r\022\'\n\037min_distance_betwe"
      "en_root_atoms\030N \001(\r\022\'\n\037max_distance_betw"
      "een_root_atoms\030O \001(\r\022\030\n\020atoms_in_spinach"
      "\030P \003(\r\022\034\n\024min_atoms_in_spinach\030Q \001(\r\022\034\n\024"
      "max_atoms_in_spinach\030R \001(\r\022\030\n\020inter_ring"
      "_atoms\030S \003(\r\022\034\n\024min_inter_ring_atoms\030T \001"
      "(\r\022\034\n\024max_inter_ring_atoms\030U \001(\r\022\027\n\017unma"
      "tched_atoms\030V \003(\r\022\033\n\023min_unmatched_atoms"
      "\030W \001(\r\022\033\n\023max_unmatched_atoms\030X \001(\r\022\031\n\021n"
      "et_formal_charge\030Y \003(\005\022\035\n\025min_net_formal"
      "_charge\030Z \001(\005\022\035\n\025max_net_formal_charge\030["
      " \001(\005\022\"\n\032min_fraction_atoms_matched\030\\ \001(\002"
      "\022\"\n\032max_fraction_atoms_matched\030] \001(\002\022@\n\013"
      "environment\030^ \003(\0132+.SubstructureSearch.S"
      "ubstructureEnvironment\022I\n\024environment_no"
      "_match\030_ \003(\0132+.SubstructureSearch.Substr"
      "uctureEnvironment\022.\n&environment_must_ma"
      "tch_unmatched_atoms\030` \001(\010\022/\n\'env_matches"
      "_can_share_attachment_points\030a \001(\010\022M\n\022ri"
      "ng_specification\030b \003(\01321.SubstructureSea"
      "rch.SubstructureRingSpecification\022\?\n\031rin"
      "g_specification_logexp\030c \003(\0162\034.Substruct"
      "ureSearch.Operator\022V\n\025ring_system_specif"
      "ier\030d \003(\01327.SubstructureSearch.Substruct"
      "ureRingSystemSpecification\022B\n\034ring_syste"
      "m_specifier_logexp\030e \003(\0162\034.SubstructureS"
      "earch.Operator\022\?\n\023element_hits_needed\030f "
      "\003(\0132\".SubstructureSearch.ElementsNeeded\022"
      ";\n\017elements_needed\030g \003(\0132\".SubstructureS"
      "earch.ElementsNeeded\022\026\n\016aromatic_atoms\030h"
      " \003(\r\022\032\n\022min_aromatic_atoms\030i \001(\r\022\032\n\022max_"
      "aromatic_atoms\030j \001(\r\022\036\n\026unique_embedding"
      "s_only\030n \001(\010\022\023\n\013heteroatoms\030p \003(\r\022&\n\036res"
      "pect_initial_atom_numbering\030q \001(\010\022\033\n\023com"
      "press_embeddings\030r \001(\010\0220\n(environments_c"
      "an_share_attachment_points\030s \001(\010\0228\n\nquer"
      "y_atom\030t \003(\0132$.SubstructureSearch.Substr"
      "uctureAtom\022C\n\rchiral_centre\030u \003(\0132,.Subs"
      "tructureSearch.SubstructureChiralCenter\022"
      "\021\n\tatom_type\030w \001(\tB\022\n\020smiles_or_smarts\"\254"
      "\001\n\021SubstructureQuery\022\017\n\007comment\030\001 \001(\t\022:\n"
      "\005query\030\002 \003(\0132+.SubstructureSearch.Single"
      "SubstructureQuery\022,\n\006logexp\030\003 \003(\0162\034.Subs"
      "tructureSearch.Operator\022\034\n\024match_each_co"
      "mponent\030\004 \001(\005\"=\n\022MinMaxSpecifierInt\022\r\n\005v"
      "alue\030\001 \003(\005\022\013\n\003min\030\002 \001(\005\022\013\n\003max\030\003 \001(\005\">\n\023"
      "MinMaxSpecifierUInt\022\r\n\005value\030\001 \003(\r\022\013\n\003mi"
      "n\030\002 \001(\r\022\013\n\003max\030\003 \001(\r\"\231\001\n\021QueryMatchResul"
      "ts\022\016\n\006smiles\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022>\n\007matc"
      "hes\030\003 \003(\0132-.SubstructureSearch.QueryMatc"
      "hResults.Matches\032&\n\007Matches\022\014\n\004name\030\001 \001("
      "\t\022\r\n\005nhits\030\002 \001(\r*0\n\013Aromaticity\022\020\n\014SS_AL"
      "IPHATIC\020\001\022\017\n\013SS_AROMATIC\020\002*i\n\010BondType\022\022"
      "\n\016SS_SINGLE_BOND\020\003\022\022\n\016SS_DOUBLE_BOND\020\004\022\022"
      "\n\016SS_TRIPLE_BOND\020\005\022\024\n\020SS_AROMATIC_BOND\020\006"
      "\022\013\n\007SS_BOND\020\007*<\n\010Operator\022\t\n\005SS_OR\020\010\022\n\n\006"
      "SS_AND\020\t\022\n\n\006SS_XOR\020\n\022\r\n\tSS_LP_AND\020\013"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 12035);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "substructure.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_substructure_2eproto
namespace SubstructureSearch {
const ::google::protobuf::EnumDescriptor* Aromaticity_descriptor() {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_substructure_2eproto::file_level_enum_descriptors[0];
}
bool Aromaticity_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BondType_descriptor() {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_substructure_2eproto::file_level_enum_descriptors[1];
}
bool BondType_IsValid(int value) {
  switch (value) {
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Operator_descriptor() {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_substructure_2eproto::file_level_enum_descriptors[2];
}
bool Operator_IsValid(int value) {
  switch (value) {
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AtomNumberOrHLp::InitAsDefaultInstance() {
  ::SubstructureSearch::_AtomNumberOrHLp_default_instance_.atom_number_ = 0u;
  ::SubstructureSearch::_AtomNumberOrHLp_default_instance_.h_or_lp_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AtomNumberOrHLp::kAtomNumberFieldNumber;
const int AtomNumberOrHLp::kHOrLpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AtomNumberOrHLp::AtomNumberOrHLp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substructure_2eproto::scc_info_AtomNumberOrHLp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstructureSearch.AtomNumberOrHLp)
}
AtomNumberOrHLp::AtomNumberOrHLp(const AtomNumberOrHLp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_AtomNumberOr();
  switch (from.AtomNumberOr_case()) {
    case kAtomNumber: {
      set_atom_number(from.atom_number());
      break;
    }
    case kHOrLp: {
      set_h_or_lp(from.h_or_lp());
      break;
    }
    case ATOMNUMBEROR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.AtomNumberOrHLp)
}

void AtomNumberOrHLp::SharedCtor() {
  clear_has_AtomNumberOr();
}

AtomNumberOrHLp::~AtomNumberOrHLp() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.AtomNumberOrHLp)
  SharedDtor();
}

void AtomNumberOrHLp::SharedDtor() {
  if (has_AtomNumberOr()) {
    clear_AtomNumberOr();
  }
}

void AtomNumberOrHLp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AtomNumberOrHLp::descriptor() {
  ::protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AtomNumberOrHLp& AtomNumberOrHLp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substructure_2eproto::scc_info_AtomNumberOrHLp.base);
  return *internal_default_instance();
}


void AtomNumberOrHLp::clear_AtomNumberOr() {
// @@protoc_insertion_point(one_of_clear_start:SubstructureSearch.AtomNumberOrHLp)
  switch (AtomNumberOr_case()) {
    case kAtomNumber: {
      // No need to clear
      break;
    }
    case kHOrLp: {
      AtomNumberOr_.h_or_lp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ATOMNUMBEROR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ATOMNUMBEROR_NOT_SET;
}


void AtomNumberOrHLp::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.AtomNumberOrHLp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_AtomNumberOr();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AtomNumberOrHLp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstructureSearch.AtomNumberOrHLp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 atom_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_AtomNumberOr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &AtomNumberOr_.atom_number_)));
          set_has_atom_number();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string h_or_lp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_h_or_lp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->h_or_lp().data(), static_cast<int>(this->h_or_lp().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.AtomNumberOrHLp.h_or_lp");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstructureSearch.AtomNumberOrHLp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstructureSearch.AtomNumberOrHLp)
  return false;
#undef DO_
}

void AtomNumberOrHLp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstructureSearch.AtomNumberOrHLp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (AtomNumberOr_case()) {
    case kAtomNumber:
      ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->atom_number(), output);
      break;
    case kHOrLp:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->h_or_lp().data(), static_cast<int>(this->h_or_lp().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "SubstructureSearch.AtomNumberOrHLp.h_or_lp");
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        2, this->h_or_lp(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstructureSearch.AtomNumberOrHLp)
}

::google::protobuf::uint8* AtomNumberOrHLp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.AtomNumberOrHLp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (AtomNumberOr_case()) {
    case kAtomNumber:
      target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->atom_number(), target);
      break;
    case kHOrLp:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->h_or_lp().data(), static_cast<int>(this->h_or_lp().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "SubstructureSearch.AtomNumberOrHLp.h_or_lp");
      target =
        ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
          2, this->h_or_lp(), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.AtomNumberOrHLp)
  return target;
}

size_t AtomNumberOrHLp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.AtomNumberOrHLp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (AtomNumberOr_case()) {
    // optional uint32 atom_number = 1;
    case kAtomNumber: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atom_number());
      break;
    }
    // optional string h_or_lp = 2;
    case kHOrLp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->h_or_lp());
      break;
    }
    case ATOMNUMBEROR_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AtomNumberOrHLp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.AtomNumberOrHLp)
  GOOGLE_DCHECK_NE(&from, this);
  const AtomNumberOrHLp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AtomNumberOrHLp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.AtomNumberOrHLp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.AtomNumberOrHLp)
    MergeFrom(*source);
  }
}

void AtomNumberOrHLp::MergeFrom(const AtomNumberOrHLp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.AtomNumberOrHLp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.AtomNumberOr_case()) {
    case kAtomNumber: {
      set_atom_number(from.atom_number());
      break;
    }
    case kHOrLp: {
      set_h_or_lp(from.h_or_lp());
      break;
    }
    case ATOMNUMBEROR_NOT_SET: {
      break;
    }
  }
}

void AtomNumberOrHLp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.AtomNumberOrHLp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AtomNumberOrHLp::CopyFrom(const AtomNumberOrHLp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.AtomNumberOrHLp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AtomNumberOrHLp::IsInitialized() const {
  return true;
}

void AtomNumberOrHLp::Swap(AtomNumberOrHLp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AtomNumberOrHLp::InternalSwap(AtomNumberOrHLp* other) {
  using std::swap;
  swap(AtomNumberOr_, other->AtomNumberOr_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AtomNumberOrHLp::GetMetadata() const {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubstructureChiralCenter::InitAsDefaultInstance() {
  ::SubstructureSearch::_SubstructureChiralCenter_default_instance_._instance.get_mutable()->top_front_ = const_cast< ::SubstructureSearch::AtomNumberOrHLp*>(
      ::SubstructureSearch::AtomNumberOrHLp::internal_default_instance());
  ::SubstructureSearch::_SubstructureChiralCenter_default_instance_._instance.get_mutable()->top_back_ = const_cast< ::SubstructureSearch::AtomNumberOrHLp*>(
      ::SubstructureSearch::AtomNumberOrHLp::internal_default_instance());
  ::SubstructureSearch::_SubstructureChiralCenter_default_instance_._instance.get_mutable()->left_down_ = const_cast< ::SubstructureSearch::AtomNumberOrHLp*>(
      ::SubstructureSearch::AtomNumberOrHLp::internal_default_instance());
  ::SubstructureSearch::_SubstructureChiralCenter_default_instance_._instance.get_mutable()->right_down_ = const_cast< ::SubstructureSearch::AtomNumberOrHLp*>(
      ::SubstructureSearch::AtomNumberOrHLp::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubstructureChiralCenter::kCenterFieldNumber;
const int SubstructureChiralCenter::kTopFrontFieldNumber;
const int SubstructureChiralCenter::kTopBackFieldNumber;
const int SubstructureChiralCenter::kLeftDownFieldNumber;
const int SubstructureChiralCenter::kRightDownFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubstructureChiralCenter::SubstructureChiralCenter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substructure_2eproto::scc_info_SubstructureChiralCenter.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstructureSearch.SubstructureChiralCenter)
}
SubstructureChiralCenter::SubstructureChiralCenter(const SubstructureChiralCenter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_top_front()) {
    top_front_ = new ::SubstructureSearch::AtomNumberOrHLp(*from.top_front_);
  } else {
    top_front_ = NULL;
  }
  if (from.has_top_back()) {
    top_back_ = new ::SubstructureSearch::AtomNumberOrHLp(*from.top_back_);
  } else {
    top_back_ = NULL;
  }
  if (from.has_left_down()) {
    left_down_ = new ::SubstructureSearch::AtomNumberOrHLp(*from.left_down_);
  } else {
    left_down_ = NULL;
  }
  if (from.has_right_down()) {
    right_down_ = new ::SubstructureSearch::AtomNumberOrHLp(*from.right_down_);
  } else {
    right_down_ = NULL;
  }
  center_ = from.center_;
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureChiralCenter)
}

void SubstructureChiralCenter::SharedCtor() {
  ::memset(&top_front_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&center_) -
      reinterpret_cast<char*>(&top_front_)) + sizeof(center_));
}

SubstructureChiralCenter::~SubstructureChiralCenter() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureChiralCenter)
  SharedDtor();
}

void SubstructureChiralCenter::SharedDtor() {
  if (this != internal_default_instance()) delete top_front_;
  if (this != internal_default_instance()) delete top_back_;
  if (this != internal_default_instance()) delete left_down_;
  if (this != internal_default_instance()) delete right_down_;
}

void SubstructureChiralCenter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubstructureChiralCenter::descriptor() {
  ::protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubstructureChiralCenter& SubstructureChiralCenter::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substructure_2eproto::scc_info_SubstructureChiralCenter.base);
  return *internal_default_instance();
}


void SubstructureChiralCenter::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureChiralCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(top_front_ != NULL);
      top_front_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(top_back_ != NULL);
      top_back_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(left_down_ != NULL);
      left_down_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(right_down_ != NULL);
      right_down_->Clear();
    }
  }
  center_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubstructureChiralCenter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstructureSearch.SubstructureChiralCenter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 center = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_center();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SubstructureSearch.AtomNumberOrHLp top_front = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_top_front()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SubstructureSearch.AtomNumberOrHLp top_back = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_top_back()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SubstructureSearch.AtomNumberOrHLp left_down = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left_down()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SubstructureSearch.AtomNumberOrHLp right_down = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_down()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstructureSearch.SubstructureChiralCenter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstructureSearch.SubstructureChiralCenter)
  return false;
#undef DO_
}

void SubstructureChiralCenter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstructureSearch.SubstructureChiralCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 center = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->center(), output);
  }

  // optional .SubstructureSearch.AtomNumberOrHLp top_front = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_top_front(), output);
  }

  // optional .SubstructureSearch.AtomNumberOrHLp top_back = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_top_back(), output);
  }

  // optional .SubstructureSearch.AtomNumberOrHLp left_down = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_left_down(), output);
  }

  // optional .SubstructureSearch.AtomNumberOrHLp right_down = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_right_down(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstructureSearch.SubstructureChiralCenter)
}

::google::protobuf::uint8* SubstructureChiralCenter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureChiralCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 center = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->center(), target);
  }

  // optional .SubstructureSearch.AtomNumberOrHLp top_front = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_top_front(), deterministic, target);
  }

  // optional .SubstructureSearch.AtomNumberOrHLp top_back = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_top_back(), deterministic, target);
  }

  // optional .SubstructureSearch.AtomNumberOrHLp left_down = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_left_down(), deterministic, target);
  }

  // optional .SubstructureSearch.AtomNumberOrHLp right_down = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_right_down(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureChiralCenter)
  return target;
}

size_t SubstructureChiralCenter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureChiralCenter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .SubstructureSearch.AtomNumberOrHLp top_front = 2;
    if (has_top_front()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *top_front_);
    }

    // optional .SubstructureSearch.AtomNumberOrHLp top_back = 3;
    if (has_top_back()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *top_back_);
    }

    // optional .SubstructureSearch.AtomNumberOrHLp left_down = 4;
    if (has_left_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *left_down_);
    }

    // optional .SubstructureSearch.AtomNumberOrHLp right_down = 5;
    if (has_right_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *right_down_);
    }

    // optional uint32 center = 1;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->center());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureChiralCenter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureChiralCenter)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureChiralCenter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubstructureChiralCenter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureChiralCenter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureChiralCenter)
    MergeFrom(*source);
  }
}

void SubstructureChiralCenter::MergeFrom(const SubstructureChiralCenter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureChiralCenter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_top_front()->::SubstructureSearch::AtomNumberOrHLp::MergeFrom(from.top_front());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_top_back()->::SubstructureSearch::AtomNumberOrHLp::MergeFrom(from.top_back());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_left_down()->::SubstructureSearch::AtomNumberOrHLp::MergeFrom(from.left_down());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_right_down()->::SubstructureSearch::AtomNumberOrHLp::MergeFrom(from.right_down());
    }
    if (cached_has_bits & 0x00000010u) {
      center_ = from.center_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubstructureChiralCenter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureChiralCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureChiralCenter::CopyFrom(const SubstructureChiralCenter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureChiralCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureChiralCenter::IsInitialized() const {
  return true;
}

void SubstructureChiralCenter::Swap(SubstructureChiralCenter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubstructureChiralCenter::InternalSwap(SubstructureChiralCenter* other) {
  using std::swap;
  swap(top_front_, other->top_front_);
  swap(top_back_, other->top_back_);
  swap(left_down_, other->left_down_);
  swap(right_down_, other->right_down_);
  swap(center_, other->center_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubstructureChiralCenter::GetMetadata() const {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubstructureBond::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubstructureBond::kBondTypeFieldNumber;
const int SubstructureBond::kOtherEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubstructureBond::SubstructureBond()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substructure_2eproto::scc_info_SubstructureBond.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstructureSearch.SubstructureBond)
}
SubstructureBond::SubstructureBond(const SubstructureBond& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      bond_type_(from.bond_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  other_end_ = from.other_end_;
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureBond)
}

void SubstructureBond::SharedCtor() {
  other_end_ = 0u;
}

SubstructureBond::~SubstructureBond() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureBond)
  SharedDtor();
}

void SubstructureBond::SharedDtor() {
}

void SubstructureBond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubstructureBond::descriptor() {
  ::protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubstructureBond& SubstructureBond::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substructure_2eproto::scc_info_SubstructureBond.base);
  return *internal_default_instance();
}


void SubstructureBond::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureBond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bond_type_.Clear();
  other_end_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubstructureBond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstructureSearch.SubstructureBond)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SubstructureSearch.BondType bond_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SubstructureSearch::BondType_IsValid(value)) {
            add_bond_type(static_cast< ::SubstructureSearch::BondType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::SubstructureSearch::BondType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_bond_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 other_end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_other_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &other_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstructureSearch.SubstructureBond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstructureSearch.SubstructureBond)
  return false;
#undef DO_
}

void SubstructureBond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstructureSearch.SubstructureBond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SubstructureSearch.BondType bond_type = 1;
  for (int i = 0, n = this->bond_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->bond_type(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 other_end = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->other_end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstructureSearch.SubstructureBond)
}

::google::protobuf::uint8* SubstructureBond::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureBond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SubstructureSearch.BondType bond_type = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->bond_type_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 other_end = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->other_end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureBond)
  return target;
}

size_t SubstructureBond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureBond)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SubstructureSearch.BondType bond_type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->bond_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->bond_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional uint32 other_end = 2;
  if (has_other_end()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->other_end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureBond::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureBond)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureBond* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubstructureBond>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureBond)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureBond)
    MergeFrom(*source);
  }
}

void SubstructureBond::MergeFrom(const SubstructureBond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureBond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bond_type_.MergeFrom(from.bond_type_);
  if (from.has_other_end()) {
    set_other_end(from.other_end());
  }
}

void SubstructureBond::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureBond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureBond::CopyFrom(const SubstructureBond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureBond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureBond::IsInitialized() const {
  return true;
}

void SubstructureBond::Swap(SubstructureBond* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubstructureBond::InternalSwap(SubstructureBond* other) {
  using std::swap;
  bond_type_.InternalSwap(&other->bond_type_);
  swap(other_end_, other->other_end_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubstructureBond::GetMetadata() const {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubstructureEnvironmentBond::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubstructureEnvironmentBond::kBondTypeFieldNumber;
const int SubstructureEnvironmentBond::kOtherEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubstructureEnvironmentBond::SubstructureEnvironmentBond()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substructure_2eproto::scc_info_SubstructureEnvironmentBond.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstructureSearch.SubstructureEnvironmentBond)
}
SubstructureEnvironmentBond::SubstructureEnvironmentBond(const SubstructureEnvironmentBond& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      bond_type_(from.bond_type_),
      other_end_(from.other_end_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureEnvironmentBond)
}

void SubstructureEnvironmentBond::SharedCtor() {
}

SubstructureEnvironmentBond::~SubstructureEnvironmentBond() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureEnvironmentBond)
  SharedDtor();
}

void SubstructureEnvironmentBond::SharedDtor() {
}

void SubstructureEnvironmentBond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubstructureEnvironmentBond::descriptor() {
  ::protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubstructureEnvironmentBond& SubstructureEnvironmentBond::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substructure_2eproto::scc_info_SubstructureEnvironmentBond.base);
  return *internal_default_instance();
}


void SubstructureEnvironmentBond::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureEnvironmentBond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bond_type_.Clear();
  other_end_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubstructureEnvironmentBond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstructureSearch.SubstructureEnvironmentBond)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SubstructureSearch.BondType bond_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SubstructureSearch::BondType_IsValid(value)) {
            add_bond_type(static_cast< ::SubstructureSearch::BondType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::SubstructureSearch::BondType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_bond_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 other_end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_other_end())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_other_end())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstructureSearch.SubstructureEnvironmentBond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstructureSearch.SubstructureEnvironmentBond)
  return false;
#undef DO_
}

void SubstructureEnvironmentBond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstructureSearch.SubstructureEnvironmentBond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SubstructureSearch.BondType bond_type = 1;
  for (int i = 0, n = this->bond_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->bond_type(i), output);
  }

  // repeated uint32 other_end = 2;
  for (int i = 0, n = this->other_end_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->other_end(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstructureSearch.SubstructureEnvironmentBond)
}

::google::protobuf::uint8* SubstructureEnvironmentBond::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureEnvironmentBond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SubstructureSearch.BondType bond_type = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->bond_type_, target);

  // repeated uint32 other_end = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->other_end_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureEnvironmentBond)
  return target;
}

size_t SubstructureEnvironmentBond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureEnvironmentBond)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SubstructureSearch.BondType bond_type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->bond_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->bond_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated uint32 other_end = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->other_end_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->other_end_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureEnvironmentBond::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureEnvironmentBond)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureEnvironmentBond* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubstructureEnvironmentBond>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureEnvironmentBond)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureEnvironmentBond)
    MergeFrom(*source);
  }
}

void SubstructureEnvironmentBond::MergeFrom(const SubstructureEnvironmentBond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureEnvironmentBond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bond_type_.MergeFrom(from.bond_type_);
  other_end_.MergeFrom(from.other_end_);
}

void SubstructureEnvironmentBond::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureEnvironmentBond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureEnvironmentBond::CopyFrom(const SubstructureEnvironmentBond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureEnvironmentBond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureEnvironmentBond::IsInitialized() const {
  return true;
}

void SubstructureEnvironmentBond::Swap(SubstructureEnvironmentBond* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubstructureEnvironmentBond::InternalSwap(SubstructureEnvironmentBond* other) {
  using std::swap;
  bond_type_.InternalSwap(&other->bond_type_);
  other_end_.InternalSwap(&other->other_end_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubstructureEnvironmentBond::GetMetadata() const {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ElementsNeeded::InitAsDefaultInstance() {
  ::SubstructureSearch::_ElementsNeeded_default_instance_.atomic_number_ = 0u;
  ::SubstructureSearch::_ElementsNeeded_default_instance_.atomic_symbol_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ElementsNeeded::kAtomicNumberFieldNumber;
const int ElementsNeeded::kAtomicSymbolFieldNumber;
const int ElementsNeeded::kHitsNeededFieldNumber;
const int ElementsNeeded::kMinHitsNeededFieldNumber;
const int ElementsNeeded::kMaxHitsNeededFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ElementsNeeded::ElementsNeeded()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substructure_2eproto::scc_info_ElementsNeeded.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstructureSearch.ElementsNeeded)
}
ElementsNeeded::ElementsNeeded(const ElementsNeeded& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      hits_needed_(from.hits_needed_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_hits_needed_, &from.min_hits_needed_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_hits_needed_) -
    reinterpret_cast<char*>(&min_hits_needed_)) + sizeof(max_hits_needed_));
  clear_has_ElementSpecifier();
  switch (from.ElementSpecifier_case()) {
    case kAtomicNumber: {
      set_atomic_number(from.atomic_number());
      break;
    }
    case kAtomicSymbol: {
      set_atomic_symbol(from.atomic_symbol());
      break;
    }
    case ELEMENTSPECIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.ElementsNeeded)
}

void ElementsNeeded::SharedCtor() {
  ::memset(&min_hits_needed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_hits_needed_) -
      reinterpret_cast<char*>(&min_hits_needed_)) + sizeof(max_hits_needed_));
  clear_has_ElementSpecifier();
}

ElementsNeeded::~ElementsNeeded() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.ElementsNeeded)
  SharedDtor();
}

void ElementsNeeded::SharedDtor() {
  if (has_ElementSpecifier()) {
    clear_ElementSpecifier();
  }
}

void ElementsNeeded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ElementsNeeded::descriptor() {
  ::protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ElementsNeeded& ElementsNeeded::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substructure_2eproto::scc_info_ElementsNeeded.base);
  return *internal_default_instance();
}


void ElementsNeeded::clear_ElementSpecifier() {
// @@protoc_insertion_point(one_of_clear_start:SubstructureSearch.ElementsNeeded)
  switch (ElementSpecifier_case()) {
    case kAtomicNumber: {
      // No need to clear
      break;
    }
    case kAtomicSymbol: {
      ElementSpecifier_.atomic_symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ELEMENTSPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ELEMENTSPECIFIER_NOT_SET;
}


void ElementsNeeded::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.ElementsNeeded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hits_needed_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&min_hits_needed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_hits_needed_) -
        reinterpret_cast<char*>(&min_hits_needed_)) + sizeof(max_hits_needed_));
  }
  clear_ElementSpecifier();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ElementsNeeded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstructureSearch.ElementsNeeded)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 atomic_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_ElementSpecifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ElementSpecifier_.atomic_number_)));
          set_has_atomic_number();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string atomic_symbol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_atomic_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->atomic_symbol().data(), static_cast<int>(this->atomic_symbol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.ElementsNeeded.atomic_symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 hits_needed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_hits_needed())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hits_needed())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_hits_needed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_min_hits_needed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_hits_needed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_hits_needed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_max_hits_needed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_hits_needed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstructureSearch.ElementsNeeded)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstructureSearch.ElementsNeeded)
  return false;
#undef DO_
}

void ElementsNeeded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstructureSearch.ElementsNeeded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (ElementSpecifier_case()) {
    case kAtomicNumber:
      ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->atomic_number(), output);
      break;
    case kAtomicSymbol:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->atomic_symbol().data(), static_cast<int>(this->atomic_symbol().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "SubstructureSearch.ElementsNeeded.atomic_symbol");
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        2, this->atomic_symbol(), output);
      break;
    default: ;
  }
  // repeated uint32 hits_needed = 3;
  for (int i = 0, n = this->hits_needed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->hits_needed(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 min_hits_needed = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->min_hits_needed(), output);
  }

  // optional uint32 max_hits_needed = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_hits_needed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstructureSearch.ElementsNeeded)
}

::google::protobuf::uint8* ElementsNeeded::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.ElementsNeeded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (ElementSpecifier_case()) {
    case kAtomicNumber:
      target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->atomic_number(), target);
      break;
    case kAtomicSymbol:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->atomic_symbol().data(), static_cast<int>(this->atomic_symbol().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "SubstructureSearch.ElementsNeeded.atomic_symbol");
      target =
        ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
          2, this->atomic_symbol(), target);
      break;
    default: ;
  }
  // repeated uint32 hits_needed = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->hits_needed_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 min_hits_needed = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->min_hits_needed(), target);
  }

  // optional uint32 max_hits_needed = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_hits_needed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.ElementsNeeded)
  return target;
}

size_t ElementsNeeded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.ElementsNeeded)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 hits_needed = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->hits_needed_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->hits_needed_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 min_hits_needed = 4;
    if (has_min_hits_needed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_hits_needed());
    }

    // optional uint32 max_hits_needed = 5;
    if (has_max_hits_needed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_hits_needed());
    }

  }
  switch (ElementSpecifier_case()) {
    // optional uint32 atomic_number = 1;
    case kAtomicNumber: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atomic_number());
      break;
    }
    // optional string atomic_symbol = 2;
    case kAtomicSymbol: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->atomic_symbol());
      break;
    }
    case ELEMENTSPECIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElementsNeeded::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.ElementsNeeded)
  GOOGLE_DCHECK_NE(&from, this);
  const ElementsNeeded* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ElementsNeeded>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.ElementsNeeded)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.ElementsNeeded)
    MergeFrom(*source);
  }
}

void ElementsNeeded::MergeFrom(const ElementsNeeded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.ElementsNeeded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hits_needed_.MergeFrom(from.hits_needed_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      min_hits_needed_ = from.min_hits_needed_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_hits_needed_ = from.max_hits_needed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.ElementSpecifier_case()) {
    case kAtomicNumber: {
      set_atomic_number(from.atomic_number());
      break;
    }
    case kAtomicSymbol: {
      set_atomic_symbol(from.atomic_symbol());
      break;
    }
    case ELEMENTSPECIFIER_NOT_SET: {
      break;
    }
  }
}

void ElementsNeeded::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.ElementsNeeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElementsNeeded::CopyFrom(const ElementsNeeded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.ElementsNeeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementsNeeded::IsInitialized() const {
  return true;
}

void ElementsNeeded::Swap(ElementsNeeded* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ElementsNeeded::InternalSwap(ElementsNeeded* other) {
  using std::swap;
  hits_needed_.InternalSwap(&other->hits_needed_);
  swap(min_hits_needed_, other->min_hits_needed_);
  swap(max_hits_needed_, other->max_hits_needed_);
  swap(ElementSpecifier_, other->ElementSpecifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ElementsNeeded::GetMetadata() const {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NoMatchedAtomsBetween::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoMatchedAtomsBetween::kA1FieldNumber;
const int NoMatchedAtomsBetween::kA2FieldNumber;
const int NoMatchedAtomsBetween::kQualifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoMatchedAtomsBetween::NoMatchedAtomsBetween()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substructure_2eproto::scc_info_NoMatchedAtomsBetween.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstructureSearch.NoMatchedAtomsBetween)
}
NoMatchedAtomsBetween::NoMatchedAtomsBetween(const NoMatchedAtomsBetween& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qualifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qualifier()) {
    qualifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qualifier_);
  }
  ::memcpy(&a1_, &from.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&a2_) -
    reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.NoMatchedAtomsBetween)
}

void NoMatchedAtomsBetween::SharedCtor() {
  qualifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a2_) -
      reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
}

NoMatchedAtomsBetween::~NoMatchedAtomsBetween() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.NoMatchedAtomsBetween)
  SharedDtor();
}

void NoMatchedAtomsBetween::SharedDtor() {
  qualifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NoMatchedAtomsBetween::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NoMatchedAtomsBetween::descriptor() {
  ::protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NoMatchedAtomsBetween& NoMatchedAtomsBetween::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substructure_2eproto::scc_info_NoMatchedAtomsBetween.base);
  return *internal_default_instance();
}


void NoMatchedAtomsBetween::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.NoMatchedAtomsBetween)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    qualifier_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&a1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&a2_) -
        reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NoMatchedAtomsBetween::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstructureSearch.NoMatchedAtomsBetween)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 a1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_a1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &a1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 a2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_a2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &a2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string qualifier = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qualifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qualifier().data(), static_cast<int>(this->qualifier().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.NoMatchedAtomsBetween.qualifier");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstructureSearch.NoMatchedAtomsBetween)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstructureSearch.NoMatchedAtomsBetween)
  return false;
#undef DO_
}

void NoMatchedAtomsBetween::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstructureSearch.NoMatchedAtomsBetween)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 a1 = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->a1(), output);
  }

  // optional uint32 a2 = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->a2(), output);
  }

  // optional string qualifier = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qualifier().data(), static_cast<int>(this->qualifier().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.NoMatchedAtomsBetween.qualifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->qualifier(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstructureSearch.NoMatchedAtomsBetween)
}

::google::protobuf::uint8* NoMatchedAtomsBetween::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.NoMatchedAtomsBetween)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 a1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->a1(), target);
  }

  // optional uint32 a2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->a2(), target);
  }

  // optional string qualifier = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qualifier().data(), static_cast<int>(this->qualifier().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.NoMatchedAtomsBetween.qualifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->qualifier(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.NoMatchedAtomsBetween)
  return target;
}

size_t NoMatchedAtomsBetween::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.NoMatchedAtomsBetween)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string qualifier = 3;
    if (has_qualifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qualifier());
    }

    // optional uint32 a1 = 1;
    if (has_a1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->a1());
    }

    // optional uint32 a2 = 2;
    if (has_a2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->a2());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoMatchedAtomsBetween::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.NoMatchedAtomsBetween)
  GOOGLE_DCHECK_NE(&from, this);
  const NoMatchedAtomsBetween* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NoMatchedAtomsBetween>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.NoMatchedAtomsBetween)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.NoMatchedAtomsBetween)
    MergeFrom(*source);
  }
}

void NoMatchedAtomsBetween::MergeFrom(const NoMatchedAtomsBetween& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.NoMatchedAtomsBetween)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_qualifier();
      qualifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qualifier_);
    }
    if (cached_has_bits & 0x00000002u) {
      a1_ = from.a1_;
    }
    if (cached_has_bits & 0x00000004u) {
      a2_ = from.a2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NoMatchedAtomsBetween::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.NoMatchedAtomsBetween)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoMatchedAtomsBetween::CopyFrom(const NoMatchedAtomsBetween& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.NoMatchedAtomsBetween)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoMatchedAtomsBetween::IsInitialized() const {
  return true;
}

void NoMatchedAtomsBetween::Swap(NoMatchedAtomsBetween* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoMatchedAtomsBetween::InternalSwap(NoMatchedAtomsBetween* other) {
  using std::swap;
  qualifier_.Swap(&other->qualifier_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(a1_, other->a1_);
  swap(a2_, other->a2_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NoMatchedAtomsBetween::GetMetadata() const {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LinkAtoms::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkAtoms::kA1FieldNumber;
const int LinkAtoms::kA2FieldNumber;
const int LinkAtoms::kDistanceFieldNumber;
const int LinkAtoms::kMinDistanceFieldNumber;
const int LinkAtoms::kMaxDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkAtoms::LinkAtoms()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substructure_2eproto::scc_info_LinkAtoms.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstructureSearch.LinkAtoms)
}
LinkAtoms::LinkAtoms(const LinkAtoms& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      distance_(from.distance_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&a1_, &from.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_distance_) -
    reinterpret_cast<char*>(&a1_)) + sizeof(max_distance_));
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.LinkAtoms)
}

void LinkAtoms::SharedCtor() {
  ::memset(&a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_distance_) -
      reinterpret_cast<char*>(&a1_)) + sizeof(max_distance_));
}

LinkAtoms::~LinkAtoms() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.LinkAtoms)
  SharedDtor();
}

void LinkAtoms::SharedDtor() {
}

void LinkAtoms::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LinkAtoms::descriptor() {
  ::protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LinkAtoms& LinkAtoms::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substructure_2eproto::scc_info_LinkAtoms.base);
  return *internal_default_instance();
}


void LinkAtoms::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.LinkAtoms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distance_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&a1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_distance_) -
        reinterpret_cast<char*>(&a1_)) + sizeof(max_distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LinkAtoms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstructureSearch.LinkAtoms)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 a1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_a1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &a1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 a2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_a2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &a2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 distance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_distance())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_distance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_min_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_distance = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_max_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstructureSearch.LinkAtoms)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstructureSearch.LinkAtoms)
  return false;
#undef DO_
}

void LinkAtoms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstructureSearch.LinkAtoms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 a1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->a1(), output);
  }

  // optional uint32 a2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->a2(), output);
  }

  // repeated uint32 distance = 3;
  for (int i = 0, n = this->distance_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->distance(i), output);
  }

  // optional uint32 min_distance = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->min_distance(), output);
  }

  // optional uint32 max_distance = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstructureSearch.LinkAtoms)
}

::google::protobuf::uint8* LinkAtoms::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.LinkAtoms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 a1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->a1(), target);
  }

  // optional uint32 a2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->a2(), target);
  }

  // repeated uint32 distance = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->distance_, target);

  // optional uint32 min_distance = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->min_distance(), target);
  }

  // optional uint32 max_distance = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.LinkAtoms)
  return target;
}

size_t LinkAtoms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.LinkAtoms)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 distance = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->distance_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->distance_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 a1 = 1;
    if (has_a1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->a1());
    }

    // optional uint32 a2 = 2;
    if (has_a2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->a2());
    }

    // optional uint32 min_distance = 4;
    if (has_min_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_distance());
    }

    // optional uint32 max_distance = 5;
    if (has_max_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_distance());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkAtoms::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.LinkAtoms)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkAtoms* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkAtoms>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.LinkAtoms)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.LinkAtoms)
    MergeFrom(*source);
  }
}

void LinkAtoms::MergeFrom(const LinkAtoms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.LinkAtoms)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  distance_.MergeFrom(from.distance_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      a1_ = from.a1_;
    }
    if (cached_has_bits & 0x00000002u) {
      a2_ = from.a2_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_distance_ = from.min_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_distance_ = from.max_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LinkAtoms::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.LinkAtoms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkAtoms::CopyFrom(const LinkAtoms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.LinkAtoms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkAtoms::IsInitialized() const {
  return true;
}

void LinkAtoms::Swap(LinkAtoms* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkAtoms::InternalSwap(LinkAtoms* other) {
  using std::swap;
  distance_.InternalSwap(&other->distance_);
  swap(a1_, other->a1_);
  swap(a2_, other->a2_);
  swap(min_distance_, other->min_distance_);
  swap(max_distance_, other->max_distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LinkAtoms::GetMetadata() const {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EnvironmentAttachment::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnvironmentAttachment::kAttachmentPointFieldNumber;
const int EnvironmentAttachment::kBondFieldNumber;
const int EnvironmentAttachment::kSubstructureBondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnvironmentAttachment::EnvironmentAttachment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substructure_2eproto::scc_info_EnvironmentAttachment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstructureSearch.EnvironmentAttachment)
}
EnvironmentAttachment::EnvironmentAttachment(const EnvironmentAttachment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      attachment_point_(from.attachment_point_),
      bond_(from.bond_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  substructure_bond_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_substructure_bond()) {
    substructure_bond_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.substructure_bond_);
  }
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.EnvironmentAttachment)
}

void EnvironmentAttachment::SharedCtor() {
  substructure_bond_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EnvironmentAttachment::~EnvironmentAttachment() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.EnvironmentAttachment)
  SharedDtor();
}

void EnvironmentAttachment::SharedDtor() {
  substructure_bond_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EnvironmentAttachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EnvironmentAttachment::descriptor() {
  ::protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnvironmentAttachment& EnvironmentAttachment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substructure_2eproto::scc_info_EnvironmentAttachment.base);
  return *internal_default_instance();
}


void EnvironmentAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.EnvironmentAttachment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attachment_point_.Clear();
  bond_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    substructure_bond_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EnvironmentAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstructureSearch.EnvironmentAttachment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 attachment_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_attachment_point())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attachment_point())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstructureSearch.BondType bond = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SubstructureSearch::BondType_IsValid(value)) {
            add_bond(static_cast< ::SubstructureSearch::BondType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 2,
                 ::SubstructureSearch::BondType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_bond())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string substructure_bond = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_substructure_bond()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->substructure_bond().data(), static_cast<int>(this->substructure_bond().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.EnvironmentAttachment.substructure_bond");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstructureSearch.EnvironmentAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstructureSearch.EnvironmentAttachment)
  return false;
#undef DO_
}

void EnvironmentAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstructureSearch.EnvironmentAttachment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 attachment_point = 1;
  for (int i = 0, n = this->attachment_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->attachment_point(i), output);
  }

  // repeated .SubstructureSearch.BondType bond = 2;
  for (int i = 0, n = this->bond_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->bond(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string substructure_bond = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->substructure_bond().data(), static_cast<int>(this->substructure_bond().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.EnvironmentAttachment.substructure_bond");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->substructure_bond(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstructureSearch.EnvironmentAttachment)
}

::google::protobuf::uint8* EnvironmentAttachment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.EnvironmentAttachment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 attachment_point = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->attachment_point_, target);

  // repeated .SubstructureSearch.BondType bond = 2;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    2, this->bond_, target);

  cached_has_bits = _has_bits_[0];
  // optional string substructure_bond = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->substructure_bond().data(), static_cast<int>(this->substructure_bond().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.EnvironmentAttachment.substructure_bond");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->substructure_bond(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.EnvironmentAttachment)
  return target;
}

size_t EnvironmentAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.EnvironmentAttachment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 attachment_point = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->attachment_point_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->attachment_point_size());
    total_size += data_size;
  }

  // repeated .SubstructureSearch.BondType bond = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->bond_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->bond(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional string substructure_bond = 3;
  if (has_substructure_bond()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->substructure_bond());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentAttachment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.EnvironmentAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentAttachment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnvironmentAttachment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.EnvironmentAttachment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.EnvironmentAttachment)
    MergeFrom(*source);
  }
}

void EnvironmentAttachment::MergeFrom(const EnvironmentAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.EnvironmentAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attachment_point_.MergeFrom(from.attachment_point_);
  bond_.MergeFrom(from.bond_);
  if (from.has_substructure_bond()) {
    set_has_substructure_bond();
    substructure_bond_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.substructure_bond_);
  }
}

void EnvironmentAttachment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.EnvironmentAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentAttachment::CopyFrom(const EnvironmentAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.EnvironmentAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentAttachment::IsInitialized() const {
  return true;
}

void EnvironmentAttachment::Swap(EnvironmentAttachment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnvironmentAttachment::InternalSwap(EnvironmentAttachment* other) {
  using std::swap;
  attachment_point_.InternalSwap(&other->attachment_point_);
  bond_.InternalSwap(&other->bond_);
  substructure_bond_.Swap(&other->substructure_bond_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EnvironmentAttachment::GetMetadata() const {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubstructureRingEnvironment::InitAsDefaultInstance() {
  ::SubstructureSearch::_SubstructureRingEnvironment_default_instance_._instance.get_mutable()->substructure_atom_ = const_cast< ::SubstructureSearch::SubstructureAtom*>(
      ::SubstructureSearch::SubstructureAtom::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubstructureRingEnvironment::kSubstructureAtomFieldNumber;
const int SubstructureRingEnvironment::kMinHitsNeededFieldNumber;
const int SubstructureRingEnvironment::kMaxHitsNeededFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubstructureRingEnvironment::SubstructureRingEnvironment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substructure_2eproto::scc_info_SubstructureRingEnvironment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstructureSearch.SubstructureRingEnvironment)
}
SubstructureRingEnvironment::SubstructureRingEnvironment(const SubstructureRingEnvironment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_substructure_atom()) {
    substructure_atom_ = new ::SubstructureSearch::SubstructureAtom(*from.substructure_atom_);
  } else {
    substructure_atom_ = NULL;
  }
  ::memcpy(&min_hits_needed_, &from.min_hits_needed_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_hits_needed_) -
    reinterpret_cast<char*>(&min_hits_needed_)) + sizeof(max_hits_needed_));
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureRingEnvironment)
}

void SubstructureRingEnvironment::SharedCtor() {
  ::memset(&substructure_atom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_hits_needed_) -
      reinterpret_cast<char*>(&substructure_atom_)) + sizeof(max_hits_needed_));
}

SubstructureRingEnvironment::~SubstructureRingEnvironment() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureRingEnvironment)
  SharedDtor();
}

void SubstructureRingEnvironment::SharedDtor() {
  if (this != internal_default_instance()) delete substructure_atom_;
}

void SubstructureRingEnvironment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubstructureRingEnvironment::descriptor() {
  ::protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubstructureRingEnvironment& SubstructureRingEnvironment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substructure_2eproto::scc_info_SubstructureRingEnvironment.base);
  return *internal_default_instance();
}


void SubstructureRingEnvironment::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureRingEnvironment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(substructure_atom_ != NULL);
    substructure_atom_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&min_hits_needed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_hits_needed_) -
        reinterpret_cast<char*>(&min_hits_needed_)) + sizeof(max_hits_needed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubstructureRingEnvironment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstructureSearch.SubstructureRingEnvironment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SubstructureSearch.SubstructureAtom substructure_atom = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_substructure_atom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_hits_needed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_min_hits_needed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_hits_needed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_hits_needed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_max_hits_needed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_hits_needed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstructureSearch.SubstructureRingEnvironment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstructureSearch.SubstructureRingEnvironment)
  return false;
#undef DO_
}

void SubstructureRingEnvironment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstructureSearch.SubstructureRingEnvironment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SubstructureSearch.SubstructureAtom substructure_atom = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_substructure_atom(), output);
  }

  // optional uint32 min_hits_needed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->min_hits_needed(), output);
  }

  // optional uint32 max_hits_needed = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_hits_needed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstructureSearch.SubstructureRingEnvironment)
}

::google::protobuf::uint8* SubstructureRingEnvironment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureRingEnvironment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SubstructureSearch.SubstructureAtom substructure_atom = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_substructure_atom(), deterministic, target);
  }

  // optional uint32 min_hits_needed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->min_hits_needed(), target);
  }

  // optional uint32 max_hits_needed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_hits_needed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureRingEnvironment)
  return target;
}

size_t SubstructureRingEnvironment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureRingEnvironment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .SubstructureSearch.SubstructureAtom substructure_atom = 1;
    if (has_substructure_atom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *substructure_atom_);
    }

    // optional uint32 min_hits_needed = 2;
    if (has_min_hits_needed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_hits_needed());
    }

    // optional uint32 max_hits_needed = 3;
    if (has_max_hits_needed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_hits_needed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureRingEnvironment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureRingEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureRingEnvironment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubstructureRingEnvironment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureRingEnvironment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureRingEnvironment)
    MergeFrom(*source);
  }
}

void SubstructureRingEnvironment::MergeFrom(const SubstructureRingEnvironment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureRingEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_substructure_atom()->::SubstructureSearch::SubstructureAtom::MergeFrom(from.substructure_atom());
    }
    if (cached_has_bits & 0x00000002u) {
      min_hits_needed_ = from.min_hits_needed_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_hits_needed_ = from.max_hits_needed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubstructureRingEnvironment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureRingEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureRingEnvironment::CopyFrom(const SubstructureRingEnvironment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureRingEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureRingEnvironment::IsInitialized() const {
  return true;
}

void SubstructureRingEnvironment::Swap(SubstructureRingEnvironment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubstructureRingEnvironment::InternalSwap(SubstructureRingEnvironment* other) {
  using std::swap;
  swap(substructure_atom_, other->substructure_atom_);
  swap(min_hits_needed_, other->min_hits_needed_);
  swap(max_hits_needed_, other->max_hits_needed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubstructureRingEnvironment::GetMetadata() const {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubstructureRingBase::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubstructureRingBase::kMatchAsMatchFieldNumber;
const int SubstructureRingBase::kHitsNeededFieldNumber;
const int SubstructureRingBase::kMinHitsNeededFieldNumber;
const int SubstructureRingBase::kMaxHitsNeededFieldNumber;
const int SubstructureRingBase::kAttachedHeteroatomCountFieldNumber;
const int SubstructureRingBase::kMinAttachedHeteroatomCountFieldNumber;
const int SubstructureRingBase::kMaxAttachedHeteroatomCountFieldNumber;
const int SubstructureRingBase::kHeteroatomCountFieldNumber;
const int SubstructureRingBase::kMinHeteroatomCountFieldNumber;
const int SubstructureRingBase::kMaxHeteroatomCountFieldNumber;
const int SubstructureRingBase::kNconFieldNumber;
const int SubstructureRingBase::kMinNconFieldNumber;
const int SubstructureRingBase::kMaxNconFieldNumber;
const int SubstructureRingBase::kAllHitsInSameFragmentFieldNumber;
const int SubstructureRingBase::kWithinRingUnsaturationFieldNumber;
const int SubstructureRingBase::kMinWithinRingUnsaturationFieldNumber;
const int SubstructureRingBase::kMaxWithinRingUnsaturationFieldNumber;
const int SubstructureRingBase::kLargestNumberOfBondsSharedWithAnotherRingFieldNumber;
const int SubstructureRingBase::kMinLargestNumberOfBondsSharedWithAnotherRingFieldNumber;
const int SubstructureRingBase::kMaxLargestNumberOfBondsSharedWithAnotherRingFieldNumber;
const int SubstructureRingBase::kAtomsWithPiElectronsFieldNumber;
const int SubstructureRingBase::kMinAtomsWithPiElectronsFieldNumber;
const int SubstructureRingBase::kMaxAtomsWithPiElectronsFieldNumber;
const int SubstructureRingBase::kStronglyFusedRingNeighboursFieldNumber;
const int SubstructureRingBase::kMinStronglyFusedRingNeighboursFieldNumber;
const int SubstructureRingBase::kMaxStronglyFusedRingNeighboursFieldNumber;
const int SubstructureRingBase::kEnvironmentFieldNumber;
const int SubstructureRingBase::kEnvironmentCanMatchInRingAtomsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubstructureRingBase::SubstructureRingBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substructure_2eproto::scc_info_SubstructureRingBase.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstructureSearch.SubstructureRingBase)
}
SubstructureRingBase::SubstructureRingBase(const SubstructureRingBase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      hits_needed_(from.hits_needed_),
      attached_heteroatom_count_(from.attached_heteroatom_count_),
      heteroatom_count_(from.heteroatom_count_),
      ncon_(from.ncon_),
      within_ring_unsaturation_(from.within_ring_unsaturation_),
      largest_number_of_bonds_shared_with_another_ring_(from.largest_number_of_bonds_shared_with_another_ring_),
      atoms_with_pi_electrons_(from.atoms_with_pi_electrons_),
      strongly_fused_ring_neighbours_(from.strongly_fused_ring_neighbours_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  environment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_environment()) {
    environment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.environment_);
  }
  ::memcpy(&min_hits_needed_, &from.min_hits_needed_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_strongly_fused_ring_neighbours_) -
    reinterpret_cast<char*>(&min_hits_needed_)) + sizeof(max_strongly_fused_ring_neighbours_));
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureRingBase)
}

void SubstructureRingBase::SharedCtor() {
  environment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_hits_needed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_strongly_fused_ring_neighbours_) -
      reinterpret_cast<char*>(&min_hits_needed_)) + sizeof(max_strongly_fused_ring_neighbours_));
}

SubstructureRingBase::~SubstructureRingBase() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureRingBase)
  SharedDtor();
}

void SubstructureRingBase::SharedDtor() {
  environment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubstructureRingBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubstructureRingBase::descriptor() {
  ::protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubstructureRingBase& SubstructureRingBase::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substructure_2eproto::scc_info_SubstructureRingBase.base);
  return *internal_default_instance();
}


void SubstructureRingBase::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureRingBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hits_needed_.Clear();
  attached_heteroatom_count_.Clear();
  heteroatom_count_.Clear();
  ncon_.Clear();
  within_ring_unsaturation_.Clear();
  largest_number_of_bonds_shared_with_another_ring_.Clear();
  atoms_with_pi_electrons_.Clear();
  strongly_fused_ring_neighbours_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    environment_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&min_hits_needed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_ncon_) -
        reinterpret_cast<char*>(&min_hits_needed_)) + sizeof(min_ncon_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&match_as_match_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_largest_number_of_bonds_shared_with_another_ring_) -
        reinterpret_cast<char*>(&match_as_match_)) + sizeof(max_largest_number_of_bonds_shared_with_another_ring_));
  }
  if (cached_has_bits & 983040u) {
    ::memset(&min_atoms_with_pi_electrons_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_strongly_fused_ring_neighbours_) -
        reinterpret_cast<char*>(&min_atoms_with_pi_electrons_)) + sizeof(max_strongly_fused_ring_neighbours_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubstructureRingBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstructureSearch.SubstructureRingBase)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool match_as_match = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_match_as_match();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &match_as_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 hits_needed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_hits_needed())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hits_needed())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_hits_needed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_min_hits_needed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_hits_needed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_hits_needed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_max_hits_needed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_hits_needed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 attached_heteroatom_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_attached_heteroatom_count())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attached_heteroatom_count())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_attached_heteroatom_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_min_attached_heteroatom_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_attached_heteroatom_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_attached_heteroatom_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_max_attached_heteroatom_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_attached_heteroatom_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 heteroatom_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64u, input, this->mutable_heteroatom_count())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heteroatom_count())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_heteroatom_count = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_min_heteroatom_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_heteroatom_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_heteroatom_count = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_max_heteroatom_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_heteroatom_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ncon = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88u, input, this->mutable_ncon())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ncon())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_ncon = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_min_ncon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_ncon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_ncon = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_max_ncon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_ncon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool all_hits_in_same_fragment = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_all_hits_in_same_fragment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_hits_in_same_fragment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 within_ring_unsaturation = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128u, input, this->mutable_within_ring_unsaturation())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_within_ring_unsaturation())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_within_ring_unsaturation = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_min_within_ring_unsaturation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_within_ring_unsaturation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_within_ring_unsaturation = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_max_within_ring_unsaturation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_within_ring_unsaturation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 largest_number_of_bonds_shared_with_another_ring = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 152u, input, this->mutable_largest_number_of_bonds_shared_with_another_ring())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_largest_number_of_bonds_shared_with_another_ring())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_largest_number_of_bonds_shared_with_another_ring = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_min_largest_number_of_bonds_shared_with_another_ring();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_largest_number_of_bonds_shared_with_another_ring_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_largest_number_of_bonds_shared_with_another_ring = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_max_largest_number_of_bonds_shared_with_another_ring();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_largest_number_of_bonds_shared_with_another_ring_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string environment = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_environment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->environment().data(), static_cast<int>(this->environment().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.SubstructureRingBase.environment");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool environment_can_match_in_ring_atoms = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_environment_can_match_in_ring_atoms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &environment_can_match_in_ring_atoms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 atoms_with_pi_electrons = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 208u, input, this->mutable_atoms_with_pi_electrons())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_atoms_with_pi_electrons())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_atoms_with_pi_electrons = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_min_atoms_with_pi_electrons();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_atoms_with_pi_electrons_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_atoms_with_pi_electrons = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_max_atoms_with_pi_electrons();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_atoms_with_pi_electrons_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 strongly_fused_ring_neighbours = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 232u, input, this->mutable_strongly_fused_ring_neighbours())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_strongly_fused_ring_neighbours())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_strongly_fused_ring_neighbours = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_min_strongly_fused_ring_neighbours();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_strongly_fused_ring_neighbours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_strongly_fused_ring_neighbours = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_max_strongly_fused_ring_neighbours();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_strongly_fused_ring_neighbours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstructureSearch.SubstructureRingBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstructureSearch.SubstructureRingBase)
  return false;
#undef DO_
}

void SubstructureRingBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstructureSearch.SubstructureRingBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool match_as_match = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->match_as_match(), output);
  }

  // repeated uint32 hits_needed = 2;
  for (int i = 0, n = this->hits_needed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->hits_needed(i), output);
  }

  // optional uint32 min_hits_needed = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->min_hits_needed(), output);
  }

  // optional uint32 max_hits_needed = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_hits_needed(), output);
  }

  // repeated uint32 attached_heteroatom_count = 5;
  for (int i = 0, n = this->attached_heteroatom_count_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->attached_heteroatom_count(i), output);
  }

  // optional uint32 min_attached_heteroatom_count = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->min_attached_heteroatom_count(), output);
  }

  // optional uint32 max_attached_heteroatom_count = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max_attached_heteroatom_count(), output);
  }

  // repeated uint32 heteroatom_count = 8;
  for (int i = 0, n = this->heteroatom_count_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->heteroatom_count(i), output);
  }

  // optional uint32 min_heteroatom_count = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->min_heteroatom_count(), output);
  }

  // optional uint32 max_heteroatom_count = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->max_heteroatom_count(), output);
  }

  // repeated uint32 ncon = 11;
  for (int i = 0, n = this->ncon_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->ncon(i), output);
  }

  // optional uint32 min_ncon = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->min_ncon(), output);
  }

  // optional uint32 max_ncon = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->max_ncon(), output);
  }

  // optional bool all_hits_in_same_fragment = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->all_hits_in_same_fragment(), output);
  }

  // repeated uint32 within_ring_unsaturation = 16;
  for (int i = 0, n = this->within_ring_unsaturation_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->within_ring_unsaturation(i), output);
  }

  // optional uint32 min_within_ring_unsaturation = 17;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->min_within_ring_unsaturation(), output);
  }

  // optional uint32 max_within_ring_unsaturation = 18;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->max_within_ring_unsaturation(), output);
  }

  // repeated uint32 largest_number_of_bonds_shared_with_another_ring = 19;
  for (int i = 0, n = this->largest_number_of_bonds_shared_with_another_ring_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      19, this->largest_number_of_bonds_shared_with_another_ring(i), output);
  }

  // optional uint32 min_largest_number_of_bonds_shared_with_another_ring = 20;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->min_largest_number_of_bonds_shared_with_another_ring(), output);
  }

  // optional uint32 max_largest_number_of_bonds_shared_with_another_ring = 21;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->max_largest_number_of_bonds_shared_with_another_ring(), output);
  }

  // optional string environment = 22;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->environment().data(), static_cast<int>(this->environment().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureRingBase.environment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->environment(), output);
  }

  // optional bool environment_can_match_in_ring_atoms = 23;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->environment_can_match_in_ring_atoms(), output);
  }

  // repeated uint32 atoms_with_pi_electrons = 26;
  for (int i = 0, n = this->atoms_with_pi_electrons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      26, this->atoms_with_pi_electrons(i), output);
  }

  // optional uint32 min_atoms_with_pi_electrons = 27;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->min_atoms_with_pi_electrons(), output);
  }

  // optional uint32 max_atoms_with_pi_electrons = 28;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->max_atoms_with_pi_electrons(), output);
  }

  // repeated uint32 strongly_fused_ring_neighbours = 29;
  for (int i = 0, n = this->strongly_fused_ring_neighbours_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      29, this->strongly_fused_ring_neighbours(i), output);
  }

  // optional uint32 min_strongly_fused_ring_neighbours = 30;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->min_strongly_fused_ring_neighbours(), output);
  }

  // optional uint32 max_strongly_fused_ring_neighbours = 31;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->max_strongly_fused_ring_neighbours(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstructureSearch.SubstructureRingBase)
}

::google::protobuf::uint8* SubstructureRingBase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureRingBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool match_as_match = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->match_as_match(), target);
  }

  // repeated uint32 hits_needed = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->hits_needed_, target);

  // optional uint32 min_hits_needed = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->min_hits_needed(), target);
  }

  // optional uint32 max_hits_needed = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_hits_needed(), target);
  }

  // repeated uint32 attached_heteroatom_count = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->attached_heteroatom_count_, target);

  // optional uint32 min_attached_heteroatom_count = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->min_attached_heteroatom_count(), target);
  }

  // optional uint32 max_attached_heteroatom_count = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->max_attached_heteroatom_count(), target);
  }

  // repeated uint32 heteroatom_count = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(8, this->heteroatom_count_, target);

  // optional uint32 min_heteroatom_count = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->min_heteroatom_count(), target);
  }

  // optional uint32 max_heteroatom_count = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->max_heteroatom_count(), target);
  }

  // repeated uint32 ncon = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(11, this->ncon_, target);

  // optional uint32 min_ncon = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->min_ncon(), target);
  }

  // optional uint32 max_ncon = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->max_ncon(), target);
  }

  // optional bool all_hits_in_same_fragment = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->all_hits_in_same_fragment(), target);
  }

  // repeated uint32 within_ring_unsaturation = 16;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(16, this->within_ring_unsaturation_, target);

  // optional uint32 min_within_ring_unsaturation = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->min_within_ring_unsaturation(), target);
  }

  // optional uint32 max_within_ring_unsaturation = 18;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->max_within_ring_unsaturation(), target);
  }

  // repeated uint32 largest_number_of_bonds_shared_with_another_ring = 19;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(19, this->largest_number_of_bonds_shared_with_another_ring_, target);

  // optional uint32 min_largest_number_of_bonds_shared_with_another_ring = 20;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->min_largest_number_of_bonds_shared_with_another_ring(), target);
  }

  // optional uint32 max_largest_number_of_bonds_shared_with_another_ring = 21;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->max_largest_number_of_bonds_shared_with_another_ring(), target);
  }

  // optional string environment = 22;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->environment().data(), static_cast<int>(this->environment().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureRingBase.environment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->environment(), target);
  }

  // optional bool environment_can_match_in_ring_atoms = 23;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->environment_can_match_in_ring_atoms(), target);
  }

  // repeated uint32 atoms_with_pi_electrons = 26;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(26, this->atoms_with_pi_electrons_, target);

  // optional uint32 min_atoms_with_pi_electrons = 27;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->min_atoms_with_pi_electrons(), target);
  }

  // optional uint32 max_atoms_with_pi_electrons = 28;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->max_atoms_with_pi_electrons(), target);
  }

  // repeated uint32 strongly_fused_ring_neighbours = 29;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(29, this->strongly_fused_ring_neighbours_, target);

  // optional uint32 min_strongly_fused_ring_neighbours = 30;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->min_strongly_fused_ring_neighbours(), target);
  }

  // optional uint32 max_strongly_fused_ring_neighbours = 31;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->max_strongly_fused_ring_neighbours(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureRingBase)
  return target;
}

size_t SubstructureRingBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureRingBase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 hits_needed = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->hits_needed_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->hits_needed_size());
    total_size += data_size;
  }

  // repeated uint32 attached_heteroatom_count = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->attached_heteroatom_count_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->attached_heteroatom_count_size());
    total_size += data_size;
  }

  // repeated uint32 heteroatom_count = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->heteroatom_count_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->heteroatom_count_size());
    total_size += data_size;
  }

  // repeated uint32 ncon = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ncon_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ncon_size());
    total_size += data_size;
  }

  // repeated uint32 within_ring_unsaturation = 16;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->within_ring_unsaturation_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->within_ring_unsaturation_size());
    total_size += data_size;
  }

  // repeated uint32 largest_number_of_bonds_shared_with_another_ring = 19;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->largest_number_of_bonds_shared_with_another_ring_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->largest_number_of_bonds_shared_with_another_ring_size());
    total_size += data_size;
  }

  // repeated uint32 atoms_with_pi_electrons = 26;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->atoms_with_pi_electrons_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->atoms_with_pi_electrons_size());
    total_size += data_size;
  }

  // repeated uint32 strongly_fused_ring_neighbours = 29;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->strongly_fused_ring_neighbours_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->strongly_fused_ring_neighbours_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string environment = 22;
    if (has_environment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->environment());
    }

    // optional uint32 min_hits_needed = 3;
    if (has_min_hits_needed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_hits_needed());
    }

    // optional uint32 max_hits_needed = 4;
    if (has_max_hits_needed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_hits_needed());
    }

    // optional uint32 min_attached_heteroatom_count = 6;
    if (has_min_attached_heteroatom_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_attached_heteroatom_count());
    }

    // optional uint32 max_attached_heteroatom_count = 7;
    if (has_max_attached_heteroatom_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_attached_heteroatom_count());
    }

    // optional uint32 min_heteroatom_count = 9;
    if (has_min_heteroatom_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_heteroatom_count());
    }

    // optional uint32 max_heteroatom_count = 10;
    if (has_max_heteroatom_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_heteroatom_count());
    }

    // optional uint32 min_ncon = 12;
    if (has_min_ncon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_ncon());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool match_as_match = 1;
    if (has_match_as_match()) {
      total_size += 1 + 1;
    }

    // optional bool all_hits_in_same_fragment = 14;
    if (has_all_hits_in_same_fragment()) {
      total_size += 1 + 1;
    }

    // optional bool environment_can_match_in_ring_atoms = 23;
    if (has_environment_can_match_in_ring_atoms()) {
      total_size += 2 + 1;
    }

    // optional uint32 max_ncon = 13;
    if (has_max_ncon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_ncon());
    }

    // optional uint32 min_within_ring_unsaturation = 17;
    if (has_min_within_ring_unsaturation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_within_ring_unsaturation());
    }

    // optional uint32 max_within_ring_unsaturation = 18;
    if (has_max_within_ring_unsaturation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_within_ring_unsaturation());
    }

    // optional uint32 min_largest_number_of_bonds_shared_with_another_ring = 20;
    if (has_min_largest_number_of_bonds_shared_with_another_ring()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_largest_number_of_bonds_shared_with_another_ring());
    }

    // optional uint32 max_largest_number_of_bonds_shared_with_another_ring = 21;
    if (has_max_largest_number_of_bonds_shared_with_another_ring()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_largest_number_of_bonds_shared_with_another_ring());
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional uint32 min_atoms_with_pi_electrons = 27;
    if (has_min_atoms_with_pi_electrons()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_atoms_with_pi_electrons());
    }

    // optional uint32 max_atoms_with_pi_electrons = 28;
    if (has_max_atoms_with_pi_electrons()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_atoms_with_pi_electrons());
    }

    // optional uint32 min_strongly_fused_ring_neighbours = 30;
    if (has_min_strongly_fused_ring_neighbours()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_strongly_fused_ring_neighbours());
    }

    // optional uint32 max_strongly_fused_ring_neighbours = 31;
    if (has_max_strongly_fused_ring_neighbours()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_strongly_fused_ring_neighbours());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureRingBase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureRingBase)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureRingBase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubstructureRingBase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureRingBase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureRingBase)
    MergeFrom(*source);
  }
}

void SubstructureRingBase::MergeFrom(const SubstructureRingBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureRingBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hits_needed_.MergeFrom(from.hits_needed_);
  attached_heteroatom_count_.MergeFrom(from.attached_heteroatom_count_);
  heteroatom_count_.MergeFrom(from.heteroatom_count_);
  ncon_.MergeFrom(from.ncon_);
  within_ring_unsaturation_.MergeFrom(from.within_ring_unsaturation_);
  largest_number_of_bonds_shared_with_another_ring_.MergeFrom(from.largest_number_of_bonds_shared_with_another_ring_);
  atoms_with_pi_electrons_.MergeFrom(from.atoms_with_pi_electrons_);
  strongly_fused_ring_neighbours_.MergeFrom(from.strongly_fused_ring_neighbours_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_environment();
      environment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.environment_);
    }
    if (cached_has_bits & 0x00000002u) {
      min_hits_needed_ = from.min_hits_needed_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_hits_needed_ = from.max_hits_needed_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_attached_heteroatom_count_ = from.min_attached_heteroatom_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_attached_heteroatom_count_ = from.max_attached_heteroatom_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_heteroatom_count_ = from.min_heteroatom_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_heteroatom_count_ = from.max_heteroatom_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      min_ncon_ = from.min_ncon_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      match_as_match_ = from.match_as_match_;
    }
    if (cached_has_bits & 0x00000200u) {
      all_hits_in_same_fragment_ = from.all_hits_in_same_fragment_;
    }
    if (cached_has_bits & 0x00000400u) {
      environment_can_match_in_ring_atoms_ = from.environment_can_match_in_ring_atoms_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_ncon_ = from.max_ncon_;
    }
    if (cached_has_bits & 0x00001000u) {
      min_within_ring_unsaturation_ = from.min_within_ring_unsaturation_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_within_ring_unsaturation_ = from.max_within_ring_unsaturation_;
    }
    if (cached_has_bits & 0x00004000u) {
      min_largest_number_of_bonds_shared_with_another_ring_ = from.min_largest_number_of_bonds_shared_with_another_ring_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_largest_number_of_bonds_shared_with_another_ring_ = from.max_largest_number_of_bonds_shared_with_another_ring_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      min_atoms_with_pi_electrons_ = from.min_atoms_with_pi_electrons_;
    }
    if (cached_has_bits & 0x00020000u) {
      max_atoms_with_pi_electrons_ = from.max_atoms_with_pi_electrons_;
    }
    if (cached_has_bits & 0x00040000u) {
      min_strongly_fused_ring_neighbours_ = from.min_strongly_fused_ring_neighbours_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_strongly_fused_ring_neighbours_ = from.max_strongly_fused_ring_neighbours_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubstructureRingBase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureRingBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureRingBase::CopyFrom(const SubstructureRingBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureRingBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureRingBase::IsInitialized() const {
  return true;
}

void SubstructureRingBase::Swap(SubstructureRingBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubstructureRingBase::InternalSwap(SubstructureRingBase* other) {
  using std::swap;
  hits_needed_.InternalSwap(&other->hits_needed_);
  attached_heteroatom_count_.InternalSwap(&other->attached_heteroatom_count_);
  heteroatom_count_.InternalSwap(&other->heteroatom_count_);
  ncon_.InternalSwap(&other->ncon_);
  within_ring_unsaturation_.InternalSwap(&other->within_ring_unsaturation_);
  largest_number_of_bonds_shared_with_another_ring_.InternalSwap(&other->largest_number_of_bonds_shared_with_another_ring_);
  atoms_with_pi_electrons_.InternalSwap(&other->atoms_with_pi_electrons_);
  strongly_fused_ring_neighbours_.InternalSwap(&other->strongly_fused_ring_neighbours_);
  environment_.Swap(&other->environment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(min_hits_needed_, other->min_hits_needed_);
  swap(max_hits_needed_, other->max_hits_needed_);
  swap(min_attached_heteroatom_count_, other->min_attached_heteroatom_count_);
  swap(max_attached_heteroatom_count_, other->max_attached_heteroatom_count_);
  swap(min_heteroatom_count_, other->min_heteroatom_count_);
  swap(max_heteroatom_count_, other->max_heteroatom_count_);
  swap(min_ncon_, other->min_ncon_);
  swap(match_as_match_, other->match_as_match_);
  swap(all_hits_in_same_fragment_, other->all_hits_in_same_fragment_);
  swap(environment_can_match_in_ring_atoms_, other->environment_can_match_in_ring_atoms_);
  swap(max_ncon_, other->max_ncon_);
  swap(min_within_ring_unsaturation_, other->min_within_ring_unsaturation_);
  swap(max_within_ring_unsaturation_, other->max_within_ring_unsaturation_);
  swap(min_largest_number_of_bonds_shared_with_another_ring_, other->min_largest_number_of_bonds_shared_with_another_ring_);
  swap(max_largest_number_of_bonds_shared_with_another_ring_, other->max_largest_number_of_bonds_shared_with_another_ring_);
  swap(min_atoms_with_pi_electrons_, other->min_atoms_with_pi_electrons_);
  swap(max_atoms_with_pi_electrons_, other->max_atoms_with_pi_electrons_);
  swap(min_strongly_fused_ring_neighbours_, other->min_strongly_fused_ring_neighbours_);
  swap(max_strongly_fused_ring_neighbours_, other->max_strongly_fused_ring_neighbours_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubstructureRingBase::GetMetadata() const {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubstructureRingSpecification::InitAsDefaultInstance() {
  ::SubstructureSearch::_SubstructureRingSpecification_default_instance_._instance.get_mutable()->base_ = const_cast< ::SubstructureSearch::SubstructureRingBase*>(
      ::SubstructureSearch::SubstructureRingBase::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubstructureRingSpecification::kBaseFieldNumber;
const int SubstructureRingSpecification::kRingSizeFieldNumber;
const int SubstructureRingSpecification::kMinRingSizeFieldNumber;
const int SubstructureRingSpecification::kMaxRingSizeFieldNumber;
const int SubstructureRingSpecification::kAromaticFieldNumber;
const int SubstructureRingSpecification::kFusedFieldNumber;
const int SubstructureRingSpecification::kMinFusedFieldNumber;
const int SubstructureRingSpecification::kMaxFusedFieldNumber;
const int SubstructureRingSpecification::kFusedAromaticNeighboursFieldNumber;
const int SubstructureRingSpecification::kMinFusedAromaticNeighboursFieldNumber;
const int SubstructureRingSpecification::kMaxFusedAromaticNeighboursFieldNumber;
const int SubstructureRingSpecification::kFusedNonAromaticNeighboursFieldNumber;
const int SubstructureRingSpecification::kMinFusedNonAromaticNeighboursFieldNumber;
const int SubstructureRingSpecification::kMaxFusedNonAromaticNeighboursFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubstructureRingSpecification::SubstructureRingSpecification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substructure_2eproto::scc_info_SubstructureRingSpecification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstructureSearch.SubstructureRingSpecification)
}
SubstructureRingSpecification::SubstructureRingSpecification(const SubstructureRingSpecification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      ring_size_(from.ring_size_),
      fused_(from.fused_),
      fused_aromatic_neighbours_(from.fused_aromatic_neighbours_),
      fused_non_aromatic_neighbours_(from.fused_non_aromatic_neighbours_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::SubstructureSearch::SubstructureRingBase(*from.base_);
  } else {
    base_ = NULL;
  }
  ::memcpy(&min_ring_size_, &from.min_ring_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_fused_non_aromatic_neighbours_) -
    reinterpret_cast<char*>(&min_ring_size_)) + sizeof(max_fused_non_aromatic_neighbours_));
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureRingSpecification)
}

void SubstructureRingSpecification::SharedCtor() {
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_fused_non_aromatic_neighbours_) -
      reinterpret_cast<char*>(&base_)) + sizeof(max_fused_non_aromatic_neighbours_));
}

SubstructureRingSpecification::~SubstructureRingSpecification() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureRingSpecification)
  SharedDtor();
}

void SubstructureRingSpecification::SharedDtor() {
  if (this != internal_default_instance()) delete base_;
}

void SubstructureRingSpecification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubstructureRingSpecification::descriptor() {
  ::protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubstructureRingSpecification& SubstructureRingSpecification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substructure_2eproto::scc_info_SubstructureRingSpecification.base);
  return *internal_default_instance();
}


void SubstructureRingSpecification::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureRingSpecification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ring_size_.Clear();
  fused_.Clear();
  fused_aromatic_neighbours_.Clear();
  fused_non_aromatic_neighbours_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(base_ != NULL);
    base_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&min_ring_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_fused_aromatic_neighbours_) -
        reinterpret_cast<char*>(&min_ring_size_)) + sizeof(max_fused_aromatic_neighbours_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&min_fused_non_aromatic_neighbours_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_fused_non_aromatic_neighbours_) -
        reinterpret_cast<char*>(&min_fused_non_aromatic_neighbours_)) + sizeof(max_fused_non_aromatic_neighbours_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubstructureRingSpecification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstructureSearch.SubstructureRingSpecification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SubstructureSearch.SubstructureRingBase base = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ring_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_ring_size())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ring_size())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_ring_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_min_ring_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_ring_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_ring_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_max_ring_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_ring_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool aromatic = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_aromatic();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aromatic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 fused = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_fused())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fused())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_fused = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_min_fused();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_fused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_fused = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_max_fused();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_fused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 fused_aromatic_neighbours = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72u, input, this->mutable_fused_aromatic_neighbours())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fused_aromatic_neighbours())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_fused_aromatic_neighbours = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_min_fused_aromatic_neighbours();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_fused_aromatic_neighbours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_fused_aromatic_neighbours = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_max_fused_aromatic_neighbours();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_fused_aromatic_neighbours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 fused_non_aromatic_neighbours = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96u, input, this->mutable_fused_non_aromatic_neighbours())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fused_non_aromatic_neighbours())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_fused_non_aromatic_neighbours = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_min_fused_non_aromatic_neighbours();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_fused_non_aromatic_neighbours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_fused_non_aromatic_neighbours = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_max_fused_non_aromatic_neighbours();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_fused_non_aromatic_neighbours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstructureSearch.SubstructureRingSpecification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstructureSearch.SubstructureRingSpecification)
  return false;
#undef DO_
}

void SubstructureRingSpecification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstructureSearch.SubstructureRingSpecification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SubstructureSearch.SubstructureRingBase base = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_base(), output);
  }

  // repeated uint32 ring_size = 2;
  for (int i = 0, n = this->ring_size_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->ring_size(i), output);
  }

  // optional uint32 min_ring_size = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->min_ring_size(), output);
  }

  // optional uint32 max_ring_size = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_ring_size(), output);
  }

  // optional bool aromatic = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->aromatic(), output);
  }

  // repeated uint32 fused = 6;
  for (int i = 0, n = this->fused_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->fused(i), output);
  }

  // optional uint32 min_fused = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->min_fused(), output);
  }

  // optional uint32 max_fused = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->max_fused(), output);
  }

  // repeated uint32 fused_aromatic_neighbours = 9;
  for (int i = 0, n = this->fused_aromatic_neighbours_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->fused_aromatic_neighbours(i), output);
  }

  // optional uint32 min_fused_aromatic_neighbours = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->min_fused_aromatic_neighbours(), output);
  }

  // optional uint32 max_fused_aromatic_neighbours = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->max_fused_aromatic_neighbours(), output);
  }

  // repeated uint32 fused_non_aromatic_neighbours = 12;
  for (int i = 0, n = this->fused_non_aromatic_neighbours_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->fused_non_aromatic_neighbours(i), output);
  }

  // optional uint32 min_fused_non_aromatic_neighbours = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->min_fused_non_aromatic_neighbours(), output);
  }

  // optional uint32 max_fused_non_aromatic_neighbours = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->max_fused_non_aromatic_neighbours(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstructureSearch.SubstructureRingSpecification)
}

::google::protobuf::uint8* SubstructureRingSpecification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureRingSpecification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SubstructureSearch.SubstructureRingBase base = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_base(), deterministic, target);
  }

  // repeated uint32 ring_size = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->ring_size_, target);

  // optional uint32 min_ring_size = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->min_ring_size(), target);
  }

  // optional uint32 max_ring_size = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_ring_size(), target);
  }

  // optional bool aromatic = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->aromatic(), target);
  }

  // repeated uint32 fused = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->fused_, target);

  // optional uint32 min_fused = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->min_fused(), target);
  }

  // optional uint32 max_fused = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->max_fused(), target);
  }

  // repeated uint32 fused_aromatic_neighbours = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(9, this->fused_aromatic_neighbours_, target);

  // optional uint32 min_fused_aromatic_neighbours = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->min_fused_aromatic_neighbours(), target);
  }

  // optional uint32 max_fused_aromatic_neighbours = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->max_fused_aromatic_neighbours(), target);
  }

  // repeated uint32 fused_non_aromatic_neighbours = 12;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(12, this->fused_non_aromatic_neighbours_, target);

  // optional uint32 min_fused_non_aromatic_neighbours = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->min_fused_non_aromatic_neighbours(), target);
  }

  // optional uint32 max_fused_non_aromatic_neighbours = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->max_fused_non_aromatic_neighbours(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureRingSpecification)
  return target;
}

size_t SubstructureRingSpecification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureRingSpecification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 ring_size = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ring_size_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ring_size_size());
    total_size += data_size;
  }

  // repeated uint32 fused = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->fused_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->fused_size());
    total_size += data_size;
  }

  // repeated uint32 fused_aromatic_neighbours = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->fused_aromatic_neighbours_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->fused_aromatic_neighbours_size());
    total_size += data_size;
  }

  // repeated uint32 fused_non_aromatic_neighbours = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->fused_non_aromatic_neighbours_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->fused_non_aromatic_neighbours_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .SubstructureSearch.SubstructureRingBase base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *base_);
    }

    // optional uint32 min_ring_size = 3;
    if (has_min_ring_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_ring_size());
    }

    // optional uint32 max_ring_size = 4;
    if (has_max_ring_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_ring_size());
    }

    // optional bool aromatic = 5;
    if (has_aromatic()) {
      total_size += 1 + 1;
    }

    // optional uint32 min_fused = 7;
    if (has_min_fused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_fused());
    }

    // optional uint32 max_fused = 8;
    if (has_max_fused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_fused());
    }

    // optional uint32 min_fused_aromatic_neighbours = 10;
    if (has_min_fused_aromatic_neighbours()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_fused_aromatic_neighbours());
    }

    // optional uint32 max_fused_aromatic_neighbours = 11;
    if (has_max_fused_aromatic_neighbours()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_fused_aromatic_neighbours());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 min_fused_non_aromatic_neighbours = 13;
    if (has_min_fused_non_aromatic_neighbours()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_fused_non_aromatic_neighbours());
    }

    // optional uint32 max_fused_non_aromatic_neighbours = 14;
    if (has_max_fused_non_aromatic_neighbours()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_fused_non_aromatic_neighbours());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureRingSpecification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureRingSpecification)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureRingSpecification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubstructureRingSpecification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureRingSpecification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureRingSpecification)
    MergeFrom(*source);
  }
}

void SubstructureRingSpecification::MergeFrom(const SubstructureRingSpecification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureRingSpecification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ring_size_.MergeFrom(from.ring_size_);
  fused_.MergeFrom(from.fused_);
  fused_aromatic_neighbours_.MergeFrom(from.fused_aromatic_neighbours_);
  fused_non_aromatic_neighbours_.MergeFrom(from.fused_non_aromatic_neighbours_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_base()->::SubstructureSearch::SubstructureRingBase::MergeFrom(from.base());
    }
    if (cached_has_bits & 0x00000002u) {
      min_ring_size_ = from.min_ring_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_ring_size_ = from.max_ring_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      aromatic_ = from.aromatic_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_fused_ = from.min_fused_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_fused_ = from.max_fused_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_fused_aromatic_neighbours_ = from.min_fused_aromatic_neighbours_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_fused_aromatic_neighbours_ = from.max_fused_aromatic_neighbours_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      min_fused_non_aromatic_neighbours_ = from.min_fused_non_aromatic_neighbours_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_fused_non_aromatic_neighbours_ = from.max_fused_non_aromatic_neighbours_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubstructureRingSpecification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureRingSpecification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureRingSpecification::CopyFrom(const SubstructureRingSpecification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureRingSpecification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureRingSpecification::IsInitialized() const {
  return true;
}

void SubstructureRingSpecification::Swap(SubstructureRingSpecification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubstructureRingSpecification::InternalSwap(SubstructureRingSpecification* other) {
  using std::swap;
  ring_size_.InternalSwap(&other->ring_size_);
  fused_.InternalSwap(&other->fused_);
  fused_aromatic_neighbours_.InternalSwap(&other->fused_aromatic_neighbours_);
  fused_non_aromatic_neighbours_.InternalSwap(&other->fused_non_aromatic_neighbours_);
  swap(base_, other->base_);
  swap(min_ring_size_, other->min_ring_size_);
  swap(max_ring_size_, other->max_ring_size_);
  swap(aromatic_, other->aromatic_);
  swap(min_fused_, other->min_fused_);
  swap(max_fused_, other->max_fused_);
  swap(min_fused_aromatic_neighbours_, other->min_fused_aromatic_neighbours_);
  swap(max_fused_aromatic_neighbours_, other->max_fused_aromatic_neighbours_);
  swap(min_fused_non_aromatic_neighbours_, other->min_fused_non_aromatic_neighbours_);
  swap(max_fused_non_aromatic_neighbours_, other->max_fused_non_aromatic_neighbours_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubstructureRingSpecification::GetMetadata() const {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RingSizeRequirement::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RingSizeRequirement::kRingSizeFieldNumber;
const int RingSizeRequirement::kCountFieldNumber;
const int RingSizeRequirement::kMinCountFieldNumber;
const int RingSizeRequirement::kMaxCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RingSizeRequirement::RingSizeRequirement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substructure_2eproto::scc_info_RingSizeRequirement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstructureSearch.RingSizeRequirement)
}
RingSizeRequirement::RingSizeRequirement(const RingSizeRequirement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      count_(from.count_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ring_size_, &from.ring_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_count_) -
    reinterpret_cast<char*>(&ring_size_)) + sizeof(max_count_));
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.RingSizeRequirement)
}

void RingSizeRequirement::SharedCtor() {
  ::memset(&ring_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_count_) -
      reinterpret_cast<char*>(&ring_size_)) + sizeof(max_count_));
}

RingSizeRequirement::~RingSizeRequirement() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.RingSizeRequirement)
  SharedDtor();
}

void RingSizeRequirement::SharedDtor() {
}

void RingSizeRequirement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RingSizeRequirement::descriptor() {
  ::protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RingSizeRequirement& RingSizeRequirement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substructure_2eproto::scc_info_RingSizeRequirement.base);
  return *internal_default_instance();
}


void RingSizeRequirement::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.RingSizeRequirement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&ring_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_count_) -
        reinterpret_cast<char*>(&ring_size_)) + sizeof(max_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RingSizeRequirement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstructureSearch.RingSizeRequirement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ring_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ring_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ring_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_count())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_count())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_min_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_max_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstructureSearch.RingSizeRequirement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstructureSearch.RingSizeRequirement)
  return false;
#undef DO_
}

void RingSizeRequirement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstructureSearch.RingSizeRequirement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ring_size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ring_size(), output);
  }

  // repeated uint32 count = 2;
  for (int i = 0, n = this->count_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->count(i), output);
  }

  // optional uint32 min_count = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->min_count(), output);
  }

  // optional uint32 max_count = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstructureSearch.RingSizeRequirement)
}

::google::protobuf::uint8* RingSizeRequirement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.RingSizeRequirement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ring_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ring_size(), target);
  }

  // repeated uint32 count = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->count_, target);

  // optional uint32 min_count = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->min_count(), target);
  }

  // optional uint32 max_count = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.RingSizeRequirement)
  return target;
}

size_t RingSizeRequirement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.RingSizeRequirement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 count = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->count_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->count_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 ring_size = 1;
    if (has_ring_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ring_size());
    }

    // optional uint32 min_count = 3;
    if (has_min_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_count());
    }

    // optional uint32 max_count = 4;
    if (has_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RingSizeRequirement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.RingSizeRequirement)
  GOOGLE_DCHECK_NE(&from, this);
  const RingSizeRequirement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RingSizeRequirement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.RingSizeRequirement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.RingSizeRequirement)
    MergeFrom(*source);
  }
}

void RingSizeRequirement::MergeFrom(const RingSizeRequirement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.RingSizeRequirement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  count_.MergeFrom(from.count_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ring_size_ = from.ring_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_count_ = from.min_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_count_ = from.max_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RingSizeRequirement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.RingSizeRequirement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RingSizeRequirement::CopyFrom(const RingSizeRequirement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.RingSizeRequirement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RingSizeRequirement::IsInitialized() const {
  return true;
}

void RingSizeRequirement::Swap(RingSizeRequirement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RingSizeRequirement::InternalSwap(RingSizeRequirement* other) {
  using std::swap;
  count_.InternalSwap(&other->count_);
  swap(ring_size_, other->ring_size_);
  swap(min_count_, other->min_count_);
  swap(max_count_, other->max_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RingSizeRequirement::GetMetadata() const {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubstructureRingSystemSpecification::InitAsDefaultInstance() {
  ::SubstructureSearch::_SubstructureRingSystemSpecification_default_instance_._instance.get_mutable()->base_ = const_cast< ::SubstructureSearch::SubstructureRingBase*>(
      ::SubstructureSearch::SubstructureRingBase::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubstructureRingSystemSpecification::kBaseFieldNumber;
const int SubstructureRingSystemSpecification::kRingsInSystemFieldNumber;
const int SubstructureRingSystemSpecification::kMinRingsInSystemFieldNumber;
const int SubstructureRingSystemSpecification::kMaxRingsInSystemFieldNumber;
const int SubstructureRingSystemSpecification::kRingSizesFieldNumber;
const int SubstructureRingSystemSpecification::kMinRingSizesFieldNumber;
const int SubstructureRingSystemSpecification::kMaxRingSizesFieldNumber;
const int SubstructureRingSystemSpecification::kRingSizeCountFieldNumber;
const int SubstructureRingSystemSpecification::kAromaticRingCountFieldNumber;
const int SubstructureRingSystemSpecification::kMinAromaticRingCountFieldNumber;
const int SubstructureRingSystemSpecification::kMaxAromaticRingCountFieldNumber;
const int SubstructureRingSystemSpecification::kNonAromaticRingCountFieldNumber;
const int SubstructureRingSystemSpecification::kMinNonAromaticRingCountFieldNumber;
const int SubstructureRingSystemSpecification::kMaxNonAromaticRingCountFieldNumber;
const int SubstructureRingSystemSpecification::kDegreeOfFusionFieldNumber;
const int SubstructureRingSystemSpecification::kMinDegreeOfFusionFieldNumber;
const int SubstructureRingSystemSpecification::kMaxDegreeOfFusionFieldNumber;
const int SubstructureRingSystemSpecification::kAtomsInSystemFieldNumber;
const int SubstructureRingSystemSpecification::kMinAtomsInSystemFieldNumber;
const int SubstructureRingSystemSpecification::kMaxAtomsInSystemFieldNumber;
const int SubstructureRingSystemSpecification::kNumberSpinachGroupsFieldNumber;
const int SubstructureRingSystemSpecification::kMinNumberSpinachGroupsFieldNumber;
const int SubstructureRingSystemSpecification::kMaxNumberSpinachGroupsFieldNumber;
const int SubstructureRingSystemSpecification::kNumberNonSpinachGroupsFieldNumber;
const int SubstructureRingSystemSpecification::kMinNumberNonSpinachGroupsFieldNumber;
const int SubstructureRingSystemSpecification::kMaxNumberNonSpinachGroupsFieldNumber;
const int SubstructureRingSystemSpecification::kAtomsInSpinachGroupFieldNumber;
const int SubstructureRingSystemSpecification::kMinAtomsInSpinachGroupFieldNumber;
const int SubstructureRingSystemSpecification::kMaxAtomsInSpinachGroupFieldNumber;
const int SubstructureRingSystemSpecification::kLengthOfSpinachGroupFieldNumber;
const int SubstructureRingSystemSpecification::kMinLengthOfSpinachGroupFieldNumber;
const int SubstructureRingSystemSpecification::kMaxLengthOfSpinachGroupFieldNumber;
const int SubstructureRingSystemSpecification::kDistanceToAnotherRingFieldNumber;
const int SubstructureRingSystemSpecification::kMinDistanceToAnotherRingFieldNumber;
const int SubstructureRingSystemSpecification::kMaxDistanceToAnotherRingFieldNumber;
const int SubstructureRingSystemSpecification::kStronglyFusedRingCountFieldNumber;
const int SubstructureRingSystemSpecification::kMinStronglyFusedRingCountFieldNumber;
const int SubstructureRingSystemSpecification::kMaxStronglyFusedRingCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubstructureRingSystemSpecification::SubstructureRingSystemSpecification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substructure_2eproto::scc_info_SubstructureRingSystemSpecification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstructureSearch.SubstructureRingSystemSpecification)
}
SubstructureRingSystemSpecification::SubstructureRingSystemSpecification(const SubstructureRingSystemSpecification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      rings_in_system_(from.rings_in_system_),
      ring_sizes_(from.ring_sizes_),
      ring_size_count_(from.ring_size_count_),
      aromatic_ring_count_(from.aromatic_ring_count_),
      non_aromatic_ring_count_(from.non_aromatic_ring_count_),
      degree_of_fusion_(from.degree_of_fusion_),
      atoms_in_system_(from.atoms_in_system_),
      number_spinach_groups_(from.number_spinach_groups_),
      number_non_spinach_groups_(from.number_non_spinach_groups_),
      atoms_in_spinach_group_(from.atoms_in_spinach_group_),
      length_of_spinach_group_(from.length_of_spinach_group_),
      distance_to_another_ring_(from.distance_to_another_ring_),
      strongly_fused_ring_count_(from.strongly_fused_ring_count_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::SubstructureSearch::SubstructureRingBase(*from.base_);
  } else {
    base_ = NULL;
  }
  ::memcpy(&min_rings_in_system_, &from.min_rings_in_system_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_strongly_fused_ring_count_) -
    reinterpret_cast<char*>(&min_rings_in_system_)) + sizeof(max_strongly_fused_ring_count_));
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureRingSystemSpecification)
}

void SubstructureRingSystemSpecification::SharedCtor() {
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_strongly_fused_ring_count_) -
      reinterpret_cast<char*>(&base_)) + sizeof(max_strongly_fused_ring_count_));
}

SubstructureRingSystemSpecification::~SubstructureRingSystemSpecification() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureRingSystemSpecification)
  SharedDtor();
}

void SubstructureRingSystemSpecification::SharedDtor() {
  if (this != internal_default_instance()) delete base_;
}

void SubstructureRingSystemSpecification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubstructureRingSystemSpecification::descriptor() {
  ::protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubstructureRingSystemSpecification& SubstructureRingSystemSpecification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substructure_2eproto::scc_info_SubstructureRingSystemSpecification.base);
  return *internal_default_instance();
}


void SubstructureRingSystemSpecification::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureRingSystemSpecification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rings_in_system_.Clear();
  ring_sizes_.Clear();
  ring_size_count_.Clear();
  aromatic_ring_count_.Clear();
  non_aromatic_ring_count_.Clear();
  degree_of_fusion_.Clear();
  atoms_in_system_.Clear();
  number_spinach_groups_.Clear();
  number_non_spinach_groups_.Clear();
  atoms_in_spinach_group_.Clear();
  length_of_spinach_group_.Clear();
  distance_to_another_ring_.Clear();
  strongly_fused_ring_count_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(base_ != NULL);
    base_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&min_rings_in_system_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_non_aromatic_ring_count_) -
        reinterpret_cast<char*>(&min_rings_in_system_)) + sizeof(min_non_aromatic_ring_count_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&max_non_aromatic_ring_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_number_non_spinach_groups_) -
        reinterpret_cast<char*>(&max_non_aromatic_ring_count_)) + sizeof(min_number_non_spinach_groups_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&max_number_non_spinach_groups_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_strongly_fused_ring_count_) -
        reinterpret_cast<char*>(&max_number_non_spinach_groups_)) + sizeof(min_strongly_fused_ring_count_));
  }
  max_strongly_fused_ring_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubstructureRingSystemSpecification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstructureSearch.SubstructureRingSystemSpecification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SubstructureSearch.SubstructureRingBase base = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 rings_in_system = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_rings_in_system())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rings_in_system())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_rings_in_system = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_min_rings_in_system();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_rings_in_system_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_rings_in_system = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_max_rings_in_system();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_rings_in_system_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ring_sizes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_ring_sizes())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ring_sizes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_ring_sizes = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_min_ring_sizes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_ring_sizes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_ring_sizes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_max_ring_sizes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_ring_sizes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstructureSearch.RingSizeRequirement ring_size_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ring_size_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 aromatic_ring_count = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88u, input, this->mutable_aromatic_ring_count())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_aromatic_ring_count())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_aromatic_ring_count = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_min_aromatic_ring_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_aromatic_ring_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_aromatic_ring_count = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_max_aromatic_ring_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_aromatic_ring_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 non_aromatic_ring_count = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112u, input, this->mutable_non_aromatic_ring_count())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_non_aromatic_ring_count())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_non_aromatic_ring_count = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_min_non_aromatic_ring_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_non_aromatic_ring_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_non_aromatic_ring_count = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_max_non_aromatic_ring_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_non_aromatic_ring_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 degree_of_fusion = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136u, input, this->mutable_degree_of_fusion())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_degree_of_fusion())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_degree_of_fusion = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_min_degree_of_fusion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_degree_of_fusion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_degree_of_fusion = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_max_degree_of_fusion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_degree_of_fusion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 atoms_in_system = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 160u, input, this->mutable_atoms_in_system())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_atoms_in_system())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_atoms_in_system = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_min_atoms_in_system();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_atoms_in_system_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_atoms_in_system = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_max_atoms_in_system();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_atoms_in_system_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 number_spinach_groups = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 184u, input, this->mutable_number_spinach_groups())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_number_spinach_groups())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_number_spinach_groups = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_min_number_spinach_groups();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_number_spinach_groups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_number_spinach_groups = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_max_number_spinach_groups();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_number_spinach_groups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 number_non_spinach_groups = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 208u, input, this->mutable_number_non_spinach_groups())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_number_non_spinach_groups())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_number_non_spinach_groups = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_min_number_non_spinach_groups();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_number_non_spinach_groups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_number_non_spinach_groups = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_max_number_non_spinach_groups();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_number_non_spinach_groups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 atoms_in_spinach_group = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 232u, input, this->mutable_atoms_in_spinach_group())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_atoms_in_spinach_group())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_atoms_in_spinach_group = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_min_atoms_in_spinach_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_atoms_in_spinach_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_atoms_in_spinach_group = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_max_atoms_in_spinach_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_atoms_in_spinach_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 length_of_spinach_group = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 256u, input, this->mutable_length_of_spinach_group())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_length_of_spinach_group())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_length_of_spinach_group = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_min_length_of_spinach_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_length_of_spinach_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_length_of_spinach_group = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          set_has_max_length_of_spinach_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_length_of_spinach_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 distance_to_another_ring = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 280u, input, this->mutable_distance_to_another_ring())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_distance_to_another_ring())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_distance_to_another_ring = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          set_has_min_distance_to_another_ring();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_distance_to_another_ring_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_distance_to_another_ring = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          set_has_max_distance_to_another_ring();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_distance_to_another_ring_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 strongly_fused_ring_count = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 304u, input, this->mutable_strongly_fused_ring_count())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 306 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_strongly_fused_ring_count())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_strongly_fused_ring_count = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {
          set_has_min_strongly_fused_ring_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_strongly_fused_ring_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_strongly_fused_ring_count = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_max_strongly_fused_ring_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_strongly_fused_ring_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstructureSearch.SubstructureRingSystemSpecification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstructureSearch.SubstructureRingSystemSpecification)
  return false;
#undef DO_
}

void SubstructureRingSystemSpecification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstructureSearch.SubstructureRingSystemSpecification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SubstructureSearch.SubstructureRingBase base = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_base(), output);
  }

  // repeated uint32 rings_in_system = 2;
  for (int i = 0, n = this->rings_in_system_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->rings_in_system(i), output);
  }

  // optional uint32 min_rings_in_system = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->min_rings_in_system(), output);
  }

  // optional uint32 max_rings_in_system = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_rings_in_system(), output);
  }

  // repeated uint32 ring_sizes = 5;
  for (int i = 0, n = this->ring_sizes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->ring_sizes(i), output);
  }

  // optional uint32 min_ring_sizes = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->min_ring_sizes(), output);
  }

  // optional uint32 max_ring_sizes = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max_ring_sizes(), output);
  }

  // repeated .SubstructureSearch.RingSizeRequirement ring_size_count = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ring_size_count_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->ring_size_count(static_cast<int>(i)),
      output);
  }

  // repeated uint32 aromatic_ring_count = 11;
  for (int i = 0, n = this->aromatic_ring_count_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->aromatic_ring_count(i), output);
  }

  // optional uint32 min_aromatic_ring_count = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->min_aromatic_ring_count(), output);
  }

  // optional uint32 max_aromatic_ring_count = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->max_aromatic_ring_count(), output);
  }

  // repeated uint32 non_aromatic_ring_count = 14;
  for (int i = 0, n = this->non_aromatic_ring_count_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->non_aromatic_ring_count(i), output);
  }

  // optional uint32 min_non_aromatic_ring_count = 15;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->min_non_aromatic_ring_count(), output);
  }

  // optional uint32 max_non_aromatic_ring_count = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->max_non_aromatic_ring_count(), output);
  }

  // repeated uint32 degree_of_fusion = 17;
  for (int i = 0, n = this->degree_of_fusion_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->degree_of_fusion(i), output);
  }

  // optional uint32 min_degree_of_fusion = 18;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->min_degree_of_fusion(), output);
  }

  // optional uint32 max_degree_of_fusion = 19;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->max_degree_of_fusion(), output);
  }

  // repeated uint32 atoms_in_system = 20;
  for (int i = 0, n = this->atoms_in_system_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      20, this->atoms_in_system(i), output);
  }

  // optional uint32 min_atoms_in_system = 21;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->min_atoms_in_system(), output);
  }

  // optional uint32 max_atoms_in_system = 22;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->max_atoms_in_system(), output);
  }

  // repeated uint32 number_spinach_groups = 23;
  for (int i = 0, n = this->number_spinach_groups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      23, this->number_spinach_groups(i), output);
  }

  // optional uint32 min_number_spinach_groups = 24;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->min_number_spinach_groups(), output);
  }

  // optional uint32 max_number_spinach_groups = 25;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->max_number_spinach_groups(), output);
  }

  // repeated uint32 number_non_spinach_groups = 26;
  for (int i = 0, n = this->number_non_spinach_groups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      26, this->number_non_spinach_groups(i), output);
  }

  // optional uint32 min_number_non_spinach_groups = 27;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->min_number_non_spinach_groups(), output);
  }

  // optional uint32 max_number_non_spinach_groups = 28;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->max_number_non_spinach_groups(), output);
  }

  // repeated uint32 atoms_in_spinach_group = 29;
  for (int i = 0, n = this->atoms_in_spinach_group_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      29, this->atoms_in_spinach_group(i), output);
  }

  // optional uint32 min_atoms_in_spinach_group = 30;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->min_atoms_in_spinach_group(), output);
  }

  // optional uint32 max_atoms_in_spinach_group = 31;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->max_atoms_in_spinach_group(), output);
  }

  // repeated uint32 length_of_spinach_group = 32;
  for (int i = 0, n = this->length_of_spinach_group_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      32, this->length_of_spinach_group(i), output);
  }

  // optional uint32 min_length_of_spinach_group = 33;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->min_length_of_spinach_group(), output);
  }

  // optional uint32 max_length_of_spinach_group = 34;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->max_length_of_spinach_group(), output);
  }

  // repeated uint32 distance_to_another_ring = 35;
  for (int i = 0, n = this->distance_to_another_ring_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      35, this->distance_to_another_ring(i), output);
  }

  // optional uint32 min_distance_to_another_ring = 36;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->min_distance_to_another_ring(), output);
  }

  // optional uint32 max_distance_to_another_ring = 37;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->max_distance_to_another_ring(), output);
  }

  // repeated uint32 strongly_fused_ring_count = 38;
  for (int i = 0, n = this->strongly_fused_ring_count_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      38, this->strongly_fused_ring_count(i), output);
  }

  // optional uint32 min_strongly_fused_ring_count = 39;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->min_strongly_fused_ring_count(), output);
  }

  // optional uint32 max_strongly_fused_ring_count = 40;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->max_strongly_fused_ring_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstructureSearch.SubstructureRingSystemSpecification)
}

::google::protobuf::uint8* SubstructureRingSystemSpecification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureRingSystemSpecification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SubstructureSearch.SubstructureRingBase base = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_base(), deterministic, target);
  }

  // repeated uint32 rings_in_system = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->rings_in_system_, target);

  // optional uint32 min_rings_in_system = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->min_rings_in_system(), target);
  }

  // optional uint32 max_rings_in_system = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_rings_in_system(), target);
  }

  // repeated uint32 ring_sizes = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->ring_sizes_, target);

  // optional uint32 min_ring_sizes = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->min_ring_sizes(), target);
  }

  // optional uint32 max_ring_sizes = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->max_ring_sizes(), target);
  }

  // repeated .SubstructureSearch.RingSizeRequirement ring_size_count = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ring_size_count_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->ring_size_count(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 aromatic_ring_count = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(11, this->aromatic_ring_count_, target);

  // optional uint32 min_aromatic_ring_count = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->min_aromatic_ring_count(), target);
  }

  // optional uint32 max_aromatic_ring_count = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->max_aromatic_ring_count(), target);
  }

  // repeated uint32 non_aromatic_ring_count = 14;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(14, this->non_aromatic_ring_count_, target);

  // optional uint32 min_non_aromatic_ring_count = 15;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->min_non_aromatic_ring_count(), target);
  }

  // optional uint32 max_non_aromatic_ring_count = 16;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->max_non_aromatic_ring_count(), target);
  }

  // repeated uint32 degree_of_fusion = 17;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(17, this->degree_of_fusion_, target);

  // optional uint32 min_degree_of_fusion = 18;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->min_degree_of_fusion(), target);
  }

  // optional uint32 max_degree_of_fusion = 19;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->max_degree_of_fusion(), target);
  }

  // repeated uint32 atoms_in_system = 20;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(20, this->atoms_in_system_, target);

  // optional uint32 min_atoms_in_system = 21;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->min_atoms_in_system(), target);
  }

  // optional uint32 max_atoms_in_system = 22;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->max_atoms_in_system(), target);
  }

  // repeated uint32 number_spinach_groups = 23;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(23, this->number_spinach_groups_, target);

  // optional uint32 min_number_spinach_groups = 24;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->min_number_spinach_groups(), target);
  }

  // optional uint32 max_number_spinach_groups = 25;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->max_number_spinach_groups(), target);
  }

  // repeated uint32 number_non_spinach_groups = 26;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(26, this->number_non_spinach_groups_, target);

  // optional uint32 min_number_non_spinach_groups = 27;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->min_number_non_spinach_groups(), target);
  }

  // optional uint32 max_number_non_spinach_groups = 28;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->max_number_non_spinach_groups(), target);
  }

  // repeated uint32 atoms_in_spinach_group = 29;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(29, this->atoms_in_spinach_group_, target);

  // optional uint32 min_atoms_in_spinach_group = 30;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->min_atoms_in_spinach_group(), target);
  }

  // optional uint32 max_atoms_in_spinach_group = 31;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->max_atoms_in_spinach_group(), target);
  }

  // repeated uint32 length_of_spinach_group = 32;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(32, this->length_of_spinach_group_, target);

  // optional uint32 min_length_of_spinach_group = 33;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->min_length_of_spinach_group(), target);
  }

  // optional uint32 max_length_of_spinach_group = 34;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->max_length_of_spinach_group(), target);
  }

  // repeated uint32 distance_to_another_ring = 35;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(35, this->distance_to_another_ring_, target);

  // optional uint32 min_distance_to_another_ring = 36;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->min_distance_to_another_ring(), target);
  }

  // optional uint32 max_distance_to_another_ring = 37;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->max_distance_to_another_ring(), target);
  }

  // repeated uint32 strongly_fused_ring_count = 38;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(38, this->strongly_fused_ring_count_, target);

  // optional uint32 min_strongly_fused_ring_count = 39;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->min_strongly_fused_ring_count(), target);
  }

  // optional uint32 max_strongly_fused_ring_count = 40;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->max_strongly_fused_ring_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureRingSystemSpecification)
  return target;
}

size_t SubstructureRingSystemSpecification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureRingSystemSpecification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 rings_in_system = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->rings_in_system_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->rings_in_system_size());
    total_size += data_size;
  }

  // repeated uint32 ring_sizes = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ring_sizes_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ring_sizes_size());
    total_size += data_size;
  }

  // repeated .SubstructureSearch.RingSizeRequirement ring_size_count = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->ring_size_count_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ring_size_count(static_cast<int>(i)));
    }
  }

  // repeated uint32 aromatic_ring_count = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->aromatic_ring_count_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->aromatic_ring_count_size());
    total_size += data_size;
  }

  // repeated uint32 non_aromatic_ring_count = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->non_aromatic_ring_count_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->non_aromatic_ring_count_size());
    total_size += data_size;
  }

  // repeated uint32 degree_of_fusion = 17;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->degree_of_fusion_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->degree_of_fusion_size());
    total_size += data_size;
  }

  // repeated uint32 atoms_in_system = 20;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->atoms_in_system_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->atoms_in_system_size());
    total_size += data_size;
  }

  // repeated uint32 number_spinach_groups = 23;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->number_spinach_groups_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->number_spinach_groups_size());
    total_size += data_size;
  }

  // repeated uint32 number_non_spinach_groups = 26;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->number_non_spinach_groups_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->number_non_spinach_groups_size());
    total_size += data_size;
  }

  // repeated uint32 atoms_in_spinach_group = 29;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->atoms_in_spinach_group_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->atoms_in_spinach_group_size());
    total_size += data_size;
  }

  // repeated uint32 length_of_spinach_group = 32;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->length_of_spinach_group_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->length_of_spinach_group_size());
    total_size += data_size;
  }

  // repeated uint32 distance_to_another_ring = 35;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->distance_to_another_ring_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->distance_to_another_ring_size());
    total_size += data_size;
  }

  // repeated uint32 strongly_fused_ring_count = 38;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->strongly_fused_ring_count_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->strongly_fused_ring_count_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .SubstructureSearch.SubstructureRingBase base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *base_);
    }

    // optional uint32 min_rings_in_system = 3;
    if (has_min_rings_in_system()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_rings_in_system());
    }

    // optional uint32 max_rings_in_system = 4;
    if (has_max_rings_in_system()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_rings_in_system());
    }

    // optional uint32 min_ring_sizes = 6;
    if (has_min_ring_sizes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_ring_sizes());
    }

    // optional uint32 max_ring_sizes = 7;
    if (has_max_ring_sizes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_ring_sizes());
    }

    // optional uint32 min_aromatic_ring_count = 12;
    if (has_min_aromatic_ring_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_aromatic_ring_count());
    }

    // optional uint32 max_aromatic_ring_count = 13;
    if (has_max_aromatic_ring_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_aromatic_ring_count());
    }

    // optional uint32 min_non_aromatic_ring_count = 15;
    if (has_min_non_aromatic_ring_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_non_aromatic_ring_count());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 max_non_aromatic_ring_count = 16;
    if (has_max_non_aromatic_ring_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_non_aromatic_ring_count());
    }

    // optional uint32 min_degree_of_fusion = 18;
    if (has_min_degree_of_fusion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_degree_of_fusion());
    }

    // optional uint32 max_degree_of_fusion = 19;
    if (has_max_degree_of_fusion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_degree_of_fusion());
    }

    // optional uint32 min_atoms_in_system = 21;
    if (has_min_atoms_in_system()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_atoms_in_system());
    }

    // optional uint32 max_atoms_in_system = 22;
    if (has_max_atoms_in_system()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_atoms_in_system());
    }

    // optional uint32 min_number_spinach_groups = 24;
    if (has_min_number_spinach_groups()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_number_spinach_groups());
    }

    // optional uint32 max_number_spinach_groups = 25;
    if (has_max_number_spinach_groups()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_number_spinach_groups());
    }

    // optional uint32 min_number_non_spinach_groups = 27;
    if (has_min_number_non_spinach_groups()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_number_non_spinach_groups());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 max_number_non_spinach_groups = 28;
    if (has_max_number_non_spinach_groups()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_number_non_spinach_groups());
    }

    // optional uint32 min_atoms_in_spinach_group = 30;
    if (has_min_atoms_in_spinach_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_atoms_in_spinach_group());
    }

    // optional uint32 max_atoms_in_spinach_group = 31;
    if (has_max_atoms_in_spinach_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_atoms_in_spinach_group());
    }

    // optional uint32 min_length_of_spinach_group = 33;
    if (has_min_length_of_spinach_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_length_of_spinach_group());
    }

    // optional uint32 max_length_of_spinach_group = 34;
    if (has_max_length_of_spinach_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_length_of_spinach_group());
    }

    // optional uint32 min_distance_to_another_ring = 36;
    if (has_min_distance_to_another_ring()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_distance_to_another_ring());
    }

    // optional uint32 max_distance_to_another_ring = 37;
    if (has_max_distance_to_another_ring()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_distance_to_another_ring());
    }

    // optional uint32 min_strongly_fused_ring_count = 39;
    if (has_min_strongly_fused_ring_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_strongly_fused_ring_count());
    }

  }
  // optional uint32 max_strongly_fused_ring_count = 40;
  if (has_max_strongly_fused_ring_count()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_strongly_fused_ring_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureRingSystemSpecification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureRingSystemSpecification)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureRingSystemSpecification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubstructureRingSystemSpecification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureRingSystemSpecification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureRingSystemSpecification)
    MergeFrom(*source);
  }
}

void SubstructureRingSystemSpecification::MergeFrom(const SubstructureRingSystemSpecification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureRingSystemSpecification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rings_in_system_.MergeFrom(from.rings_in_system_);
  ring_sizes_.MergeFrom(from.ring_sizes_);
  ring_size_count_.MergeFrom(from.ring_size_count_);
  aromatic_ring_count_.MergeFrom(from.aromatic_ring_count_);
  non_aromatic_ring_count_.MergeFrom(from.non_aromatic_ring_count_);
  degree_of_fusion_.MergeFrom(from.degree_of_fusion_);
  atoms_in_system_.MergeFrom(from.atoms_in_system_);
  number_spinach_groups_.MergeFrom(from.number_spinach_groups_);
  number_non_spinach_groups_.MergeFrom(from.number_non_spinach_groups_);
  atoms_in_spinach_group_.MergeFrom(from.atoms_in_spinach_group_);
  length_of_spinach_group_.MergeFrom(from.length_of_spinach_group_);
  distance_to_another_ring_.MergeFrom(from.distance_to_another_ring_);
  strongly_fused_ring_count_.MergeFrom(from.strongly_fused_ring_count_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_base()->::SubstructureSearch::SubstructureRingBase::MergeFrom(from.base());
    }
    if (cached_has_bits & 0x00000002u) {
      min_rings_in_system_ = from.min_rings_in_system_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_rings_in_system_ = from.max_rings_in_system_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_ring_sizes_ = from.min_ring_sizes_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_ring_sizes_ = from.max_ring_sizes_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_aromatic_ring_count_ = from.min_aromatic_ring_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_aromatic_ring_count_ = from.max_aromatic_ring_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      min_non_aromatic_ring_count_ = from.min_non_aromatic_ring_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      max_non_aromatic_ring_count_ = from.max_non_aromatic_ring_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      min_degree_of_fusion_ = from.min_degree_of_fusion_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_degree_of_fusion_ = from.max_degree_of_fusion_;
    }
    if (cached_has_bits & 0x00000800u) {
      min_atoms_in_system_ = from.min_atoms_in_system_;
    }
    if (cached_has_bits & 0x00001000u) {
      max_atoms_in_system_ = from.max_atoms_in_system_;
    }
    if (cached_has_bits & 0x00002000u) {
      min_number_spinach_groups_ = from.min_number_spinach_groups_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_number_spinach_groups_ = from.max_number_spinach_groups_;
    }
    if (cached_has_bits & 0x00008000u) {
      min_number_non_spinach_groups_ = from.min_number_non_spinach_groups_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      max_number_non_spinach_groups_ = from.max_number_non_spinach_groups_;
    }
    if (cached_has_bits & 0x00020000u) {
      min_atoms_in_spinach_group_ = from.min_atoms_in_spinach_group_;
    }
    if (cached_has_bits & 0x00040000u) {
      max_atoms_in_spinach_group_ = from.max_atoms_in_spinach_group_;
    }
    if (cached_has_bits & 0x00080000u) {
      min_length_of_spinach_group_ = from.min_length_of_spinach_group_;
    }
    if (cached_has_bits & 0x00100000u) {
      max_length_of_spinach_group_ = from.max_length_of_spinach_group_;
    }
    if (cached_has_bits & 0x00200000u) {
      min_distance_to_another_ring_ = from.min_distance_to_another_ring_;
    }
    if (cached_has_bits & 0x00400000u) {
      max_distance_to_another_ring_ = from.max_distance_to_another_ring_;
    }
    if (cached_has_bits & 0x00800000u) {
      min_strongly_fused_ring_count_ = from.min_strongly_fused_ring_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    set_max_strongly_fused_ring_count(from.max_strongly_fused_ring_count());
  }
}

void SubstructureRingSystemSpecification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureRingSystemSpecification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureRingSystemSpecification::CopyFrom(const SubstructureRingSystemSpecification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureRingSystemSpecification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureRingSystemSpecification::IsInitialized() const {
  return true;
}

void SubstructureRingSystemSpecification::Swap(SubstructureRingSystemSpecification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubstructureRingSystemSpecification::InternalSwap(SubstructureRingSystemSpecification* other) {
  using std::swap;
  rings_in_system_.InternalSwap(&other->rings_in_system_);
  ring_sizes_.InternalSwap(&other->ring_sizes_);
  CastToBase(&ring_size_count_)->InternalSwap(CastToBase(&other->ring_size_count_));
  aromatic_ring_count_.InternalSwap(&other->aromatic_ring_count_);
  non_aromatic_ring_count_.InternalSwap(&other->non_aromatic_ring_count_);
  degree_of_fusion_.InternalSwap(&other->degree_of_fusion_);
  atoms_in_system_.InternalSwap(&other->atoms_in_system_);
  number_spinach_groups_.InternalSwap(&other->number_spinach_groups_);
  number_non_spinach_groups_.InternalSwap(&other->number_non_spinach_groups_);
  atoms_in_spinach_group_.InternalSwap(&other->atoms_in_spinach_group_);
  length_of_spinach_group_.InternalSwap(&other->length_of_spinach_group_);
  distance_to_another_ring_.InternalSwap(&other->distance_to_another_ring_);
  strongly_fused_ring_count_.InternalSwap(&other->strongly_fused_ring_count_);
  swap(base_, other->base_);
  swap(min_rings_in_system_, other->min_rings_in_system_);
  swap(max_rings_in_system_, other->max_rings_in_system_);
  swap(min_ring_sizes_, other->min_ring_sizes_);
  swap(max_ring_sizes_, other->max_ring_sizes_);
  swap(min_aromatic_ring_count_, other->min_aromatic_ring_count_);
  swap(max_aromatic_ring_count_, other->max_aromatic_ring_count_);
  swap(min_non_aromatic_ring_count_, other->min_non_aromatic_ring_count_);
  swap(max_non_aromatic_ring_count_, other->max_non_aromatic_ring_count_);
  swap(min_degree_of_fusion_, other->min_degree_of_fusion_);
  swap(max_degree_of_fusion_, other->max_degree_of_fusion_);
  swap(min_atoms_in_system_, other->min_atoms_in_system_);
  swap(max_atoms_in_system_, other->max_atoms_in_system_);
  swap(min_number_spinach_groups_, other->min_number_spinach_groups_);
  swap(max_number_spinach_groups_, other->max_number_spinach_groups_);
  swap(min_number_non_spinach_groups_, other->min_number_non_spinach_groups_);
  swap(max_number_non_spinach_groups_, other->max_number_non_spinach_groups_);
  swap(min_atoms_in_spinach_group_, other->min_atoms_in_spinach_group_);
  swap(max_atoms_in_spinach_group_, other->max_atoms_in_spinach_group_);
  swap(min_length_of_spinach_group_, other->min_length_of_spinach_group_);
  swap(max_length_of_spinach_group_, other->max_length_of_spinach_group_);
  swap(min_distance_to_another_ring_, other->min_distance_to_another_ring_);
  swap(max_distance_to_another_ring_, other->max_distance_to_another_ring_);
  swap(min_strongly_fused_ring_count_, other->min_strongly_fused_ring_count_);
  swap(max_strongly_fused_ring_count_, other->max_strongly_fused_ring_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubstructureRingSystemSpecification::GetMetadata() const {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubstructureAtomSpecifier::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubstructureAtomSpecifier::kAtomicSymbolFieldNumber;
const int SubstructureAtomSpecifier::kAtomicNumberFieldNumber;
const int SubstructureAtomSpecifier::kNconFieldNumber;
const int SubstructureAtomSpecifier::kMinNconFieldNumber;
const int SubstructureAtomSpecifier::kMaxNconFieldNumber;
const int SubstructureAtomSpecifier::kNcon2FieldNumber;
const int SubstructureAtomSpecifier::kMinNcon2FieldNumber;
const int SubstructureAtomSpecifier::kMaxNcon2FieldNumber;
const int SubstructureAtomSpecifier::kNbondsFieldNumber;
const int SubstructureAtomSpecifier::kMinNbondsFieldNumber;
const int SubstructureAtomSpecifier::kMaxNbondsFieldNumber;
const int SubstructureAtomSpecifier::kFormalChargeFieldNumber;
const int SubstructureAtomSpecifier::kMinFormalChargeFieldNumber;
const int SubstructureAtomSpecifier::kMaxFormalChargeFieldNumber;
const int SubstructureAtomSpecifier::kNringsFieldNumber;
const int SubstructureAtomSpecifier::kMinNringsFieldNumber;
const int SubstructureAtomSpecifier::kMaxNringsFieldNumber;
const int SubstructureAtomSpecifier::kRingBondCountFieldNumber;
const int SubstructureAtomSpecifier::kMinRingBondCountFieldNumber;
const int SubstructureAtomSpecifier::kMaxRingBondCountFieldNumber;
const int SubstructureAtomSpecifier::kRingSizeFieldNumber;
const int SubstructureAtomSpecifier::kMinRingSizeFieldNumber;
const int SubstructureAtomSpecifier::kMaxRingSizeFieldNumber;
const int SubstructureAtomSpecifier::kHcountFieldNumber;
const int SubstructureAtomSpecifier::kMinHcountFieldNumber;
const int SubstructureAtomSpecifier::kMaxHcountFieldNumber;
const int SubstructureAtomSpecifier::kAromaticFieldNumber;
const int SubstructureAtomSpecifier::kChiralityFieldNumber;
const int SubstructureAtomSpecifier::kAromaticRingSizeFieldNumber;
const int SubstructureAtomSpecifier::kMinAromaticRingSizeFieldNumber;
const int SubstructureAtomSpecifier::kMaxAromaticRingSizeFieldNumber;
const int SubstructureAtomSpecifier::kAliphaticRingSizeFieldNumber;
const int SubstructureAtomSpecifier::kMinAliphaticRingSizeFieldNumber;
const int SubstructureAtomSpecifier::kMaxAliphaticRingSizeFieldNumber;
const int SubstructureAtomSpecifier::kAttachedHeteroatomCountFieldNumber;
const int SubstructureAtomSpecifier::kMinAttachedHeteroatomCountFieldNumber;
const int SubstructureAtomSpecifier::kMaxAttachedHeteroatomCountFieldNumber;
const int SubstructureAtomSpecifier::kLonePairCountFieldNumber;
const int SubstructureAtomSpecifier::kMinLonePairCountFieldNumber;
const int SubstructureAtomSpecifier::kMaxLonePairCountFieldNumber;
const int SubstructureAtomSpecifier::kUnsaturationFieldNumber;
const int SubstructureAtomSpecifier::kMinUnsaturationFieldNumber;
const int SubstructureAtomSpecifier::kMaxUnsaturationFieldNumber;
const int SubstructureAtomSpecifier::kDaylightXFieldNumber;
const int SubstructureAtomSpecifier::kMinDaylightXFieldNumber;
const int SubstructureAtomSpecifier::kMaxDaylightXFieldNumber;
const int SubstructureAtomSpecifier::kIsotopeFieldNumber;
const int SubstructureAtomSpecifier::kMinIsotopeFieldNumber;
const int SubstructureAtomSpecifier::kMaxIsotopeFieldNumber;
const int SubstructureAtomSpecifier::kArylFieldNumber;
const int SubstructureAtomSpecifier::kMinArylFieldNumber;
const int SubstructureAtomSpecifier::kMaxArylFieldNumber;
const int SubstructureAtomSpecifier::kFusedSystemSizeFieldNumber;
const int SubstructureAtomSpecifier::kMinFusedSystemSizeFieldNumber;
const int SubstructureAtomSpecifier::kMaxFusedSystemSizeFieldNumber;
const int SubstructureAtomSpecifier::kVinylFieldNumber;
const int SubstructureAtomSpecifier::kMinVinylFieldNumber;
const int SubstructureAtomSpecifier::kMaxVinylFieldNumber;
const int SubstructureAtomSpecifier::kAllRingsKekuleFieldNumber;
const int SubstructureAtomSpecifier::kHeteroatomsInRingFieldNumber;
const int SubstructureAtomSpecifier::kMinHeteroatomsInRingFieldNumber;
const int SubstructureAtomSpecifier::kMaxHeteroatomsInRingFieldNumber;
const int SubstructureAtomSpecifier::kMatchSpinachOnlyFieldNumber;
const int SubstructureAtomSpecifier::kScaffoldBondsAttachedToRingFieldNumber;
const int SubstructureAtomSpecifier::kMinScaffoldBondsAttachedToRingFieldNumber;
const int SubstructureAtomSpecifier::kMaxScaffoldBondsAttachedToRingFieldNumber;
const int SubstructureAtomSpecifier::kPreferenceValueFieldNumber;
const int SubstructureAtomSpecifier::kSymmetryDegreeFieldNumber;
const int SubstructureAtomSpecifier::kMinSymmetryDegreeFieldNumber;
const int SubstructureAtomSpecifier::kMaxSymmetryDegreeFieldNumber;
const int SubstructureAtomSpecifier::kSymmetryGroupFieldNumber;
const int SubstructureAtomSpecifier::kLogicalOperatorFieldNumber;
const int SubstructureAtomSpecifier::kUserAtomTypeFieldNumber;
const int SubstructureAtomSpecifier::kAtomTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubstructureAtomSpecifier::SubstructureAtomSpecifier()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substructure_2eproto::scc_info_SubstructureAtomSpecifier.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstructureSearch.SubstructureAtomSpecifier)
}
SubstructureAtomSpecifier::SubstructureAtomSpecifier(const SubstructureAtomSpecifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      atomic_symbol_(from.atomic_symbol_),
      atomic_number_(from.atomic_number_),
      ncon_(from.ncon_),
      ncon2_(from.ncon2_),
      nbonds_(from.nbonds_),
      formal_charge_(from.formal_charge_),
      nrings_(from.nrings_),
      ring_bond_count_(from.ring_bond_count_),
      ring_size_(from.ring_size_),
      hcount_(from.hcount_),
      aromatic_ring_size_(from.aromatic_ring_size_),
      aliphatic_ring_size_(from.aliphatic_ring_size_),
      attached_heteroatom_count_(from.attached_heteroatom_count_),
      lone_pair_count_(from.lone_pair_count_),
      unsaturation_(from.unsaturation_),
      daylight_x_(from.daylight_x_),
      isotope_(from.isotope_),
      aryl_(from.aryl_),
      fused_system_size_(from.fused_system_size_),
      vinyl_(from.vinyl_),
      heteroatoms_in_ring_(from.heteroatoms_in_ring_),
      scaffold_bonds_attached_to_ring_(from.scaffold_bonds_attached_to_ring_),
      symmetry_degree_(from.symmetry_degree_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_ncon_, &from.min_ncon_,
    static_cast<size_t>(reinterpret_cast<char*>(&logical_operator_) -
    reinterpret_cast<char*>(&min_ncon_)) + sizeof(logical_operator_));
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureAtomSpecifier)
}

void SubstructureAtomSpecifier::SharedCtor() {
  ::memset(&min_ncon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&atom_type_) -
      reinterpret_cast<char*>(&min_ncon_)) + sizeof(atom_type_));
  logical_operator_ = 8;
}

SubstructureAtomSpecifier::~SubstructureAtomSpecifier() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureAtomSpecifier)
  SharedDtor();
}

void SubstructureAtomSpecifier::SharedDtor() {
}

void SubstructureAtomSpecifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubstructureAtomSpecifier::descriptor() {
  ::protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubstructureAtomSpecifier& SubstructureAtomSpecifier::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substructure_2eproto::scc_info_SubstructureAtomSpecifier.base);
  return *internal_default_instance();
}


void SubstructureAtomSpecifier::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureAtomSpecifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  atomic_symbol_.Clear();
  atomic_number_.Clear();
  ncon_.Clear();
  ncon2_.Clear();
  nbonds_.Clear();
  formal_charge_.Clear();
  nrings_.Clear();
  ring_bond_count_.Clear();
  ring_size_.Clear();
  hcount_.Clear();
  aromatic_ring_size_.Clear();
  aliphatic_ring_size_.Clear();
  attached_heteroatom_count_.Clear();
  lone_pair_count_.Clear();
  unsaturation_.Clear();
  daylight_x_.Clear();
  isotope_.Clear();
  aryl_.Clear();
  fused_system_size_.Clear();
  vinyl_.Clear();
  heteroatoms_in_ring_.Clear();
  scaffold_bonds_attached_to_ring_.Clear();
  symmetry_degree_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&min_ncon_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_formal_charge_) -
        reinterpret_cast<char*>(&min_ncon_)) + sizeof(max_formal_charge_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&min_nrings_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_hcount_) -
        reinterpret_cast<char*>(&min_nrings_)) + sizeof(max_hcount_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&min_aromatic_ring_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chirality_) -
        reinterpret_cast<char*>(&min_aromatic_ring_size_)) + sizeof(chirality_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&all_rings_kekule_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_isotope_) -
        reinterpret_cast<char*>(&all_rings_kekule_)) + sizeof(min_isotope_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    ::memset(&max_isotope_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_heteroatoms_in_ring_) -
        reinterpret_cast<char*>(&max_isotope_)) + sizeof(min_heteroatoms_in_ring_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&max_heteroatoms_in_ring_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&symmetry_group_) -
        reinterpret_cast<char*>(&max_heteroatoms_in_ring_)) + sizeof(symmetry_group_));
  }
  if (cached_has_bits & 458752u) {
    ::memset(&user_atom_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&atom_type_) -
        reinterpret_cast<char*>(&user_atom_type_)) + sizeof(atom_type_));
    logical_operator_ = 8;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubstructureAtomSpecifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstructureSearch.SubstructureAtomSpecifier)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string atomic_symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_atomic_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->atomic_symbol(this->atomic_symbol_size() - 1).data(),
            static_cast<int>(this->atomic_symbol(this->atomic_symbol_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.SubstructureAtomSpecifier.atomic_symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 atomic_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_atomic_number())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_atomic_number())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ncon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_ncon())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ncon())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_ncon = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_min_ncon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_ncon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_ncon = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_max_ncon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_ncon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ncon2 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_ncon2())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ncon2())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_ncon2 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_min_ncon2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_ncon2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_ncon2 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_max_ncon2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_ncon2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 nbonds = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72u, input, this->mutable_nbonds())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_nbonds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_nbonds = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_min_nbonds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_nbonds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_nbonds = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_max_nbonds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_nbonds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 formal_charge = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96u, input, this->mutable_formal_charge())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_formal_charge())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min_formal_charge = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_min_formal_charge();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_formal_charge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_formal_charge = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_max_formal_charge();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_formal_charge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 nrings = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120u, input, this->mutable_nrings())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_nrings())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_nrings = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_min_nrings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_nrings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_nrings = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_max_nrings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_nrings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ring_bond_count = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144u, input, this->mutable_ring_bond_count())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ring_bond_count())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_ring_bond_count = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_min_ring_bond_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_ring_bond_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_ring_bond_count = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_max_ring_bond_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_ring_bond_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ring_size = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 168u, input, this->mutable_ring_size())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ring_size())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_ring_size = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_min_ring_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_ring_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_ring_size = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_max_ring_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_ring_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 hcount = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 192u, input, this->mutable_hcount())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hcount())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_hcount = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_min_hcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_hcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_hcount = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_max_hcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_hcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool aromatic = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_aromatic();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aromatic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool chirality = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_chirality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chirality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 aromatic_ring_size = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 240u, input, this->mutable_aromatic_ring_size())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_aromatic_ring_size())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_aromatic_ring_size = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_min_aromatic_ring_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_aromatic_ring_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_aromatic_ring_size = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_max_aromatic_ring_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_aromatic_ring_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 aliphatic_ring_size = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 264u, input, this->mutable_aliphatic_ring_size())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_aliphatic_ring_size())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_aliphatic_ring_size = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          set_has_min_aliphatic_ring_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_aliphatic_ring_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_aliphatic_ring_size = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_max_aliphatic_ring_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_aliphatic_ring_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 attached_heteroatom_count = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 288u, input, this->mutable_attached_heteroatom_count())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attached_heteroatom_count())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_attached_heteroatom_count = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          set_has_min_attached_heteroatom_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_attached_heteroatom_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_attached_heteroatom_count = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {
          set_has_max_attached_heteroatom_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_attached_heteroatom_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 lone_pair_count = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 312u, input, this->mutable_lone_pair_count())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 314 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_lone_pair_count())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_lone_pair_count = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_min_lone_pair_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_lone_pair_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_lone_pair_count = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          set_has_max_lone_pair_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_lone_pair_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 unsaturation = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 336u, input, this->mutable_unsaturation())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 338 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unsaturation())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_unsaturation = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 344 & 0xFF */)) {
          set_has_min_unsaturation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_unsaturation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_unsaturation = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 352 & 0xFF */)) {
          set_has_max_unsaturation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_unsaturation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 daylight_x = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 360 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 360u, input, this->mutable_daylight_x())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 362 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_daylight_x())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_daylight_x = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 368 & 0xFF */)) {
          set_has_min_daylight_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_daylight_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_daylight_x = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 376 & 0xFF */)) {
          set_has_max_daylight_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_daylight_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 isotope = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 384 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 384u, input, this->mutable_isotope())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 386 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_isotope())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_isotope = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 392 & 0xFF */)) {
          set_has_min_isotope();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_isotope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_isotope = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {
          set_has_max_isotope();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_isotope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 aryl = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 408 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 408u, input, this->mutable_aryl())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 410 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_aryl())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_aryl = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 416 & 0xFF */)) {
          set_has_min_aryl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_aryl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_aryl = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {
          set_has_max_aryl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_aryl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 fused_system_size = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 432 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 432u, input, this->mutable_fused_system_size())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 434 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fused_system_size())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_fused_system_size = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 440 & 0xFF */)) {
          set_has_min_fused_system_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_fused_system_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_fused_system_size = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 448 & 0xFF */)) {
          set_has_max_fused_system_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_fused_system_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 vinyl = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 456 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 456u, input, this->mutable_vinyl())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 458 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_vinyl())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_vinyl = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 464 & 0xFF */)) {
          set_has_min_vinyl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_vinyl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_vinyl = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 472 & 0xFF */)) {
          set_has_max_vinyl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_vinyl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool all_rings_kekule = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {
          set_has_all_rings_kekule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_rings_kekule_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 heteroatoms_in_ring = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 488 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 488u, input, this->mutable_heteroatoms_in_ring())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 490 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heteroatoms_in_ring())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_heteroatoms_in_ring = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 496 & 0xFF */)) {
          set_has_min_heteroatoms_in_ring();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_heteroatoms_in_ring_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_heteroatoms_in_ring = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 504 & 0xFF */)) {
          set_has_max_heteroatoms_in_ring();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_heteroatoms_in_ring_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 match_spinach_only = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 512 & 0xFF */)) {
          set_has_match_spinach_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_spinach_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 scaffold_bonds_attached_to_ring = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 520 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 520u, input, this->mutable_scaffold_bonds_attached_to_ring())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 522 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_scaffold_bonds_attached_to_ring())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_scaffold_bonds_attached_to_ring = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 528 & 0xFF */)) {
          set_has_min_scaffold_bonds_attached_to_ring();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_scaffold_bonds_attached_to_ring_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_scaffold_bonds_attached_to_ring = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 536 & 0xFF */)) {
          set_has_max_scaffold_bonds_attached_to_ring();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_scaffold_bonds_attached_to_ring_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 preference_value = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 544 & 0xFF */)) {
          set_has_preference_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preference_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 symmetry_degree = 69;
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 552 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 552u, input, this->mutable_symmetry_degree())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 554 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_symmetry_degree())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_symmetry_degree = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 560 & 0xFF */)) {
          set_has_min_symmetry_degree();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_symmetry_degree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_symmetry_degree = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 568 & 0xFF */)) {
          set_has_max_symmetry_degree();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_symmetry_degree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 symmetry_group = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 576 & 0xFF */)) {
          set_has_symmetry_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &symmetry_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SubstructureSearch.Operator logical_operator = 76;
      case 76: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 608 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SubstructureSearch::Operator_IsValid(value)) {
            set_logical_operator(static_cast< ::SubstructureSearch::Operator >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                76, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 user_atom_type = 77;
      case 77: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 616 & 0xFF */)) {
          set_has_user_atom_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_atom_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 atom_type = 78;
      case 78: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 624 & 0xFF */)) {
          set_has_atom_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atom_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstructureSearch.SubstructureAtomSpecifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstructureSearch.SubstructureAtomSpecifier)
  return false;
#undef DO_
}

void SubstructureAtomSpecifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstructureSearch.SubstructureAtomSpecifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string atomic_symbol = 1;
  for (int i = 0, n = this->atomic_symbol_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->atomic_symbol(i).data(), static_cast<int>(this->atomic_symbol(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureAtomSpecifier.atomic_symbol");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->atomic_symbol(i), output);
  }

  // repeated uint32 atomic_number = 2;
  for (int i = 0, n = this->atomic_number_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->atomic_number(i), output);
  }

  // repeated uint32 ncon = 3;
  for (int i = 0, n = this->ncon_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->ncon(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 min_ncon = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->min_ncon(), output);
  }

  // optional uint32 max_ncon = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_ncon(), output);
  }

  // repeated uint32 ncon2 = 6;
  for (int i = 0, n = this->ncon2_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->ncon2(i), output);
  }

  // optional uint32 min_ncon2 = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->min_ncon2(), output);
  }

  // optional uint32 max_ncon2 = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->max_ncon2(), output);
  }

  // repeated uint32 nbonds = 9;
  for (int i = 0, n = this->nbonds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->nbonds(i), output);
  }

  // optional uint32 min_nbonds = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->min_nbonds(), output);
  }

  // optional uint32 max_nbonds = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->max_nbonds(), output);
  }

  // repeated int32 formal_charge = 12;
  for (int i = 0, n = this->formal_charge_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->formal_charge(i), output);
  }

  // optional int32 min_formal_charge = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->min_formal_charge(), output);
  }

  // optional int32 max_formal_charge = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->max_formal_charge(), output);
  }

  // repeated uint32 nrings = 15;
  for (int i = 0, n = this->nrings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->nrings(i), output);
  }

  // optional uint32 min_nrings = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->min_nrings(), output);
  }

  // optional uint32 max_nrings = 17;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->max_nrings(), output);
  }

  // repeated uint32 ring_bond_count = 18;
  for (int i = 0, n = this->ring_bond_count_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->ring_bond_count(i), output);
  }

  // optional uint32 min_ring_bond_count = 19;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->min_ring_bond_count(), output);
  }

  // optional uint32 max_ring_bond_count = 20;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->max_ring_bond_count(), output);
  }

  // repeated uint32 ring_size = 21;
  for (int i = 0, n = this->ring_size_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      21, this->ring_size(i), output);
  }

  // optional uint32 min_ring_size = 22;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->min_ring_size(), output);
  }

  // optional uint32 max_ring_size = 23;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->max_ring_size(), output);
  }

  // repeated uint32 hcount = 24;
  for (int i = 0, n = this->hcount_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      24, this->hcount(i), output);
  }

  // optional uint32 min_hcount = 25;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->min_hcount(), output);
  }

  // optional uint32 max_hcount = 26;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->max_hcount(), output);
  }

  // optional bool aromatic = 27;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->aromatic(), output);
  }

  // optional bool chirality = 28;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->chirality(), output);
  }

  // repeated uint32 aromatic_ring_size = 30;
  for (int i = 0, n = this->aromatic_ring_size_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      30, this->aromatic_ring_size(i), output);
  }

  // optional uint32 min_aromatic_ring_size = 31;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->min_aromatic_ring_size(), output);
  }

  // optional uint32 max_aromatic_ring_size = 32;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->max_aromatic_ring_size(), output);
  }

  // repeated uint32 aliphatic_ring_size = 33;
  for (int i = 0, n = this->aliphatic_ring_size_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      33, this->aliphatic_ring_size(i), output);
  }

  // optional uint32 min_aliphatic_ring_size = 34;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->min_aliphatic_ring_size(), output);
  }

  // optional uint32 max_aliphatic_ring_size = 35;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->max_aliphatic_ring_size(), output);
  }

  // repeated uint32 attached_heteroatom_count = 36;
  for (int i = 0, n = this->attached_heteroatom_count_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      36, this->attached_heteroatom_count(i), output);
  }

  // optional uint32 min_attached_heteroatom_count = 37;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->min_attached_heteroatom_count(), output);
  }

  // optional uint32 max_attached_heteroatom_count = 38;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->max_attached_heteroatom_count(), output);
  }

  // repeated uint32 lone_pair_count = 39;
  for (int i = 0, n = this->lone_pair_count_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      39, this->lone_pair_count(i), output);
  }

  // optional uint32 min_lone_pair_count = 40;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->min_lone_pair_count(), output);
  }

  // optional uint32 max_lone_pair_count = 41;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->max_lone_pair_count(), output);
  }

  // repeated uint32 unsaturation = 42;
  for (int i = 0, n = this->unsaturation_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      42, this->unsaturation(i), output);
  }

  // optional uint32 min_unsaturation = 43;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->min_unsaturation(), output);
  }

  // optional uint32 max_unsaturation = 44;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->max_unsaturation(), output);
  }

  // repeated uint32 daylight_x = 45;
  for (int i = 0, n = this->daylight_x_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      45, this->daylight_x(i), output);
  }

  // optional uint32 min_daylight_x = 46;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->min_daylight_x(), output);
  }

  // optional uint32 max_daylight_x = 47;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->max_daylight_x(), output);
  }

  // repeated uint32 isotope = 48;
  for (int i = 0, n = this->isotope_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      48, this->isotope(i), output);
  }

  // optional uint32 min_isotope = 49;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->min_isotope(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 max_isotope = 50;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->max_isotope(), output);
  }

  // repeated uint32 aryl = 51;
  for (int i = 0, n = this->aryl_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      51, this->aryl(i), output);
  }

  // optional uint32 min_aryl = 52;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->min_aryl(), output);
  }

  // optional uint32 max_aryl = 53;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->max_aryl(), output);
  }

  // repeated uint32 fused_system_size = 54;
  for (int i = 0, n = this->fused_system_size_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      54, this->fused_system_size(i), output);
  }

  // optional uint32 min_fused_system_size = 55;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->min_fused_system_size(), output);
  }

  // optional uint32 max_fused_system_size = 56;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->max_fused_system_size(), output);
  }

  // repeated uint32 vinyl = 57;
  for (int i = 0, n = this->vinyl_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      57, this->vinyl(i), output);
  }

  // optional uint32 min_vinyl = 58;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->min_vinyl(), output);
  }

  // optional uint32 max_vinyl = 59;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->max_vinyl(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool all_rings_kekule = 60;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->all_rings_kekule(), output);
  }

  // repeated uint32 heteroatoms_in_ring = 61;
  for (int i = 0, n = this->heteroatoms_in_ring_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      61, this->heteroatoms_in_ring(i), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 min_heteroatoms_in_ring = 62;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->min_heteroatoms_in_ring(), output);
  }

  // optional uint32 max_heteroatoms_in_ring = 63;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(63, this->max_heteroatoms_in_ring(), output);
  }

  // optional int32 match_spinach_only = 64;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->match_spinach_only(), output);
  }

  // repeated uint32 scaffold_bonds_attached_to_ring = 65;
  for (int i = 0, n = this->scaffold_bonds_attached_to_ring_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      65, this->scaffold_bonds_attached_to_ring(i), output);
  }

  // optional uint32 min_scaffold_bonds_attached_to_ring = 66;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(66, this->min_scaffold_bonds_attached_to_ring(), output);
  }

  // optional uint32 max_scaffold_bonds_attached_to_ring = 67;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(67, this->max_scaffold_bonds_attached_to_ring(), output);
  }

  // optional int32 preference_value = 68;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(68, this->preference_value(), output);
  }

  // repeated uint32 symmetry_degree = 69;
  for (int i = 0, n = this->symmetry_degree_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      69, this->symmetry_degree(i), output);
  }

  // optional uint32 min_symmetry_degree = 70;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->min_symmetry_degree(), output);
  }

  // optional uint32 max_symmetry_degree = 71;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(71, this->max_symmetry_degree(), output);
  }

  // optional int32 symmetry_group = 72;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->symmetry_group(), output);
  }

  // optional .SubstructureSearch.Operator logical_operator = 76;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      76, this->logical_operator(), output);
  }

  // optional uint32 user_atom_type = 77;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(77, this->user_atom_type(), output);
  }

  // optional uint32 atom_type = 78;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(78, this->atom_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstructureSearch.SubstructureAtomSpecifier)
}

::google::protobuf::uint8* SubstructureAtomSpecifier::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureAtomSpecifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string atomic_symbol = 1;
  for (int i = 0, n = this->atomic_symbol_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->atomic_symbol(i).data(), static_cast<int>(this->atomic_symbol(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureAtomSpecifier.atomic_symbol");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->atomic_symbol(i), target);
  }

  // repeated uint32 atomic_number = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->atomic_number_, target);

  // repeated uint32 ncon = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->ncon_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 min_ncon = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->min_ncon(), target);
  }

  // optional uint32 max_ncon = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_ncon(), target);
  }

  // repeated uint32 ncon2 = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->ncon2_, target);

  // optional uint32 min_ncon2 = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->min_ncon2(), target);
  }

  // optional uint32 max_ncon2 = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->max_ncon2(), target);
  }

  // repeated uint32 nbonds = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(9, this->nbonds_, target);

  // optional uint32 min_nbonds = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->min_nbonds(), target);
  }

  // optional uint32 max_nbonds = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->max_nbonds(), target);
  }

  // repeated int32 formal_charge = 12;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(12, this->formal_charge_, target);

  // optional int32 min_formal_charge = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->min_formal_charge(), target);
  }

  // optional int32 max_formal_charge = 14;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->max_formal_charge(), target);
  }

  // repeated uint32 nrings = 15;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(15, this->nrings_, target);

  // optional uint32 min_nrings = 16;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->min_nrings(), target);
  }

  // optional uint32 max_nrings = 17;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->max_nrings(), target);
  }

  // repeated uint32 ring_bond_count = 18;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(18, this->ring_bond_count_, target);

  // optional uint32 min_ring_bond_count = 19;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->min_ring_bond_count(), target);
  }

  // optional uint32 max_ring_bond_count = 20;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->max_ring_bond_count(), target);
  }

  // repeated uint32 ring_size = 21;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(21, this->ring_size_, target);

  // optional uint32 min_ring_size = 22;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->min_ring_size(), target);
  }

  // optional uint32 max_ring_size = 23;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->max_ring_size(), target);
  }

  // repeated uint32 hcount = 24;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(24, this->hcount_, target);

  // optional uint32 min_hcount = 25;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->min_hcount(), target);
  }

  // optional uint32 max_hcount = 26;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->max_hcount(), target);
  }

  // optional bool aromatic = 27;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->aromatic(), target);
  }

  // optional bool chirality = 28;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->chirality(), target);
  }

  // repeated uint32 aromatic_ring_size = 30;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(30, this->aromatic_ring_size_, target);

  // optional uint32 min_aromatic_ring_size = 31;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->min_aromatic_ring_size(), target);
  }

  // optional uint32 max_aromatic_ring_size = 32;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->max_aromatic_ring_size(), target);
  }

  // repeated uint32 aliphatic_ring_size = 33;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(33, this->aliphatic_ring_size_, target);

  // optional uint32 min_aliphatic_ring_size = 34;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->min_aliphatic_ring_size(), target);
  }

  // optional uint32 max_aliphatic_ring_size = 35;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->max_aliphatic_ring_size(), target);
  }

  // repeated uint32 attached_heteroatom_count = 36;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(36, this->attached_heteroatom_count_, target);

  // optional uint32 min_attached_heteroatom_count = 37;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->min_attached_heteroatom_count(), target);
  }

  // optional uint32 max_attached_heteroatom_count = 38;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->max_attached_heteroatom_count(), target);
  }

  // repeated uint32 lone_pair_count = 39;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(39, this->lone_pair_count_, target);

  // optional uint32 min_lone_pair_count = 40;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->min_lone_pair_count(), target);
  }

  // optional uint32 max_lone_pair_count = 41;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->max_lone_pair_count(), target);
  }

  // repeated uint32 unsaturation = 42;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(42, this->unsaturation_, target);

  // optional uint32 min_unsaturation = 43;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->min_unsaturation(), target);
  }

  // optional uint32 max_unsaturation = 44;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->max_unsaturation(), target);
  }

  // repeated uint32 daylight_x = 45;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(45, this->daylight_x_, target);

  // optional uint32 min_daylight_x = 46;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->min_daylight_x(), target);
  }

  // optional uint32 max_daylight_x = 47;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->max_daylight_x(), target);
  }

  // repeated uint32 isotope = 48;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(48, this->isotope_, target);

  // optional uint32 min_isotope = 49;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->min_isotope(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 max_isotope = 50;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->max_isotope(), target);
  }

  // repeated uint32 aryl = 51;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(51, this->aryl_, target);

  // optional uint32 min_aryl = 52;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->min_aryl(), target);
  }

  // optional uint32 max_aryl = 53;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->max_aryl(), target);
  }

  // repeated uint32 fused_system_size = 54;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(54, this->fused_system_size_, target);

  // optional uint32 min_fused_system_size = 55;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->min_fused_system_size(), target);
  }

  // optional uint32 max_fused_system_size = 56;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->max_fused_system_size(), target);
  }

  // repeated uint32 vinyl = 57;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(57, this->vinyl_, target);

  // optional uint32 min_vinyl = 58;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->min_vinyl(), target);
  }

  // optional uint32 max_vinyl = 59;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->max_vinyl(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool all_rings_kekule = 60;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->all_rings_kekule(), target);
  }

  // repeated uint32 heteroatoms_in_ring = 61;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(61, this->heteroatoms_in_ring_, target);

  cached_has_bits = _has_bits_[1];
  // optional uint32 min_heteroatoms_in_ring = 62;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->min_heteroatoms_in_ring(), target);
  }

  // optional uint32 max_heteroatoms_in_ring = 63;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(63, this->max_heteroatoms_in_ring(), target);
  }

  // optional int32 match_spinach_only = 64;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->match_spinach_only(), target);
  }

  // repeated uint32 scaffold_bonds_attached_to_ring = 65;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(65, this->scaffold_bonds_attached_to_ring_, target);

  // optional uint32 min_scaffold_bonds_attached_to_ring = 66;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(66, this->min_scaffold_bonds_attached_to_ring(), target);
  }

  // optional uint32 max_scaffold_bonds_attached_to_ring = 67;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(67, this->max_scaffold_bonds_attached_to_ring(), target);
  }

  // optional int32 preference_value = 68;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(68, this->preference_value(), target);
  }

  // repeated uint32 symmetry_degree = 69;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(69, this->symmetry_degree_, target);

  // optional uint32 min_symmetry_degree = 70;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->min_symmetry_degree(), target);
  }

  // optional uint32 max_symmetry_degree = 71;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(71, this->max_symmetry_degree(), target);
  }

  // optional int32 symmetry_group = 72;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(72, this->symmetry_group(), target);
  }

  // optional .SubstructureSearch.Operator logical_operator = 76;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      76, this->logical_operator(), target);
  }

  // optional uint32 user_atom_type = 77;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(77, this->user_atom_type(), target);
  }

  // optional uint32 atom_type = 78;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(78, this->atom_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureAtomSpecifier)
  return target;
}

size_t SubstructureAtomSpecifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureAtomSpecifier)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string atomic_symbol = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->atomic_symbol_size());
  for (int i = 0, n = this->atomic_symbol_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->atomic_symbol(i));
  }

  // repeated uint32 atomic_number = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->atomic_number_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->atomic_number_size());
    total_size += data_size;
  }

  // repeated uint32 ncon = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ncon_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ncon_size());
    total_size += data_size;
  }

  // repeated uint32 ncon2 = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ncon2_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ncon2_size());
    total_size += data_size;
  }

  // repeated uint32 nbonds = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->nbonds_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->nbonds_size());
    total_size += data_size;
  }

  // repeated int32 formal_charge = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->formal_charge_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->formal_charge_size());
    total_size += data_size;
  }

  // repeated uint32 nrings = 15;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->nrings_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->nrings_size());
    total_size += data_size;
  }

  // repeated uint32 ring_bond_count = 18;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ring_bond_count_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->ring_bond_count_size());
    total_size += data_size;
  }

  // repeated uint32 ring_size = 21;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ring_size_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->ring_size_size());
    total_size += data_size;
  }

  // repeated uint32 hcount = 24;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->hcount_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->hcount_size());
    total_size += data_size;
  }

  // repeated uint32 aromatic_ring_size = 30;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->aromatic_ring_size_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->aromatic_ring_size_size());
    total_size += data_size;
  }

  // repeated uint32 aliphatic_ring_size = 33;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->aliphatic_ring_size_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->aliphatic_ring_size_size());
    total_size += data_size;
  }

  // repeated uint32 attached_heteroatom_count = 36;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->attached_heteroatom_count_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->attached_heteroatom_count_size());
    total_size += data_size;
  }

  // repeated uint32 lone_pair_count = 39;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->lone_pair_count_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->lone_pair_count_size());
    total_size += data_size;
  }

  // repeated uint32 unsaturation = 42;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->unsaturation_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->unsaturation_size());
    total_size += data_size;
  }

  // repeated uint32 daylight_x = 45;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->daylight_x_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->daylight_x_size());
    total_size += data_size;
  }

  // repeated uint32 isotope = 48;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->isotope_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->isotope_size());
    total_size += data_size;
  }

  // repeated uint32 aryl = 51;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->aryl_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->aryl_size());
    total_size += data_size;
  }

  // repeated uint32 fused_system_size = 54;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->fused_system_size_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->fused_system_size_size());
    total_size += data_size;
  }

  // repeated uint32 vinyl = 57;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->vinyl_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->vinyl_size());
    total_size += data_size;
  }

  // repeated uint32 heteroatoms_in_ring = 61;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->heteroatoms_in_ring_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->heteroatoms_in_ring_size());
    total_size += data_size;
  }

  // repeated uint32 scaffold_bonds_attached_to_ring = 65;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->scaffold_bonds_attached_to_ring_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->scaffold_bonds_attached_to_ring_size());
    total_size += data_size;
  }

  // repeated uint32 symmetry_degree = 69;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->symmetry_degree_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->symmetry_degree_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 min_ncon = 4;
    if (has_min_ncon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_ncon());
    }

    // optional uint32 max_ncon = 5;
    if (has_max_ncon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_ncon());
    }

    // optional uint32 min_ncon2 = 7;
    if (has_min_ncon2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_ncon2());
    }

    // optional uint32 max_ncon2 = 8;
    if (has_max_ncon2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_ncon2());
    }

    // optional uint32 min_nbonds = 10;
    if (has_min_nbonds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_nbonds());
    }

    // optional uint32 max_nbonds = 11;
    if (has_max_nbonds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_nbonds());
    }

    // optional int32 min_formal_charge = 13;
    if (has_min_formal_charge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_formal_charge());
    }

    // optional int32 max_formal_charge = 14;
    if (has_max_formal_charge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_formal_charge());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 min_nrings = 16;
    if (has_min_nrings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_nrings());
    }

    // optional uint32 max_nrings = 17;
    if (has_max_nrings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_nrings());
    }

    // optional uint32 min_ring_bond_count = 19;
    if (has_min_ring_bond_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_ring_bond_count());
    }

    // optional uint32 max_ring_bond_count = 20;
    if (has_max_ring_bond_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_ring_bond_count());
    }

    // optional uint32 min_ring_size = 22;
    if (has_min_ring_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_ring_size());
    }

    // optional uint32 max_ring_size = 23;
    if (has_max_ring_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_ring_size());
    }

    // optional uint32 min_hcount = 25;
    if (has_min_hcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_hcount());
    }

    // optional uint32 max_hcount = 26;
    if (has_max_hcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_hcount());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 min_aromatic_ring_size = 31;
    if (has_min_aromatic_ring_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_aromatic_ring_size());
    }

    // optional uint32 max_aromatic_ring_size = 32;
    if (has_max_aromatic_ring_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_aromatic_ring_size());
    }

    // optional uint32 min_aliphatic_ring_size = 34;
    if (has_min_aliphatic_ring_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_aliphatic_ring_size());
    }

    // optional uint32 max_aliphatic_ring_size = 35;
    if (has_max_aliphatic_ring_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_aliphatic_ring_size());
    }

    // optional uint32 min_attached_heteroatom_count = 37;
    if (has_min_attached_heteroatom_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_attached_heteroatom_count());
    }

    // optional uint32 max_attached_heteroatom_count = 38;
    if (has_max_attached_heteroatom_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_attached_heteroatom_count());
    }

    // optional bool aromatic = 27;
    if (has_aromatic()) {
      total_size += 2 + 1;
    }

    // optional bool chirality = 28;
    if (has_chirality()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional bool all_rings_kekule = 60;
    if (has_all_rings_kekule()) {
      total_size += 2 + 1;
    }

    // optional uint32 min_lone_pair_count = 40;
    if (has_min_lone_pair_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_lone_pair_count());
    }

    // optional uint32 max_lone_pair_count = 41;
    if (has_max_lone_pair_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_lone_pair_count());
    }

    // optional uint32 min_unsaturation = 43;
    if (has_min_unsaturation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_unsaturation());
    }

    // optional uint32 max_unsaturation = 44;
    if (has_max_unsaturation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_unsaturation());
    }

    // optional uint32 min_daylight_x = 46;
    if (has_min_daylight_x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_daylight_x());
    }

    // optional uint32 max_daylight_x = 47;
    if (has_max_daylight_x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_daylight_x());
    }

    // optional uint32 min_isotope = 49;
    if (has_min_isotope()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_isotope());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional uint32 max_isotope = 50;
    if (has_max_isotope()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_isotope());
    }

    // optional uint32 min_aryl = 52;
    if (has_min_aryl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_aryl());
    }

    // optional uint32 max_aryl = 53;
    if (has_max_aryl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_aryl());
    }

    // optional uint32 min_fused_system_size = 55;
    if (has_min_fused_system_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_fused_system_size());
    }

    // optional uint32 max_fused_system_size = 56;
    if (has_max_fused_system_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_fused_system_size());
    }

    // optional uint32 min_vinyl = 58;
    if (has_min_vinyl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_vinyl());
    }

    // optional uint32 max_vinyl = 59;
    if (has_max_vinyl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_vinyl());
    }

    // optional uint32 min_heteroatoms_in_ring = 62;
    if (has_min_heteroatoms_in_ring()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_heteroatoms_in_ring());
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional uint32 max_heteroatoms_in_ring = 63;
    if (has_max_heteroatoms_in_ring()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_heteroatoms_in_ring());
    }

    // optional int32 match_spinach_only = 64;
    if (has_match_spinach_only()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_spinach_only());
    }

    // optional uint32 min_scaffold_bonds_attached_to_ring = 66;
    if (has_min_scaffold_bonds_attached_to_ring()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_scaffold_bonds_attached_to_ring());
    }

    // optional uint32 max_scaffold_bonds_attached_to_ring = 67;
    if (has_max_scaffold_bonds_attached_to_ring()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_scaffold_bonds_attached_to_ring());
    }

    // optional int32 preference_value = 68;
    if (has_preference_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preference_value());
    }

    // optional uint32 min_symmetry_degree = 70;
    if (has_min_symmetry_degree()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_symmetry_degree());
    }

    // optional uint32 max_symmetry_degree = 71;
    if (has_max_symmetry_degree()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_symmetry_degree());
    }

    // optional int32 symmetry_group = 72;
    if (has_symmetry_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->symmetry_group());
    }

  }
  if (_has_bits_[48 / 32] & 458752u) {
    // optional uint32 user_atom_type = 77;
    if (has_user_atom_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_atom_type());
    }

    // optional uint32 atom_type = 78;
    if (has_atom_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atom_type());
    }

    // optional .SubstructureSearch.Operator logical_operator = 76;
    if (has_logical_operator()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->logical_operator());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureAtomSpecifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureAtomSpecifier)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureAtomSpecifier* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubstructureAtomSpecifier>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureAtomSpecifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureAtomSpecifier)
    MergeFrom(*source);
  }
}

void SubstructureAtomSpecifier::MergeFrom(const SubstructureAtomSpecifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureAtomSpecifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  atomic_symbol_.MergeFrom(from.atomic_symbol_);
  atomic_number_.MergeFrom(from.atomic_number_);
  ncon_.MergeFrom(from.ncon_);
  ncon2_.MergeFrom(from.ncon2_);
  nbonds_.MergeFrom(from.nbonds_);
  formal_charge_.MergeFrom(from.formal_charge_);
  nrings_.MergeFrom(from.nrings_);
  ring_bond_count_.MergeFrom(from.ring_bond_count_);
  ring_size_.MergeFrom(from.ring_size_);
  hcount_.MergeFrom(from.hcount_);
  aromatic_ring_size_.MergeFrom(from.aromatic_ring_size_);
  aliphatic_ring_size_.MergeFrom(from.aliphatic_ring_size_);
  attached_heteroatom_count_.MergeFrom(from.attached_heteroatom_count_);
  lone_pair_count_.MergeFrom(from.lone_pair_count_);
  unsaturation_.MergeFrom(from.unsaturation_);
  daylight_x_.MergeFrom(from.daylight_x_);
  isotope_.MergeFrom(from.isotope_);
  aryl_.MergeFrom(from.aryl_);
  fused_system_size_.MergeFrom(from.fused_system_size_);
  vinyl_.MergeFrom(from.vinyl_);
  heteroatoms_in_ring_.MergeFrom(from.heteroatoms_in_ring_);
  scaffold_bonds_attached_to_ring_.MergeFrom(from.scaffold_bonds_attached_to_ring_);
  symmetry_degree_.MergeFrom(from.symmetry_degree_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      min_ncon_ = from.min_ncon_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ncon_ = from.max_ncon_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_ncon2_ = from.min_ncon2_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_ncon2_ = from.max_ncon2_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_nbonds_ = from.min_nbonds_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_nbonds_ = from.max_nbonds_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_formal_charge_ = from.min_formal_charge_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_formal_charge_ = from.max_formal_charge_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      min_nrings_ = from.min_nrings_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_nrings_ = from.max_nrings_;
    }
    if (cached_has_bits & 0x00000400u) {
      min_ring_bond_count_ = from.min_ring_bond_count_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_ring_bond_count_ = from.max_ring_bond_count_;
    }
    if (cached_has_bits & 0x00001000u) {
      min_ring_size_ = from.min_ring_size_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_ring_size_ = from.max_ring_size_;
    }
    if (cached_has_bits & 0x00004000u) {
      min_hcount_ = from.min_hcount_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_hcount_ = from.max_hcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      min_aromatic_ring_size_ = from.min_aromatic_ring_size_;
    }
    if (cached_has_bits & 0x00020000u) {
      max_aromatic_ring_size_ = from.max_aromatic_ring_size_;
    }
    if (cached_has_bits & 0x00040000u) {
      min_aliphatic_ring_size_ = from.min_aliphatic_ring_size_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_aliphatic_ring_size_ = from.max_aliphatic_ring_size_;
    }
    if (cached_has_bits & 0x00100000u) {
      min_attached_heteroatom_count_ = from.min_attached_heteroatom_count_;
    }
    if (cached_has_bits & 0x00200000u) {
      max_attached_heteroatom_count_ = from.max_attached_heteroatom_count_;
    }
    if (cached_has_bits & 0x00400000u) {
      aromatic_ = from.aromatic_;
    }
    if (cached_has_bits & 0x00800000u) {
      chirality_ = from.chirality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      all_rings_kekule_ = from.all_rings_kekule_;
    }
    if (cached_has_bits & 0x02000000u) {
      min_lone_pair_count_ = from.min_lone_pair_count_;
    }
    if (cached_has_bits & 0x04000000u) {
      max_lone_pair_count_ = from.max_lone_pair_count_;
    }
    if (cached_has_bits & 0x08000000u) {
      min_unsaturation_ = from.min_unsaturation_;
    }
    if (cached_has_bits & 0x10000000u) {
      max_unsaturation_ = from.max_unsaturation_;
    }
    if (cached_has_bits & 0x20000000u) {
      min_daylight_x_ = from.min_daylight_x_;
    }
    if (cached_has_bits & 0x40000000u) {
      max_daylight_x_ = from.max_daylight_x_;
    }
    if (cached_has_bits & 0x80000000u) {
      min_isotope_ = from.min_isotope_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      max_isotope_ = from.max_isotope_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_aryl_ = from.min_aryl_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_aryl_ = from.max_aryl_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_fused_system_size_ = from.min_fused_system_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_fused_system_size_ = from.max_fused_system_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_vinyl_ = from.min_vinyl_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_vinyl_ = from.max_vinyl_;
    }
    if (cached_has_bits & 0x00000080u) {
      min_heteroatoms_in_ring_ = from.min_heteroatoms_in_ring_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      max_heteroatoms_in_ring_ = from.max_heteroatoms_in_ring_;
    }
    if (cached_has_bits & 0x00000200u) {
      match_spinach_only_ = from.match_spinach_only_;
    }
    if (cached_has_bits & 0x00000400u) {
      min_scaffold_bonds_attached_to_ring_ = from.min_scaffold_bonds_attached_to_ring_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_scaffold_bonds_attached_to_ring_ = from.max_scaffold_bonds_attached_to_ring_;
    }
    if (cached_has_bits & 0x00001000u) {
      preference_value_ = from.preference_value_;
    }
    if (cached_has_bits & 0x00002000u) {
      min_symmetry_degree_ = from.min_symmetry_degree_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_symmetry_degree_ = from.max_symmetry_degree_;
    }
    if (cached_has_bits & 0x00008000u) {
      symmetry_group_ = from.symmetry_group_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      user_atom_type_ = from.user_atom_type_;
    }
    if (cached_has_bits & 0x00020000u) {
      atom_type_ = from.atom_type_;
    }
    if (cached_has_bits & 0x00040000u) {
      logical_operator_ = from.logical_operator_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void SubstructureAtomSpecifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureAtomSpecifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureAtomSpecifier::CopyFrom(const SubstructureAtomSpecifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureAtomSpecifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureAtomSpecifier::IsInitialized() const {
  return true;
}

void SubstructureAtomSpecifier::Swap(SubstructureAtomSpecifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubstructureAtomSpecifier::InternalSwap(SubstructureAtomSpecifier* other) {
  using std::swap;
  atomic_symbol_.InternalSwap(CastToBase(&other->atomic_symbol_));
  atomic_number_.InternalSwap(&other->atomic_number_);
  ncon_.InternalSwap(&other->ncon_);
  ncon2_.InternalSwap(&other->ncon2_);
  nbonds_.InternalSwap(&other->nbonds_);
  formal_charge_.InternalSwap(&other->formal_charge_);
  nrings_.InternalSwap(&other->nrings_);
  ring_bond_count_.InternalSwap(&other->ring_bond_count_);
  ring_size_.InternalSwap(&other->ring_size_);
  hcount_.InternalSwap(&other->hcount_);
  aromatic_ring_size_.InternalSwap(&other->aromatic_ring_size_);
  aliphatic_ring_size_.InternalSwap(&other->aliphatic_ring_size_);
  attached_heteroatom_count_.InternalSwap(&other->attached_heteroatom_count_);
  lone_pair_count_.InternalSwap(&other->lone_pair_count_);
  unsaturation_.InternalSwap(&other->unsaturation_);
  daylight_x_.InternalSwap(&other->daylight_x_);
  isotope_.InternalSwap(&other->isotope_);
  aryl_.InternalSwap(&other->aryl_);
  fused_system_size_.InternalSwap(&other->fused_system_size_);
  vinyl_.InternalSwap(&other->vinyl_);
  heteroatoms_in_ring_.InternalSwap(&other->heteroatoms_in_ring_);
  scaffold_bonds_attached_to_ring_.InternalSwap(&other->scaffold_bonds_attached_to_ring_);
  symmetry_degree_.InternalSwap(&other->symmetry_degree_);
  swap(min_ncon_, other->min_ncon_);
  swap(max_ncon_, other->max_ncon_);
  swap(min_ncon2_, other->min_ncon2_);
  swap(max_ncon2_, other->max_ncon2_);
  swap(min_nbonds_, other->min_nbonds_);
  swap(max_nbonds_, other->max_nbonds_);
  swap(min_formal_charge_, other->min_formal_charge_);
  swap(max_formal_charge_, other->max_formal_charge_);
  swap(min_nrings_, other->min_nrings_);
  swap(max_nrings_, other->max_nrings_);
  swap(min_ring_bond_count_, other->min_ring_bond_count_);
  swap(max_ring_bond_count_, other->max_ring_bond_count_);
  swap(min_ring_size_, other->min_ring_size_);
  swap(max_ring_size_, other->max_ring_size_);
  swap(min_hcount_, other->min_hcount_);
  swap(max_hcount_, other->max_hcount_);
  swap(min_aromatic_ring_size_, other->min_aromatic_ring_size_);
  swap(max_aromatic_ring_size_, other->max_aromatic_ring_size_);
  swap(min_aliphatic_ring_size_, other->min_aliphatic_ring_size_);
  swap(max_aliphatic_ring_size_, other->max_aliphatic_ring_size_);
  swap(min_attached_heteroatom_count_, other->min_attached_heteroatom_count_);
  swap(max_attached_heteroatom_count_, other->max_attached_heteroatom_count_);
  swap(aromatic_, other->aromatic_);
  swap(chirality_, other->chirality_);
  swap(all_rings_kekule_, other->all_rings_kekule_);
  swap(min_lone_pair_count_, other->min_lone_pair_count_);
  swap(max_lone_pair_count_, other->max_lone_pair_count_);
  swap(min_unsaturation_, other->min_unsaturation_);
  swap(max_unsaturation_, other->max_unsaturation_);
  swap(min_daylight_x_, other->min_daylight_x_);
  swap(max_daylight_x_, other->max_daylight_x_);
  swap(min_isotope_, other->min_isotope_);
  swap(max_isotope_, other->max_isotope_);
  swap(min_aryl_, other->min_aryl_);
  swap(max_aryl_, other->max_aryl_);
  swap(min_fused_system_size_, other->min_fused_system_size_);
  swap(max_fused_system_size_, other->max_fused_system_size_);
  swap(min_vinyl_, other->min_vinyl_);
  swap(max_vinyl_, other->max_vinyl_);
  swap(min_heteroatoms_in_ring_, other->min_heteroatoms_in_ring_);
  swap(max_heteroatoms_in_ring_, other->max_heteroatoms_in_ring_);
  swap(match_spinach_only_, other->match_spinach_only_);
  swap(min_scaffold_bonds_attached_to_ring_, other->min_scaffold_bonds_attached_to_ring_);
  swap(max_scaffold_bonds_attached_to_ring_, other->max_scaffold_bonds_attached_to_ring_);
  swap(preference_value_, other->preference_value_);
  swap(min_symmetry_degree_, other->min_symmetry_degree_);
  swap(max_symmetry_degree_, other->max_symmetry_degree_);
  swap(symmetry_group_, other->symmetry_group_);
  swap(user_atom_type_, other->user_atom_type_);
  swap(atom_type_, other->atom_type_);
  swap(logical_operator_, other->logical_operator_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubstructureAtomSpecifier::GetMetadata() const {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubstructureAtomEnvironment::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubstructureAtomEnvironment::kIdFieldNumber;
const int SubstructureAtomEnvironment::kSubstructureAtomFieldNumber;
const int SubstructureAtomEnvironment::kOpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubstructureAtomEnvironment::SubstructureAtomEnvironment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substructure_2eproto::scc_info_SubstructureAtom.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstructureSearch.SubstructureAtomEnvironment)
}
SubstructureAtomEnvironment::SubstructureAtomEnvironment(const SubstructureAtomEnvironment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      substructure_atom_(from.substructure_atom_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  op_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_op()) {
    op_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.op_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureAtomEnvironment)
}

void SubstructureAtomEnvironment::SharedCtor() {
  op_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

SubstructureAtomEnvironment::~SubstructureAtomEnvironment() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureAtomEnvironment)
  SharedDtor();
}

void SubstructureAtomEnvironment::SharedDtor() {
  op_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubstructureAtomEnvironment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubstructureAtomEnvironment::descriptor() {
  ::protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubstructureAtomEnvironment& SubstructureAtomEnvironment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substructure_2eproto::scc_info_SubstructureAtom.base);
  return *internal_default_instance();
}


void SubstructureAtomEnvironment::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureAtomEnvironment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  substructure_atom_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    op_.ClearNonDefaultToEmptyNoArena();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubstructureAtomEnvironment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstructureSearch.SubstructureAtomEnvironment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstructureSearch.SubstructureAtom substructure_atom = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_substructure_atom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string op = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->op().data(), static_cast<int>(this->op().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.SubstructureAtomEnvironment.op");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstructureSearch.SubstructureAtomEnvironment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstructureSearch.SubstructureAtomEnvironment)
  return false;
#undef DO_
}

void SubstructureAtomEnvironment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstructureSearch.SubstructureAtomEnvironment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .SubstructureSearch.SubstructureAtom substructure_atom = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->substructure_atom_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->substructure_atom(static_cast<int>(i)),
      output);
  }

  // optional string op = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->op().data(), static_cast<int>(this->op().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureAtomEnvironment.op");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->op(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstructureSearch.SubstructureAtomEnvironment)
}

::google::protobuf::uint8* SubstructureAtomEnvironment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureAtomEnvironment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .SubstructureSearch.SubstructureAtom substructure_atom = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->substructure_atom_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->substructure_atom(static_cast<int>(i)), deterministic, target);
  }

  // optional string op = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->op().data(), static_cast<int>(this->op().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureAtomEnvironment.op");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->op(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureAtomEnvironment)
  return target;
}

size_t SubstructureAtomEnvironment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureAtomEnvironment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SubstructureSearch.SubstructureAtom substructure_atom = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->substructure_atom_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->substructure_atom(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string op = 3;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->op());
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureAtomEnvironment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureAtomEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureAtomEnvironment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubstructureAtomEnvironment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureAtomEnvironment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureAtomEnvironment)
    MergeFrom(*source);
  }
}

void SubstructureAtomEnvironment::MergeFrom(const SubstructureAtomEnvironment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureAtomEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  substructure_atom_.MergeFrom(from.substructure_atom_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_op();
      op_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.op_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubstructureAtomEnvironment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureAtomEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureAtomEnvironment::CopyFrom(const SubstructureAtomEnvironment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureAtomEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureAtomEnvironment::IsInitialized() const {
  return true;
}

void SubstructureAtomEnvironment::Swap(SubstructureAtomEnvironment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubstructureAtomEnvironment::InternalSwap(SubstructureAtomEnvironment* other) {
  using std::swap;
  CastToBase(&substructure_atom_)->InternalSwap(CastToBase(&other->substructure_atom_));
  op_.Swap(&other->op_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubstructureAtomEnvironment::GetMetadata() const {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubstructureAtom::InitAsDefaultInstance() {
  ::SubstructureSearch::_SubstructureAtom_default_instance_.smarts_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::SubstructureSearch::_SubstructureAtom_default_instance_.atom_smarts_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::SubstructureSearch::_SubstructureAtom_default_instance_.smiles_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubstructureAtom::kIdFieldNumber;
const int SubstructureAtom::kMatchAsMatchFieldNumber;
const int SubstructureAtom::kTextIdentifierFieldNumber;
const int SubstructureAtom::kAtomMapNumberFieldNumber;
const int SubstructureAtom::kInitialAtomNumberFieldNumber;
const int SubstructureAtom::kOrIdFieldNumber;
const int SubstructureAtom::kAtomPropertiesFieldNumber;
const int SubstructureAtom::kOrOperatorFieldNumber;
const int SubstructureAtom::kRingIdFieldNumber;
const int SubstructureAtom::kFusedSystemIdFieldNumber;
const int SubstructureAtom::kFragmentIdFieldNumber;
const int SubstructureAtom::kNumericValueFieldNumber;
const int SubstructureAtom::kIncludeInEmbeddingFieldNumber;
const int SubstructureAtom::kSmartsFieldNumber;
const int SubstructureAtom::kAtomSmartsFieldNumber;
const int SubstructureAtom::kSmilesFieldNumber;
const int SubstructureAtom::kEnvironmentFieldNumber;
const int SubstructureAtom::kQueryBondFieldNumber;
const int SubstructureAtom::kBondSmartsFieldNumber;
const int SubstructureAtom::kSingleBondFieldNumber;
const int SubstructureAtom::kDoubleBondFieldNumber;
const int SubstructureAtom::kTripleBondFieldNumber;
const int SubstructureAtom::kAromaticBondFieldNumber;
const int SubstructureAtom::kBondFieldNumber;
const int SubstructureAtom::kPreferenceFieldNumber;
const int SubstructureAtom::kSumAllPreferenceHitsFieldNumber;
const int SubstructureAtom::kUnmatchedAtomsAttachedFieldNumber;
const int SubstructureAtom::kMinUnmatchedAtomsAttachedFieldNumber;
const int SubstructureAtom::kMaxUnmatchedAtomsAttachedFieldNumber;
const int SubstructureAtom::kAtomTypeGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubstructureAtom::SubstructureAtom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substructure_2eproto::scc_info_SubstructureAtom.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstructureSearch.SubstructureAtom)
}
SubstructureAtom::SubstructureAtom(const SubstructureAtom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      atom_properties_(from.atom_properties_),
      environment_(from.environment_),
      query_bond_(from.query_bond_),
      preference_(from.preference_),
      single_bond_(from.single_bond_),
      double_bond_(from.double_bond_),
      triple_bond_(from.triple_bond_),
      aromatic_bond_(from.aromatic_bond_),
      bond_(from.bond_),
      unmatched_atoms_attached_(from.unmatched_atoms_attached_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text_identifier()) {
    text_identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_identifier_);
  }
  bond_smarts_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bond_smarts()) {
    bond_smarts_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bond_smarts_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&atom_type_group_) -
    reinterpret_cast<char*>(&id_)) + sizeof(atom_type_group_));
  clear_has_SmilesOrSmarts();
  switch (from.SmilesOrSmarts_case()) {
    case kSmarts: {
      set_smarts(from.smarts());
      break;
    }
    case kAtomSmarts: {
      set_atom_smarts(from.atom_smarts());
      break;
    }
    case kSmiles: {
      set_smiles(from.smiles());
      break;
    }
    case SMILESORSMARTS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureAtom)
}

void SubstructureAtom::SharedCtor() {
  text_identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bond_smarts_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&atom_type_group_) -
      reinterpret_cast<char*>(&id_)) + sizeof(atom_type_group_));
  clear_has_SmilesOrSmarts();
}

SubstructureAtom::~SubstructureAtom() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureAtom)
  SharedDtor();
}

void SubstructureAtom::SharedDtor() {
  text_identifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bond_smarts_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_SmilesOrSmarts()) {
    clear_SmilesOrSmarts();
  }
}

void SubstructureAtom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubstructureAtom::descriptor() {
  ::protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubstructureAtom& SubstructureAtom::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substructure_2eproto::scc_info_SubstructureAtom.base);
  return *internal_default_instance();
}


void SubstructureAtom::clear_SmilesOrSmarts() {
// @@protoc_insertion_point(one_of_clear_start:SubstructureSearch.SubstructureAtom)
  switch (SmilesOrSmarts_case()) {
    case kSmarts: {
      SmilesOrSmarts_.smarts_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kAtomSmarts: {
      SmilesOrSmarts_.atom_smarts_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kSmiles: {
      SmilesOrSmarts_.smiles_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case SMILESORSMARTS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SMILESORSMARTS_NOT_SET;
}


void SubstructureAtom::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureAtom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  atom_properties_.Clear();
  environment_.Clear();
  query_bond_.Clear();
  preference_.Clear();
  single_bond_.Clear();
  double_bond_.Clear();
  triple_bond_.Clear();
  aromatic_bond_.Clear();
  bond_.Clear();
  unmatched_atoms_attached_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      text_identifier_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      bond_smarts_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ring_id_) -
        reinterpret_cast<char*>(&id_)) + sizeof(ring_id_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&fused_system_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_unmatched_atoms_attached_) -
        reinterpret_cast<char*>(&fused_system_id_)) + sizeof(max_unmatched_atoms_attached_));
  }
  atom_type_group_ = 0u;
  clear_SmilesOrSmarts();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubstructureAtom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstructureSearch.SubstructureAtom)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool match_as_match = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_match_as_match();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &match_as_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text_identifier = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text_identifier().data(), static_cast<int>(this->text_identifier().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.SubstructureAtom.text_identifier");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 atom_map_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_atom_map_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atom_map_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 initial_atom_number = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_initial_atom_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_atom_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 or_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_or_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &or_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstructureSearch.SubstructureAtomSpecifier atom_properties = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_atom_properties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 or_operator = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_or_operator();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &or_operator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ring_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_ring_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ring_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fused_system_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_fused_system_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fused_system_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fragment_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_fragment_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fragment_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double numeric_value = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_numeric_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &numeric_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_in_embedding = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_include_in_embedding();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_in_embedding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string smarts = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smarts()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->smarts().data(), static_cast<int>(this->smarts().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.SubstructureAtom.smarts");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string atom_smarts = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_atom_smarts()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->atom_smarts().data(), static_cast<int>(this->atom_smarts().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.SubstructureAtom.atom_smarts");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string smiles = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smiles()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->smiles().data(), static_cast<int>(this->smiles().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.SubstructureAtom.smiles");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstructureSearch.SubstructureAtomEnvironment environment = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_environment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstructureSearch.SubstructureBond query_bond = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_query_bond()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bond_smarts = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bond_smarts()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bond_smarts().data(), static_cast<int>(this->bond_smarts().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.SubstructureAtom.bond_smarts");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstructureSearch.SubstructureAtomSpecifier preference = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_preference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sum_all_preference_hits = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_sum_all_preference_hits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sum_all_preference_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 single_bond = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 200u, input, this->mutable_single_bond())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_single_bond())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 double_bond = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 208u, input, this->mutable_double_bond())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_double_bond())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 triple_bond = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 216u, input, this->mutable_triple_bond())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_triple_bond())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 aromatic_bond = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 224u, input, this->mutable_aromatic_bond())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_aromatic_bond())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 bond = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 232u, input, this->mutable_bond())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bond())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 unmatched_atoms_attached = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 240u, input, this->mutable_unmatched_atoms_attached())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unmatched_atoms_attached())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_unmatched_atoms_attached = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_min_unmatched_atoms_attached();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_unmatched_atoms_attached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_unmatched_atoms_attached = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_max_unmatched_atoms_attached();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_unmatched_atoms_attached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 atom_type_group = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_atom_type_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atom_type_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstructureSearch.SubstructureAtom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstructureSearch.SubstructureAtom)
  return false;
#undef DO_
}

void SubstructureAtom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstructureSearch.SubstructureAtom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bool match_as_match = 2;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->match_as_match(), output);
  }

  // optional string text_identifier = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_identifier().data(), static_cast<int>(this->text_identifier().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureAtom.text_identifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text_identifier(), output);
  }

  // optional uint32 atom_map_number = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->atom_map_number(), output);
  }

  // optional uint32 initial_atom_number = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->initial_atom_number(), output);
  }

  // optional uint32 or_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->or_id(), output);
  }

  // repeated .SubstructureSearch.SubstructureAtomSpecifier atom_properties = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->atom_properties_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->atom_properties(static_cast<int>(i)),
      output);
  }

  // optional int32 or_operator = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->or_operator(), output);
  }

  // optional int32 ring_id = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ring_id(), output);
  }

  // optional uint32 fused_system_id = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->fused_system_id(), output);
  }

  // optional int32 fragment_id = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->fragment_id(), output);
  }

  // optional double numeric_value = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->numeric_value(), output);
  }

  // optional bool include_in_embedding = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->include_in_embedding(), output);
  }

  switch (SmilesOrSmarts_case()) {
    case kSmarts:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->smarts().data(), static_cast<int>(this->smarts().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "SubstructureSearch.SubstructureAtom.smarts");
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        14, this->smarts(), output);
      break;
    case kAtomSmarts:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->atom_smarts().data(), static_cast<int>(this->atom_smarts().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "SubstructureSearch.SubstructureAtom.atom_smarts");
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        15, this->atom_smarts(), output);
      break;
    case kSmiles:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->smiles().data(), static_cast<int>(this->smiles().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "SubstructureSearch.SubstructureAtom.smiles");
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        16, this->smiles(), output);
      break;
    default: ;
  }
  // repeated .SubstructureSearch.SubstructureAtomEnvironment environment = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->environment_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17,
      this->environment(static_cast<int>(i)),
      output);
  }

  // repeated .SubstructureSearch.SubstructureBond query_bond = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_bond_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21,
      this->query_bond(static_cast<int>(i)),
      output);
  }

  // optional string bond_smarts = 22;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bond_smarts().data(), static_cast<int>(this->bond_smarts().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureAtom.bond_smarts");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->bond_smarts(), output);
  }

  // repeated .SubstructureSearch.SubstructureAtomSpecifier preference = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->preference_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23,
      this->preference(static_cast<int>(i)),
      output);
  }

  // optional bool sum_all_preference_hits = 24;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->sum_all_preference_hits(), output);
  }

  // repeated uint32 single_bond = 25;
  for (int i = 0, n = this->single_bond_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      25, this->single_bond(i), output);
  }

  // repeated uint32 double_bond = 26;
  for (int i = 0, n = this->double_bond_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      26, this->double_bond(i), output);
  }

  // repeated uint32 triple_bond = 27;
  for (int i = 0, n = this->triple_bond_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      27, this->triple_bond(i), output);
  }

  // repeated uint32 aromatic_bond = 28;
  for (int i = 0, n = this->aromatic_bond_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      28, this->aromatic_bond(i), output);
  }

  // repeated uint32 bond = 29;
  for (int i = 0, n = this->bond_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      29, this->bond(i), output);
  }

  // repeated uint32 unmatched_atoms_attached = 30;
  for (int i = 0, n = this->unmatched_atoms_attached_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      30, this->unmatched_atoms_attached(i), output);
  }

  // optional uint32 min_unmatched_atoms_attached = 31;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->min_unmatched_atoms_attached(), output);
  }

  // optional uint32 max_unmatched_atoms_attached = 32;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->max_unmatched_atoms_attached(), output);
  }

  // optional uint32 atom_type_group = 33;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->atom_type_group(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstructureSearch.SubstructureAtom)
}

::google::protobuf::uint8* SubstructureAtom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureAtom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bool match_as_match = 2;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->match_as_match(), target);
  }

  // optional string text_identifier = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_identifier().data(), static_cast<int>(this->text_identifier().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureAtom.text_identifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text_identifier(), target);
  }

  // optional uint32 atom_map_number = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->atom_map_number(), target);
  }

  // optional uint32 initial_atom_number = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->initial_atom_number(), target);
  }

  // optional uint32 or_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->or_id(), target);
  }

  // repeated .SubstructureSearch.SubstructureAtomSpecifier atom_properties = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->atom_properties_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->atom_properties(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 or_operator = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->or_operator(), target);
  }

  // optional int32 ring_id = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ring_id(), target);
  }

  // optional uint32 fused_system_id = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->fused_system_id(), target);
  }

  // optional int32 fragment_id = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->fragment_id(), target);
  }

  // optional double numeric_value = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->numeric_value(), target);
  }

  // optional bool include_in_embedding = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->include_in_embedding(), target);
  }

  switch (SmilesOrSmarts_case()) {
    case kSmarts:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->smarts().data(), static_cast<int>(this->smarts().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "SubstructureSearch.SubstructureAtom.smarts");
      target =
        ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
          14, this->smarts(), target);
      break;
    case kAtomSmarts:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->atom_smarts().data(), static_cast<int>(this->atom_smarts().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "SubstructureSearch.SubstructureAtom.atom_smarts");
      target =
        ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
          15, this->atom_smarts(), target);
      break;
    case kSmiles:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->smiles().data(), static_cast<int>(this->smiles().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "SubstructureSearch.SubstructureAtom.smiles");
      target =
        ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
          16, this->smiles(), target);
      break;
    default: ;
  }
  // repeated .SubstructureSearch.SubstructureAtomEnvironment environment = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->environment_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->environment(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SubstructureSearch.SubstructureBond query_bond = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_bond_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->query_bond(static_cast<int>(i)), deterministic, target);
  }

  // optional string bond_smarts = 22;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bond_smarts().data(), static_cast<int>(this->bond_smarts().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureAtom.bond_smarts");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->bond_smarts(), target);
  }

  // repeated .SubstructureSearch.SubstructureAtomSpecifier preference = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->preference_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->preference(static_cast<int>(i)), deterministic, target);
  }

  // optional bool sum_all_preference_hits = 24;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->sum_all_preference_hits(), target);
  }

  // repeated uint32 single_bond = 25;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(25, this->single_bond_, target);

  // repeated uint32 double_bond = 26;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(26, this->double_bond_, target);

  // repeated uint32 triple_bond = 27;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(27, this->triple_bond_, target);

  // repeated uint32 aromatic_bond = 28;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(28, this->aromatic_bond_, target);

  // repeated uint32 bond = 29;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(29, this->bond_, target);

  // repeated uint32 unmatched_atoms_attached = 30;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(30, this->unmatched_atoms_attached_, target);

  // optional uint32 min_unmatched_atoms_attached = 31;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->min_unmatched_atoms_attached(), target);
  }

  // optional uint32 max_unmatched_atoms_attached = 32;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->max_unmatched_atoms_attached(), target);
  }

  // optional uint32 atom_type_group = 33;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->atom_type_group(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureAtom)
  return target;
}

size_t SubstructureAtom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureAtom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SubstructureSearch.SubstructureAtomSpecifier atom_properties = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->atom_properties_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->atom_properties(static_cast<int>(i)));
    }
  }

  // repeated .SubstructureSearch.SubstructureAtomEnvironment environment = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->environment_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->environment(static_cast<int>(i)));
    }
  }

  // repeated .SubstructureSearch.SubstructureBond query_bond = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->query_bond_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->query_bond(static_cast<int>(i)));
    }
  }

  // repeated .SubstructureSearch.SubstructureAtomSpecifier preference = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->preference_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->preference(static_cast<int>(i)));
    }
  }

  // repeated uint32 single_bond = 25;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->single_bond_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->single_bond_size());
    total_size += data_size;
  }

  // repeated uint32 double_bond = 26;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->double_bond_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->double_bond_size());
    total_size += data_size;
  }

  // repeated uint32 triple_bond = 27;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->triple_bond_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->triple_bond_size());
    total_size += data_size;
  }

  // repeated uint32 aromatic_bond = 28;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->aromatic_bond_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->aromatic_bond_size());
    total_size += data_size;
  }

  // repeated uint32 bond = 29;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->bond_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->bond_size());
    total_size += data_size;
  }

  // repeated uint32 unmatched_atoms_attached = 30;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->unmatched_atoms_attached_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->unmatched_atoms_attached_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string text_identifier = 3;
    if (has_text_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_identifier());
    }

    // optional string bond_smarts = 22;
    if (has_bond_smarts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bond_smarts());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint32 atom_map_number = 4;
    if (has_atom_map_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atom_map_number());
    }

    // optional uint32 initial_atom_number = 5;
    if (has_initial_atom_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_atom_number());
    }

    // optional uint32 or_id = 6;
    if (has_or_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->or_id());
    }

    // optional int32 or_operator = 8;
    if (has_or_operator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->or_operator());
    }

    // optional int32 ring_id = 9;
    if (has_ring_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ring_id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 fused_system_id = 10;
    if (has_fused_system_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fused_system_id());
    }

    // optional int32 fragment_id = 11;
    if (has_fragment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fragment_id());
    }

    // optional double numeric_value = 12;
    if (has_numeric_value()) {
      total_size += 1 + 8;
    }

    // optional bool match_as_match = 2;
    if (has_match_as_match()) {
      total_size += 1 + 1;
    }

    // optional bool include_in_embedding = 13;
    if (has_include_in_embedding()) {
      total_size += 1 + 1;
    }

    // optional bool sum_all_preference_hits = 24;
    if (has_sum_all_preference_hits()) {
      total_size += 2 + 1;
    }

    // optional uint32 min_unmatched_atoms_attached = 31;
    if (has_min_unmatched_atoms_attached()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_unmatched_atoms_attached());
    }

    // optional uint32 max_unmatched_atoms_attached = 32;
    if (has_max_unmatched_atoms_attached()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_unmatched_atoms_attached());
    }

  }
  // optional uint32 atom_type_group = 33;
  if (has_atom_type_group()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->atom_type_group());
  }

  switch (SmilesOrSmarts_case()) {
    // optional string smarts = 14;
    case kSmarts: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->smarts());
      break;
    }
    // optional string atom_smarts = 15;
    case kAtomSmarts: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->atom_smarts());
      break;
    }
    // optional string smiles = 16;
    case kSmiles: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->smiles());
      break;
    }
    case SMILESORSMARTS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureAtom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureAtom)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureAtom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubstructureAtom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureAtom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureAtom)
    MergeFrom(*source);
  }
}

void SubstructureAtom::MergeFrom(const SubstructureAtom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureAtom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  atom_properties_.MergeFrom(from.atom_properties_);
  environment_.MergeFrom(from.environment_);
  query_bond_.MergeFrom(from.query_bond_);
  preference_.MergeFrom(from.preference_);
  single_bond_.MergeFrom(from.single_bond_);
  double_bond_.MergeFrom(from.double_bond_);
  triple_bond_.MergeFrom(from.triple_bond_);
  aromatic_bond_.MergeFrom(from.aromatic_bond_);
  bond_.MergeFrom(from.bond_);
  unmatched_atoms_attached_.MergeFrom(from.unmatched_atoms_attached_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text_identifier();
      text_identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_identifier_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_bond_smarts();
      bond_smarts_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bond_smarts_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      atom_map_number_ = from.atom_map_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      initial_atom_number_ = from.initial_atom_number_;
    }
    if (cached_has_bits & 0x00000020u) {
      or_id_ = from.or_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      or_operator_ = from.or_operator_;
    }
    if (cached_has_bits & 0x00000080u) {
      ring_id_ = from.ring_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      fused_system_id_ = from.fused_system_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      fragment_id_ = from.fragment_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      numeric_value_ = from.numeric_value_;
    }
    if (cached_has_bits & 0x00000800u) {
      match_as_match_ = from.match_as_match_;
    }
    if (cached_has_bits & 0x00001000u) {
      include_in_embedding_ = from.include_in_embedding_;
    }
    if (cached_has_bits & 0x00002000u) {
      sum_all_preference_hits_ = from.sum_all_preference_hits_;
    }
    if (cached_has_bits & 0x00004000u) {
      min_unmatched_atoms_attached_ = from.min_unmatched_atoms_attached_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_unmatched_atoms_attached_ = from.max_unmatched_atoms_attached_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_atom_type_group(from.atom_type_group());
  }
  switch (from.SmilesOrSmarts_case()) {
    case kSmarts: {
      set_smarts(from.smarts());
      break;
    }
    case kAtomSmarts: {
      set_atom_smarts(from.atom_smarts());
      break;
    }
    case kSmiles: {
      set_smiles(from.smiles());
      break;
    }
    case SMILESORSMARTS_NOT_SET: {
      break;
    }
  }
}

void SubstructureAtom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureAtom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureAtom::CopyFrom(const SubstructureAtom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureAtom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureAtom::IsInitialized() const {
  return true;
}

void SubstructureAtom::Swap(SubstructureAtom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubstructureAtom::InternalSwap(SubstructureAtom* other) {
  using std::swap;
  CastToBase(&atom_properties_)->InternalSwap(CastToBase(&other->atom_properties_));
  CastToBase(&environment_)->InternalSwap(CastToBase(&other->environment_));
  CastToBase(&query_bond_)->InternalSwap(CastToBase(&other->query_bond_));
  CastToBase(&preference_)->InternalSwap(CastToBase(&other->preference_));
  single_bond_.InternalSwap(&other->single_bond_);
  double_bond_.InternalSwap(&other->double_bond_);
  triple_bond_.InternalSwap(&other->triple_bond_);
  aromatic_bond_.InternalSwap(&other->aromatic_bond_);
  bond_.InternalSwap(&other->bond_);
  unmatched_atoms_attached_.InternalSwap(&other->unmatched_atoms_attached_);
  text_identifier_.Swap(&other->text_identifier_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bond_smarts_.Swap(&other->bond_smarts_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(atom_map_number_, other->atom_map_number_);
  swap(initial_atom_number_, other->initial_atom_number_);
  swap(or_id_, other->or_id_);
  swap(or_operator_, other->or_operator_);
  swap(ring_id_, other->ring_id_);
  swap(fused_system_id_, other->fused_system_id_);
  swap(fragment_id_, other->fragment_id_);
  swap(numeric_value_, other->numeric_value_);
  swap(match_as_match_, other->match_as_match_);
  swap(include_in_embedding_, other->include_in_embedding_);
  swap(sum_all_preference_hits_, other->sum_all_preference_hits_);
  swap(min_unmatched_atoms_attached_, other->min_unmatched_atoms_attached_);
  swap(max_unmatched_atoms_attached_, other->max_unmatched_atoms_attached_);
  swap(atom_type_group_, other->atom_type_group_);
  swap(SmilesOrSmarts_, other->SmilesOrSmarts_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubstructureAtom::GetMetadata() const {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubstructureEnvironment::InitAsDefaultInstance() {
  ::SubstructureSearch::_SubstructureEnvironment_default_instance_._instance.get_mutable()->attachment_ = const_cast< ::SubstructureSearch::EnvironmentAttachment*>(
      ::SubstructureSearch::EnvironmentAttachment::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubstructureEnvironment::kIdFieldNumber;
const int SubstructureEnvironment::kSmartsFieldNumber;
const int SubstructureEnvironment::kSmilesFieldNumber;
const int SubstructureEnvironment::kQueryAtomFieldNumber;
const int SubstructureEnvironment::kAttachmentFieldNumber;
const int SubstructureEnvironment::kBondFieldNumber;
const int SubstructureEnvironment::kOrIdFieldNumber;
const int SubstructureEnvironment::kAndIdFieldNumber;
const int SubstructureEnvironment::kHitsNeededFieldNumber;
const int SubstructureEnvironment::kMinHitsNeededFieldNumber;
const int SubstructureEnvironment::kMaxHitsNeededFieldNumber;
const int SubstructureEnvironment::kNoOtherSubstituentsAllowedFieldNumber;
const int SubstructureEnvironment::kEnvMatchesCanShareAttachmentPointsFieldNumber;
const int SubstructureEnvironment::kMaxMatchesToFindFieldNumber;
const int SubstructureEnvironment::kHydrogenOkFieldNumber;
const int SubstructureEnvironment::kMaxEnvMatchesPerAnchorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubstructureEnvironment::SubstructureEnvironment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substructure_2eproto::scc_info_SubstructureEnvironment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstructureSearch.SubstructureEnvironment)
}
SubstructureEnvironment::SubstructureEnvironment(const SubstructureEnvironment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      smarts_(from.smarts_),
      smiles_(from.smiles_),
      query_atom_(from.query_atom_),
      bond_(from.bond_),
      hits_needed_(from.hits_needed_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_attachment()) {
    attachment_ = new ::SubstructureSearch::EnvironmentAttachment(*from.attachment_);
  } else {
    attachment_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_env_matches_per_anchor_) -
    reinterpret_cast<char*>(&id_)) + sizeof(max_env_matches_per_anchor_));
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureEnvironment)
}

void SubstructureEnvironment::SharedCtor() {
  ::memset(&attachment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_env_matches_per_anchor_) -
      reinterpret_cast<char*>(&attachment_)) + sizeof(max_env_matches_per_anchor_));
}

SubstructureEnvironment::~SubstructureEnvironment() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureEnvironment)
  SharedDtor();
}

void SubstructureEnvironment::SharedDtor() {
  if (this != internal_default_instance()) delete attachment_;
}

void SubstructureEnvironment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubstructureEnvironment::descriptor() {
  ::protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubstructureEnvironment& SubstructureEnvironment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substructure_2eproto::scc_info_SubstructureEnvironment.base);
  return *internal_default_instance();
}


void SubstructureEnvironment::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureEnvironment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  smarts_.Clear();
  smiles_.Clear();
  query_atom_.Clear();
  bond_.Clear();
  hits_needed_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(attachment_ != NULL);
    attachment_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&env_matches_can_share_attachment_points_) -
        reinterpret_cast<char*>(&id_)) + sizeof(env_matches_can_share_attachment_points_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&hydrogen_ok_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_env_matches_per_anchor_) -
        reinterpret_cast<char*>(&hydrogen_ok_)) + sizeof(max_env_matches_per_anchor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubstructureEnvironment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstructureSearch.SubstructureEnvironment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string smarts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_smarts()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->smarts(this->smarts_size() - 1).data(),
            static_cast<int>(this->smarts(this->smarts_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.SubstructureEnvironment.smarts");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string smiles = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_smiles()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->smiles(this->smiles_size() - 1).data(),
            static_cast<int>(this->smiles(this->smiles_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.SubstructureEnvironment.smiles");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstructureSearch.SubstructureAtom query_atom = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_query_atom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SubstructureSearch.EnvironmentAttachment attachment = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attachment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string bond = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bond()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bond(this->bond_size() - 1).data(),
            static_cast<int>(this->bond(this->bond_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.SubstructureEnvironment.bond");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 or_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_or_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &or_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 and_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_and_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &and_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 hits_needed = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80u, input, this->mutable_hits_needed())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hits_needed())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_hits_needed = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_min_hits_needed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_hits_needed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_hits_needed = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_max_hits_needed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_hits_needed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool no_other_substituents_allowed = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_no_other_substituents_allowed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_other_substituents_allowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool env_matches_can_share_attachment_points = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_env_matches_can_share_attachment_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &env_matches_can_share_attachment_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_matches_to_find = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_max_matches_to_find();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_matches_to_find_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hydrogen_ok = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_hydrogen_ok();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hydrogen_ok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_env_matches_per_anchor = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_max_env_matches_per_anchor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_env_matches_per_anchor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstructureSearch.SubstructureEnvironment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstructureSearch.SubstructureEnvironment)
  return false;
#undef DO_
}

void SubstructureEnvironment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstructureSearch.SubstructureEnvironment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated string smarts = 3;
  for (int i = 0, n = this->smarts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smarts(i).data(), static_cast<int>(this->smarts(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureEnvironment.smarts");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->smarts(i), output);
  }

  // repeated string smiles = 4;
  for (int i = 0, n = this->smiles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smiles(i).data(), static_cast<int>(this->smiles(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureEnvironment.smiles");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->smiles(i), output);
  }

  // repeated .SubstructureSearch.SubstructureAtom query_atom = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_atom_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->query_atom(static_cast<int>(i)),
      output);
  }

  // optional .SubstructureSearch.EnvironmentAttachment attachment = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_attachment(), output);
  }

  // repeated string bond = 7;
  for (int i = 0, n = this->bond_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bond(i).data(), static_cast<int>(this->bond(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureEnvironment.bond");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->bond(i), output);
  }

  // optional uint32 or_id = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->or_id(), output);
  }

  // optional uint32 and_id = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->and_id(), output);
  }

  // repeated uint32 hits_needed = 10;
  for (int i = 0, n = this->hits_needed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->hits_needed(i), output);
  }

  // optional uint32 min_hits_needed = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->min_hits_needed(), output);
  }

  // optional uint32 max_hits_needed = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->max_hits_needed(), output);
  }

  // optional bool no_other_substituents_allowed = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->no_other_substituents_allowed(), output);
  }

  // optional bool env_matches_can_share_attachment_points = 15;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->env_matches_can_share_attachment_points(), output);
  }

  // optional uint32 max_matches_to_find = 16;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->max_matches_to_find(), output);
  }

  // optional bool hydrogen_ok = 17;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->hydrogen_ok(), output);
  }

  // optional uint32 max_env_matches_per_anchor = 18;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->max_env_matches_per_anchor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstructureSearch.SubstructureEnvironment)
}

::google::protobuf::uint8* SubstructureEnvironment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureEnvironment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated string smarts = 3;
  for (int i = 0, n = this->smarts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smarts(i).data(), static_cast<int>(this->smarts(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureEnvironment.smarts");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->smarts(i), target);
  }

  // repeated string smiles = 4;
  for (int i = 0, n = this->smiles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smiles(i).data(), static_cast<int>(this->smiles(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureEnvironment.smiles");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->smiles(i), target);
  }

  // repeated .SubstructureSearch.SubstructureAtom query_atom = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_atom_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->query_atom(static_cast<int>(i)), deterministic, target);
  }

  // optional .SubstructureSearch.EnvironmentAttachment attachment = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_attachment(), deterministic, target);
  }

  // repeated string bond = 7;
  for (int i = 0, n = this->bond_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bond(i).data(), static_cast<int>(this->bond(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureEnvironment.bond");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->bond(i), target);
  }

  // optional uint32 or_id = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->or_id(), target);
  }

  // optional uint32 and_id = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->and_id(), target);
  }

  // repeated uint32 hits_needed = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(10, this->hits_needed_, target);

  // optional uint32 min_hits_needed = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->min_hits_needed(), target);
  }

  // optional uint32 max_hits_needed = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->max_hits_needed(), target);
  }

  // optional bool no_other_substituents_allowed = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->no_other_substituents_allowed(), target);
  }

  // optional bool env_matches_can_share_attachment_points = 15;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->env_matches_can_share_attachment_points(), target);
  }

  // optional uint32 max_matches_to_find = 16;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->max_matches_to_find(), target);
  }

  // optional bool hydrogen_ok = 17;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->hydrogen_ok(), target);
  }

  // optional uint32 max_env_matches_per_anchor = 18;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->max_env_matches_per_anchor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureEnvironment)
  return target;
}

size_t SubstructureEnvironment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureEnvironment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string smarts = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->smarts_size());
  for (int i = 0, n = this->smarts_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->smarts(i));
  }

  // repeated string smiles = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->smiles_size());
  for (int i = 0, n = this->smiles_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->smiles(i));
  }

  // repeated .SubstructureSearch.SubstructureAtom query_atom = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->query_atom_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->query_atom(static_cast<int>(i)));
    }
  }

  // repeated string bond = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->bond_size());
  for (int i = 0, n = this->bond_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bond(i));
  }

  // repeated uint32 hits_needed = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->hits_needed_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->hits_needed_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .SubstructureSearch.EnvironmentAttachment attachment = 6;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *attachment_);
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 or_id = 8;
    if (has_or_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->or_id());
    }

    // optional uint32 and_id = 9;
    if (has_and_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->and_id());
    }

    // optional uint32 min_hits_needed = 11;
    if (has_min_hits_needed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_hits_needed());
    }

    // optional uint32 max_hits_needed = 12;
    if (has_max_hits_needed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_hits_needed());
    }

    // optional bool no_other_substituents_allowed = 13;
    if (has_no_other_substituents_allowed()) {
      total_size += 1 + 1;
    }

    // optional bool env_matches_can_share_attachment_points = 15;
    if (has_env_matches_can_share_attachment_points()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional bool hydrogen_ok = 17;
    if (has_hydrogen_ok()) {
      total_size += 2 + 1;
    }

    // optional uint32 max_matches_to_find = 16;
    if (has_max_matches_to_find()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_matches_to_find());
    }

    // optional uint32 max_env_matches_per_anchor = 18;
    if (has_max_env_matches_per_anchor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_env_matches_per_anchor());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureEnvironment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureEnvironment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubstructureEnvironment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureEnvironment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureEnvironment)
    MergeFrom(*source);
  }
}

void SubstructureEnvironment::MergeFrom(const SubstructureEnvironment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  smarts_.MergeFrom(from.smarts_);
  smiles_.MergeFrom(from.smiles_);
  query_atom_.MergeFrom(from.query_atom_);
  bond_.MergeFrom(from.bond_);
  hits_needed_.MergeFrom(from.hits_needed_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_attachment()->::SubstructureSearch::EnvironmentAttachment::MergeFrom(from.attachment());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      or_id_ = from.or_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      and_id_ = from.and_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_hits_needed_ = from.min_hits_needed_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_hits_needed_ = from.max_hits_needed_;
    }
    if (cached_has_bits & 0x00000040u) {
      no_other_substituents_allowed_ = from.no_other_substituents_allowed_;
    }
    if (cached_has_bits & 0x00000080u) {
      env_matches_can_share_attachment_points_ = from.env_matches_can_share_attachment_points_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      hydrogen_ok_ = from.hydrogen_ok_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_matches_to_find_ = from.max_matches_to_find_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_env_matches_per_anchor_ = from.max_env_matches_per_anchor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubstructureEnvironment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureEnvironment::CopyFrom(const SubstructureEnvironment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureEnvironment::IsInitialized() const {
  return true;
}

void SubstructureEnvironment::Swap(SubstructureEnvironment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubstructureEnvironment::InternalSwap(SubstructureEnvironment* other) {
  using std::swap;
  smarts_.InternalSwap(CastToBase(&other->smarts_));
  smiles_.InternalSwap(CastToBase(&other->smiles_));
  CastToBase(&query_atom_)->InternalSwap(CastToBase(&other->query_atom_));
  bond_.InternalSwap(CastToBase(&other->bond_));
  hits_needed_.InternalSwap(&other->hits_needed_);
  swap(attachment_, other->attachment_);
  swap(id_, other->id_);
  swap(or_id_, other->or_id_);
  swap(and_id_, other->and_id_);
  swap(min_hits_needed_, other->min_hits_needed_);
  swap(max_hits_needed_, other->max_hits_needed_);
  swap(no_other_substituents_allowed_, other->no_other_substituents_allowed_);
  swap(env_matches_can_share_attachment_points_, other->env_matches_can_share_attachment_points_);
  swap(hydrogen_ok_, other->hydrogen_ok_);
  swap(max_matches_to_find_, other->max_matches_to_find_);
  swap(max_env_matches_per_anchor_, other->max_env_matches_per_anchor_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubstructureEnvironment::GetMetadata() const {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SingleSubstructureQuery::InitAsDefaultInstance() {
  ::SubstructureSearch::_SingleSubstructureQuery_default_instance_.smiles_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::SubstructureSearch::_SingleSubstructureQuery_default_instance_.smarts_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SingleSubstructureQuery::kIdFieldNumber;
const int SingleSubstructureQuery::kLabelFieldNumber;
const int SingleSubstructureQuery::kCommentFieldNumber;
const int SingleSubstructureQuery::kOneEmbeddingPerStartAtomFieldNumber;
const int SingleSubstructureQuery::kNormaliseRcPerHitsNeededFieldNumber;
const int SingleSubstructureQuery::kSubtractFromRcFieldNumber;
const int SingleSubstructureQuery::kMaxMatchesToFindFieldNumber;
const int SingleSubstructureQuery::kSaveMatchedAtomsFieldNumber;
const int SingleSubstructureQuery::kNconIgnoreSinglyConnectedFieldNumber;
const int SingleSubstructureQuery::kPerceiveSymmetricEquivalentsFieldNumber;
const int SingleSubstructureQuery::kImplicitRingConditionFieldNumber;
const int SingleSubstructureQuery::kAllHitsInSameFragmentFieldNumber;
const int SingleSubstructureQuery::kOnlyMatchLargestFragmentFieldNumber;
const int SingleSubstructureQuery::kEmbeddingsDoNotOverlapFieldNumber;
const int SingleSubstructureQuery::kSortByPreferenceValueFieldNumber;
const int SingleSubstructureQuery::kSmilesFieldNumber;
const int SingleSubstructureQuery::kSmartsFieldNumber;
const int SingleSubstructureQuery::kNumericValueFieldNumber;
const int SingleSubstructureQuery::kNoMatchedAtomsBetweenFieldNumber;
const int SingleSubstructureQuery::kNoMatchedAtomsBetweenExhaustiveFieldNumber;
const int SingleSubstructureQuery::kLinkAtomsFieldNumber;
const int SingleSubstructureQuery::kFailIfEmbeddingsTooCloseFieldNumber;
const int SingleSubstructureQuery::kDistanceBetweenHitsNcheckFieldNumber;
const int SingleSubstructureQuery::kSortMatchesFieldNumber;
const int SingleSubstructureQuery::kAttachedHeteroatomCountFieldNumber;
const int SingleSubstructureQuery::kMinAttachedHeteroatomCountFieldNumber;
const int SingleSubstructureQuery::kMaxAttachedHeteroatomCountFieldNumber;
const int SingleSubstructureQuery::kHitsNeededFieldNumber;
const int SingleSubstructureQuery::kMinHitsNeededFieldNumber;
const int SingleSubstructureQuery::kMaxHitsNeededFieldNumber;
const int SingleSubstructureQuery::kRingAtomsMatchedFieldNumber;
const int SingleSubstructureQuery::kMinRingAtomsMatchedFieldNumber;
const int SingleSubstructureQuery::kMaxRingAtomsMatchedFieldNumber;
const int SingleSubstructureQuery::kHeteroatomsMatchedFieldNumber;
const int SingleSubstructureQuery::kMinHeteroatomsMatchedFieldNumber;
const int SingleSubstructureQuery::kMaxHeteroatomsMatchedFieldNumber;
const int SingleSubstructureQuery::kHeteroatomsInMoleculeFieldNumber;
const int SingleSubstructureQuery::kMinHeteroatomsInMoleculeFieldNumber;
const int SingleSubstructureQuery::kMaxHeteroatomsInMoleculeFieldNumber;
const int SingleSubstructureQuery::kNatomsFieldNumber;
const int SingleSubstructureQuery::kMinNatomsFieldNumber;
const int SingleSubstructureQuery::kMaxNatomsFieldNumber;
const int SingleSubstructureQuery::kNringsFieldNumber;
const int SingleSubstructureQuery::kMinNringsFieldNumber;
const int SingleSubstructureQuery::kMaxNringsFieldNumber;
const int SingleSubstructureQuery::kNconFieldNumber;
const int SingleSubstructureQuery::kMinNconFieldNumber;
const int SingleSubstructureQuery::kMaxNconFieldNumber;
const int SingleSubstructureQuery::kFusedRingsFieldNumber;
const int SingleSubstructureQuery::kMinFusedRingsFieldNumber;
const int SingleSubstructureQuery::kMaxFusedRingsFieldNumber;
const int SingleSubstructureQuery::kStronglyFusedRingsFieldNumber;
const int SingleSubstructureQuery::kMinStronglyFusedRingsFieldNumber;
const int SingleSubstructureQuery::kMaxStronglyFusedRingsFieldNumber;
const int SingleSubstructureQuery::kIsolatedRingsFieldNumber;
const int SingleSubstructureQuery::kMinIsolatedRingsFieldNumber;
const int SingleSubstructureQuery::kMaxIsolatedRingsFieldNumber;
const int SingleSubstructureQuery::kIsolatedRingObjectsFieldNumber;
const int SingleSubstructureQuery::kMinIsolatedRingObjectsFieldNumber;
const int SingleSubstructureQuery::kMaxIsolatedRingObjectsFieldNumber;
const int SingleSubstructureQuery::kAromaticRingsFieldNumber;
const int SingleSubstructureQuery::kMinAromaticRingsFieldNumber;
const int SingleSubstructureQuery::kMaxAromaticRingsFieldNumber;
const int SingleSubstructureQuery::kNonAromaticRingsFieldNumber;
const int SingleSubstructureQuery::kMinNonAromaticRingsFieldNumber;
const int SingleSubstructureQuery::kMaxNonAromaticRingsFieldNumber;
const int SingleSubstructureQuery::kDistanceBetweenHitsFieldNumber;
const int SingleSubstructureQuery::kMinDistanceBetweenHitsFieldNumber;
const int SingleSubstructureQuery::kMaxDistanceBetweenHitsFieldNumber;
const int SingleSubstructureQuery::kNumberIsotopicAtomsFieldNumber;
const int SingleSubstructureQuery::kMinNumberIsotopicAtomsFieldNumber;
const int SingleSubstructureQuery::kMaxNumberIsotopicAtomsFieldNumber;
const int SingleSubstructureQuery::kNumberFragmentsFieldNumber;
const int SingleSubstructureQuery::kMinNumberFragmentsFieldNumber;
const int SingleSubstructureQuery::kMaxNumberFragmentsFieldNumber;
const int SingleSubstructureQuery::kDistanceBetweenRootAtomsFieldNumber;
const int SingleSubstructureQuery::kMinDistanceBetweenRootAtomsFieldNumber;
const int SingleSubstructureQuery::kMaxDistanceBetweenRootAtomsFieldNumber;
const int SingleSubstructureQuery::kAtomsInSpinachFieldNumber;
const int SingleSubstructureQuery::kMinAtomsInSpinachFieldNumber;
const int SingleSubstructureQuery::kMaxAtomsInSpinachFieldNumber;
const int SingleSubstructureQuery::kInterRingAtomsFieldNumber;
const int SingleSubstructureQuery::kMinInterRingAtomsFieldNumber;
const int SingleSubstructureQuery::kMaxInterRingAtomsFieldNumber;
const int SingleSubstructureQuery::kUnmatchedAtomsFieldNumber;
const int SingleSubstructureQuery::kMinUnmatchedAtomsFieldNumber;
const int SingleSubstructureQuery::kMaxUnmatchedAtomsFieldNumber;
const int SingleSubstructureQuery::kNetFormalChargeFieldNumber;
const int SingleSubstructureQuery::kMinNetFormalChargeFieldNumber;
const int SingleSubstructureQuery::kMaxNetFormalChargeFieldNumber;
const int SingleSubstructureQuery::kMinFractionAtomsMatchedFieldNumber;
const int SingleSubstructureQuery::kMaxFractionAtomsMatchedFieldNumber;
const int SingleSubstructureQuery::kEnvironmentFieldNumber;
const int SingleSubstructureQuery::kEnvironmentNoMatchFieldNumber;
const int SingleSubstructureQuery::kEnvironmentMustMatchUnmatchedAtomsFieldNumber;
const int SingleSubstructureQuery::kEnvMatchesCanShareAttachmentPointsFieldNumber;
const int SingleSubstructureQuery::kRingSpecificationFieldNumber;
const int SingleSubstructureQuery::kRingSpecificationLogexpFieldNumber;
const int SingleSubstructureQuery::kRingSystemSpecifierFieldNumber;
const int SingleSubstructureQuery::kRingSystemSpecifierLogexpFieldNumber;
const int SingleSubstructureQuery::kElementHitsNeededFieldNumber;
const int SingleSubstructureQuery::kElementsNeededFieldNumber;
const int SingleSubstructureQuery::kAromaticAtomsFieldNumber;
const int SingleSubstructureQuery::kMinAromaticAtomsFieldNumber;
const int SingleSubstructureQuery::kMaxAromaticAtomsFieldNumber;
const int SingleSubstructureQuery::kUniqueEmbeddingsOnlyFieldNumber;
const int SingleSubstructureQuery::kHeteroatomsFieldNumber;
const int SingleSubstructureQuery::kRespectInitialAtomNumberingFieldNumber;
const int SingleSubstructureQuery::kCompressEmbeddingsFieldNumber;
const int SingleSubstructureQuery::kEnvironmentsCanShareAttachmentPointsFieldNumber;
const int SingleSubstructureQuery::kQueryAtomFieldNumber;
const int SingleSubstructureQuery::kChiralCentreFieldNumber;
const int SingleSubstructureQuery::kAtomTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SingleSubstructureQuery::SingleSubstructureQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substructure_2eproto::scc_info_SingleSubstructureQuery.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstructureSearch.SingleSubstructureQuery)
}
SingleSubstructureQuery::SingleSubstructureQuery(const SingleSubstructureQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      numeric_value_(from.numeric_value_),
      no_matched_atoms_between_(from.no_matched_atoms_between_),
      link_atoms_(from.link_atoms_),
      attached_heteroatom_count_(from.attached_heteroatom_count_),
      hits_needed_(from.hits_needed_),
      ring_atoms_matched_(from.ring_atoms_matched_),
      heteroatoms_matched_(from.heteroatoms_matched_),
      heteroatoms_in_molecule_(from.heteroatoms_in_molecule_),
      natoms_(from.natoms_),
      nrings_(from.nrings_),
      ncon_(from.ncon_),
      fused_rings_(from.fused_rings_),
      strongly_fused_rings_(from.strongly_fused_rings_),
      isolated_rings_(from.isolated_rings_),
      isolated_ring_objects_(from.isolated_ring_objects_),
      aromatic_rings_(from.aromatic_rings_),
      non_aromatic_rings_(from.non_aromatic_rings_),
      distance_between_hits_(from.distance_between_hits_),
      number_isotopic_atoms_(from.number_isotopic_atoms_),
      number_fragments_(from.number_fragments_),
      distance_between_root_atoms_(from.distance_between_root_atoms_),
      atoms_in_spinach_(from.atoms_in_spinach_),
      inter_ring_atoms_(from.inter_ring_atoms_),
      unmatched_atoms_(from.unmatched_atoms_),
      net_formal_charge_(from.net_formal_charge_),
      environment_(from.environment_),
      environment_no_match_(from.environment_no_match_),
      ring_specification_(from.ring_specification_),
      ring_specification_logexp_(from.ring_specification_logexp_),
      ring_system_specifier_(from.ring_system_specifier_),
      ring_system_specifier_logexp_(from.ring_system_specifier_logexp_),
      element_hits_needed_(from.element_hits_needed_),
      elements_needed_(from.elements_needed_),
      aromatic_atoms_(from.aromatic_atoms_),
      heteroatoms_(from.heteroatoms_),
      query_atom_(from.query_atom_),
      chiral_centre_(from.chiral_centre_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_comment()) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  sort_matches_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sort_matches()) {
    sort_matches_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sort_matches_);
  }
  atom_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_atom_type()) {
    atom_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.atom_type_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&environments_can_share_attachment_points_) -
    reinterpret_cast<char*>(&id_)) + sizeof(environments_can_share_attachment_points_));
  clear_has_smiles_or_smarts();
  switch (from.smiles_or_smarts_case()) {
    case kSmiles: {
      set_smiles(from.smiles());
      break;
    }
    case kSmarts: {
      set_smarts(from.smarts());
      break;
    }
    case SMILES_OR_SMARTS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SingleSubstructureQuery)
}

void SingleSubstructureQuery::SharedCtor() {
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sort_matches_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  atom_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&environments_can_share_attachment_points_) -
      reinterpret_cast<char*>(&id_)) + sizeof(environments_can_share_attachment_points_));
  clear_has_smiles_or_smarts();
}

SingleSubstructureQuery::~SingleSubstructureQuery() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SingleSubstructureQuery)
  SharedDtor();
}

void SingleSubstructureQuery::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sort_matches_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  atom_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_smiles_or_smarts()) {
    clear_smiles_or_smarts();
  }
}

void SingleSubstructureQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SingleSubstructureQuery::descriptor() {
  ::protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SingleSubstructureQuery& SingleSubstructureQuery::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substructure_2eproto::scc_info_SingleSubstructureQuery.base);
  return *internal_default_instance();
}


void SingleSubstructureQuery::clear_smiles_or_smarts() {
// @@protoc_insertion_point(one_of_clear_start:SubstructureSearch.SingleSubstructureQuery)
  switch (smiles_or_smarts_case()) {
    case kSmiles: {
      smiles_or_smarts_.smiles_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kSmarts: {
      smiles_or_smarts_.smarts_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case SMILES_OR_SMARTS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SMILES_OR_SMARTS_NOT_SET;
}


void SingleSubstructureQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SingleSubstructureQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  numeric_value_.Clear();
  no_matched_atoms_between_.Clear();
  link_atoms_.Clear();
  attached_heteroatom_count_.Clear();
  hits_needed_.Clear();
  ring_atoms_matched_.Clear();
  heteroatoms_matched_.Clear();
  heteroatoms_in_molecule_.Clear();
  natoms_.Clear();
  nrings_.Clear();
  ncon_.Clear();
  fused_rings_.Clear();
  strongly_fused_rings_.Clear();
  isolated_rings_.Clear();
  isolated_ring_objects_.Clear();
  aromatic_rings_.Clear();
  non_aromatic_rings_.Clear();
  distance_between_hits_.Clear();
  number_isotopic_atoms_.Clear();
  number_fragments_.Clear();
  distance_between_root_atoms_.Clear();
  atoms_in_spinach_.Clear();
  inter_ring_atoms_.Clear();
  unmatched_atoms_.Clear();
  net_formal_charge_.Clear();
  environment_.Clear();
  environment_no_match_.Clear();
  ring_specification_.Clear();
  ring_specification_logexp_.Clear();
  ring_system_specifier_.Clear();
  ring_system_specifier_logexp_.Clear();
  element_hits_needed_.Clear();
  elements_needed_.Clear();
  aromatic_atoms_.Clear();
  heteroatoms_.Clear();
  query_atom_.Clear();
  chiral_centre_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      label_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      comment_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      sort_matches_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      atom_type_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_matches_to_find_) -
        reinterpret_cast<char*>(&id_)) + sizeof(max_matches_to_find_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&one_embedding_per_start_atom_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&embeddings_do_not_overlap_) -
        reinterpret_cast<char*>(&one_embedding_per_start_atom_)) + sizeof(embeddings_do_not_overlap_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&sort_by_preference_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_ring_atoms_matched_) -
        reinterpret_cast<char*>(&sort_by_preference_value_)) + sizeof(max_ring_atoms_matched_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&min_heteroatoms_matched_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_nrings_) -
        reinterpret_cast<char*>(&min_heteroatoms_matched_)) + sizeof(max_nrings_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    ::memset(&min_ncon_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_isolated_rings_) -
        reinterpret_cast<char*>(&min_ncon_)) + sizeof(max_isolated_rings_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&no_matched_atoms_between_exhaustive_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_aromatic_rings_) -
        reinterpret_cast<char*>(&no_matched_atoms_between_exhaustive_)) + sizeof(max_aromatic_rings_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&min_non_aromatic_rings_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_number_fragments_) -
        reinterpret_cast<char*>(&min_non_aromatic_rings_)) + sizeof(max_number_fragments_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&min_distance_between_root_atoms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_unmatched_atoms_) -
        reinterpret_cast<char*>(&min_distance_between_root_atoms_)) + sizeof(max_unmatched_atoms_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 255u) {
    ::memset(&min_net_formal_charge_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&respect_initial_atom_numbering_) -
        reinterpret_cast<char*>(&min_net_formal_charge_)) + sizeof(respect_initial_atom_numbering_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&compress_embeddings_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&environments_can_share_attachment_points_) -
        reinterpret_cast<char*>(&compress_embeddings_)) + sizeof(environments_can_share_attachment_points_));
  }
  clear_smiles_or_smarts();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SingleSubstructureQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstructureSearch.SingleSubstructureQuery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string label = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), static_cast<int>(this->label().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.SingleSubstructureQuery.label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string comment = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.SingleSubstructureQuery.comment");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool one_embedding_per_start_atom = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_one_embedding_per_start_atom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &one_embedding_per_start_atom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 normalise_rc_per_hits_needed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_normalise_rc_per_hits_needed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normalise_rc_per_hits_needed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 subtract_from_rc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_subtract_from_rc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subtract_from_rc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_matches_to_find = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_max_matches_to_find();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_matches_to_find_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool save_matched_atoms = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_save_matched_atoms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &save_matched_atoms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ncon_ignore_singly_connected = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_ncon_ignore_singly_connected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ncon_ignore_singly_connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool perceive_symmetric_equivalents = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_perceive_symmetric_equivalents();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &perceive_symmetric_equivalents_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 implicit_ring_condition = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_implicit_ring_condition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &implicit_ring_condition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool all_hits_in_same_fragment = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_all_hits_in_same_fragment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_hits_in_same_fragment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool only_match_largest_fragment = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_only_match_largest_fragment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_match_largest_fragment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool embeddings_do_not_overlap = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_embeddings_do_not_overlap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &embeddings_do_not_overlap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sort_by_preference_value = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_sort_by_preference_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sort_by_preference_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string smiles = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smiles()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->smiles().data(), static_cast<int>(this->smiles().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.SingleSubstructureQuery.smiles");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string smarts = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smarts()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->smarts().data(), static_cast<int>(this->smarts().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.SingleSubstructureQuery.smarts");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double numeric_value = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 153u, input, this->mutable_numeric_value())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_numeric_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstructureSearch.NoMatchedAtomsBetween no_matched_atoms_between = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_no_matched_atoms_between()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool no_matched_atoms_between_exhaustive = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_no_matched_atoms_between_exhaustive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_matched_atoms_between_exhaustive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstructureSearch.LinkAtoms link_atoms = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_link_atoms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fail_if_embeddings_too_close = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_fail_if_embeddings_too_close();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fail_if_embeddings_too_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 distance_between_hits_ncheck = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_distance_between_hits_ncheck();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &distance_between_hits_ncheck_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sort_matches = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sort_matches()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sort_matches().data(), static_cast<int>(this->sort_matches().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.SingleSubstructureQuery.sort_matches");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 attached_heteroatom_count = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 208u, input, this->mutable_attached_heteroatom_count())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attached_heteroatom_count())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_attached_heteroatom_count = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_min_attached_heteroatom_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_attached_heteroatom_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_attached_heteroatom_count = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_max_attached_heteroatom_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_attached_heteroatom_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 hits_needed = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 232u, input, this->mutable_hits_needed())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hits_needed())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_hits_needed = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_min_hits_needed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_hits_needed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_hits_needed = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_max_hits_needed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_hits_needed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ring_atoms_matched = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 256u, input, this->mutable_ring_atoms_matched())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ring_atoms_matched())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_ring_atoms_matched = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_min_ring_atoms_matched();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_ring_atoms_matched_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_ring_atoms_matched = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          set_has_max_ring_atoms_matched();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_ring_atoms_matched_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 heteroatoms_matched = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 280u, input, this->mutable_heteroatoms_matched())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heteroatoms_matched())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_heteroatoms_matched = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          set_has_min_heteroatoms_matched();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_heteroatoms_matched_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_heteroatoms_matched = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          set_has_max_heteroatoms_matched();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_heteroatoms_matched_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 heteroatoms_in_molecule = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 304u, input, this->mutable_heteroatoms_in_molecule())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 306 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heteroatoms_in_molecule())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_heteroatoms_in_molecule = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {
          set_has_min_heteroatoms_in_molecule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_heteroatoms_in_molecule_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_heteroatoms_in_molecule = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_max_heteroatoms_in_molecule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_heteroatoms_in_molecule_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 natoms = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 328u, input, this->mutable_natoms())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 330 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_natoms())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_natoms = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {
          set_has_min_natoms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_natoms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_natoms = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 344 & 0xFF */)) {
          set_has_max_natoms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_natoms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 nrings = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 352 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 352u, input, this->mutable_nrings())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 354 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_nrings())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_nrings = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 360 & 0xFF */)) {
          set_has_min_nrings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_nrings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_nrings = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 368 & 0xFF */)) {
          set_has_max_nrings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_nrings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ncon = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 376 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 376u, input, this->mutable_ncon())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 378 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ncon())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_ncon = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 384 & 0xFF */)) {
          set_has_min_ncon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_ncon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_ncon = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 392 & 0xFF */)) {
          set_has_max_ncon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_ncon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 fused_rings = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 400u, input, this->mutable_fused_rings())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fused_rings())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_fused_rings = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 408 & 0xFF */)) {
          set_has_min_fused_rings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_fused_rings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_fused_rings = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 416 & 0xFF */)) {
          set_has_max_fused_rings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_fused_rings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 strongly_fused_rings = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 424u, input, this->mutable_strongly_fused_rings())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 426 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_strongly_fused_rings())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_strongly_fused_rings = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 432 & 0xFF */)) {
          set_has_min_strongly_fused_rings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_strongly_fused_rings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_strongly_fused_rings = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 440 & 0xFF */)) {
          set_has_max_strongly_fused_rings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_strongly_fused_rings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 isolated_rings = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 448 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 448u, input, this->mutable_isolated_rings())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 450 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_isolated_rings())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_isolated_rings = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 456 & 0xFF */)) {
          set_has_min_isolated_rings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_isolated_rings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_isolated_rings = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 464 & 0xFF */)) {
          set_has_max_isolated_rings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_isolated_rings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 isolated_ring_objects = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 472 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 472u, input, this->mutable_isolated_ring_objects())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 474 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_isolated_ring_objects())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_isolated_ring_objects = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {
          set_has_min_isolated_ring_objects();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_isolated_ring_objects_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_isolated_ring_objects = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 488 & 0xFF */)) {
          set_has_max_isolated_ring_objects();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_isolated_ring_objects_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 aromatic_rings = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 496 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 496u, input, this->mutable_aromatic_rings())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 498 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_aromatic_rings())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_aromatic_rings = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 504 & 0xFF */)) {
          set_has_min_aromatic_rings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_aromatic_rings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_aromatic_rings = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 512 & 0xFF */)) {
          set_has_max_aromatic_rings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_aromatic_rings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 non_aromatic_rings = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 520 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 520u, input, this->mutable_non_aromatic_rings())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 522 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_non_aromatic_rings())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_non_aromatic_rings = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 528 & 0xFF */)) {
          set_has_min_non_aromatic_rings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_non_aromatic_rings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_non_aromatic_rings = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 536 & 0xFF */)) {
          set_has_max_non_aromatic_rings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_non_aromatic_rings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 distance_between_hits = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 544 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 544u, input, this->mutable_distance_between_hits())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 546 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_distance_between_hits())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_distance_between_hits = 69;
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 552 & 0xFF */)) {
          set_has_min_distance_between_hits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_distance_between_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_distance_between_hits = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 560 & 0xFF */)) {
          set_has_max_distance_between_hits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_distance_between_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 number_isotopic_atoms = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 568 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 568u, input, this->mutable_number_isotopic_atoms())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 570 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_number_isotopic_atoms())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_number_isotopic_atoms = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 576 & 0xFF */)) {
          set_has_min_number_isotopic_atoms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_number_isotopic_atoms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_number_isotopic_atoms = 73;
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 584 & 0xFF */)) {
          set_has_max_number_isotopic_atoms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_number_isotopic_atoms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 number_fragments = 74;
      case 74: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 592 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 592u, input, this->mutable_number_fragments())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 594 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_number_fragments())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_number_fragments = 75;
      case 75: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 600 & 0xFF */)) {
          set_has_min_number_fragments();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_number_fragments_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_number_fragments = 76;
      case 76: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 608 & 0xFF */)) {
          set_has_max_number_fragments();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_number_fragments_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 distance_between_root_atoms = 77;
      case 77: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 616 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 616u, input, this->mutable_distance_between_root_atoms())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 618 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_distance_between_root_atoms())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_distance_between_root_atoms = 78;
      case 78: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 624 & 0xFF */)) {
          set_has_min_distance_between_root_atoms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_distance_between_root_atoms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_distance_between_root_atoms = 79;
      case 79: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 632 & 0xFF */)) {
          set_has_max_distance_between_root_atoms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_distance_between_root_atoms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 atoms_in_spinach = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 640 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 640u, input, this->mutable_atoms_in_spinach())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 642 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_atoms_in_spinach())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_atoms_in_spinach = 81;
      case 81: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 648 & 0xFF */)) {
          set_has_min_atoms_in_spinach();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_atoms_in_spinach_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_atoms_in_spinach = 82;
      case 82: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 656 & 0xFF */)) {
          set_has_max_atoms_in_spinach();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_atoms_in_spinach_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 inter_ring_atoms = 83;
      case 83: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 664 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 664u, input, this->mutable_inter_ring_atoms())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 666 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_inter_ring_atoms())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_inter_ring_atoms = 84;
      case 84: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 672 & 0xFF */)) {
          set_has_min_inter_ring_atoms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_inter_ring_atoms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_inter_ring_atoms = 85;
      case 85: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 680 & 0xFF */)) {
          set_has_max_inter_ring_atoms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_inter_ring_atoms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 unmatched_atoms = 86;
      case 86: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 688 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 688u, input, this->mutable_unmatched_atoms())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 690 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unmatched_atoms())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_unmatched_atoms = 87;
      case 87: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 696 & 0xFF */)) {
          set_has_min_unmatched_atoms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_unmatched_atoms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_unmatched_atoms = 88;
      case 88: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 704 & 0xFF */)) {
          set_has_max_unmatched_atoms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_unmatched_atoms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 net_formal_charge = 89;
      case 89: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 712 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 712u, input, this->mutable_net_formal_charge())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 714 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_net_formal_charge())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min_net_formal_charge = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 720 & 0xFF */)) {
          set_has_min_net_formal_charge();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_net_formal_charge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_net_formal_charge = 91;
      case 91: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 728 & 0xFF */)) {
          set_has_max_net_formal_charge();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_net_formal_charge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_fraction_atoms_matched = 92;
      case 92: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(229u /* 741 & 0xFF */)) {
          set_has_min_fraction_atoms_matched();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_fraction_atoms_matched_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_fraction_atoms_matched = 93;
      case 93: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(237u /* 749 & 0xFF */)) {
          set_has_max_fraction_atoms_matched();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_fraction_atoms_matched_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstructureSearch.SubstructureEnvironment environment = 94;
      case 94: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 754 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_environment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstructureSearch.SubstructureEnvironment environment_no_match = 95;
      case 95: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 762 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_environment_no_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool environment_must_match_unmatched_atoms = 96;
      case 96: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 768 & 0xFF */)) {
          set_has_environment_must_match_unmatched_atoms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &environment_must_match_unmatched_atoms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool env_matches_can_share_attachment_points = 97;
      case 97: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 776 & 0xFF */)) {
          set_has_env_matches_can_share_attachment_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &env_matches_can_share_attachment_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstructureSearch.SubstructureRingSpecification ring_specification = 98;
      case 98: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 786 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ring_specification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstructureSearch.Operator ring_specification_logexp = 99;
      case 99: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 792 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SubstructureSearch::Operator_IsValid(value)) {
            add_ring_specification_logexp(static_cast< ::SubstructureSearch::Operator >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                99, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 794 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 99,
                 ::SubstructureSearch::Operator_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_ring_specification_logexp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstructureSearch.SubstructureRingSystemSpecification ring_system_specifier = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ring_system_specifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstructureSearch.Operator ring_system_specifier_logexp = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 808 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SubstructureSearch::Operator_IsValid(value)) {
            add_ring_system_specifier_logexp(static_cast< ::SubstructureSearch::Operator >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                101, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 101,
                 ::SubstructureSearch::Operator_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_ring_system_specifier_logexp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstructureSearch.ElementsNeeded element_hits_needed = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 818 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_element_hits_needed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstructureSearch.ElementsNeeded elements_needed = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 826 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_elements_needed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 aromatic_atoms = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 832 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 832u, input, this->mutable_aromatic_atoms())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 834 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_aromatic_atoms())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_aromatic_atoms = 105;
      case 105: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 840 & 0xFF */)) {
          set_has_min_aromatic_atoms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_aromatic_atoms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_aromatic_atoms = 106;
      case 106: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 848 & 0xFF */)) {
          set_has_max_aromatic_atoms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_aromatic_atoms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool unique_embeddings_only = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 880 & 0xFF */)) {
          set_has_unique_embeddings_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unique_embeddings_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 heteroatoms = 112;
      case 112: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 896 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 896u, input, this->mutable_heteroatoms())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 898 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heteroatoms())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool respect_initial_atom_numbering = 113;
      case 113: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 904 & 0xFF */)) {
          set_has_respect_initial_atom_numbering();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &respect_initial_atom_numbering_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool compress_embeddings = 114;
      case 114: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 912 & 0xFF */)) {
          set_has_compress_embeddings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compress_embeddings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool environments_can_share_attachment_points = 115;
      case 115: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 920 & 0xFF */)) {
          set_has_environments_can_share_attachment_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &environments_can_share_attachment_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstructureSearch.SubstructureAtom query_atom = 116;
      case 116: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 930 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_query_atom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstructureSearch.SubstructureChiralCenter chiral_centre = 117;
      case 117: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 938 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chiral_centre()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string atom_type = 119;
      case 119: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 954 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_atom_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->atom_type().data(), static_cast<int>(this->atom_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.SingleSubstructureQuery.atom_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstructureSearch.SingleSubstructureQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstructureSearch.SingleSubstructureQuery)
  return false;
#undef DO_
}

void SingleSubstructureQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstructureSearch.SingleSubstructureQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string label = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SingleSubstructureQuery.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->label(), output);
  }

  // optional string comment = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SingleSubstructureQuery.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // optional bool one_embedding_per_start_atom = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->one_embedding_per_start_atom(), output);
  }

  // optional uint32 normalise_rc_per_hits_needed = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->normalise_rc_per_hits_needed(), output);
  }

  // optional uint32 subtract_from_rc = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->subtract_from_rc(), output);
  }

  // optional uint32 max_matches_to_find = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->max_matches_to_find(), output);
  }

  // optional bool save_matched_atoms = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->save_matched_atoms(), output);
  }

  // optional bool ncon_ignore_singly_connected = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->ncon_ignore_singly_connected(), output);
  }

  // optional bool perceive_symmetric_equivalents = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->perceive_symmetric_equivalents(), output);
  }

  // optional uint32 implicit_ring_condition = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->implicit_ring_condition(), output);
  }

  // optional bool all_hits_in_same_fragment = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->all_hits_in_same_fragment(), output);
  }

  // optional bool only_match_largest_fragment = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->only_match_largest_fragment(), output);
  }

  // optional bool embeddings_do_not_overlap = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->embeddings_do_not_overlap(), output);
  }

  // optional bool sort_by_preference_value = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->sort_by_preference_value(), output);
  }

  switch (smiles_or_smarts_case()) {
    case kSmiles:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->smiles().data(), static_cast<int>(this->smiles().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "SubstructureSearch.SingleSubstructureQuery.smiles");
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        17, this->smiles(), output);
      break;
    case kSmarts:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->smarts().data(), static_cast<int>(this->smarts().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "SubstructureSearch.SingleSubstructureQuery.smarts");
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        18, this->smarts(), output);
      break;
    default: ;
  }
  // repeated double numeric_value = 19;
  for (int i = 0, n = this->numeric_value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      19, this->numeric_value(i), output);
  }

  // repeated .SubstructureSearch.NoMatchedAtomsBetween no_matched_atoms_between = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->no_matched_atoms_between_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20,
      this->no_matched_atoms_between(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool no_matched_atoms_between_exhaustive = 21;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->no_matched_atoms_between_exhaustive(), output);
  }

  // repeated .SubstructureSearch.LinkAtoms link_atoms = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->link_atoms_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22,
      this->link_atoms(static_cast<int>(i)),
      output);
  }

  // optional bool fail_if_embeddings_too_close = 23;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->fail_if_embeddings_too_close(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 distance_between_hits_ncheck = 24;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->distance_between_hits_ncheck(), output);
  }

  // optional string sort_matches = 25;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sort_matches().data(), static_cast<int>(this->sort_matches().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SingleSubstructureQuery.sort_matches");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->sort_matches(), output);
  }

  // repeated uint32 attached_heteroatom_count = 26;
  for (int i = 0, n = this->attached_heteroatom_count_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      26, this->attached_heteroatom_count(i), output);
  }

  // optional uint32 min_attached_heteroatom_count = 27;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->min_attached_heteroatom_count(), output);
  }

  // optional uint32 max_attached_heteroatom_count = 28;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->max_attached_heteroatom_count(), output);
  }

  // repeated uint32 hits_needed = 29;
  for (int i = 0, n = this->hits_needed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      29, this->hits_needed(i), output);
  }

  // optional uint32 min_hits_needed = 30;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->min_hits_needed(), output);
  }

  // optional uint32 max_hits_needed = 31;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->max_hits_needed(), output);
  }

  // repeated uint32 ring_atoms_matched = 32;
  for (int i = 0, n = this->ring_atoms_matched_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      32, this->ring_atoms_matched(i), output);
  }

  // optional uint32 min_ring_atoms_matched = 33;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->min_ring_atoms_matched(), output);
  }

  // optional uint32 max_ring_atoms_matched = 34;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->max_ring_atoms_matched(), output);
  }

  // repeated uint32 heteroatoms_matched = 35;
  for (int i = 0, n = this->heteroatoms_matched_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      35, this->heteroatoms_matched(i), output);
  }

  // optional uint32 min_heteroatoms_matched = 36;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->min_heteroatoms_matched(), output);
  }

  // optional uint32 max_heteroatoms_matched = 37;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->max_heteroatoms_matched(), output);
  }

  // repeated uint32 heteroatoms_in_molecule = 38;
  for (int i = 0, n = this->heteroatoms_in_molecule_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      38, this->heteroatoms_in_molecule(i), output);
  }

  // optional uint32 min_heteroatoms_in_molecule = 39;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->min_heteroatoms_in_molecule(), output);
  }

  // optional uint32 max_heteroatoms_in_molecule = 40;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->max_heteroatoms_in_molecule(), output);
  }

  // repeated uint32 natoms = 41;
  for (int i = 0, n = this->natoms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      41, this->natoms(i), output);
  }

  // optional uint32 min_natoms = 42;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->min_natoms(), output);
  }

  // optional uint32 max_natoms = 43;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->max_natoms(), output);
  }

  // repeated uint32 nrings = 44;
  for (int i = 0, n = this->nrings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      44, this->nrings(i), output);
  }

  // optional uint32 min_nrings = 45;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->min_nrings(), output);
  }

  // optional uint32 max_nrings = 46;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->max_nrings(), output);
  }

  // repeated uint32 ncon = 47;
  for (int i = 0, n = this->ncon_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      47, this->ncon(i), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 min_ncon = 48;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->min_ncon(), output);
  }

  // optional uint32 max_ncon = 49;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->max_ncon(), output);
  }

  // repeated uint32 fused_rings = 50;
  for (int i = 0, n = this->fused_rings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      50, this->fused_rings(i), output);
  }

  // optional uint32 min_fused_rings = 51;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->min_fused_rings(), output);
  }

  // optional uint32 max_fused_rings = 52;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->max_fused_rings(), output);
  }

  // repeated uint32 strongly_fused_rings = 53;
  for (int i = 0, n = this->strongly_fused_rings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      53, this->strongly_fused_rings(i), output);
  }

  // optional uint32 min_strongly_fused_rings = 54;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->min_strongly_fused_rings(), output);
  }

  // optional uint32 max_strongly_fused_rings = 55;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->max_strongly_fused_rings(), output);
  }

  // repeated uint32 isolated_rings = 56;
  for (int i = 0, n = this->isolated_rings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      56, this->isolated_rings(i), output);
  }

  // optional uint32 min_isolated_rings = 57;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(57, this->min_isolated_rings(), output);
  }

  // optional uint32 max_isolated_rings = 58;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->max_isolated_rings(), output);
  }

  // repeated uint32 isolated_ring_objects = 59;
  for (int i = 0, n = this->isolated_ring_objects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      59, this->isolated_ring_objects(i), output);
  }

  // optional uint32 min_isolated_ring_objects = 60;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->min_isolated_ring_objects(), output);
  }

  // optional uint32 max_isolated_ring_objects = 61;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->max_isolated_ring_objects(), output);
  }

  // repeated uint32 aromatic_rings = 62;
  for (int i = 0, n = this->aromatic_rings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      62, this->aromatic_rings(i), output);
  }

  // optional uint32 min_aromatic_rings = 63;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(63, this->min_aromatic_rings(), output);
  }

  // optional uint32 max_aromatic_rings = 64;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(64, this->max_aromatic_rings(), output);
  }

  // repeated uint32 non_aromatic_rings = 65;
  for (int i = 0, n = this->non_aromatic_rings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      65, this->non_aromatic_rings(i), output);
  }

  // optional uint32 min_non_aromatic_rings = 66;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(66, this->min_non_aromatic_rings(), output);
  }

  // optional uint32 max_non_aromatic_rings = 67;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(67, this->max_non_aromatic_rings(), output);
  }

  // repeated uint32 distance_between_hits = 68;
  for (int i = 0, n = this->distance_between_hits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      68, this->distance_between_hits(i), output);
  }

  // optional uint32 min_distance_between_hits = 69;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(69, this->min_distance_between_hits(), output);
  }

  // optional uint32 max_distance_between_hits = 70;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->max_distance_between_hits(), output);
  }

  // repeated uint32 number_isotopic_atoms = 71;
  for (int i = 0, n = this->number_isotopic_atoms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      71, this->number_isotopic_atoms(i), output);
  }

  // optional uint32 min_number_isotopic_atoms = 72;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(72, this->min_number_isotopic_atoms(), output);
  }

  // optional uint32 max_number_isotopic_atoms = 73;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(73, this->max_number_isotopic_atoms(), output);
  }

  // repeated uint32 number_fragments = 74;
  for (int i = 0, n = this->number_fragments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      74, this->number_fragments(i), output);
  }

  // optional uint32 min_number_fragments = 75;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(75, this->min_number_fragments(), output);
  }

  // optional uint32 max_number_fragments = 76;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(76, this->max_number_fragments(), output);
  }

  // repeated uint32 distance_between_root_atoms = 77;
  for (int i = 0, n = this->distance_between_root_atoms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      77, this->distance_between_root_atoms(i), output);
  }

  // optional uint32 min_distance_between_root_atoms = 78;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(78, this->min_distance_between_root_atoms(), output);
  }

  // optional uint32 max_distance_between_root_atoms = 79;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(79, this->max_distance_between_root_atoms(), output);
  }

  // repeated uint32 atoms_in_spinach = 80;
  for (int i = 0, n = this->atoms_in_spinach_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      80, this->atoms_in_spinach(i), output);
  }

  // optional uint32 min_atoms_in_spinach = 81;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(81, this->min_atoms_in_spinach(), output);
  }

  // optional uint32 max_atoms_in_spinach = 82;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(82, this->max_atoms_in_spinach(), output);
  }

  // repeated uint32 inter_ring_atoms = 83;
  for (int i = 0, n = this->inter_ring_atoms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      83, this->inter_ring_atoms(i), output);
  }

  // optional uint32 min_inter_ring_atoms = 84;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(84, this->min_inter_ring_atoms(), output);
  }

  // optional uint32 max_inter_ring_atoms = 85;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(85, this->max_inter_ring_atoms(), output);
  }

  // repeated uint32 unmatched_atoms = 86;
  for (int i = 0, n = this->unmatched_atoms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      86, this->unmatched_atoms(i), output);
  }

  // optional uint32 min_unmatched_atoms = 87;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(87, this->min_unmatched_atoms(), output);
  }

  // optional uint32 max_unmatched_atoms = 88;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(88, this->max_unmatched_atoms(), output);
  }

  // repeated int32 net_formal_charge = 89;
  for (int i = 0, n = this->net_formal_charge_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      89, this->net_formal_charge(i), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 min_net_formal_charge = 90;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(90, this->min_net_formal_charge(), output);
  }

  // optional int32 max_net_formal_charge = 91;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(91, this->max_net_formal_charge(), output);
  }

  // optional float min_fraction_atoms_matched = 92;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(92, this->min_fraction_atoms_matched(), output);
  }

  // optional float max_fraction_atoms_matched = 93;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(93, this->max_fraction_atoms_matched(), output);
  }

  // repeated .SubstructureSearch.SubstructureEnvironment environment = 94;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->environment_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      94,
      this->environment(static_cast<int>(i)),
      output);
  }

  // repeated .SubstructureSearch.SubstructureEnvironment environment_no_match = 95;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->environment_no_match_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      95,
      this->environment_no_match(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool environment_must_match_unmatched_atoms = 96;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(96, this->environment_must_match_unmatched_atoms(), output);
  }

  // optional bool env_matches_can_share_attachment_points = 97;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(97, this->env_matches_can_share_attachment_points(), output);
  }

  // repeated .SubstructureSearch.SubstructureRingSpecification ring_specification = 98;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ring_specification_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      98,
      this->ring_specification(static_cast<int>(i)),
      output);
  }

  // repeated .SubstructureSearch.Operator ring_specification_logexp = 99;
  for (int i = 0, n = this->ring_specification_logexp_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      99, this->ring_specification_logexp(i), output);
  }

  // repeated .SubstructureSearch.SubstructureRingSystemSpecification ring_system_specifier = 100;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ring_system_specifier_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100,
      this->ring_system_specifier(static_cast<int>(i)),
      output);
  }

  // repeated .SubstructureSearch.Operator ring_system_specifier_logexp = 101;
  for (int i = 0, n = this->ring_system_specifier_logexp_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      101, this->ring_system_specifier_logexp(i), output);
  }

  // repeated .SubstructureSearch.ElementsNeeded element_hits_needed = 102;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->element_hits_needed_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102,
      this->element_hits_needed(static_cast<int>(i)),
      output);
  }

  // repeated .SubstructureSearch.ElementsNeeded elements_needed = 103;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->elements_needed_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103,
      this->elements_needed(static_cast<int>(i)),
      output);
  }

  // repeated uint32 aromatic_atoms = 104;
  for (int i = 0, n = this->aromatic_atoms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      104, this->aromatic_atoms(i), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 min_aromatic_atoms = 105;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(105, this->min_aromatic_atoms(), output);
  }

  // optional uint32 max_aromatic_atoms = 106;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(106, this->max_aromatic_atoms(), output);
  }

  // optional bool unique_embeddings_only = 110;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(110, this->unique_embeddings_only(), output);
  }

  // repeated uint32 heteroatoms = 112;
  for (int i = 0, n = this->heteroatoms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      112, this->heteroatoms(i), output);
  }

  // optional bool respect_initial_atom_numbering = 113;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(113, this->respect_initial_atom_numbering(), output);
  }

  // optional bool compress_embeddings = 114;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(114, this->compress_embeddings(), output);
  }

  // optional bool environments_can_share_attachment_points = 115;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(115, this->environments_can_share_attachment_points(), output);
  }

  // repeated .SubstructureSearch.SubstructureAtom query_atom = 116;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_atom_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      116,
      this->query_atom(static_cast<int>(i)),
      output);
  }

  // repeated .SubstructureSearch.SubstructureChiralCenter chiral_centre = 117;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chiral_centre_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      117,
      this->chiral_centre(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string atom_type = 119;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->atom_type().data(), static_cast<int>(this->atom_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SingleSubstructureQuery.atom_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      119, this->atom_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstructureSearch.SingleSubstructureQuery)
}

::google::protobuf::uint8* SingleSubstructureQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SingleSubstructureQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string label = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SingleSubstructureQuery.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }

  // optional string comment = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SingleSubstructureQuery.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // optional bool one_embedding_per_start_atom = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->one_embedding_per_start_atom(), target);
  }

  // optional uint32 normalise_rc_per_hits_needed = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->normalise_rc_per_hits_needed(), target);
  }

  // optional uint32 subtract_from_rc = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->subtract_from_rc(), target);
  }

  // optional uint32 max_matches_to_find = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->max_matches_to_find(), target);
  }

  // optional bool save_matched_atoms = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->save_matched_atoms(), target);
  }

  // optional bool ncon_ignore_singly_connected = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->ncon_ignore_singly_connected(), target);
  }

  // optional bool perceive_symmetric_equivalents = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->perceive_symmetric_equivalents(), target);
  }

  // optional uint32 implicit_ring_condition = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->implicit_ring_condition(), target);
  }

  // optional bool all_hits_in_same_fragment = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->all_hits_in_same_fragment(), target);
  }

  // optional bool only_match_largest_fragment = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->only_match_largest_fragment(), target);
  }

  // optional bool embeddings_do_not_overlap = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->embeddings_do_not_overlap(), target);
  }

  // optional bool sort_by_preference_value = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->sort_by_preference_value(), target);
  }

  switch (smiles_or_smarts_case()) {
    case kSmiles:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->smiles().data(), static_cast<int>(this->smiles().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "SubstructureSearch.SingleSubstructureQuery.smiles");
      target =
        ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
          17, this->smiles(), target);
      break;
    case kSmarts:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->smarts().data(), static_cast<int>(this->smarts().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "SubstructureSearch.SingleSubstructureQuery.smarts");
      target =
        ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
          18, this->smarts(), target);
      break;
    default: ;
  }
  // repeated double numeric_value = 19;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(19, this->numeric_value_, target);

  // repeated .SubstructureSearch.NoMatchedAtomsBetween no_matched_atoms_between = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->no_matched_atoms_between_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->no_matched_atoms_between(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool no_matched_atoms_between_exhaustive = 21;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->no_matched_atoms_between_exhaustive(), target);
  }

  // repeated .SubstructureSearch.LinkAtoms link_atoms = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->link_atoms_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->link_atoms(static_cast<int>(i)), deterministic, target);
  }

  // optional bool fail_if_embeddings_too_close = 23;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->fail_if_embeddings_too_close(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 distance_between_hits_ncheck = 24;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->distance_between_hits_ncheck(), target);
  }

  // optional string sort_matches = 25;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sort_matches().data(), static_cast<int>(this->sort_matches().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SingleSubstructureQuery.sort_matches");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->sort_matches(), target);
  }

  // repeated uint32 attached_heteroatom_count = 26;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(26, this->attached_heteroatom_count_, target);

  // optional uint32 min_attached_heteroatom_count = 27;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->min_attached_heteroatom_count(), target);
  }

  // optional uint32 max_attached_heteroatom_count = 28;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->max_attached_heteroatom_count(), target);
  }

  // repeated uint32 hits_needed = 29;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(29, this->hits_needed_, target);

  // optional uint32 min_hits_needed = 30;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->min_hits_needed(), target);
  }

  // optional uint32 max_hits_needed = 31;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->max_hits_needed(), target);
  }

  // repeated uint32 ring_atoms_matched = 32;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(32, this->ring_atoms_matched_, target);

  // optional uint32 min_ring_atoms_matched = 33;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->min_ring_atoms_matched(), target);
  }

  // optional uint32 max_ring_atoms_matched = 34;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->max_ring_atoms_matched(), target);
  }

  // repeated uint32 heteroatoms_matched = 35;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(35, this->heteroatoms_matched_, target);

  // optional uint32 min_heteroatoms_matched = 36;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->min_heteroatoms_matched(), target);
  }

  // optional uint32 max_heteroatoms_matched = 37;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->max_heteroatoms_matched(), target);
  }

  // repeated uint32 heteroatoms_in_molecule = 38;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(38, this->heteroatoms_in_molecule_, target);

  // optional uint32 min_heteroatoms_in_molecule = 39;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->min_heteroatoms_in_molecule(), target);
  }

  // optional uint32 max_heteroatoms_in_molecule = 40;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->max_heteroatoms_in_molecule(), target);
  }

  // repeated uint32 natoms = 41;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(41, this->natoms_, target);

  // optional uint32 min_natoms = 42;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->min_natoms(), target);
  }

  // optional uint32 max_natoms = 43;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->max_natoms(), target);
  }

  // repeated uint32 nrings = 44;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(44, this->nrings_, target);

  // optional uint32 min_nrings = 45;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->min_nrings(), target);
  }

  // optional uint32 max_nrings = 46;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->max_nrings(), target);
  }

  // repeated uint32 ncon = 47;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(47, this->ncon_, target);

  cached_has_bits = _has_bits_[1];
  // optional uint32 min_ncon = 48;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->min_ncon(), target);
  }

  // optional uint32 max_ncon = 49;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->max_ncon(), target);
  }

  // repeated uint32 fused_rings = 50;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(50, this->fused_rings_, target);

  // optional uint32 min_fused_rings = 51;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->min_fused_rings(), target);
  }

  // optional uint32 max_fused_rings = 52;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->max_fused_rings(), target);
  }

  // repeated uint32 strongly_fused_rings = 53;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(53, this->strongly_fused_rings_, target);

  // optional uint32 min_strongly_fused_rings = 54;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->min_strongly_fused_rings(), target);
  }

  // optional uint32 max_strongly_fused_rings = 55;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->max_strongly_fused_rings(), target);
  }

  // repeated uint32 isolated_rings = 56;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(56, this->isolated_rings_, target);

  // optional uint32 min_isolated_rings = 57;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(57, this->min_isolated_rings(), target);
  }

  // optional uint32 max_isolated_rings = 58;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->max_isolated_rings(), target);
  }

  // repeated uint32 isolated_ring_objects = 59;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(59, this->isolated_ring_objects_, target);

  // optional uint32 min_isolated_ring_objects = 60;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->min_isolated_ring_objects(), target);
  }

  // optional uint32 max_isolated_ring_objects = 61;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->max_isolated_ring_objects(), target);
  }

  // repeated uint32 aromatic_rings = 62;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(62, this->aromatic_rings_, target);

  // optional uint32 min_aromatic_rings = 63;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(63, this->min_aromatic_rings(), target);
  }

  // optional uint32 max_aromatic_rings = 64;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(64, this->max_aromatic_rings(), target);
  }

  // repeated uint32 non_aromatic_rings = 65;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(65, this->non_aromatic_rings_, target);

  // optional uint32 min_non_aromatic_rings = 66;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(66, this->min_non_aromatic_rings(), target);
  }

  // optional uint32 max_non_aromatic_rings = 67;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(67, this->max_non_aromatic_rings(), target);
  }

  // repeated uint32 distance_between_hits = 68;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(68, this->distance_between_hits_, target);

  // optional uint32 min_distance_between_hits = 69;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(69, this->min_distance_between_hits(), target);
  }

  // optional uint32 max_distance_between_hits = 70;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->max_distance_between_hits(), target);
  }

  // repeated uint32 number_isotopic_atoms = 71;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(71, this->number_isotopic_atoms_, target);

  // optional uint32 min_number_isotopic_atoms = 72;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(72, this->min_number_isotopic_atoms(), target);
  }

  // optional uint32 max_number_isotopic_atoms = 73;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(73, this->max_number_isotopic_atoms(), target);
  }

  // repeated uint32 number_fragments = 74;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(74, this->number_fragments_, target);

  // optional uint32 min_number_fragments = 75;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(75, this->min_number_fragments(), target);
  }

  // optional uint32 max_number_fragments = 76;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(76, this->max_number_fragments(), target);
  }

  // repeated uint32 distance_between_root_atoms = 77;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(77, this->distance_between_root_atoms_, target);

  // optional uint32 min_distance_between_root_atoms = 78;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(78, this->min_distance_between_root_atoms(), target);
  }

  // optional uint32 max_distance_between_root_atoms = 79;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(79, this->max_distance_between_root_atoms(), target);
  }

  // repeated uint32 atoms_in_spinach = 80;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(80, this->atoms_in_spinach_, target);

  // optional uint32 min_atoms_in_spinach = 81;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(81, this->min_atoms_in_spinach(), target);
  }

  // optional uint32 max_atoms_in_spinach = 82;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(82, this->max_atoms_in_spinach(), target);
  }

  // repeated uint32 inter_ring_atoms = 83;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(83, this->inter_ring_atoms_, target);

  // optional uint32 min_inter_ring_atoms = 84;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(84, this->min_inter_ring_atoms(), target);
  }

  // optional uint32 max_inter_ring_atoms = 85;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(85, this->max_inter_ring_atoms(), target);
  }

  // repeated uint32 unmatched_atoms = 86;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(86, this->unmatched_atoms_, target);

  // optional uint32 min_unmatched_atoms = 87;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(87, this->min_unmatched_atoms(), target);
  }

  // optional uint32 max_unmatched_atoms = 88;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(88, this->max_unmatched_atoms(), target);
  }

  // repeated int32 net_formal_charge = 89;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(89, this->net_formal_charge_, target);

  cached_has_bits = _has_bits_[2];
  // optional int32 min_net_formal_charge = 90;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(90, this->min_net_formal_charge(), target);
  }

  // optional int32 max_net_formal_charge = 91;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(91, this->max_net_formal_charge(), target);
  }

  // optional float min_fraction_atoms_matched = 92;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(92, this->min_fraction_atoms_matched(), target);
  }

  // optional float max_fraction_atoms_matched = 93;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(93, this->max_fraction_atoms_matched(), target);
  }

  // repeated .SubstructureSearch.SubstructureEnvironment environment = 94;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->environment_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        94, this->environment(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SubstructureSearch.SubstructureEnvironment environment_no_match = 95;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->environment_no_match_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        95, this->environment_no_match(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool environment_must_match_unmatched_atoms = 96;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(96, this->environment_must_match_unmatched_atoms(), target);
  }

  // optional bool env_matches_can_share_attachment_points = 97;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(97, this->env_matches_can_share_attachment_points(), target);
  }

  // repeated .SubstructureSearch.SubstructureRingSpecification ring_specification = 98;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ring_specification_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        98, this->ring_specification(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SubstructureSearch.Operator ring_specification_logexp = 99;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    99, this->ring_specification_logexp_, target);

  // repeated .SubstructureSearch.SubstructureRingSystemSpecification ring_system_specifier = 100;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ring_system_specifier_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, this->ring_system_specifier(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SubstructureSearch.Operator ring_system_specifier_logexp = 101;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    101, this->ring_system_specifier_logexp_, target);

  // repeated .SubstructureSearch.ElementsNeeded element_hits_needed = 102;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->element_hits_needed_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        102, this->element_hits_needed(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SubstructureSearch.ElementsNeeded elements_needed = 103;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->elements_needed_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        103, this->elements_needed(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 aromatic_atoms = 104;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(104, this->aromatic_atoms_, target);

  cached_has_bits = _has_bits_[2];
  // optional uint32 min_aromatic_atoms = 105;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(105, this->min_aromatic_atoms(), target);
  }

  // optional uint32 max_aromatic_atoms = 106;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(106, this->max_aromatic_atoms(), target);
  }

  // optional bool unique_embeddings_only = 110;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(110, this->unique_embeddings_only(), target);
  }

  // repeated uint32 heteroatoms = 112;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(112, this->heteroatoms_, target);

  // optional bool respect_initial_atom_numbering = 113;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(113, this->respect_initial_atom_numbering(), target);
  }

  // optional bool compress_embeddings = 114;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(114, this->compress_embeddings(), target);
  }

  // optional bool environments_can_share_attachment_points = 115;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(115, this->environments_can_share_attachment_points(), target);
  }

  // repeated .SubstructureSearch.SubstructureAtom query_atom = 116;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_atom_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        116, this->query_atom(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SubstructureSearch.SubstructureChiralCenter chiral_centre = 117;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chiral_centre_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        117, this->chiral_centre(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string atom_type = 119;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->atom_type().data(), static_cast<int>(this->atom_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SingleSubstructureQuery.atom_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        119, this->atom_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SingleSubstructureQuery)
  return target;
}

size_t SingleSubstructureQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SingleSubstructureQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated double numeric_value = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->numeric_value_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->numeric_value_size());
    total_size += data_size;
  }

  // repeated .SubstructureSearch.NoMatchedAtomsBetween no_matched_atoms_between = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->no_matched_atoms_between_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->no_matched_atoms_between(static_cast<int>(i)));
    }
  }

  // repeated .SubstructureSearch.LinkAtoms link_atoms = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->link_atoms_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->link_atoms(static_cast<int>(i)));
    }
  }

  // repeated uint32 attached_heteroatom_count = 26;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->attached_heteroatom_count_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->attached_heteroatom_count_size());
    total_size += data_size;
  }

  // repeated uint32 hits_needed = 29;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->hits_needed_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->hits_needed_size());
    total_size += data_size;
  }

  // repeated uint32 ring_atoms_matched = 32;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ring_atoms_matched_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->ring_atoms_matched_size());
    total_size += data_size;
  }

  // repeated uint32 heteroatoms_matched = 35;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->heteroatoms_matched_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->heteroatoms_matched_size());
    total_size += data_size;
  }

  // repeated uint32 heteroatoms_in_molecule = 38;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->heteroatoms_in_molecule_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->heteroatoms_in_molecule_size());
    total_size += data_size;
  }

  // repeated uint32 natoms = 41;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->natoms_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->natoms_size());
    total_size += data_size;
  }

  // repeated uint32 nrings = 44;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->nrings_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->nrings_size());
    total_size += data_size;
  }

  // repeated uint32 ncon = 47;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ncon_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->ncon_size());
    total_size += data_size;
  }

  // repeated uint32 fused_rings = 50;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->fused_rings_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->fused_rings_size());
    total_size += data_size;
  }

  // repeated uint32 strongly_fused_rings = 53;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->strongly_fused_rings_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->strongly_fused_rings_size());
    total_size += data_size;
  }

  // repeated uint32 isolated_rings = 56;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->isolated_rings_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->isolated_rings_size());
    total_size += data_size;
  }

  // repeated uint32 isolated_ring_objects = 59;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->isolated_ring_objects_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->isolated_ring_objects_size());
    total_size += data_size;
  }

  // repeated uint32 aromatic_rings = 62;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->aromatic_rings_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->aromatic_rings_size());
    total_size += data_size;
  }

  // repeated uint32 non_aromatic_rings = 65;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->non_aromatic_rings_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->non_aromatic_rings_size());
    total_size += data_size;
  }

  // repeated uint32 distance_between_hits = 68;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->distance_between_hits_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->distance_between_hits_size());
    total_size += data_size;
  }

  // repeated uint32 number_isotopic_atoms = 71;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->number_isotopic_atoms_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->number_isotopic_atoms_size());
    total_size += data_size;
  }

  // repeated uint32 number_fragments = 74;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->number_fragments_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->number_fragments_size());
    total_size += data_size;
  }

  // repeated uint32 distance_between_root_atoms = 77;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->distance_between_root_atoms_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->distance_between_root_atoms_size());
    total_size += data_size;
  }

  // repeated uint32 atoms_in_spinach = 80;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->atoms_in_spinach_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->atoms_in_spinach_size());
    total_size += data_size;
  }

  // repeated uint32 inter_ring_atoms = 83;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->inter_ring_atoms_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->inter_ring_atoms_size());
    total_size += data_size;
  }

  // repeated uint32 unmatched_atoms = 86;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->unmatched_atoms_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->unmatched_atoms_size());
    total_size += data_size;
  }

  // repeated int32 net_formal_charge = 89;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->net_formal_charge_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->net_formal_charge_size());
    total_size += data_size;
  }

  // repeated .SubstructureSearch.SubstructureEnvironment environment = 94;
  {
    unsigned int count = static_cast<unsigned int>(this->environment_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->environment(static_cast<int>(i)));
    }
  }

  // repeated .SubstructureSearch.SubstructureEnvironment environment_no_match = 95;
  {
    unsigned int count = static_cast<unsigned int>(this->environment_no_match_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->environment_no_match(static_cast<int>(i)));
    }
  }

  // repeated .SubstructureSearch.SubstructureRingSpecification ring_specification = 98;
  {
    unsigned int count = static_cast<unsigned int>(this->ring_specification_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ring_specification(static_cast<int>(i)));
    }
  }

  // repeated .SubstructureSearch.Operator ring_specification_logexp = 99;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->ring_specification_logexp_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->ring_specification_logexp(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .SubstructureSearch.SubstructureRingSystemSpecification ring_system_specifier = 100;
  {
    unsigned int count = static_cast<unsigned int>(this->ring_system_specifier_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ring_system_specifier(static_cast<int>(i)));
    }
  }

  // repeated .SubstructureSearch.Operator ring_system_specifier_logexp = 101;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->ring_system_specifier_logexp_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->ring_system_specifier_logexp(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .SubstructureSearch.ElementsNeeded element_hits_needed = 102;
  {
    unsigned int count = static_cast<unsigned int>(this->element_hits_needed_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->element_hits_needed(static_cast<int>(i)));
    }
  }

  // repeated .SubstructureSearch.ElementsNeeded elements_needed = 103;
  {
    unsigned int count = static_cast<unsigned int>(this->elements_needed_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->elements_needed(static_cast<int>(i)));
    }
  }

  // repeated uint32 aromatic_atoms = 104;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->aromatic_atoms_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->aromatic_atoms_size());
    total_size += data_size;
  }

  // repeated uint32 heteroatoms = 112;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->heteroatoms_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->heteroatoms_size());
    total_size += data_size;
  }

  // repeated .SubstructureSearch.SubstructureAtom query_atom = 116;
  {
    unsigned int count = static_cast<unsigned int>(this->query_atom_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->query_atom(static_cast<int>(i)));
    }
  }

  // repeated .SubstructureSearch.SubstructureChiralCenter chiral_centre = 117;
  {
    unsigned int count = static_cast<unsigned int>(this->chiral_centre_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chiral_centre(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional string comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string sort_matches = 25;
    if (has_sort_matches()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sort_matches());
    }

    // optional string atom_type = 119;
    if (has_atom_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->atom_type());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint32 normalise_rc_per_hits_needed = 5;
    if (has_normalise_rc_per_hits_needed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normalise_rc_per_hits_needed());
    }

    // optional uint32 subtract_from_rc = 6;
    if (has_subtract_from_rc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subtract_from_rc());
    }

    // optional uint32 max_matches_to_find = 8;
    if (has_max_matches_to_find()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_matches_to_find());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool one_embedding_per_start_atom = 4;
    if (has_one_embedding_per_start_atom()) {
      total_size += 1 + 1;
    }

    // optional bool save_matched_atoms = 9;
    if (has_save_matched_atoms()) {
      total_size += 1 + 1;
    }

    // optional bool ncon_ignore_singly_connected = 10;
    if (has_ncon_ignore_singly_connected()) {
      total_size += 1 + 1;
    }

    // optional bool perceive_symmetric_equivalents = 11;
    if (has_perceive_symmetric_equivalents()) {
      total_size += 1 + 1;
    }

    // optional uint32 implicit_ring_condition = 12;
    if (has_implicit_ring_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->implicit_ring_condition());
    }

    // optional bool all_hits_in_same_fragment = 13;
    if (has_all_hits_in_same_fragment()) {
      total_size += 1 + 1;
    }

    // optional bool only_match_largest_fragment = 14;
    if (has_only_match_largest_fragment()) {
      total_size += 1 + 1;
    }

    // optional bool embeddings_do_not_overlap = 15;
    if (has_embeddings_do_not_overlap()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool sort_by_preference_value = 16;
    if (has_sort_by_preference_value()) {
      total_size += 2 + 1;
    }

    // optional uint32 distance_between_hits_ncheck = 24;
    if (has_distance_between_hits_ncheck()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->distance_between_hits_ncheck());
    }

    // optional uint32 min_attached_heteroatom_count = 27;
    if (has_min_attached_heteroatom_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_attached_heteroatom_count());
    }

    // optional uint32 max_attached_heteroatom_count = 28;
    if (has_max_attached_heteroatom_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_attached_heteroatom_count());
    }

    // optional uint32 min_hits_needed = 30;
    if (has_min_hits_needed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_hits_needed());
    }

    // optional uint32 max_hits_needed = 31;
    if (has_max_hits_needed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_hits_needed());
    }

    // optional uint32 min_ring_atoms_matched = 33;
    if (has_min_ring_atoms_matched()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_ring_atoms_matched());
    }

    // optional uint32 max_ring_atoms_matched = 34;
    if (has_max_ring_atoms_matched()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_ring_atoms_matched());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 min_heteroatoms_matched = 36;
    if (has_min_heteroatoms_matched()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_heteroatoms_matched());
    }

    // optional uint32 max_heteroatoms_matched = 37;
    if (has_max_heteroatoms_matched()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_heteroatoms_matched());
    }

    // optional uint32 min_heteroatoms_in_molecule = 39;
    if (has_min_heteroatoms_in_molecule()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_heteroatoms_in_molecule());
    }

    // optional uint32 max_heteroatoms_in_molecule = 40;
    if (has_max_heteroatoms_in_molecule()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_heteroatoms_in_molecule());
    }

    // optional uint32 min_natoms = 42;
    if (has_min_natoms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_natoms());
    }

    // optional uint32 max_natoms = 43;
    if (has_max_natoms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_natoms());
    }

    // optional uint32 min_nrings = 45;
    if (has_min_nrings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_nrings());
    }

    // optional uint32 max_nrings = 46;
    if (has_max_nrings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_nrings());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional uint32 min_ncon = 48;
    if (has_min_ncon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_ncon());
    }

    // optional uint32 max_ncon = 49;
    if (has_max_ncon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_ncon());
    }

    // optional uint32 min_fused_rings = 51;
    if (has_min_fused_rings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_fused_rings());
    }

    // optional uint32 max_fused_rings = 52;
    if (has_max_fused_rings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_fused_rings());
    }

    // optional uint32 min_strongly_fused_rings = 54;
    if (has_min_strongly_fused_rings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_strongly_fused_rings());
    }

    // optional uint32 max_strongly_fused_rings = 55;
    if (has_max_strongly_fused_rings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_strongly_fused_rings());
    }

    // optional uint32 min_isolated_rings = 57;
    if (has_min_isolated_rings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_isolated_rings());
    }

    // optional uint32 max_isolated_rings = 58;
    if (has_max_isolated_rings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_isolated_rings());
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional bool no_matched_atoms_between_exhaustive = 21;
    if (has_no_matched_atoms_between_exhaustive()) {
      total_size += 2 + 1;
    }

    // optional bool fail_if_embeddings_too_close = 23;
    if (has_fail_if_embeddings_too_close()) {
      total_size += 2 + 1;
    }

    // optional bool environment_must_match_unmatched_atoms = 96;
    if (has_environment_must_match_unmatched_atoms()) {
      total_size += 2 + 1;
    }

    // optional bool env_matches_can_share_attachment_points = 97;
    if (has_env_matches_can_share_attachment_points()) {
      total_size += 2 + 1;
    }

    // optional uint32 min_isolated_ring_objects = 60;
    if (has_min_isolated_ring_objects()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_isolated_ring_objects());
    }

    // optional uint32 max_isolated_ring_objects = 61;
    if (has_max_isolated_ring_objects()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_isolated_ring_objects());
    }

    // optional uint32 min_aromatic_rings = 63;
    if (has_min_aromatic_rings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_aromatic_rings());
    }

    // optional uint32 max_aromatic_rings = 64;
    if (has_max_aromatic_rings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_aromatic_rings());
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional uint32 min_non_aromatic_rings = 66;
    if (has_min_non_aromatic_rings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_non_aromatic_rings());
    }

    // optional uint32 max_non_aromatic_rings = 67;
    if (has_max_non_aromatic_rings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_non_aromatic_rings());
    }

    // optional uint32 min_distance_between_hits = 69;
    if (has_min_distance_between_hits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_distance_between_hits());
    }

    // optional uint32 max_distance_between_hits = 70;
    if (has_max_distance_between_hits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_distance_between_hits());
    }

    // optional uint32 min_number_isotopic_atoms = 72;
    if (has_min_number_isotopic_atoms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_number_isotopic_atoms());
    }

    // optional uint32 max_number_isotopic_atoms = 73;
    if (has_max_number_isotopic_atoms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_number_isotopic_atoms());
    }

    // optional uint32 min_number_fragments = 75;
    if (has_min_number_fragments()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_number_fragments());
    }

    // optional uint32 max_number_fragments = 76;
    if (has_max_number_fragments()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_number_fragments());
    }

  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    // optional uint32 min_distance_between_root_atoms = 78;
    if (has_min_distance_between_root_atoms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_distance_between_root_atoms());
    }

    // optional uint32 max_distance_between_root_atoms = 79;
    if (has_max_distance_between_root_atoms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_distance_between_root_atoms());
    }

    // optional uint32 min_atoms_in_spinach = 81;
    if (has_min_atoms_in_spinach()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_atoms_in_spinach());
    }

    // optional uint32 max_atoms_in_spinach = 82;
    if (has_max_atoms_in_spinach()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_atoms_in_spinach());
    }

    // optional uint32 min_inter_ring_atoms = 84;
    if (has_min_inter_ring_atoms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_inter_ring_atoms());
    }

    // optional uint32 max_inter_ring_atoms = 85;
    if (has_max_inter_ring_atoms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_inter_ring_atoms());
    }

    // optional uint32 min_unmatched_atoms = 87;
    if (has_min_unmatched_atoms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_unmatched_atoms());
    }

    // optional uint32 max_unmatched_atoms = 88;
    if (has_max_unmatched_atoms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_unmatched_atoms());
    }

  }
  if (_has_bits_[64 / 32] & 255u) {
    // optional int32 min_net_formal_charge = 90;
    if (has_min_net_formal_charge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_net_formal_charge());
    }

    // optional int32 max_net_formal_charge = 91;
    if (has_max_net_formal_charge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_net_formal_charge());
    }

    // optional float min_fraction_atoms_matched = 92;
    if (has_min_fraction_atoms_matched()) {
      total_size += 2 + 4;
    }

    // optional float max_fraction_atoms_matched = 93;
    if (has_max_fraction_atoms_matched()) {
      total_size += 2 + 4;
    }

    // optional uint32 min_aromatic_atoms = 105;
    if (has_min_aromatic_atoms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_aromatic_atoms());
    }

    // optional uint32 max_aromatic_atoms = 106;
    if (has_max_aromatic_atoms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_aromatic_atoms());
    }

    // optional bool unique_embeddings_only = 110;
    if (has_unique_embeddings_only()) {
      total_size += 2 + 1;
    }

    // optional bool respect_initial_atom_numbering = 113;
    if (has_respect_initial_atom_numbering()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[72 / 32] & 768u) {
    // optional bool compress_embeddings = 114;
    if (has_compress_embeddings()) {
      total_size += 2 + 1;
    }

    // optional bool environments_can_share_attachment_points = 115;
    if (has_environments_can_share_attachment_points()) {
      total_size += 2 + 1;
    }

  }
  switch (smiles_or_smarts_case()) {
    // optional string smiles = 17;
    case kSmiles: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->smiles());
      break;
    }
    // optional string smarts = 18;
    case kSmarts: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->smarts());
      break;
    }
    case SMILES_OR_SMARTS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleSubstructureQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SingleSubstructureQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleSubstructureQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleSubstructureQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SingleSubstructureQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SingleSubstructureQuery)
    MergeFrom(*source);
  }
}

void SingleSubstructureQuery::MergeFrom(const SingleSubstructureQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SingleSubstructureQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  numeric_value_.MergeFrom(from.numeric_value_);
  no_matched_atoms_between_.MergeFrom(from.no_matched_atoms_between_);
  link_atoms_.MergeFrom(from.link_atoms_);
  attached_heteroatom_count_.MergeFrom(from.attached_heteroatom_count_);
  hits_needed_.MergeFrom(from.hits_needed_);
  ring_atoms_matched_.MergeFrom(from.ring_atoms_matched_);
  heteroatoms_matched_.MergeFrom(from.heteroatoms_matched_);
  heteroatoms_in_molecule_.MergeFrom(from.heteroatoms_in_molecule_);
  natoms_.MergeFrom(from.natoms_);
  nrings_.MergeFrom(from.nrings_);
  ncon_.MergeFrom(from.ncon_);
  fused_rings_.MergeFrom(from.fused_rings_);
  strongly_fused_rings_.MergeFrom(from.strongly_fused_rings_);
  isolated_rings_.MergeFrom(from.isolated_rings_);
  isolated_ring_objects_.MergeFrom(from.isolated_ring_objects_);
  aromatic_rings_.MergeFrom(from.aromatic_rings_);
  non_aromatic_rings_.MergeFrom(from.non_aromatic_rings_);
  distance_between_hits_.MergeFrom(from.distance_between_hits_);
  number_isotopic_atoms_.MergeFrom(from.number_isotopic_atoms_);
  number_fragments_.MergeFrom(from.number_fragments_);
  distance_between_root_atoms_.MergeFrom(from.distance_between_root_atoms_);
  atoms_in_spinach_.MergeFrom(from.atoms_in_spinach_);
  inter_ring_atoms_.MergeFrom(from.inter_ring_atoms_);
  unmatched_atoms_.MergeFrom(from.unmatched_atoms_);
  net_formal_charge_.MergeFrom(from.net_formal_charge_);
  environment_.MergeFrom(from.environment_);
  environment_no_match_.MergeFrom(from.environment_no_match_);
  ring_specification_.MergeFrom(from.ring_specification_);
  ring_specification_logexp_.MergeFrom(from.ring_specification_logexp_);
  ring_system_specifier_.MergeFrom(from.ring_system_specifier_);
  ring_system_specifier_logexp_.MergeFrom(from.ring_system_specifier_logexp_);
  element_hits_needed_.MergeFrom(from.element_hits_needed_);
  elements_needed_.MergeFrom(from.elements_needed_);
  aromatic_atoms_.MergeFrom(from.aromatic_atoms_);
  heteroatoms_.MergeFrom(from.heteroatoms_);
  query_atom_.MergeFrom(from.query_atom_);
  chiral_centre_.MergeFrom(from.chiral_centre_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_comment();
      comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_sort_matches();
      sort_matches_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sort_matches_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_atom_type();
      atom_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.atom_type_);
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      normalise_rc_per_hits_needed_ = from.normalise_rc_per_hits_needed_;
    }
    if (cached_has_bits & 0x00000040u) {
      subtract_from_rc_ = from.subtract_from_rc_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_matches_to_find_ = from.max_matches_to_find_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      one_embedding_per_start_atom_ = from.one_embedding_per_start_atom_;
    }
    if (cached_has_bits & 0x00000200u) {
      save_matched_atoms_ = from.save_matched_atoms_;
    }
    if (cached_has_bits & 0x00000400u) {
      ncon_ignore_singly_connected_ = from.ncon_ignore_singly_connected_;
    }
    if (cached_has_bits & 0x00000800u) {
      perceive_symmetric_equivalents_ = from.perceive_symmetric_equivalents_;
    }
    if (cached_has_bits & 0x00001000u) {
      implicit_ring_condition_ = from.implicit_ring_condition_;
    }
    if (cached_has_bits & 0x00002000u) {
      all_hits_in_same_fragment_ = from.all_hits_in_same_fragment_;
    }
    if (cached_has_bits & 0x00004000u) {
      only_match_largest_fragment_ = from.only_match_largest_fragment_;
    }
    if (cached_has_bits & 0x00008000u) {
      embeddings_do_not_overlap_ = from.embeddings_do_not_overlap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      sort_by_preference_value_ = from.sort_by_preference_value_;
    }
    if (cached_has_bits & 0x00020000u) {
      distance_between_hits_ncheck_ = from.distance_between_hits_ncheck_;
    }
    if (cached_has_bits & 0x00040000u) {
      min_attached_heteroatom_count_ = from.min_attached_heteroatom_count_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_attached_heteroatom_count_ = from.max_attached_heteroatom_count_;
    }
    if (cached_has_bits & 0x00100000u) {
      min_hits_needed_ = from.min_hits_needed_;
    }
    if (cached_has_bits & 0x00200000u) {
      max_hits_needed_ = from.max_hits_needed_;
    }
    if (cached_has_bits & 0x00400000u) {
      min_ring_atoms_matched_ = from.min_ring_atoms_matched_;
    }
    if (cached_has_bits & 0x00800000u) {
      max_ring_atoms_matched_ = from.max_ring_atoms_matched_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      min_heteroatoms_matched_ = from.min_heteroatoms_matched_;
    }
    if (cached_has_bits & 0x02000000u) {
      max_heteroatoms_matched_ = from.max_heteroatoms_matched_;
    }
    if (cached_has_bits & 0x04000000u) {
      min_heteroatoms_in_molecule_ = from.min_heteroatoms_in_molecule_;
    }
    if (cached_has_bits & 0x08000000u) {
      max_heteroatoms_in_molecule_ = from.max_heteroatoms_in_molecule_;
    }
    if (cached_has_bits & 0x10000000u) {
      min_natoms_ = from.min_natoms_;
    }
    if (cached_has_bits & 0x20000000u) {
      max_natoms_ = from.max_natoms_;
    }
    if (cached_has_bits & 0x40000000u) {
      min_nrings_ = from.min_nrings_;
    }
    if (cached_has_bits & 0x80000000u) {
      max_nrings_ = from.max_nrings_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      min_ncon_ = from.min_ncon_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ncon_ = from.max_ncon_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_fused_rings_ = from.min_fused_rings_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_fused_rings_ = from.max_fused_rings_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_strongly_fused_rings_ = from.min_strongly_fused_rings_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_strongly_fused_rings_ = from.max_strongly_fused_rings_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_isolated_rings_ = from.min_isolated_rings_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_isolated_rings_ = from.max_isolated_rings_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      no_matched_atoms_between_exhaustive_ = from.no_matched_atoms_between_exhaustive_;
    }
    if (cached_has_bits & 0x00000200u) {
      fail_if_embeddings_too_close_ = from.fail_if_embeddings_too_close_;
    }
    if (cached_has_bits & 0x00000400u) {
      environment_must_match_unmatched_atoms_ = from.environment_must_match_unmatched_atoms_;
    }
    if (cached_has_bits & 0x00000800u) {
      env_matches_can_share_attachment_points_ = from.env_matches_can_share_attachment_points_;
    }
    if (cached_has_bits & 0x00001000u) {
      min_isolated_ring_objects_ = from.min_isolated_ring_objects_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_isolated_ring_objects_ = from.max_isolated_ring_objects_;
    }
    if (cached_has_bits & 0x00004000u) {
      min_aromatic_rings_ = from.min_aromatic_rings_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_aromatic_rings_ = from.max_aromatic_rings_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      min_non_aromatic_rings_ = from.min_non_aromatic_rings_;
    }
    if (cached_has_bits & 0x00020000u) {
      max_non_aromatic_rings_ = from.max_non_aromatic_rings_;
    }
    if (cached_has_bits & 0x00040000u) {
      min_distance_between_hits_ = from.min_distance_between_hits_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_distance_between_hits_ = from.max_distance_between_hits_;
    }
    if (cached_has_bits & 0x00100000u) {
      min_number_isotopic_atoms_ = from.min_number_isotopic_atoms_;
    }
    if (cached_has_bits & 0x00200000u) {
      max_number_isotopic_atoms_ = from.max_number_isotopic_atoms_;
    }
    if (cached_has_bits & 0x00400000u) {
      min_number_fragments_ = from.min_number_fragments_;
    }
    if (cached_has_bits & 0x00800000u) {
      max_number_fragments_ = from.max_number_fragments_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      min_distance_between_root_atoms_ = from.min_distance_between_root_atoms_;
    }
    if (cached_has_bits & 0x02000000u) {
      max_distance_between_root_atoms_ = from.max_distance_between_root_atoms_;
    }
    if (cached_has_bits & 0x04000000u) {
      min_atoms_in_spinach_ = from.min_atoms_in_spinach_;
    }
    if (cached_has_bits & 0x08000000u) {
      max_atoms_in_spinach_ = from.max_atoms_in_spinach_;
    }
    if (cached_has_bits & 0x10000000u) {
      min_inter_ring_atoms_ = from.min_inter_ring_atoms_;
    }
    if (cached_has_bits & 0x20000000u) {
      max_inter_ring_atoms_ = from.max_inter_ring_atoms_;
    }
    if (cached_has_bits & 0x40000000u) {
      min_unmatched_atoms_ = from.min_unmatched_atoms_;
    }
    if (cached_has_bits & 0x80000000u) {
      max_unmatched_atoms_ = from.max_unmatched_atoms_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      min_net_formal_charge_ = from.min_net_formal_charge_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_net_formal_charge_ = from.max_net_formal_charge_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_fraction_atoms_matched_ = from.min_fraction_atoms_matched_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_fraction_atoms_matched_ = from.max_fraction_atoms_matched_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_aromatic_atoms_ = from.min_aromatic_atoms_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_aromatic_atoms_ = from.max_aromatic_atoms_;
    }
    if (cached_has_bits & 0x00000040u) {
      unique_embeddings_only_ = from.unique_embeddings_only_;
    }
    if (cached_has_bits & 0x00000080u) {
      respect_initial_atom_numbering_ = from.respect_initial_atom_numbering_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      compress_embeddings_ = from.compress_embeddings_;
    }
    if (cached_has_bits & 0x00000200u) {
      environments_can_share_attachment_points_ = from.environments_can_share_attachment_points_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  switch (from.smiles_or_smarts_case()) {
    case kSmiles: {
      set_smiles(from.smiles());
      break;
    }
    case kSmarts: {
      set_smarts(from.smarts());
      break;
    }
    case SMILES_OR_SMARTS_NOT_SET: {
      break;
    }
  }
}

void SingleSubstructureQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SingleSubstructureQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleSubstructureQuery::CopyFrom(const SingleSubstructureQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SingleSubstructureQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleSubstructureQuery::IsInitialized() const {
  return true;
}

void SingleSubstructureQuery::Swap(SingleSubstructureQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleSubstructureQuery::InternalSwap(SingleSubstructureQuery* other) {
  using std::swap;
  numeric_value_.InternalSwap(&other->numeric_value_);
  CastToBase(&no_matched_atoms_between_)->InternalSwap(CastToBase(&other->no_matched_atoms_between_));
  CastToBase(&link_atoms_)->InternalSwap(CastToBase(&other->link_atoms_));
  attached_heteroatom_count_.InternalSwap(&other->attached_heteroatom_count_);
  hits_needed_.InternalSwap(&other->hits_needed_);
  ring_atoms_matched_.InternalSwap(&other->ring_atoms_matched_);
  heteroatoms_matched_.InternalSwap(&other->heteroatoms_matched_);
  heteroatoms_in_molecule_.InternalSwap(&other->heteroatoms_in_molecule_);
  natoms_.InternalSwap(&other->natoms_);
  nrings_.InternalSwap(&other->nrings_);
  ncon_.InternalSwap(&other->ncon_);
  fused_rings_.InternalSwap(&other->fused_rings_);
  strongly_fused_rings_.InternalSwap(&other->strongly_fused_rings_);
  isolated_rings_.InternalSwap(&other->isolated_rings_);
  isolated_ring_objects_.InternalSwap(&other->isolated_ring_objects_);
  aromatic_rings_.InternalSwap(&other->aromatic_rings_);
  non_aromatic_rings_.InternalSwap(&other->non_aromatic_rings_);
  distance_between_hits_.InternalSwap(&other->distance_between_hits_);
  number_isotopic_atoms_.InternalSwap(&other->number_isotopic_atoms_);
  number_fragments_.InternalSwap(&other->number_fragments_);
  distance_between_root_atoms_.InternalSwap(&other->distance_between_root_atoms_);
  atoms_in_spinach_.InternalSwap(&other->atoms_in_spinach_);
  inter_ring_atoms_.InternalSwap(&other->inter_ring_atoms_);
  unmatched_atoms_.InternalSwap(&other->unmatched_atoms_);
  net_formal_charge_.InternalSwap(&other->net_formal_charge_);
  CastToBase(&environment_)->InternalSwap(CastToBase(&other->environment_));
  CastToBase(&environment_no_match_)->InternalSwap(CastToBase(&other->environment_no_match_));
  CastToBase(&ring_specification_)->InternalSwap(CastToBase(&other->ring_specification_));
  ring_specification_logexp_.InternalSwap(&other->ring_specification_logexp_);
  CastToBase(&ring_system_specifier_)->InternalSwap(CastToBase(&other->ring_system_specifier_));
  ring_system_specifier_logexp_.InternalSwap(&other->ring_system_specifier_logexp_);
  CastToBase(&element_hits_needed_)->InternalSwap(CastToBase(&other->element_hits_needed_));
  CastToBase(&elements_needed_)->InternalSwap(CastToBase(&other->elements_needed_));
  aromatic_atoms_.InternalSwap(&other->aromatic_atoms_);
  heteroatoms_.InternalSwap(&other->heteroatoms_);
  CastToBase(&query_atom_)->InternalSwap(CastToBase(&other->query_atom_));
  CastToBase(&chiral_centre_)->InternalSwap(CastToBase(&other->chiral_centre_));
  label_.Swap(&other->label_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  comment_.Swap(&other->comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sort_matches_.Swap(&other->sort_matches_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  atom_type_.Swap(&other->atom_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(normalise_rc_per_hits_needed_, other->normalise_rc_per_hits_needed_);
  swap(subtract_from_rc_, other->subtract_from_rc_);
  swap(max_matches_to_find_, other->max_matches_to_find_);
  swap(one_embedding_per_start_atom_, other->one_embedding_per_start_atom_);
  swap(save_matched_atoms_, other->save_matched_atoms_);
  swap(ncon_ignore_singly_connected_, other->ncon_ignore_singly_connected_);
  swap(perceive_symmetric_equivalents_, other->perceive_symmetric_equivalents_);
  swap(implicit_ring_condition_, other->implicit_ring_condition_);
  swap(all_hits_in_same_fragment_, other->all_hits_in_same_fragment_);
  swap(only_match_largest_fragment_, other->only_match_largest_fragment_);
  swap(embeddings_do_not_overlap_, other->embeddings_do_not_overlap_);
  swap(sort_by_preference_value_, other->sort_by_preference_value_);
  swap(distance_between_hits_ncheck_, other->distance_between_hits_ncheck_);
  swap(min_attached_heteroatom_count_, other->min_attached_heteroatom_count_);
  swap(max_attached_heteroatom_count_, other->max_attached_heteroatom_count_);
  swap(min_hits_needed_, other->min_hits_needed_);
  swap(max_hits_needed_, other->max_hits_needed_);
  swap(min_ring_atoms_matched_, other->min_ring_atoms_matched_);
  swap(max_ring_atoms_matched_, other->max_ring_atoms_matched_);
  swap(min_heteroatoms_matched_, other->min_heteroatoms_matched_);
  swap(max_heteroatoms_matched_, other->max_heteroatoms_matched_);
  swap(min_heteroatoms_in_molecule_, other->min_heteroatoms_in_molecule_);
  swap(max_heteroatoms_in_molecule_, other->max_heteroatoms_in_molecule_);
  swap(min_natoms_, other->min_natoms_);
  swap(max_natoms_, other->max_natoms_);
  swap(min_nrings_, other->min_nrings_);
  swap(max_nrings_, other->max_nrings_);
  swap(min_ncon_, other->min_ncon_);
  swap(max_ncon_, other->max_ncon_);
  swap(min_fused_rings_, other->min_fused_rings_);
  swap(max_fused_rings_, other->max_fused_rings_);
  swap(min_strongly_fused_rings_, other->min_strongly_fused_rings_);
  swap(max_strongly_fused_rings_, other->max_strongly_fused_rings_);
  swap(min_isolated_rings_, other->min_isolated_rings_);
  swap(max_isolated_rings_, other->max_isolated_rings_);
  swap(no_matched_atoms_between_exhaustive_, other->no_matched_atoms_between_exhaustive_);
  swap(fail_if_embeddings_too_close_, other->fail_if_embeddings_too_close_);
  swap(environment_must_match_unmatched_atoms_, other->environment_must_match_unmatched_atoms_);
  swap(env_matches_can_share_attachment_points_, other->env_matches_can_share_attachment_points_);
  swap(min_isolated_ring_objects_, other->min_isolated_ring_objects_);
  swap(max_isolated_ring_objects_, other->max_isolated_ring_objects_);
  swap(min_aromatic_rings_, other->min_aromatic_rings_);
  swap(max_aromatic_rings_, other->max_aromatic_rings_);
  swap(min_non_aromatic_rings_, other->min_non_aromatic_rings_);
  swap(max_non_aromatic_rings_, other->max_non_aromatic_rings_);
  swap(min_distance_between_hits_, other->min_distance_between_hits_);
  swap(max_distance_between_hits_, other->max_distance_between_hits_);
  swap(min_number_isotopic_atoms_, other->min_number_isotopic_atoms_);
  swap(max_number_isotopic_atoms_, other->max_number_isotopic_atoms_);
  swap(min_number_fragments_, other->min_number_fragments_);
  swap(max_number_fragments_, other->max_number_fragments_);
  swap(min_distance_between_root_atoms_, other->min_distance_between_root_atoms_);
  swap(max_distance_between_root_atoms_, other->max_distance_between_root_atoms_);
  swap(min_atoms_in_spinach_, other->min_atoms_in_spinach_);
  swap(max_atoms_in_spinach_, other->max_atoms_in_spinach_);
  swap(min_inter_ring_atoms_, other->min_inter_ring_atoms_);
  swap(max_inter_ring_atoms_, other->max_inter_ring_atoms_);
  swap(min_unmatched_atoms_, other->min_unmatched_atoms_);
  swap(max_unmatched_atoms_, other->max_unmatched_atoms_);
  swap(min_net_formal_charge_, other->min_net_formal_charge_);
  swap(max_net_formal_charge_, other->max_net_formal_charge_);
  swap(min_fraction_atoms_matched_, other->min_fraction_atoms_matched_);
  swap(max_fraction_atoms_matched_, other->max_fraction_atoms_matched_);
  swap(min_aromatic_atoms_, other->min_aromatic_atoms_);
  swap(max_aromatic_atoms_, other->max_aromatic_atoms_);
  swap(unique_embeddings_only_, other->unique_embeddings_only_);
  swap(respect_initial_atom_numbering_, other->respect_initial_atom_numbering_);
  swap(compress_embeddings_, other->compress_embeddings_);
  swap(environments_can_share_attachment_points_, other->environments_can_share_attachment_points_);
  swap(smiles_or_smarts_, other->smiles_or_smarts_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SingleSubstructureQuery::GetMetadata() const {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubstructureQuery::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubstructureQuery::kCommentFieldNumber;
const int SubstructureQuery::kQueryFieldNumber;
const int SubstructureQuery::kLogexpFieldNumber;
const int SubstructureQuery::kMatchEachComponentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubstructureQuery::SubstructureQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substructure_2eproto::scc_info_SubstructureQuery.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstructureSearch.SubstructureQuery)
}
SubstructureQuery::SubstructureQuery(const SubstructureQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      query_(from.query_),
      logexp_(from.logexp_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_comment()) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  match_each_component_ = from.match_each_component_;
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureQuery)
}

void SubstructureQuery::SharedCtor() {
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_each_component_ = 0;
}

SubstructureQuery::~SubstructureQuery() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureQuery)
  SharedDtor();
}

void SubstructureQuery::SharedDtor() {
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubstructureQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubstructureQuery::descriptor() {
  ::protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubstructureQuery& SubstructureQuery::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substructure_2eproto::scc_info_SubstructureQuery.base);
  return *internal_default_instance();
}


void SubstructureQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.Clear();
  logexp_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    comment_.ClearNonDefaultToEmptyNoArena();
  }
  match_each_component_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubstructureQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstructureSearch.SubstructureQuery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string comment = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.SubstructureQuery.comment");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstructureSearch.SingleSubstructureQuery query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstructureSearch.Operator logexp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SubstructureSearch::Operator_IsValid(value)) {
            add_logexp(static_cast< ::SubstructureSearch::Operator >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 3,
                 ::SubstructureSearch::Operator_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_logexp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 match_each_component = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_match_each_component();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_each_component_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstructureSearch.SubstructureQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstructureSearch.SubstructureQuery)
  return false;
#undef DO_
}

void SubstructureQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstructureSearch.SubstructureQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string comment = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureQuery.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->comment(), output);
  }

  // repeated .SubstructureSearch.SingleSubstructureQuery query = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->query(static_cast<int>(i)),
      output);
  }

  // repeated .SubstructureSearch.Operator logexp = 3;
  for (int i = 0, n = this->logexp_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->logexp(i), output);
  }

  // optional int32 match_each_component = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->match_each_component(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstructureSearch.SubstructureQuery)
}

::google::protobuf::uint8* SubstructureQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string comment = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureQuery.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->comment(), target);
  }

  // repeated .SubstructureSearch.SingleSubstructureQuery query = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->query(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SubstructureSearch.Operator logexp = 3;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    3, this->logexp_, target);

  // optional int32 match_each_component = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->match_each_component(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureQuery)
  return target;
}

size_t SubstructureQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SubstructureSearch.SingleSubstructureQuery query = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->query_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->query(static_cast<int>(i)));
    }
  }

  // repeated .SubstructureSearch.Operator logexp = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->logexp_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->logexp(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string comment = 1;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional int32 match_each_component = 4;
    if (has_match_each_component()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_each_component());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubstructureQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureQuery)
    MergeFrom(*source);
  }
}

void SubstructureQuery::MergeFrom(const SubstructureQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  query_.MergeFrom(from.query_);
  logexp_.MergeFrom(from.logexp_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_comment();
      comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
    }
    if (cached_has_bits & 0x00000002u) {
      match_each_component_ = from.match_each_component_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubstructureQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureQuery::CopyFrom(const SubstructureQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureQuery::IsInitialized() const {
  return true;
}

void SubstructureQuery::Swap(SubstructureQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubstructureQuery::InternalSwap(SubstructureQuery* other) {
  using std::swap;
  CastToBase(&query_)->InternalSwap(CastToBase(&other->query_));
  logexp_.InternalSwap(&other->logexp_);
  comment_.Swap(&other->comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(match_each_component_, other->match_each_component_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubstructureQuery::GetMetadata() const {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MinMaxSpecifierInt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MinMaxSpecifierInt::kValueFieldNumber;
const int MinMaxSpecifierInt::kMinFieldNumber;
const int MinMaxSpecifierInt::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MinMaxSpecifierInt::MinMaxSpecifierInt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substructure_2eproto::scc_info_MinMaxSpecifierInt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstructureSearch.MinMaxSpecifierInt)
}
MinMaxSpecifierInt::MinMaxSpecifierInt(const MinMaxSpecifierInt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.MinMaxSpecifierInt)
}

void MinMaxSpecifierInt::SharedCtor() {
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

MinMaxSpecifierInt::~MinMaxSpecifierInt() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.MinMaxSpecifierInt)
  SharedDtor();
}

void MinMaxSpecifierInt::SharedDtor() {
}

void MinMaxSpecifierInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MinMaxSpecifierInt::descriptor() {
  ::protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MinMaxSpecifierInt& MinMaxSpecifierInt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substructure_2eproto::scc_info_MinMaxSpecifierInt.base);
  return *internal_default_instance();
}


void MinMaxSpecifierInt::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.MinMaxSpecifierInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&min_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MinMaxSpecifierInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstructureSearch.MinMaxSpecifierInt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_value())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstructureSearch.MinMaxSpecifierInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstructureSearch.MinMaxSpecifierInt)
  return false;
#undef DO_
}

void MinMaxSpecifierInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstructureSearch.MinMaxSpecifierInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 value = 1;
  for (int i = 0, n = this->value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->value(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 min = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min(), output);
  }

  // optional int32 max = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstructureSearch.MinMaxSpecifierInt)
}

::google::protobuf::uint8* MinMaxSpecifierInt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.MinMaxSpecifierInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 value = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->value_, target);

  cached_has_bits = _has_bits_[0];
  // optional int32 min = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min(), target);
  }

  // optional int32 max = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.MinMaxSpecifierInt)
  return target;
}

size_t MinMaxSpecifierInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.MinMaxSpecifierInt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 value = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->value_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->value_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 min = 2;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min());
    }

    // optional int32 max = 3;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MinMaxSpecifierInt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.MinMaxSpecifierInt)
  GOOGLE_DCHECK_NE(&from, this);
  const MinMaxSpecifierInt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MinMaxSpecifierInt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.MinMaxSpecifierInt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.MinMaxSpecifierInt)
    MergeFrom(*source);
  }
}

void MinMaxSpecifierInt::MergeFrom(const MinMaxSpecifierInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.MinMaxSpecifierInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MinMaxSpecifierInt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.MinMaxSpecifierInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MinMaxSpecifierInt::CopyFrom(const MinMaxSpecifierInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.MinMaxSpecifierInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinMaxSpecifierInt::IsInitialized() const {
  return true;
}

void MinMaxSpecifierInt::Swap(MinMaxSpecifierInt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MinMaxSpecifierInt::InternalSwap(MinMaxSpecifierInt* other) {
  using std::swap;
  value_.InternalSwap(&other->value_);
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MinMaxSpecifierInt::GetMetadata() const {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MinMaxSpecifierUInt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MinMaxSpecifierUInt::kValueFieldNumber;
const int MinMaxSpecifierUInt::kMinFieldNumber;
const int MinMaxSpecifierUInt::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MinMaxSpecifierUInt::MinMaxSpecifierUInt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substructure_2eproto::scc_info_MinMaxSpecifierUInt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstructureSearch.MinMaxSpecifierUInt)
}
MinMaxSpecifierUInt::MinMaxSpecifierUInt(const MinMaxSpecifierUInt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.MinMaxSpecifierUInt)
}

void MinMaxSpecifierUInt::SharedCtor() {
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

MinMaxSpecifierUInt::~MinMaxSpecifierUInt() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.MinMaxSpecifierUInt)
  SharedDtor();
}

void MinMaxSpecifierUInt::SharedDtor() {
}

void MinMaxSpecifierUInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MinMaxSpecifierUInt::descriptor() {
  ::protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MinMaxSpecifierUInt& MinMaxSpecifierUInt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substructure_2eproto::scc_info_MinMaxSpecifierUInt.base);
  return *internal_default_instance();
}


void MinMaxSpecifierUInt::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.MinMaxSpecifierUInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&min_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MinMaxSpecifierUInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstructureSearch.MinMaxSpecifierUInt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_value())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstructureSearch.MinMaxSpecifierUInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstructureSearch.MinMaxSpecifierUInt)
  return false;
#undef DO_
}

void MinMaxSpecifierUInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstructureSearch.MinMaxSpecifierUInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 value = 1;
  for (int i = 0, n = this->value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->value(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 min = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->min(), output);
  }

  // optional uint32 max = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstructureSearch.MinMaxSpecifierUInt)
}

::google::protobuf::uint8* MinMaxSpecifierUInt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.MinMaxSpecifierUInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 value = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->value_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 min = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->min(), target);
  }

  // optional uint32 max = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.MinMaxSpecifierUInt)
  return target;
}

size_t MinMaxSpecifierUInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.MinMaxSpecifierUInt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 value = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->value_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->value_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 min = 2;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min());
    }

    // optional uint32 max = 3;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MinMaxSpecifierUInt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.MinMaxSpecifierUInt)
  GOOGLE_DCHECK_NE(&from, this);
  const MinMaxSpecifierUInt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MinMaxSpecifierUInt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.MinMaxSpecifierUInt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.MinMaxSpecifierUInt)
    MergeFrom(*source);
  }
}

void MinMaxSpecifierUInt::MergeFrom(const MinMaxSpecifierUInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.MinMaxSpecifierUInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MinMaxSpecifierUInt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.MinMaxSpecifierUInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MinMaxSpecifierUInt::CopyFrom(const MinMaxSpecifierUInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.MinMaxSpecifierUInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinMaxSpecifierUInt::IsInitialized() const {
  return true;
}

void MinMaxSpecifierUInt::Swap(MinMaxSpecifierUInt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MinMaxSpecifierUInt::InternalSwap(MinMaxSpecifierUInt* other) {
  using std::swap;
  value_.InternalSwap(&other->value_);
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MinMaxSpecifierUInt::GetMetadata() const {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QueryMatchResults_Matches::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryMatchResults_Matches::kNameFieldNumber;
const int QueryMatchResults_Matches::kNhitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryMatchResults_Matches::QueryMatchResults_Matches()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substructure_2eproto::scc_info_QueryMatchResults_Matches.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstructureSearch.QueryMatchResults.Matches)
}
QueryMatchResults_Matches::QueryMatchResults_Matches(const QueryMatchResults_Matches& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  nhits_ = from.nhits_;
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.QueryMatchResults.Matches)
}

void QueryMatchResults_Matches::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nhits_ = 0u;
}

QueryMatchResults_Matches::~QueryMatchResults_Matches() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.QueryMatchResults.Matches)
  SharedDtor();
}

void QueryMatchResults_Matches::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryMatchResults_Matches::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* QueryMatchResults_Matches::descriptor() {
  ::protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryMatchResults_Matches& QueryMatchResults_Matches::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substructure_2eproto::scc_info_QueryMatchResults_Matches.base);
  return *internal_default_instance();
}


void QueryMatchResults_Matches::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.QueryMatchResults.Matches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  nhits_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryMatchResults_Matches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstructureSearch.QueryMatchResults.Matches)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.QueryMatchResults.Matches.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 nhits = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nhits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nhits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstructureSearch.QueryMatchResults.Matches)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstructureSearch.QueryMatchResults.Matches)
  return false;
#undef DO_
}

void QueryMatchResults_Matches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstructureSearch.QueryMatchResults.Matches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.QueryMatchResults.Matches.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 nhits = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nhits(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstructureSearch.QueryMatchResults.Matches)
}

::google::protobuf::uint8* QueryMatchResults_Matches::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.QueryMatchResults.Matches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.QueryMatchResults.Matches.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 nhits = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nhits(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.QueryMatchResults.Matches)
  return target;
}

size_t QueryMatchResults_Matches::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.QueryMatchResults.Matches)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 nhits = 2;
    if (has_nhits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nhits());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryMatchResults_Matches::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.QueryMatchResults.Matches)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryMatchResults_Matches* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryMatchResults_Matches>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.QueryMatchResults.Matches)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.QueryMatchResults.Matches)
    MergeFrom(*source);
  }
}

void QueryMatchResults_Matches::MergeFrom(const QueryMatchResults_Matches& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.QueryMatchResults.Matches)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      nhits_ = from.nhits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QueryMatchResults_Matches::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.QueryMatchResults.Matches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMatchResults_Matches::CopyFrom(const QueryMatchResults_Matches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.QueryMatchResults.Matches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMatchResults_Matches::IsInitialized() const {
  return true;
}

void QueryMatchResults_Matches::Swap(QueryMatchResults_Matches* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryMatchResults_Matches::InternalSwap(QueryMatchResults_Matches* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nhits_, other->nhits_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata QueryMatchResults_Matches::GetMetadata() const {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QueryMatchResults::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryMatchResults::kSmilesFieldNumber;
const int QueryMatchResults::kNameFieldNumber;
const int QueryMatchResults::kMatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryMatchResults::QueryMatchResults()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substructure_2eproto::scc_info_QueryMatchResults.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstructureSearch.QueryMatchResults)
}
QueryMatchResults::QueryMatchResults(const QueryMatchResults& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      matches_(from.matches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  smiles_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_smiles()) {
    smiles_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smiles_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.QueryMatchResults)
}

void QueryMatchResults::SharedCtor() {
  smiles_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

QueryMatchResults::~QueryMatchResults() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.QueryMatchResults)
  SharedDtor();
}

void QueryMatchResults::SharedDtor() {
  smiles_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryMatchResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* QueryMatchResults::descriptor() {
  ::protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryMatchResults& QueryMatchResults::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substructure_2eproto::scc_info_QueryMatchResults.base);
  return *internal_default_instance();
}


void QueryMatchResults::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.QueryMatchResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matches_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      smiles_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryMatchResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstructureSearch.QueryMatchResults)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string smiles = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smiles()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->smiles().data(), static_cast<int>(this->smiles().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.QueryMatchResults.smiles");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SubstructureSearch.QueryMatchResults.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstructureSearch.QueryMatchResults.Matches matches = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstructureSearch.QueryMatchResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstructureSearch.QueryMatchResults)
  return false;
#undef DO_
}

void QueryMatchResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstructureSearch.QueryMatchResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string smiles = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smiles().data(), static_cast<int>(this->smiles().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.QueryMatchResults.smiles");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->smiles(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.QueryMatchResults.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .SubstructureSearch.QueryMatchResults.Matches matches = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matches_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->matches(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstructureSearch.QueryMatchResults)
}

::google::protobuf::uint8* QueryMatchResults::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.QueryMatchResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string smiles = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smiles().data(), static_cast<int>(this->smiles().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.QueryMatchResults.smiles");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->smiles(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.QueryMatchResults.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .SubstructureSearch.QueryMatchResults.Matches matches = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matches_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->matches(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.QueryMatchResults)
  return target;
}

size_t QueryMatchResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.QueryMatchResults)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SubstructureSearch.QueryMatchResults.Matches matches = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->matches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->matches(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string smiles = 1;
    if (has_smiles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->smiles());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryMatchResults::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.QueryMatchResults)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryMatchResults* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryMatchResults>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.QueryMatchResults)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.QueryMatchResults)
    MergeFrom(*source);
  }
}

void QueryMatchResults::MergeFrom(const QueryMatchResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.QueryMatchResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matches_.MergeFrom(from.matches_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_smiles();
      smiles_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smiles_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
}

void QueryMatchResults::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.QueryMatchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMatchResults::CopyFrom(const QueryMatchResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.QueryMatchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMatchResults::IsInitialized() const {
  return true;
}

void QueryMatchResults::Swap(QueryMatchResults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryMatchResults::InternalSwap(QueryMatchResults* other) {
  using std::swap;
  CastToBase(&matches_)->InternalSwap(CastToBase(&other->matches_));
  smiles_.Swap(&other->smiles_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata QueryMatchResults::GetMetadata() const {
  protobuf_substructure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substructure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SubstructureSearch
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubstructureSearch::AtomNumberOrHLp* Arena::CreateMaybeMessage< ::SubstructureSearch::AtomNumberOrHLp >(Arena* arena) {
  return Arena::CreateInternal< ::SubstructureSearch::AtomNumberOrHLp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubstructureSearch::SubstructureChiralCenter* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureChiralCenter >(Arena* arena) {
  return Arena::CreateInternal< ::SubstructureSearch::SubstructureChiralCenter >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubstructureSearch::SubstructureBond* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureBond >(Arena* arena) {
  return Arena::CreateInternal< ::SubstructureSearch::SubstructureBond >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubstructureSearch::SubstructureEnvironmentBond* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureEnvironmentBond >(Arena* arena) {
  return Arena::CreateInternal< ::SubstructureSearch::SubstructureEnvironmentBond >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubstructureSearch::ElementsNeeded* Arena::CreateMaybeMessage< ::SubstructureSearch::ElementsNeeded >(Arena* arena) {
  return Arena::CreateInternal< ::SubstructureSearch::ElementsNeeded >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubstructureSearch::NoMatchedAtomsBetween* Arena::CreateMaybeMessage< ::SubstructureSearch::NoMatchedAtomsBetween >(Arena* arena) {
  return Arena::CreateInternal< ::SubstructureSearch::NoMatchedAtomsBetween >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubstructureSearch::LinkAtoms* Arena::CreateMaybeMessage< ::SubstructureSearch::LinkAtoms >(Arena* arena) {
  return Arena::CreateInternal< ::SubstructureSearch::LinkAtoms >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubstructureSearch::EnvironmentAttachment* Arena::CreateMaybeMessage< ::SubstructureSearch::EnvironmentAttachment >(Arena* arena) {
  return Arena::CreateInternal< ::SubstructureSearch::EnvironmentAttachment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubstructureSearch::SubstructureRingEnvironment* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureRingEnvironment >(Arena* arena) {
  return Arena::CreateInternal< ::SubstructureSearch::SubstructureRingEnvironment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubstructureSearch::SubstructureRingBase* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureRingBase >(Arena* arena) {
  return Arena::CreateInternal< ::SubstructureSearch::SubstructureRingBase >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubstructureSearch::SubstructureRingSpecification* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureRingSpecification >(Arena* arena) {
  return Arena::CreateInternal< ::SubstructureSearch::SubstructureRingSpecification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubstructureSearch::RingSizeRequirement* Arena::CreateMaybeMessage< ::SubstructureSearch::RingSizeRequirement >(Arena* arena) {
  return Arena::CreateInternal< ::SubstructureSearch::RingSizeRequirement >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubstructureSearch::SubstructureRingSystemSpecification* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureRingSystemSpecification >(Arena* arena) {
  return Arena::CreateInternal< ::SubstructureSearch::SubstructureRingSystemSpecification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubstructureSearch::SubstructureAtomSpecifier* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureAtomSpecifier >(Arena* arena) {
  return Arena::CreateInternal< ::SubstructureSearch::SubstructureAtomSpecifier >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubstructureSearch::SubstructureAtomEnvironment* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureAtomEnvironment >(Arena* arena) {
  return Arena::CreateInternal< ::SubstructureSearch::SubstructureAtomEnvironment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubstructureSearch::SubstructureAtom* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureAtom >(Arena* arena) {
  return Arena::CreateInternal< ::SubstructureSearch::SubstructureAtom >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubstructureSearch::SubstructureEnvironment* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureEnvironment >(Arena* arena) {
  return Arena::CreateInternal< ::SubstructureSearch::SubstructureEnvironment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubstructureSearch::SingleSubstructureQuery* Arena::CreateMaybeMessage< ::SubstructureSearch::SingleSubstructureQuery >(Arena* arena) {
  return Arena::CreateInternal< ::SubstructureSearch::SingleSubstructureQuery >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubstructureSearch::SubstructureQuery* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureQuery >(Arena* arena) {
  return Arena::CreateInternal< ::SubstructureSearch::SubstructureQuery >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubstructureSearch::MinMaxSpecifierInt* Arena::CreateMaybeMessage< ::SubstructureSearch::MinMaxSpecifierInt >(Arena* arena) {
  return Arena::CreateInternal< ::SubstructureSearch::MinMaxSpecifierInt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubstructureSearch::MinMaxSpecifierUInt* Arena::CreateMaybeMessage< ::SubstructureSearch::MinMaxSpecifierUInt >(Arena* arena) {
  return Arena::CreateInternal< ::SubstructureSearch::MinMaxSpecifierUInt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubstructureSearch::QueryMatchResults_Matches* Arena::CreateMaybeMessage< ::SubstructureSearch::QueryMatchResults_Matches >(Arena* arena) {
  return Arena::CreateInternal< ::SubstructureSearch::QueryMatchResults_Matches >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubstructureSearch::QueryMatchResults* Arena::CreateMaybeMessage< ::SubstructureSearch::QueryMatchResults >(Arena* arena) {
  return Arena::CreateInternal< ::SubstructureSearch::QueryMatchResults >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
