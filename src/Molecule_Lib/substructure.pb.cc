// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Molecule_Lib/substructure.proto

#include "Molecule_Lib/substructure.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2fsubstructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AtomNumberOrHLp_Molecule_5fLib_2fsubstructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2fsubstructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ElementsNeeded_Molecule_5fLib_2fsubstructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2fsubstructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentAttachment_Molecule_5fLib_2fsubstructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2fsubstructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinkAtoms_Molecule_5fLib_2fsubstructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2fsubstructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoMatchedAtomsBetween_Molecule_5fLib_2fsubstructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2fsubstructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryMatchResults_Matches_Molecule_5fLib_2fsubstructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2fsubstructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RingSizeRequirement_Molecule_5fLib_2fsubstructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2fsubstructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_SingleSubstructureQuery_Molecule_5fLib_2fsubstructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2fsubstructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubstructureAtom_Molecule_5fLib_2fsubstructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2fsubstructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubstructureAtomSpecifier_Molecule_5fLib_2fsubstructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2fsubstructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubstructureBond_Molecule_5fLib_2fsubstructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2fsubstructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubstructureChiralCenter_Molecule_5fLib_2fsubstructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2fsubstructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubstructureEnvironment_Molecule_5fLib_2fsubstructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2fsubstructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubstructureRingBase_Molecule_5fLib_2fsubstructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2fsubstructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubstructureRingSpecification_Molecule_5fLib_2fsubstructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Molecule_5fLib_2fsubstructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubstructureRingSystemSpecification_Molecule_5fLib_2fsubstructure_2eproto;
namespace SubstructureSearch {
class AtomNumberOrHLpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AtomNumberOrHLp> _instance;
} _AtomNumberOrHLp_default_instance_;
class SubstructureChiralCenterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstructureChiralCenter> _instance;
} _SubstructureChiralCenter_default_instance_;
class SubstructureBondDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstructureBond> _instance;
} _SubstructureBond_default_instance_;
class SubstructureEnvironmentBondDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstructureEnvironmentBond> _instance;
} _SubstructureEnvironmentBond_default_instance_;
class ElementsNeededDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ElementsNeeded> _instance;
} _ElementsNeeded_default_instance_;
class NoMatchedAtomsBetweenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NoMatchedAtomsBetween> _instance;
} _NoMatchedAtomsBetween_default_instance_;
class LinkAtomsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinkAtoms> _instance;
} _LinkAtoms_default_instance_;
class EnvironmentAttachmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnvironmentAttachment> _instance;
} _EnvironmentAttachment_default_instance_;
class SubstructureRingEnvironmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstructureRingEnvironment> _instance;
} _SubstructureRingEnvironment_default_instance_;
class SubstructureRingBaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstructureRingBase> _instance;
} _SubstructureRingBase_default_instance_;
class SubstructureRingSpecificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstructureRingSpecification> _instance;
} _SubstructureRingSpecification_default_instance_;
class RingSizeRequirementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RingSizeRequirement> _instance;
} _RingSizeRequirement_default_instance_;
class SubstructureRingSystemSpecificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstructureRingSystemSpecification> _instance;
} _SubstructureRingSystemSpecification_default_instance_;
class SubstructureAtomSpecifierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstructureAtomSpecifier> _instance;
} _SubstructureAtomSpecifier_default_instance_;
class SubstructureAtomEnvironmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstructureAtomEnvironment> _instance;
} _SubstructureAtomEnvironment_default_instance_;
class SubstructureAtomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstructureAtom> _instance;
} _SubstructureAtom_default_instance_;
class SubstructureEnvironmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstructureEnvironment> _instance;
} _SubstructureEnvironment_default_instance_;
class SingleSubstructureQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleSubstructureQuery> _instance;
} _SingleSubstructureQuery_default_instance_;
class SubstructureQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstructureQuery> _instance;
} _SubstructureQuery_default_instance_;
class MinMaxSpecifierIntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MinMaxSpecifierInt> _instance;
} _MinMaxSpecifierInt_default_instance_;
class MinMaxSpecifierUIntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MinMaxSpecifierUInt> _instance;
} _MinMaxSpecifierUInt_default_instance_;
class QueryMatchResults_MatchesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryMatchResults_Matches> _instance;
} _QueryMatchResults_Matches_default_instance_;
class QueryMatchResultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryMatchResults> _instance;
} _QueryMatchResults_default_instance_;
}  // namespace SubstructureSearch
static void InitDefaultsscc_info_AtomNumberOrHLp_Molecule_5fLib_2fsubstructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_AtomNumberOrHLp_default_instance_;
    new (ptr) ::SubstructureSearch::AtomNumberOrHLp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AtomNumberOrHLp_Molecule_5fLib_2fsubstructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AtomNumberOrHLp_Molecule_5fLib_2fsubstructure_2eproto}, {}};

static void InitDefaultsscc_info_ElementsNeeded_Molecule_5fLib_2fsubstructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_ElementsNeeded_default_instance_;
    new (ptr) ::SubstructureSearch::ElementsNeeded();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ElementsNeeded_Molecule_5fLib_2fsubstructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ElementsNeeded_Molecule_5fLib_2fsubstructure_2eproto}, {}};

static void InitDefaultsscc_info_EnvironmentAttachment_Molecule_5fLib_2fsubstructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_EnvironmentAttachment_default_instance_;
    new (ptr) ::SubstructureSearch::EnvironmentAttachment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentAttachment_Molecule_5fLib_2fsubstructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnvironmentAttachment_Molecule_5fLib_2fsubstructure_2eproto}, {}};

static void InitDefaultsscc_info_LinkAtoms_Molecule_5fLib_2fsubstructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_LinkAtoms_default_instance_;
    new (ptr) ::SubstructureSearch::LinkAtoms();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinkAtoms_Molecule_5fLib_2fsubstructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LinkAtoms_Molecule_5fLib_2fsubstructure_2eproto}, {}};

static void InitDefaultsscc_info_MinMaxSpecifierInt_Molecule_5fLib_2fsubstructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_MinMaxSpecifierInt_default_instance_;
    new (ptr) ::SubstructureSearch::MinMaxSpecifierInt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MinMaxSpecifierInt_Molecule_5fLib_2fsubstructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MinMaxSpecifierInt_Molecule_5fLib_2fsubstructure_2eproto}, {}};

static void InitDefaultsscc_info_MinMaxSpecifierUInt_Molecule_5fLib_2fsubstructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_MinMaxSpecifierUInt_default_instance_;
    new (ptr) ::SubstructureSearch::MinMaxSpecifierUInt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MinMaxSpecifierUInt_Molecule_5fLib_2fsubstructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MinMaxSpecifierUInt_Molecule_5fLib_2fsubstructure_2eproto}, {}};

static void InitDefaultsscc_info_NoMatchedAtomsBetween_Molecule_5fLib_2fsubstructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_NoMatchedAtomsBetween_default_instance_;
    new (ptr) ::SubstructureSearch::NoMatchedAtomsBetween();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoMatchedAtomsBetween_Molecule_5fLib_2fsubstructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NoMatchedAtomsBetween_Molecule_5fLib_2fsubstructure_2eproto}, {}};

static void InitDefaultsscc_info_QueryMatchResults_Molecule_5fLib_2fsubstructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_QueryMatchResults_default_instance_;
    new (ptr) ::SubstructureSearch::QueryMatchResults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryMatchResults_Molecule_5fLib_2fsubstructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QueryMatchResults_Molecule_5fLib_2fsubstructure_2eproto}, {
      &scc_info_QueryMatchResults_Matches_Molecule_5fLib_2fsubstructure_2eproto.base,}};

static void InitDefaultsscc_info_QueryMatchResults_Matches_Molecule_5fLib_2fsubstructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_QueryMatchResults_Matches_default_instance_;
    new (ptr) ::SubstructureSearch::QueryMatchResults_Matches();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryMatchResults_Matches_Molecule_5fLib_2fsubstructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryMatchResults_Matches_Molecule_5fLib_2fsubstructure_2eproto}, {}};

static void InitDefaultsscc_info_RingSizeRequirement_Molecule_5fLib_2fsubstructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_RingSizeRequirement_default_instance_;
    new (ptr) ::SubstructureSearch::RingSizeRequirement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RingSizeRequirement_Molecule_5fLib_2fsubstructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RingSizeRequirement_Molecule_5fLib_2fsubstructure_2eproto}, {}};

static void InitDefaultsscc_info_SingleSubstructureQuery_Molecule_5fLib_2fsubstructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SingleSubstructureQuery_default_instance_;
    new (ptr) ::SubstructureSearch::SingleSubstructureQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_SingleSubstructureQuery_Molecule_5fLib_2fsubstructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_SingleSubstructureQuery_Molecule_5fLib_2fsubstructure_2eproto}, {
      &scc_info_NoMatchedAtomsBetween_Molecule_5fLib_2fsubstructure_2eproto.base,
      &scc_info_LinkAtoms_Molecule_5fLib_2fsubstructure_2eproto.base,
      &scc_info_SubstructureEnvironment_Molecule_5fLib_2fsubstructure_2eproto.base,
      &scc_info_SubstructureRingSpecification_Molecule_5fLib_2fsubstructure_2eproto.base,
      &scc_info_SubstructureRingSystemSpecification_Molecule_5fLib_2fsubstructure_2eproto.base,
      &scc_info_ElementsNeeded_Molecule_5fLib_2fsubstructure_2eproto.base,
      &scc_info_SubstructureAtom_Molecule_5fLib_2fsubstructure_2eproto.base,
      &scc_info_SubstructureChiralCenter_Molecule_5fLib_2fsubstructure_2eproto.base,}};

static void InitDefaultsscc_info_SubstructureAtom_Molecule_5fLib_2fsubstructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SubstructureAtomEnvironment_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureAtomEnvironment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::SubstructureSearch::_SubstructureAtom_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureAtom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubstructureAtom_Molecule_5fLib_2fsubstructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SubstructureAtom_Molecule_5fLib_2fsubstructure_2eproto}, {
      &scc_info_SubstructureAtomSpecifier_Molecule_5fLib_2fsubstructure_2eproto.base,
      &scc_info_SubstructureBond_Molecule_5fLib_2fsubstructure_2eproto.base,}};

static void InitDefaultsscc_info_SubstructureAtomSpecifier_Molecule_5fLib_2fsubstructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SubstructureAtomSpecifier_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureAtomSpecifier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubstructureAtomSpecifier_Molecule_5fLib_2fsubstructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubstructureAtomSpecifier_Molecule_5fLib_2fsubstructure_2eproto}, {}};

static void InitDefaultsscc_info_SubstructureBond_Molecule_5fLib_2fsubstructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SubstructureBond_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureBond();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubstructureBond_Molecule_5fLib_2fsubstructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubstructureBond_Molecule_5fLib_2fsubstructure_2eproto}, {}};

static void InitDefaultsscc_info_SubstructureChiralCenter_Molecule_5fLib_2fsubstructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SubstructureChiralCenter_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureChiralCenter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubstructureChiralCenter_Molecule_5fLib_2fsubstructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubstructureChiralCenter_Molecule_5fLib_2fsubstructure_2eproto}, {
      &scc_info_AtomNumberOrHLp_Molecule_5fLib_2fsubstructure_2eproto.base,}};

static void InitDefaultsscc_info_SubstructureEnvironment_Molecule_5fLib_2fsubstructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SubstructureEnvironment_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureEnvironment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubstructureEnvironment_Molecule_5fLib_2fsubstructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SubstructureEnvironment_Molecule_5fLib_2fsubstructure_2eproto}, {
      &scc_info_SubstructureAtom_Molecule_5fLib_2fsubstructure_2eproto.base,
      &scc_info_EnvironmentAttachment_Molecule_5fLib_2fsubstructure_2eproto.base,}};

static void InitDefaultsscc_info_SubstructureEnvironmentBond_Molecule_5fLib_2fsubstructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SubstructureEnvironmentBond_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureEnvironmentBond();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubstructureEnvironmentBond_Molecule_5fLib_2fsubstructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubstructureEnvironmentBond_Molecule_5fLib_2fsubstructure_2eproto}, {}};

static void InitDefaultsscc_info_SubstructureQuery_Molecule_5fLib_2fsubstructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SubstructureQuery_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubstructureQuery_Molecule_5fLib_2fsubstructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubstructureQuery_Molecule_5fLib_2fsubstructure_2eproto}, {
      &scc_info_SingleSubstructureQuery_Molecule_5fLib_2fsubstructure_2eproto.base,}};

static void InitDefaultsscc_info_SubstructureRingBase_Molecule_5fLib_2fsubstructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SubstructureRingBase_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureRingBase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubstructureRingBase_Molecule_5fLib_2fsubstructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubstructureRingBase_Molecule_5fLib_2fsubstructure_2eproto}, {}};

static void InitDefaultsscc_info_SubstructureRingEnvironment_Molecule_5fLib_2fsubstructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SubstructureRingEnvironment_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureRingEnvironment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubstructureRingEnvironment_Molecule_5fLib_2fsubstructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubstructureRingEnvironment_Molecule_5fLib_2fsubstructure_2eproto}, {
      &scc_info_SubstructureAtom_Molecule_5fLib_2fsubstructure_2eproto.base,}};

static void InitDefaultsscc_info_SubstructureRingSpecification_Molecule_5fLib_2fsubstructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SubstructureRingSpecification_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureRingSpecification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubstructureRingSpecification_Molecule_5fLib_2fsubstructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubstructureRingSpecification_Molecule_5fLib_2fsubstructure_2eproto}, {
      &scc_info_SubstructureRingBase_Molecule_5fLib_2fsubstructure_2eproto.base,}};

static void InitDefaultsscc_info_SubstructureRingSystemSpecification_Molecule_5fLib_2fsubstructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubstructureSearch::_SubstructureRingSystemSpecification_default_instance_;
    new (ptr) ::SubstructureSearch::SubstructureRingSystemSpecification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubstructureRingSystemSpecification_Molecule_5fLib_2fsubstructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SubstructureRingSystemSpecification_Molecule_5fLib_2fsubstructure_2eproto}, {
      &scc_info_SubstructureRingBase_Molecule_5fLib_2fsubstructure_2eproto.base,
      &scc_info_RingSizeRequirement_Molecule_5fLib_2fsubstructure_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Molecule_5fLib_2fsubstructure_2eproto[23];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Molecule_5fLib_2fsubstructure_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Molecule_5fLib_2fsubstructure_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Molecule_5fLib_2fsubstructure_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::AtomNumberOrHLp, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::AtomNumberOrHLp, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::AtomNumberOrHLp, AtomNumberOr_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureChiralCenter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureChiralCenter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureChiralCenter, center_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureChiralCenter, top_front_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureChiralCenter, top_back_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureChiralCenter, left_down_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureChiralCenter, right_down_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureBond, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureBond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureBond, bond_type_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureBond, other_end_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironmentBond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironmentBond, bond_type_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironmentBond, other_end_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::ElementsNeeded, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::ElementsNeeded, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::ElementsNeeded, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::ElementsNeeded, hits_needed_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::ElementsNeeded, min_hits_needed_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::ElementsNeeded, max_hits_needed_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::ElementsNeeded, ElementSpecifier_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::NoMatchedAtomsBetween, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::NoMatchedAtomsBetween, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::NoMatchedAtomsBetween, a1_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::NoMatchedAtomsBetween, a2_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::NoMatchedAtomsBetween, qualifier_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::LinkAtoms, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::LinkAtoms, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::LinkAtoms, a1_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::LinkAtoms, a2_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::LinkAtoms, distance_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::LinkAtoms, min_distance_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::LinkAtoms, max_distance_),
  0,
  1,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::EnvironmentAttachment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::EnvironmentAttachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::EnvironmentAttachment, attachment_point_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::EnvironmentAttachment, bond_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::EnvironmentAttachment, substructure_bond_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingEnvironment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingEnvironment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingEnvironment, substructure_atom_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingEnvironment, min_hits_needed_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingEnvironment, max_hits_needed_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, match_as_match_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, hits_needed_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, min_hits_needed_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, max_hits_needed_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, attached_heteroatom_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, min_attached_heteroatom_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, max_attached_heteroatom_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, heteroatom_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, min_heteroatom_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, max_heteroatom_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, ncon_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, min_ncon_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, max_ncon_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, all_hits_in_same_fragment_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, within_ring_unsaturation_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, min_within_ring_unsaturation_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, max_within_ring_unsaturation_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, largest_number_of_bonds_shared_with_another_ring_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, min_largest_number_of_bonds_shared_with_another_ring_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, max_largest_number_of_bonds_shared_with_another_ring_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, atoms_with_pi_electrons_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, min_atoms_with_pi_electrons_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, max_atoms_with_pi_electrons_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, strongly_fused_ring_neighbours_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, min_strongly_fused_ring_neighbours_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, max_strongly_fused_ring_neighbours_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, environment_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingBase, environment_can_match_in_ring_atoms_),
  8,
  ~0u,
  1,
  2,
  ~0u,
  3,
  4,
  ~0u,
  5,
  6,
  ~0u,
  7,
  11,
  9,
  ~0u,
  12,
  13,
  ~0u,
  14,
  15,
  ~0u,
  16,
  17,
  ~0u,
  18,
  19,
  0,
  10,
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, base_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, ring_size_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, min_ring_size_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, max_ring_size_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, aromatic_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, fused_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, min_fused_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, max_fused_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, fused_aromatic_neighbours_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, min_fused_aromatic_neighbours_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, max_fused_aromatic_neighbours_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, fused_non_aromatic_neighbours_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, min_fused_non_aromatic_neighbours_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSpecification, max_fused_non_aromatic_neighbours_),
  0,
  ~0u,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  ~0u,
  6,
  7,
  ~0u,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::RingSizeRequirement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::RingSizeRequirement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::RingSizeRequirement, ring_size_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::RingSizeRequirement, count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::RingSizeRequirement, min_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::RingSizeRequirement, max_count_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, base_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, rings_in_system_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_rings_in_system_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_rings_in_system_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, ring_sizes_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_ring_sizes_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_ring_sizes_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, ring_size_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, aromatic_ring_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_aromatic_ring_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_aromatic_ring_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, non_aromatic_ring_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_non_aromatic_ring_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_non_aromatic_ring_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, degree_of_fusion_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_degree_of_fusion_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_degree_of_fusion_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, atoms_in_system_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_atoms_in_system_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_atoms_in_system_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, number_spinach_groups_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_number_spinach_groups_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_number_spinach_groups_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, number_non_spinach_groups_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_number_non_spinach_groups_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_number_non_spinach_groups_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, atoms_in_spinach_group_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_atoms_in_spinach_group_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_atoms_in_spinach_group_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, length_of_spinach_group_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_length_of_spinach_group_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_length_of_spinach_group_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, distance_to_another_ring_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_distance_to_another_ring_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_distance_to_another_ring_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, strongly_fused_ring_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, min_strongly_fused_ring_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureRingSystemSpecification, max_strongly_fused_ring_count_),
  0,
  ~0u,
  1,
  2,
  ~0u,
  3,
  4,
  ~0u,
  ~0u,
  5,
  6,
  ~0u,
  7,
  8,
  ~0u,
  9,
  10,
  ~0u,
  11,
  12,
  ~0u,
  13,
  14,
  ~0u,
  15,
  16,
  ~0u,
  17,
  18,
  ~0u,
  19,
  20,
  ~0u,
  21,
  22,
  ~0u,
  23,
  24,
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, atomic_symbol_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, atomic_number_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, ncon_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_ncon_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_ncon_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, ncon2_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_ncon2_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_ncon2_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, nbonds_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_nbonds_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_nbonds_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, formal_charge_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_formal_charge_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_formal_charge_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, nrings_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_nrings_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_nrings_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, ring_bond_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_ring_bond_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_ring_bond_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, ring_size_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_ring_size_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_ring_size_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, hcount_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_hcount_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_hcount_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, aromatic_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, chirality_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, aromatic_ring_size_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_aromatic_ring_size_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_aromatic_ring_size_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, aliphatic_ring_size_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_aliphatic_ring_size_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_aliphatic_ring_size_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, attached_heteroatom_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_attached_heteroatom_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_attached_heteroatom_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, lone_pair_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_lone_pair_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_lone_pair_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, unsaturation_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_unsaturation_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_unsaturation_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, daylight_x_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_daylight_x_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_daylight_x_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, isotope_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_isotope_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_isotope_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, aryl_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_aryl_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_aryl_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, fused_system_size_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_fused_system_size_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_fused_system_size_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, vinyl_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_vinyl_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_vinyl_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, all_rings_kekule_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, heteroatoms_in_ring_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_heteroatoms_in_ring_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_heteroatoms_in_ring_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, match_spinach_only_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, scaffold_bonds_attached_to_ring_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_scaffold_bonds_attached_to_ring_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_scaffold_bonds_attached_to_ring_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, preference_value_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, symmetry_degree_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, min_symmetry_degree_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, max_symmetry_degree_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, symmetry_group_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, logical_operator_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, user_atom_type_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomSpecifier, atom_type_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  2,
  3,
  ~0u,
  4,
  5,
  ~0u,
  6,
  7,
  ~0u,
  8,
  9,
  ~0u,
  10,
  11,
  ~0u,
  12,
  13,
  ~0u,
  14,
  15,
  22,
  23,
  ~0u,
  16,
  17,
  ~0u,
  18,
  19,
  ~0u,
  20,
  21,
  ~0u,
  25,
  26,
  ~0u,
  27,
  28,
  ~0u,
  29,
  30,
  ~0u,
  31,
  32,
  ~0u,
  33,
  34,
  ~0u,
  35,
  36,
  ~0u,
  37,
  38,
  24,
  ~0u,
  39,
  40,
  41,
  ~0u,
  42,
  43,
  44,
  ~0u,
  45,
  46,
  47,
  50,
  48,
  49,
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomEnvironment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomEnvironment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomEnvironment, id_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomEnvironment, substructure_atom_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtomEnvironment, op_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, id_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, match_as_match_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, text_identifier_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, atom_map_number_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, initial_atom_number_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, or_id_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, atom_properties_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, or_operator_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, ring_id_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, fused_system_id_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, fragment_id_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, numeric_value_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, include_in_embedding_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, environment_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, query_bond_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, bond_smarts_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, single_bond_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, double_bond_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, triple_bond_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, aromatic_bond_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, bond_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, preference_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, sum_all_preference_hits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, unmatched_atoms_attached_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, min_unmatched_atoms_attached_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, max_unmatched_atoms_attached_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, atom_type_group_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureAtom, SmilesOrSmarts_),
  2,
  11,
  0,
  3,
  4,
  5,
  ~0u,
  6,
  7,
  8,
  9,
  10,
  12,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  13,
  ~0u,
  14,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, id_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, smarts_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, smiles_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, query_atom_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, attachment_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, bond_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, or_id_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, and_id_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, hits_needed_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, min_hits_needed_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, max_hits_needed_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, no_other_substituents_allowed_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, env_matches_can_share_attachment_points_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, max_matches_to_find_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, hydrogen_ok_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureEnvironment, max_env_matches_per_anchor_),
  1,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  2,
  3,
  ~0u,
  4,
  5,
  6,
  7,
  9,
  8,
  10,
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, id_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, label_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, comment_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, one_embedding_per_start_atom_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, normalise_rc_per_hits_needed_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, subtract_from_rc_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_matches_to_find_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, save_matched_atoms_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, ncon_ignore_singly_connected_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, perceive_symmetric_equivalents_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, implicit_ring_condition_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, all_hits_in_same_fragment_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, only_match_largest_fragment_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, embeddings_do_not_overlap_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, sort_by_preference_value_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, numeric_value_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, no_matched_atoms_between_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, no_matched_atoms_between_exhaustive_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, link_atoms_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, fail_if_embeddings_too_close_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, distance_between_hits_ncheck_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, sort_matches_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, attached_heteroatom_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_attached_heteroatom_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_attached_heteroatom_count_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, hits_needed_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_hits_needed_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_hits_needed_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, ring_atoms_matched_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_ring_atoms_matched_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_ring_atoms_matched_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, heteroatoms_matched_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_heteroatoms_matched_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_heteroatoms_matched_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, heteroatoms_in_molecule_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_heteroatoms_in_molecule_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_heteroatoms_in_molecule_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, natoms_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_natoms_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_natoms_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, nrings_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_nrings_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_nrings_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, ncon_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_ncon_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_ncon_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, fused_rings_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_fused_rings_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_fused_rings_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, strongly_fused_rings_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_strongly_fused_rings_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_strongly_fused_rings_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, isolated_rings_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_isolated_rings_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_isolated_rings_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, isolated_ring_objects_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_isolated_ring_objects_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_isolated_ring_objects_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, aromatic_rings_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_aromatic_rings_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_aromatic_rings_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, non_aromatic_rings_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_non_aromatic_rings_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_non_aromatic_rings_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, distance_between_hits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_distance_between_hits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_distance_between_hits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, number_isotopic_atoms_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_number_isotopic_atoms_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_number_isotopic_atoms_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, number_fragments_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_number_fragments_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_number_fragments_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, distance_between_root_atoms_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_distance_between_root_atoms_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_distance_between_root_atoms_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, atoms_in_spinach_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_atoms_in_spinach_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_atoms_in_spinach_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, inter_ring_atoms_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_inter_ring_atoms_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_inter_ring_atoms_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, unmatched_atoms_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_unmatched_atoms_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_unmatched_atoms_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, net_formal_charge_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_net_formal_charge_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_net_formal_charge_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_fraction_atoms_matched_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_fraction_atoms_matched_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, environment_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, environment_no_match_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, environment_must_match_unmatched_atoms_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, env_matches_can_share_attachment_points_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, ring_specification_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, ring_specification_logexp_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, ring_system_specifier_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, ring_system_specifier_logexp_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, element_hits_needed_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, elements_needed_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, aromatic_atoms_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, min_aromatic_atoms_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, max_aromatic_atoms_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, unique_embeddings_only_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, heteroatoms_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, respect_initial_atom_numbering_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, compress_embeddings_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, environments_can_share_attachment_points_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, query_atom_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, chiral_centre_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, atom_type_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SingleSubstructureQuery, smiles_or_smarts_),
  4,
  0,
  1,
  8,
  5,
  6,
  7,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  40,
  ~0u,
  41,
  17,
  2,
  ~0u,
  18,
  19,
  ~0u,
  20,
  21,
  ~0u,
  22,
  23,
  ~0u,
  24,
  25,
  ~0u,
  26,
  27,
  ~0u,
  28,
  29,
  ~0u,
  30,
  31,
  ~0u,
  32,
  33,
  ~0u,
  34,
  35,
  ~0u,
  36,
  37,
  ~0u,
  38,
  39,
  ~0u,
  44,
  45,
  ~0u,
  46,
  47,
  ~0u,
  48,
  49,
  ~0u,
  50,
  51,
  ~0u,
  52,
  53,
  ~0u,
  54,
  55,
  ~0u,
  56,
  57,
  ~0u,
  58,
  59,
  ~0u,
  60,
  61,
  ~0u,
  62,
  63,
  ~0u,
  64,
  65,
  66,
  67,
  ~0u,
  ~0u,
  42,
  43,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  68,
  69,
  70,
  ~0u,
  71,
  72,
  73,
  ~0u,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureQuery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureQuery, comment_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureQuery, query_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureQuery, logexp_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::SubstructureQuery, match_each_component_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::MinMaxSpecifierInt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::MinMaxSpecifierInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::MinMaxSpecifierInt, value_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::MinMaxSpecifierInt, min_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::MinMaxSpecifierInt, max_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::MinMaxSpecifierUInt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::MinMaxSpecifierUInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::MinMaxSpecifierUInt, value_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::MinMaxSpecifierUInt, min_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::MinMaxSpecifierUInt, max_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::QueryMatchResults_Matches, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::QueryMatchResults_Matches, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::QueryMatchResults_Matches, name_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::QueryMatchResults_Matches, nhits_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::QueryMatchResults, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::QueryMatchResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::QueryMatchResults, smiles_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::QueryMatchResults, name_),
  PROTOBUF_FIELD_OFFSET(::SubstructureSearch::QueryMatchResults, matches_),
  0,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SubstructureSearch::AtomNumberOrHLp)},
  { 8, 18, sizeof(::SubstructureSearch::SubstructureChiralCenter)},
  { 23, 30, sizeof(::SubstructureSearch::SubstructureBond)},
  { 32, -1, sizeof(::SubstructureSearch::SubstructureEnvironmentBond)},
  { 39, 50, sizeof(::SubstructureSearch::ElementsNeeded)},
  { 55, 63, sizeof(::SubstructureSearch::NoMatchedAtomsBetween)},
  { 66, 76, sizeof(::SubstructureSearch::LinkAtoms)},
  { 81, 89, sizeof(::SubstructureSearch::EnvironmentAttachment)},
  { 92, 100, sizeof(::SubstructureSearch::SubstructureRingEnvironment)},
  { 103, 136, sizeof(::SubstructureSearch::SubstructureRingBase)},
  { 164, 183, sizeof(::SubstructureSearch::SubstructureRingSpecification)},
  { 197, 206, sizeof(::SubstructureSearch::RingSizeRequirement)},
  { 210, 253, sizeof(::SubstructureSearch::SubstructureRingSystemSpecification)},
  { 291, 370, sizeof(::SubstructureSearch::SubstructureAtomSpecifier)},
  { 444, 452, sizeof(::SubstructureSearch::SubstructureAtomEnvironment)},
  { 455, 491, sizeof(::SubstructureSearch::SubstructureAtom)},
  { 521, 542, sizeof(::SubstructureSearch::SubstructureEnvironment)},
  { 558, 677, sizeof(::SubstructureSearch::SingleSubstructureQuery)},
  { 790, 799, sizeof(::SubstructureSearch::SubstructureQuery)},
  { 803, 811, sizeof(::SubstructureSearch::MinMaxSpecifierInt)},
  { 814, 822, sizeof(::SubstructureSearch::MinMaxSpecifierUInt)},
  { 825, 832, sizeof(::SubstructureSearch::QueryMatchResults_Matches)},
  { 834, 842, sizeof(::SubstructureSearch::QueryMatchResults)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubstructureSearch::_AtomNumberOrHLp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubstructureSearch::_SubstructureChiralCenter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubstructureSearch::_SubstructureBond_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubstructureSearch::_SubstructureEnvironmentBond_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubstructureSearch::_ElementsNeeded_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubstructureSearch::_NoMatchedAtomsBetween_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubstructureSearch::_LinkAtoms_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubstructureSearch::_EnvironmentAttachment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubstructureSearch::_SubstructureRingEnvironment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubstructureSearch::_SubstructureRingBase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubstructureSearch::_SubstructureRingSpecification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubstructureSearch::_RingSizeRequirement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubstructureSearch::_SubstructureRingSystemSpecification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubstructureSearch::_SubstructureAtomSpecifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubstructureSearch::_SubstructureAtomEnvironment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubstructureSearch::_SubstructureAtom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubstructureSearch::_SubstructureEnvironment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubstructureSearch::_SingleSubstructureQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubstructureSearch::_SubstructureQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubstructureSearch::_MinMaxSpecifierInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubstructureSearch::_MinMaxSpecifierUInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubstructureSearch::_QueryMatchResults_Matches_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SubstructureSearch::_QueryMatchResults_default_instance_),
};

const char descriptor_table_protodef_Molecule_5fLib_2fsubstructure_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037Molecule_Lib/substructure.proto\022\022Subst"
  "ructureSearch\"K\n\017AtomNumberOrHLp\022\025\n\013atom"
  "_number\030\001 \001(\rH\000\022\021\n\007h_or_lp\030\002 \001(\tH\000B\016\n\014At"
  "omNumberOr\"\212\002\n\030SubstructureChiralCenter\022"
  "\016\n\006center\030\001 \001(\r\0226\n\ttop_front\030\002 \001(\0132#.Sub"
  "structureSearch.AtomNumberOrHLp\0225\n\010top_b"
  "ack\030\003 \001(\0132#.SubstructureSearch.AtomNumbe"
  "rOrHLp\0226\n\tleft_down\030\004 \001(\0132#.Substructure"
  "Search.AtomNumberOrHLp\0227\n\nright_down\030\005 \001"
  "(\0132#.SubstructureSearch.AtomNumberOrHLp\""
  "V\n\020SubstructureBond\022/\n\tbond_type\030\001 \003(\0162\034"
  ".SubstructureSearch.BondType\022\021\n\tother_en"
  "d\030\002 \001(\r\"a\n\033SubstructureEnvironmentBond\022/"
  "\n\tbond_type\030\001 \003(\0162\034.SubstructureSearch.B"
  "ondType\022\021\n\tother_end\030\002 \003(\r\"\235\001\n\016ElementsN"
  "eeded\022\027\n\ratomic_number\030\001 \001(\rH\000\022\027\n\ratomic"
  "_symbol\030\002 \001(\tH\000\022\023\n\013hits_needed\030\003 \003(\r\022\027\n\017"
  "min_hits_needed\030\004 \001(\r\022\027\n\017max_hits_needed"
  "\030\005 \001(\rB\022\n\020ElementSpecifier\"B\n\025NoMatchedA"
  "tomsBetween\022\n\n\002a1\030\001 \001(\r\022\n\n\002a2\030\002 \001(\r\022\021\n\tq"
  "ualifier\030\003 \001(\t\"a\n\tLinkAtoms\022\n\n\002a1\030\001 \001(\r\022"
  "\n\n\002a2\030\002 \001(\r\022\020\n\010distance\030\003 \003(\r\022\024\n\014min_dis"
  "tance\030\004 \001(\r\022\024\n\014max_distance\030\005 \001(\r\"x\n\025Env"
  "ironmentAttachment\022\030\n\020attachment_point\030\001"
  " \003(\r\022*\n\004bond\030\002 \003(\0162\034.SubstructureSearch."
  "BondType\022\031\n\021substructure_bond\030\003 \001(\t\"\220\001\n\033"
  "SubstructureRingEnvironment\022\?\n\021substruct"
  "ure_atom\030\001 \001(\0132$.SubstructureSearch.Subs"
  "tructureAtom\022\027\n\017min_hits_needed\030\002 \001(\r\022\027\n"
  "\017max_hits_needed\030\003 \001(\r\"\342\007\n\024SubstructureR"
  "ingBase\022\026\n\016match_as_match\030\001 \001(\010\022\023\n\013hits_"
  "needed\030\002 \003(\r\022\027\n\017min_hits_needed\030\003 \001(\r\022\027\n"
  "\017max_hits_needed\030\004 \001(\r\022!\n\031attached_heter"
  "oatom_count\030\005 \003(\r\022%\n\035min_attached_hetero"
  "atom_count\030\006 \001(\r\022%\n\035max_attached_heteroa"
  "tom_count\030\007 \001(\r\022\030\n\020heteroatom_count\030\010 \003("
  "\r\022\034\n\024min_heteroatom_count\030\t \001(\r\022\034\n\024max_h"
  "eteroatom_count\030\n \001(\r\022\014\n\004ncon\030\013 \003(\r\022\020\n\010m"
  "in_ncon\030\014 \001(\r\022\020\n\010max_ncon\030\r \001(\r\022!\n\031all_h"
  "its_in_same_fragment\030\016 \001(\010\022 \n\030within_rin"
  "g_unsaturation\030\020 \003(\r\022$\n\034min_within_ring_"
  "unsaturation\030\021 \001(\r\022$\n\034max_within_ring_un"
  "saturation\030\022 \001(\r\0228\n0largest_number_of_bo"
  "nds_shared_with_another_ring\030\023 \003(\r\022<\n4mi"
  "n_largest_number_of_bonds_shared_with_an"
  "other_ring\030\024 \001(\r\022<\n4max_largest_number_o"
  "f_bonds_shared_with_another_ring\030\025 \001(\r\022\037"
  "\n\027atoms_with_pi_electrons\030\032 \003(\r\022#\n\033min_a"
  "toms_with_pi_electrons\030\033 \001(\r\022#\n\033max_atom"
  "s_with_pi_electrons\030\034 \001(\r\022&\n\036strongly_fu"
  "sed_ring_neighbours\030\035 \003(\r\022*\n\"min_strongl"
  "y_fused_ring_neighbours\030\036 \001(\r\022*\n\"max_str"
  "ongly_fused_ring_neighbours\030\037 \001(\r\022\023\n\013env"
  "ironment\030\026 \001(\t\022+\n#environment_can_match_"
  "in_ring_atoms\030\027 \001(\010\"\315\003\n\035SubstructureRing"
  "Specification\0226\n\004base\030\001 \001(\0132(.Substructu"
  "reSearch.SubstructureRingBase\022\021\n\tring_si"
  "ze\030\002 \003(\r\022\025\n\rmin_ring_size\030\003 \001(\r\022\025\n\rmax_r"
  "ing_size\030\004 \001(\r\022\020\n\010aromatic\030\005 \001(\010\022\r\n\005fuse"
  "d\030\006 \003(\r\022\021\n\tmin_fused\030\007 \001(\r\022\021\n\tmax_fused\030"
  "\010 \001(\r\022!\n\031fused_aromatic_neighbours\030\t \003(\r"
  "\022%\n\035min_fused_aromatic_neighbours\030\n \001(\r\022"
  "%\n\035max_fused_aromatic_neighbours\030\013 \001(\r\022%"
  "\n\035fused_non_aromatic_neighbours\030\014 \003(\r\022)\n"
  "!min_fused_non_aromatic_neighbours\030\r \001(\r"
  "\022)\n!max_fused_non_aromatic_neighbours\030\016 "
  "\001(\r\"]\n\023RingSizeRequirement\022\021\n\tring_size\030"
  "\001 \001(\r\022\r\n\005count\030\002 \003(\r\022\021\n\tmin_count\030\003 \001(\r\022"
  "\021\n\tmax_count\030\004 \001(\r\"\261\n\n#SubstructureRingS"
  "ystemSpecification\0226\n\004base\030\001 \001(\0132(.Subst"
  "ructureSearch.SubstructureRingBase\022\027\n\017ri"
  "ngs_in_system\030\002 \003(\r\022\033\n\023min_rings_in_syst"
  "em\030\003 \001(\r\022\033\n\023max_rings_in_system\030\004 \001(\r\022\022\n"
  "\nring_sizes\030\005 \003(\r\022\026\n\016min_ring_sizes\030\006 \001("
  "\r\022\026\n\016max_ring_sizes\030\007 \001(\r\022@\n\017ring_size_c"
  "ount\030\010 \003(\0132\'.SubstructureSearch.RingSize"
  "Requirement\022\033\n\023aromatic_ring_count\030\013 \003(\r"
  "\022\037\n\027min_aromatic_ring_count\030\014 \001(\r\022\037\n\027max"
  "_aromatic_ring_count\030\r \001(\r\022\037\n\027non_aromat"
  "ic_ring_count\030\016 \003(\r\022#\n\033min_non_aromatic_"
  "ring_count\030\017 \001(\r\022#\n\033max_non_aromatic_rin"
  "g_count\030\020 \001(\r\022\030\n\020degree_of_fusion\030\021 \003(\r\022"
  "\034\n\024min_degree_of_fusion\030\022 \001(\r\022\034\n\024max_deg"
  "ree_of_fusion\030\023 \001(\r\022\027\n\017atoms_in_system\030\024"
  " \003(\r\022\033\n\023min_atoms_in_system\030\025 \001(\r\022\033\n\023max"
  "_atoms_in_system\030\026 \001(\r\022\035\n\025number_spinach"
  "_groups\030\027 \003(\r\022!\n\031min_number_spinach_grou"
  "ps\030\030 \001(\r\022!\n\031max_number_spinach_groups\030\031 "
  "\001(\r\022!\n\031number_non_spinach_groups\030\032 \003(\r\022%"
  "\n\035min_number_non_spinach_groups\030\033 \001(\r\022%\n"
  "\035max_number_non_spinach_groups\030\034 \001(\r\022\036\n\026"
  "atoms_in_spinach_group\030\035 \003(\r\022\"\n\032min_atom"
  "s_in_spinach_group\030\036 \001(\r\022\"\n\032max_atoms_in"
  "_spinach_group\030\037 \001(\r\022\037\n\027length_of_spinac"
  "h_group\030  \003(\r\022#\n\033min_length_of_spinach_g"
  "roup\030! \001(\r\022#\n\033max_length_of_spinach_grou"
  "p\030\" \001(\r\022 \n\030distance_to_another_ring\030# \003("
  "\r\022$\n\034min_distance_to_another_ring\030$ \001(\r\022"
  "$\n\034max_distance_to_another_ring\030% \001(\r\022!\n"
  "\031strongly_fused_ring_count\030& \003(\r\022%\n\035min_"
  "strongly_fused_ring_count\030\' \001(\r\022%\n\035max_s"
  "trongly_fused_ring_count\030( \001(\r\"\346\016\n\031Subst"
  "ructureAtomSpecifier\022\025\n\ratomic_symbol\030\001 "
  "\003(\t\022\025\n\ratomic_number\030\002 \003(\r\022\014\n\004ncon\030\003 \003(\r"
  "\022\020\n\010min_ncon\030\004 \001(\r\022\020\n\010max_ncon\030\005 \001(\r\022\r\n\005"
  "ncon2\030\006 \003(\r\022\021\n\tmin_ncon2\030\007 \001(\r\022\021\n\tmax_nc"
  "on2\030\010 \001(\r\022\016\n\006nbonds\030\t \003(\r\022\022\n\nmin_nbonds\030"
  "\n \001(\r\022\022\n\nmax_nbonds\030\013 \001(\r\022\025\n\rformal_char"
  "ge\030\014 \003(\005\022\031\n\021min_formal_charge\030\r \001(\005\022\031\n\021m"
  "ax_formal_charge\030\016 \001(\005\022\016\n\006nrings\030\017 \003(\r\022\022"
  "\n\nmin_nrings\030\020 \001(\r\022\022\n\nmax_nrings\030\021 \001(\r\022\027"
  "\n\017ring_bond_count\030\022 \003(\r\022\033\n\023min_ring_bond"
  "_count\030\023 \001(\r\022\033\n\023max_ring_bond_count\030\024 \001("
  "\r\022\021\n\tring_size\030\025 \003(\r\022\025\n\rmin_ring_size\030\026 "
  "\001(\r\022\025\n\rmax_ring_size\030\027 \001(\r\022\016\n\006hcount\030\030 \003"
  "(\r\022\022\n\nmin_hcount\030\031 \001(\r\022\022\n\nmax_hcount\030\032 \001"
  "(\r\022\020\n\010aromatic\030\033 \001(\010\022\021\n\tchirality\030\034 \001(\010\022"
  "\032\n\022aromatic_ring_size\030\036 \003(\r\022\036\n\026min_aroma"
  "tic_ring_size\030\037 \001(\r\022\036\n\026max_aromatic_ring"
  "_size\030  \001(\r\022\033\n\023aliphatic_ring_size\030! \003(\r"
  "\022\037\n\027min_aliphatic_ring_size\030\" \001(\r\022\037\n\027max"
  "_aliphatic_ring_size\030# \001(\r\022!\n\031attached_h"
  "eteroatom_count\030$ \003(\r\022%\n\035min_attached_he"
  "teroatom_count\030% \001(\r\022%\n\035max_attached_het"
  "eroatom_count\030& \001(\r\022\027\n\017lone_pair_count\030\'"
  " \003(\r\022\033\n\023min_lone_pair_count\030( \001(\r\022\033\n\023max"
  "_lone_pair_count\030) \001(\r\022\024\n\014unsaturation\030*"
  " \003(\r\022\030\n\020min_unsaturation\030+ \001(\r\022\030\n\020max_un"
  "saturation\030, \001(\r\022\022\n\ndaylight_x\030- \003(\r\022\026\n\016"
  "min_daylight_x\030. \001(\r\022\026\n\016max_daylight_x\030/"
  " \001(\r\022\017\n\007isotope\0300 \003(\r\022\023\n\013min_isotope\0301 \001"
  "(\r\022\023\n\013max_isotope\0302 \001(\r\022\014\n\004aryl\0303 \003(\r\022\020\n"
  "\010min_aryl\0304 \001(\r\022\020\n\010max_aryl\0305 \001(\r\022\031\n\021fus"
  "ed_system_size\0306 \003(\r\022\035\n\025min_fused_system"
  "_size\0307 \001(\r\022\035\n\025max_fused_system_size\0308 \001"
  "(\r\022\r\n\005vinyl\0309 \003(\r\022\021\n\tmin_vinyl\030: \001(\r\022\021\n\t"
  "max_vinyl\030; \001(\r\022\030\n\020all_rings_kekule\030< \001("
  "\010\022\033\n\023heteroatoms_in_ring\030= \003(\r\022\037\n\027min_he"
  "teroatoms_in_ring\030> \001(\r\022\037\n\027max_heteroato"
  "ms_in_ring\030\? \001(\r\022\032\n\022match_spinach_only\030@"
  " \001(\005\022\'\n\037scaffold_bonds_attached_to_ring\030"
  "A \003(\r\022+\n#min_scaffold_bonds_attached_to_"
  "ring\030B \001(\r\022+\n#max_scaffold_bonds_attache"
  "d_to_ring\030C \001(\r\022\030\n\020preference_value\030D \001("
  "\005\022\027\n\017symmetry_degree\030E \003(\r\022\033\n\023min_symmet"
  "ry_degree\030F \001(\r\022\033\n\023max_symmetry_degree\030G"
  " \001(\r\022\026\n\016symmetry_group\030H \001(\005\0226\n\020logical_"
  "operator\030L \001(\0162\034.SubstructureSearch.Oper"
  "ator\022\026\n\016user_atom_type\030M \001(\r\022\021\n\tatom_typ"
  "e\030N \001(\r\"v\n\033SubstructureAtomEnvironment\022\n"
  "\n\002id\030\001 \001(\r\022\?\n\021substructure_atom\030\002 \003(\0132$."
  "SubstructureSearch.SubstructureAtom\022\n\n\002o"
  "p\030\003 \001(\t\"\226\007\n\020SubstructureAtom\022\n\n\002id\030\001 \001(\005"
  "\022\026\n\016match_as_match\030\002 \001(\010\022\027\n\017text_identif"
  "ier\030\003 \001(\t\022\027\n\017atom_map_number\030\004 \001(\r\022\033\n\023in"
  "itial_atom_number\030\005 \001(\r\022\r\n\005or_id\030\006 \001(\r\022F"
  "\n\017atom_properties\030\007 \003(\0132-.SubstructureSe"
  "arch.SubstructureAtomSpecifier\022\023\n\013or_ope"
  "rator\030\010 \001(\005\022\017\n\007ring_id\030\t \001(\005\022\027\n\017fused_sy"
  "stem_id\030\n \001(\r\022\023\n\013fragment_id\030\013 \001(\005\022\025\n\rnu"
  "meric_value\030\014 \001(\001\022\034\n\024include_in_embeddin"
  "g\030\r \001(\010\022\020\n\006smarts\030\016 \001(\tH\000\022\025\n\013atom_smarts"
  "\030\017 \001(\tH\000\022\020\n\006smiles\030\020 \001(\tH\000\022D\n\013environmen"
  "t\030\021 \003(\0132/.SubstructureSearch.Substructur"
  "eAtomEnvironment\0228\n\nquery_bond\030\025 \003(\0132$.S"
  "ubstructureSearch.SubstructureBond\022\023\n\013bo"
  "nd_smarts\030\026 \001(\t\022\023\n\013single_bond\030\031 \003(\r\022\023\n\013"
  "double_bond\030\032 \003(\r\022\023\n\013triple_bond\030\033 \003(\r\022\025"
  "\n\raromatic_bond\030\034 \003(\r\022\014\n\004bond\030\035 \003(\r\022A\n\np"
  "reference\030\027 \003(\0132-.SubstructureSearch.Sub"
  "structureAtomSpecifier\022\037\n\027sum_all_prefer"
  "ence_hits\030\030 \001(\010\022 \n\030unmatched_atoms_attac"
  "hed\030\036 \003(\r\022$\n\034min_unmatched_atoms_attache"
  "d\030\037 \001(\r\022$\n\034max_unmatched_atoms_attached\030"
  "  \001(\r\022\027\n\017atom_type_group\030! \001(\rB\020\n\016Smiles"
  "OrSmarts\"\340\003\n\027SubstructureEnvironment\022\n\n\002"
  "id\030\001 \001(\r\022\016\n\006smarts\030\003 \003(\t\022\016\n\006smiles\030\004 \003(\t"
  "\0228\n\nquery_atom\030\005 \003(\0132$.SubstructureSearc"
  "h.SubstructureAtom\022=\n\nattachment\030\006 \001(\0132)"
  ".SubstructureSearch.EnvironmentAttachmen"
  "t\022\014\n\004bond\030\007 \003(\t\022\r\n\005or_id\030\010 \001(\r\022\016\n\006and_id"
  "\030\t \001(\r\022\023\n\013hits_needed\030\n \003(\r\022\027\n\017min_hits_"
  "needed\030\013 \001(\r\022\027\n\017max_hits_needed\030\014 \001(\r\022%\n"
  "\035no_other_substituents_allowed\030\r \001(\010\022/\n\'"
  "env_matches_can_share_attachment_points\030"
  "\017 \001(\010\022\033\n\023max_matches_to_find\030\020 \001(\r\022\023\n\013hy"
  "drogen_ok\030\021 \001(\010\022\"\n\032max_env_matches_per_a"
  "nchor\030\022 \001(\r\"\245\036\n\027SingleSubstructureQuery\022"
  "\n\n\002id\030\001 \001(\005\022\r\n\005label\030\002 \001(\t\022\017\n\007comment\030\003 "
  "\001(\t\022$\n\034one_embedding_per_start_atom\030\004 \001("
  "\010\022$\n\034normalise_rc_per_hits_needed\030\005 \001(\r\022"
  "\030\n\020subtract_from_rc\030\006 \001(\r\022\033\n\023max_matches"
  "_to_find\030\010 \001(\r\022\032\n\022save_matched_atoms\030\t \001"
  "(\010\022$\n\034ncon_ignore_singly_connected\030\n \001(\010"
  "\022&\n\036perceive_symmetric_equivalents\030\013 \001(\010"
  "\022\037\n\027implicit_ring_condition\030\014 \001(\r\022!\n\031all"
  "_hits_in_same_fragment\030\r \001(\010\022#\n\033only_mat"
  "ch_largest_fragment\030\016 \001(\010\022!\n\031embeddings_"
  "do_not_overlap\030\017 \001(\010\022 \n\030sort_by_preferen"
  "ce_value\030\020 \001(\010\022\020\n\006smiles\030\021 \001(\tH\000\022\020\n\006smar"
  "ts\030\022 \001(\tH\000\022\025\n\rnumeric_value\030\023 \003(\001\022K\n\030no_"
  "matched_atoms_between\030\024 \003(\0132).Substructu"
  "reSearch.NoMatchedAtomsBetween\022+\n#no_mat"
  "ched_atoms_between_exhaustive\030\025 \001(\010\0221\n\nl"
  "ink_atoms\030\026 \003(\0132\035.SubstructureSearch.Lin"
  "kAtoms\022$\n\034fail_if_embeddings_too_close\030\027"
  " \001(\010\022$\n\034distance_between_hits_ncheck\030\030 \001"
  "(\r\022\024\n\014sort_matches\030\031 \001(\t\022!\n\031attached_het"
  "eroatom_count\030\032 \003(\r\022%\n\035min_attached_hete"
  "roatom_count\030\033 \001(\r\022%\n\035max_attached_heter"
  "oatom_count\030\034 \001(\r\022\023\n\013hits_needed\030\035 \003(\r\022\027"
  "\n\017min_hits_needed\030\036 \001(\r\022\027\n\017max_hits_need"
  "ed\030\037 \001(\r\022\032\n\022ring_atoms_matched\030  \003(\r\022\036\n\026"
  "min_ring_atoms_matched\030! \001(\r\022\036\n\026max_ring"
  "_atoms_matched\030\" \001(\r\022\033\n\023heteroatoms_matc"
  "hed\030# \003(\r\022\037\n\027min_heteroatoms_matched\030$ \001"
  "(\r\022\037\n\027max_heteroatoms_matched\030% \001(\r\022\037\n\027h"
  "eteroatoms_in_molecule\030& \003(\r\022#\n\033min_hete"
  "roatoms_in_molecule\030\' \001(\r\022#\n\033max_heteroa"
  "toms_in_molecule\030( \001(\r\022\016\n\006natoms\030) \003(\r\022\022"
  "\n\nmin_natoms\030* \001(\r\022\022\n\nmax_natoms\030+ \001(\r\022\016"
  "\n\006nrings\030, \003(\r\022\022\n\nmin_nrings\030- \001(\r\022\022\n\nma"
  "x_nrings\030. \001(\r\022\014\n\004ncon\030/ \003(\r\022\020\n\010min_ncon"
  "\0300 \001(\r\022\020\n\010max_ncon\0301 \001(\r\022\023\n\013fused_rings\030"
  "2 \003(\r\022\027\n\017min_fused_rings\0303 \001(\r\022\027\n\017max_fu"
  "sed_rings\0304 \001(\r\022\034\n\024strongly_fused_rings\030"
  "5 \003(\r\022 \n\030min_strongly_fused_rings\0306 \001(\r\022"
  " \n\030max_strongly_fused_rings\0307 \001(\r\022\026\n\016iso"
  "lated_rings\0308 \003(\r\022\032\n\022min_isolated_rings\030"
  "9 \001(\r\022\032\n\022max_isolated_rings\030: \001(\r\022\035\n\025iso"
  "lated_ring_objects\030; \003(\r\022!\n\031min_isolated"
  "_ring_objects\030< \001(\r\022!\n\031max_isolated_ring"
  "_objects\030= \001(\r\022\026\n\016aromatic_rings\030> \003(\r\022\032"
  "\n\022min_aromatic_rings\030\? \001(\r\022\032\n\022max_aromat"
  "ic_rings\030@ \001(\r\022\032\n\022non_aromatic_rings\030A \003"
  "(\r\022\036\n\026min_non_aromatic_rings\030B \001(\r\022\036\n\026ma"
  "x_non_aromatic_rings\030C \001(\r\022\035\n\025distance_b"
  "etween_hits\030D \003(\r\022!\n\031min_distance_betwee"
  "n_hits\030E \001(\r\022!\n\031max_distance_between_hit"
  "s\030F \001(\r\022\035\n\025number_isotopic_atoms\030G \003(\r\022!"
  "\n\031min_number_isotopic_atoms\030H \001(\r\022!\n\031max"
  "_number_isotopic_atoms\030I \001(\r\022\030\n\020number_f"
  "ragments\030J \003(\r\022\034\n\024min_number_fragments\030K"
  " \001(\r\022\034\n\024max_number_fragments\030L \001(\r\022#\n\033di"
  "stance_between_root_atoms\030M \003(\r\022\'\n\037min_d"
  "istance_between_root_atoms\030N \001(\r\022\'\n\037max_"
  "distance_between_root_atoms\030O \001(\r\022\030\n\020ato"
  "ms_in_spinach\030P \003(\r\022\034\n\024min_atoms_in_spin"
  "ach\030Q \001(\r\022\034\n\024max_atoms_in_spinach\030R \001(\r\022"
  "\030\n\020inter_ring_atoms\030S \003(\r\022\034\n\024min_inter_r"
  "ing_atoms\030T \001(\r\022\034\n\024max_inter_ring_atoms\030"
  "U \001(\r\022\027\n\017unmatched_atoms\030V \003(\r\022\033\n\023min_un"
  "matched_atoms\030W \001(\r\022\033\n\023max_unmatched_ato"
  "ms\030X \001(\r\022\031\n\021net_formal_charge\030Y \003(\005\022\035\n\025m"
  "in_net_formal_charge\030Z \001(\005\022\035\n\025max_net_fo"
  "rmal_charge\030[ \001(\005\022\"\n\032min_fraction_atoms_"
  "matched\030\\ \001(\002\022\"\n\032max_fraction_atoms_matc"
  "hed\030] \001(\002\022@\n\013environment\030^ \003(\0132+.Substru"
  "ctureSearch.SubstructureEnvironment\022I\n\024e"
  "nvironment_no_match\030_ \003(\0132+.Substructure"
  "Search.SubstructureEnvironment\022.\n&enviro"
  "nment_must_match_unmatched_atoms\030` \001(\010\022/"
  "\n\'env_matches_can_share_attachment_point"
  "s\030a \001(\010\022M\n\022ring_specification\030b \003(\01321.Su"
  "bstructureSearch.SubstructureRingSpecifi"
  "cation\022\?\n\031ring_specification_logexp\030c \003("
  "\0162\034.SubstructureSearch.Operator\022V\n\025ring_"
  "system_specifier\030d \003(\01327.SubstructureSea"
  "rch.SubstructureRingSystemSpecification\022"
  "B\n\034ring_system_specifier_logexp\030e \003(\0162\034."
  "SubstructureSearch.Operator\022\?\n\023element_h"
  "its_needed\030f \003(\0132\".SubstructureSearch.El"
  "ementsNeeded\022;\n\017elements_needed\030g \003(\0132\"."
  "SubstructureSearch.ElementsNeeded\022\026\n\016aro"
  "matic_atoms\030h \003(\r\022\032\n\022min_aromatic_atoms\030"
  "i \001(\r\022\032\n\022max_aromatic_atoms\030j \001(\r\022\036\n\026uni"
  "que_embeddings_only\030n \001(\010\022\023\n\013heteroatoms"
  "\030p \003(\r\022&\n\036respect_initial_atom_numbering"
  "\030q \001(\010\022\033\n\023compress_embeddings\030r \001(\010\0220\n(e"
  "nvironments_can_share_attachment_points\030"
  "s \001(\010\0228\n\nquery_atom\030t \003(\0132$.Substructure"
  "Search.SubstructureAtom\022C\n\rchiral_centre"
  "\030u \003(\0132,.SubstructureSearch.Substructure"
  "ChiralCenter\022\021\n\tatom_type\030w \001(\tB\022\n\020smile"
  "s_or_smarts\"\254\001\n\021SubstructureQuery\022\017\n\007com"
  "ment\030\001 \001(\t\022:\n\005query\030\002 \003(\0132+.Substructure"
  "Search.SingleSubstructureQuery\022,\n\006logexp"
  "\030\003 \003(\0162\034.SubstructureSearch.Operator\022\034\n\024"
  "match_each_component\030\004 \001(\005\"=\n\022MinMaxSpec"
  "ifierInt\022\r\n\005value\030\001 \003(\005\022\013\n\003min\030\002 \001(\005\022\013\n\003"
  "max\030\003 \001(\005\">\n\023MinMaxSpecifierUInt\022\r\n\005valu"
  "e\030\001 \003(\r\022\013\n\003min\030\002 \001(\r\022\013\n\003max\030\003 \001(\r\"\231\001\n\021Qu"
  "eryMatchResults\022\016\n\006smiles\030\001 \001(\t\022\014\n\004name\030"
  "\002 \001(\t\022>\n\007matches\030\003 \003(\0132-.SubstructureSea"
  "rch.QueryMatchResults.Matches\032&\n\007Matches"
  "\022\014\n\004name\030\001 \001(\t\022\r\n\005nhits\030\002 \001(\r*0\n\013Aromati"
  "city\022\020\n\014SS_ALIPHATIC\020\001\022\017\n\013SS_AROMATIC\020\002*"
  "i\n\010BondType\022\022\n\016SS_SINGLE_BOND\020\003\022\022\n\016SS_DO"
  "UBLE_BOND\020\004\022\022\n\016SS_TRIPLE_BOND\020\005\022\024\n\020SS_AR"
  "OMATIC_BOND\020\006\022\013\n\007SS_BOND\020\007*<\n\010Operator\022\t"
  "\n\005SS_OR\020\010\022\n\n\006SS_AND\020\t\022\n\n\006SS_XOR\020\n\022\r\n\tSS_"
  "LP_AND\020\013"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Molecule_5fLib_2fsubstructure_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Molecule_5fLib_2fsubstructure_2eproto_sccs[22] = {
  &scc_info_AtomNumberOrHLp_Molecule_5fLib_2fsubstructure_2eproto.base,
  &scc_info_ElementsNeeded_Molecule_5fLib_2fsubstructure_2eproto.base,
  &scc_info_EnvironmentAttachment_Molecule_5fLib_2fsubstructure_2eproto.base,
  &scc_info_LinkAtoms_Molecule_5fLib_2fsubstructure_2eproto.base,
  &scc_info_MinMaxSpecifierInt_Molecule_5fLib_2fsubstructure_2eproto.base,
  &scc_info_MinMaxSpecifierUInt_Molecule_5fLib_2fsubstructure_2eproto.base,
  &scc_info_NoMatchedAtomsBetween_Molecule_5fLib_2fsubstructure_2eproto.base,
  &scc_info_QueryMatchResults_Molecule_5fLib_2fsubstructure_2eproto.base,
  &scc_info_QueryMatchResults_Matches_Molecule_5fLib_2fsubstructure_2eproto.base,
  &scc_info_RingSizeRequirement_Molecule_5fLib_2fsubstructure_2eproto.base,
  &scc_info_SingleSubstructureQuery_Molecule_5fLib_2fsubstructure_2eproto.base,
  &scc_info_SubstructureAtom_Molecule_5fLib_2fsubstructure_2eproto.base,
  &scc_info_SubstructureAtomSpecifier_Molecule_5fLib_2fsubstructure_2eproto.base,
  &scc_info_SubstructureBond_Molecule_5fLib_2fsubstructure_2eproto.base,
  &scc_info_SubstructureChiralCenter_Molecule_5fLib_2fsubstructure_2eproto.base,
  &scc_info_SubstructureEnvironment_Molecule_5fLib_2fsubstructure_2eproto.base,
  &scc_info_SubstructureEnvironmentBond_Molecule_5fLib_2fsubstructure_2eproto.base,
  &scc_info_SubstructureQuery_Molecule_5fLib_2fsubstructure_2eproto.base,
  &scc_info_SubstructureRingBase_Molecule_5fLib_2fsubstructure_2eproto.base,
  &scc_info_SubstructureRingEnvironment_Molecule_5fLib_2fsubstructure_2eproto.base,
  &scc_info_SubstructureRingSpecification_Molecule_5fLib_2fsubstructure_2eproto.base,
  &scc_info_SubstructureRingSystemSpecification_Molecule_5fLib_2fsubstructure_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Molecule_5fLib_2fsubstructure_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Molecule_5fLib_2fsubstructure_2eproto = {
  false, false, descriptor_table_protodef_Molecule_5fLib_2fsubstructure_2eproto, "Molecule_Lib/substructure.proto", 12048,
  &descriptor_table_Molecule_5fLib_2fsubstructure_2eproto_once, descriptor_table_Molecule_5fLib_2fsubstructure_2eproto_sccs, descriptor_table_Molecule_5fLib_2fsubstructure_2eproto_deps, 22, 0,
  schemas, file_default_instances, TableStruct_Molecule_5fLib_2fsubstructure_2eproto::offsets,
  file_level_metadata_Molecule_5fLib_2fsubstructure_2eproto, 23, file_level_enum_descriptors_Molecule_5fLib_2fsubstructure_2eproto, file_level_service_descriptors_Molecule_5fLib_2fsubstructure_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Molecule_5fLib_2fsubstructure_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Molecule_5fLib_2fsubstructure_2eproto)), true);
namespace SubstructureSearch {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Aromaticity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
  return file_level_enum_descriptors_Molecule_5fLib_2fsubstructure_2eproto[0];
}
bool Aromaticity_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BondType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
  return file_level_enum_descriptors_Molecule_5fLib_2fsubstructure_2eproto[1];
}
bool BondType_IsValid(int value) {
  switch (value) {
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Molecule_5fLib_2fsubstructure_2eproto);
  return file_level_enum_descriptors_Molecule_5fLib_2fsubstructure_2eproto[2];
}
bool Operator_IsValid(int value) {
  switch (value) {
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class AtomNumberOrHLp::_Internal {
 public:
};

AtomNumberOrHLp::AtomNumberOrHLp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubstructureSearch.AtomNumberOrHLp)
}
AtomNumberOrHLp::AtomNumberOrHLp(const AtomNumberOrHLp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_AtomNumberOr();
  switch (from.AtomNumberOr_case()) {
    case kAtomNumber: {
      _internal_set_atom_number(from._internal_atom_number());
      break;
    }
    case kHOrLp: {
      _internal_set_h_or_lp(from._internal_h_or_lp());
      break;
    }
    case ATOMNUMBEROR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.AtomNumberOrHLp)
}

void AtomNumberOrHLp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AtomNumberOrHLp_Molecule_5fLib_2fsubstructure_2eproto.base);
  clear_has_AtomNumberOr();
}

AtomNumberOrHLp::~AtomNumberOrHLp() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.AtomNumberOrHLp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AtomNumberOrHLp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_AtomNumberOr()) {
    clear_AtomNumberOr();
  }
}

void AtomNumberOrHLp::ArenaDtor(void* object) {
  AtomNumberOrHLp* _this = reinterpret_cast< AtomNumberOrHLp* >(object);
  (void)_this;
}
void AtomNumberOrHLp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AtomNumberOrHLp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AtomNumberOrHLp& AtomNumberOrHLp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AtomNumberOrHLp_Molecule_5fLib_2fsubstructure_2eproto.base);
  return *internal_default_instance();
}


void AtomNumberOrHLp::clear_AtomNumberOr() {
// @@protoc_insertion_point(one_of_clear_start:SubstructureSearch.AtomNumberOrHLp)
  switch (AtomNumberOr_case()) {
    case kAtomNumber: {
      // No need to clear
      break;
    }
    case kHOrLp: {
      AtomNumberOr_.h_or_lp_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case ATOMNUMBEROR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ATOMNUMBEROR_NOT_SET;
}


void AtomNumberOrHLp::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.AtomNumberOrHLp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_AtomNumberOr();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AtomNumberOrHLp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 atom_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_atom_number(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string h_or_lp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_h_or_lp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.AtomNumberOrHLp.h_or_lp");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AtomNumberOrHLp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.AtomNumberOrHLp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (AtomNumberOr_case()) {
    case kAtomNumber: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_atom_number(), target);
      break;
    }
    case kHOrLp: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_h_or_lp().data(), static_cast<int>(this->_internal_h_or_lp().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "SubstructureSearch.AtomNumberOrHLp.h_or_lp");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_h_or_lp(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.AtomNumberOrHLp)
  return target;
}

size_t AtomNumberOrHLp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.AtomNumberOrHLp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (AtomNumberOr_case()) {
    // uint32 atom_number = 1;
    case kAtomNumber: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_atom_number());
      break;
    }
    // string h_or_lp = 2;
    case kHOrLp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_h_or_lp());
      break;
    }
    case ATOMNUMBEROR_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AtomNumberOrHLp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.AtomNumberOrHLp)
  GOOGLE_DCHECK_NE(&from, this);
  const AtomNumberOrHLp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AtomNumberOrHLp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.AtomNumberOrHLp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.AtomNumberOrHLp)
    MergeFrom(*source);
  }
}

void AtomNumberOrHLp::MergeFrom(const AtomNumberOrHLp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.AtomNumberOrHLp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.AtomNumberOr_case()) {
    case kAtomNumber: {
      _internal_set_atom_number(from._internal_atom_number());
      break;
    }
    case kHOrLp: {
      _internal_set_h_or_lp(from._internal_h_or_lp());
      break;
    }
    case ATOMNUMBEROR_NOT_SET: {
      break;
    }
  }
}

void AtomNumberOrHLp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.AtomNumberOrHLp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AtomNumberOrHLp::CopyFrom(const AtomNumberOrHLp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.AtomNumberOrHLp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AtomNumberOrHLp::IsInitialized() const {
  return true;
}

void AtomNumberOrHLp::InternalSwap(AtomNumberOrHLp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(AtomNumberOr_, other->AtomNumberOr_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AtomNumberOrHLp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstructureChiralCenter::_Internal {
 public:
  using HasBits = decltype(std::declval<SubstructureChiralCenter>()._has_bits_);
  static void set_has_center(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::SubstructureSearch::AtomNumberOrHLp& top_front(const SubstructureChiralCenter* msg);
  static void set_has_top_front(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SubstructureSearch::AtomNumberOrHLp& top_back(const SubstructureChiralCenter* msg);
  static void set_has_top_back(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::SubstructureSearch::AtomNumberOrHLp& left_down(const SubstructureChiralCenter* msg);
  static void set_has_left_down(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::SubstructureSearch::AtomNumberOrHLp& right_down(const SubstructureChiralCenter* msg);
  static void set_has_right_down(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::SubstructureSearch::AtomNumberOrHLp&
SubstructureChiralCenter::_Internal::top_front(const SubstructureChiralCenter* msg) {
  return *msg->top_front_;
}
const ::SubstructureSearch::AtomNumberOrHLp&
SubstructureChiralCenter::_Internal::top_back(const SubstructureChiralCenter* msg) {
  return *msg->top_back_;
}
const ::SubstructureSearch::AtomNumberOrHLp&
SubstructureChiralCenter::_Internal::left_down(const SubstructureChiralCenter* msg) {
  return *msg->left_down_;
}
const ::SubstructureSearch::AtomNumberOrHLp&
SubstructureChiralCenter::_Internal::right_down(const SubstructureChiralCenter* msg) {
  return *msg->right_down_;
}
SubstructureChiralCenter::SubstructureChiralCenter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubstructureSearch.SubstructureChiralCenter)
}
SubstructureChiralCenter::SubstructureChiralCenter(const SubstructureChiralCenter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_top_front()) {
    top_front_ = new ::SubstructureSearch::AtomNumberOrHLp(*from.top_front_);
  } else {
    top_front_ = nullptr;
  }
  if (from._internal_has_top_back()) {
    top_back_ = new ::SubstructureSearch::AtomNumberOrHLp(*from.top_back_);
  } else {
    top_back_ = nullptr;
  }
  if (from._internal_has_left_down()) {
    left_down_ = new ::SubstructureSearch::AtomNumberOrHLp(*from.left_down_);
  } else {
    left_down_ = nullptr;
  }
  if (from._internal_has_right_down()) {
    right_down_ = new ::SubstructureSearch::AtomNumberOrHLp(*from.right_down_);
  } else {
    right_down_ = nullptr;
  }
  center_ = from.center_;
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureChiralCenter)
}

void SubstructureChiralCenter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstructureChiralCenter_Molecule_5fLib_2fsubstructure_2eproto.base);
  ::memset(&top_front_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&center_) -
      reinterpret_cast<char*>(&top_front_)) + sizeof(center_));
}

SubstructureChiralCenter::~SubstructureChiralCenter() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureChiralCenter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstructureChiralCenter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete top_front_;
  if (this != internal_default_instance()) delete top_back_;
  if (this != internal_default_instance()) delete left_down_;
  if (this != internal_default_instance()) delete right_down_;
}

void SubstructureChiralCenter::ArenaDtor(void* object) {
  SubstructureChiralCenter* _this = reinterpret_cast< SubstructureChiralCenter* >(object);
  (void)_this;
}
void SubstructureChiralCenter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstructureChiralCenter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstructureChiralCenter& SubstructureChiralCenter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstructureChiralCenter_Molecule_5fLib_2fsubstructure_2eproto.base);
  return *internal_default_instance();
}


void SubstructureChiralCenter::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureChiralCenter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(top_front_ != nullptr);
      top_front_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(top_back_ != nullptr);
      top_back_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(left_down_ != nullptr);
      left_down_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(right_down_ != nullptr);
      right_down_->Clear();
    }
  }
  center_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstructureChiralCenter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_center(&has_bits);
          center_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SubstructureSearch.AtomNumberOrHLp top_front = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_front(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SubstructureSearch.AtomNumberOrHLp top_back = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_back(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SubstructureSearch.AtomNumberOrHLp left_down = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_down(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SubstructureSearch.AtomNumberOrHLp right_down = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_down(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstructureChiralCenter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureChiralCenter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 center = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_center(), target);
  }

  // optional .SubstructureSearch.AtomNumberOrHLp top_front = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::top_front(this), target, stream);
  }

  // optional .SubstructureSearch.AtomNumberOrHLp top_back = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::top_back(this), target, stream);
  }

  // optional .SubstructureSearch.AtomNumberOrHLp left_down = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::left_down(this), target, stream);
  }

  // optional .SubstructureSearch.AtomNumberOrHLp right_down = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::right_down(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureChiralCenter)
  return target;
}

size_t SubstructureChiralCenter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureChiralCenter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .SubstructureSearch.AtomNumberOrHLp top_front = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *top_front_);
    }

    // optional .SubstructureSearch.AtomNumberOrHLp top_back = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *top_back_);
    }

    // optional .SubstructureSearch.AtomNumberOrHLp left_down = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *left_down_);
    }

    // optional .SubstructureSearch.AtomNumberOrHLp right_down = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *right_down_);
    }

    // optional uint32 center = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_center());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureChiralCenter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureChiralCenter)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureChiralCenter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstructureChiralCenter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureChiralCenter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureChiralCenter)
    MergeFrom(*source);
  }
}

void SubstructureChiralCenter::MergeFrom(const SubstructureChiralCenter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureChiralCenter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_top_front()->::SubstructureSearch::AtomNumberOrHLp::MergeFrom(from._internal_top_front());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_top_back()->::SubstructureSearch::AtomNumberOrHLp::MergeFrom(from._internal_top_back());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_left_down()->::SubstructureSearch::AtomNumberOrHLp::MergeFrom(from._internal_left_down());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_right_down()->::SubstructureSearch::AtomNumberOrHLp::MergeFrom(from._internal_right_down());
    }
    if (cached_has_bits & 0x00000010u) {
      center_ = from.center_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubstructureChiralCenter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureChiralCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureChiralCenter::CopyFrom(const SubstructureChiralCenter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureChiralCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureChiralCenter::IsInitialized() const {
  return true;
}

void SubstructureChiralCenter::InternalSwap(SubstructureChiralCenter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubstructureChiralCenter, center_)
      + sizeof(SubstructureChiralCenter::center_)
      - PROTOBUF_FIELD_OFFSET(SubstructureChiralCenter, top_front_)>(
          reinterpret_cast<char*>(&top_front_),
          reinterpret_cast<char*>(&other->top_front_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstructureChiralCenter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstructureBond::_Internal {
 public:
  using HasBits = decltype(std::declval<SubstructureBond>()._has_bits_);
  static void set_has_other_end(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SubstructureBond::SubstructureBond(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bond_type_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubstructureSearch.SubstructureBond)
}
SubstructureBond::SubstructureBond(const SubstructureBond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      bond_type_(from.bond_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  other_end_ = from.other_end_;
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureBond)
}

void SubstructureBond::SharedCtor() {
  other_end_ = 0u;
}

SubstructureBond::~SubstructureBond() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureBond)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstructureBond::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubstructureBond::ArenaDtor(void* object) {
  SubstructureBond* _this = reinterpret_cast< SubstructureBond* >(object);
  (void)_this;
}
void SubstructureBond::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstructureBond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstructureBond& SubstructureBond::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstructureBond_Molecule_5fLib_2fsubstructure_2eproto.base);
  return *internal_default_instance();
}


void SubstructureBond::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureBond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bond_type_.Clear();
  other_end_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstructureBond::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SubstructureSearch.BondType bond_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::SubstructureSearch::BondType_IsValid(val))) {
              _internal_add_bond_type(static_cast<::SubstructureSearch::BondType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_bond_type(), ptr, ctx, ::SubstructureSearch::BondType_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 other_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_other_end(&has_bits);
          other_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstructureBond::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureBond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SubstructureSearch.BondType bond_type = 1;
  for (int i = 0, n = this->_internal_bond_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_bond_type(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 other_end = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_other_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureBond)
  return target;
}

size_t SubstructureBond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureBond)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SubstructureSearch.BondType bond_type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_bond_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_bond_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional uint32 other_end = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_other_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureBond::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureBond)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureBond* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstructureBond>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureBond)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureBond)
    MergeFrom(*source);
  }
}

void SubstructureBond::MergeFrom(const SubstructureBond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureBond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bond_type_.MergeFrom(from.bond_type_);
  if (from._internal_has_other_end()) {
    _internal_set_other_end(from._internal_other_end());
  }
}

void SubstructureBond::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureBond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureBond::CopyFrom(const SubstructureBond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureBond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureBond::IsInitialized() const {
  return true;
}

void SubstructureBond::InternalSwap(SubstructureBond* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bond_type_.InternalSwap(&other->bond_type_);
  swap(other_end_, other->other_end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstructureBond::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstructureEnvironmentBond::_Internal {
 public:
};

SubstructureEnvironmentBond::SubstructureEnvironmentBond(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bond_type_(arena),
  other_end_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubstructureSearch.SubstructureEnvironmentBond)
}
SubstructureEnvironmentBond::SubstructureEnvironmentBond(const SubstructureEnvironmentBond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bond_type_(from.bond_type_),
      other_end_(from.other_end_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureEnvironmentBond)
}

void SubstructureEnvironmentBond::SharedCtor() {
}

SubstructureEnvironmentBond::~SubstructureEnvironmentBond() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureEnvironmentBond)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstructureEnvironmentBond::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubstructureEnvironmentBond::ArenaDtor(void* object) {
  SubstructureEnvironmentBond* _this = reinterpret_cast< SubstructureEnvironmentBond* >(object);
  (void)_this;
}
void SubstructureEnvironmentBond::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstructureEnvironmentBond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstructureEnvironmentBond& SubstructureEnvironmentBond::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstructureEnvironmentBond_Molecule_5fLib_2fsubstructure_2eproto.base);
  return *internal_default_instance();
}


void SubstructureEnvironmentBond::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureEnvironmentBond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bond_type_.Clear();
  other_end_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstructureEnvironmentBond::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SubstructureSearch.BondType bond_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::SubstructureSearch::BondType_IsValid(val))) {
              _internal_add_bond_type(static_cast<::SubstructureSearch::BondType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_bond_type(), ptr, ctx, ::SubstructureSearch::BondType_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 other_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_other_end(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_other_end(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstructureEnvironmentBond::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureEnvironmentBond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SubstructureSearch.BondType bond_type = 1;
  for (int i = 0, n = this->_internal_bond_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_bond_type(i), target);
  }

  // repeated uint32 other_end = 2;
  for (int i = 0, n = this->_internal_other_end_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_other_end(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureEnvironmentBond)
  return target;
}

size_t SubstructureEnvironmentBond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureEnvironmentBond)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SubstructureSearch.BondType bond_type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_bond_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_bond_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated uint32 other_end = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->other_end_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_other_end_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureEnvironmentBond::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureEnvironmentBond)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureEnvironmentBond* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstructureEnvironmentBond>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureEnvironmentBond)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureEnvironmentBond)
    MergeFrom(*source);
  }
}

void SubstructureEnvironmentBond::MergeFrom(const SubstructureEnvironmentBond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureEnvironmentBond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bond_type_.MergeFrom(from.bond_type_);
  other_end_.MergeFrom(from.other_end_);
}

void SubstructureEnvironmentBond::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureEnvironmentBond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureEnvironmentBond::CopyFrom(const SubstructureEnvironmentBond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureEnvironmentBond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureEnvironmentBond::IsInitialized() const {
  return true;
}

void SubstructureEnvironmentBond::InternalSwap(SubstructureEnvironmentBond* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bond_type_.InternalSwap(&other->bond_type_);
  other_end_.InternalSwap(&other->other_end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstructureEnvironmentBond::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ElementsNeeded::_Internal {
 public:
  using HasBits = decltype(std::declval<ElementsNeeded>()._has_bits_);
  static void set_has_min_hits_needed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_hits_needed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ElementsNeeded::ElementsNeeded(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hits_needed_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubstructureSearch.ElementsNeeded)
}
ElementsNeeded::ElementsNeeded(const ElementsNeeded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      hits_needed_(from.hits_needed_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_hits_needed_, &from.min_hits_needed_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_hits_needed_) -
    reinterpret_cast<char*>(&min_hits_needed_)) + sizeof(max_hits_needed_));
  clear_has_ElementSpecifier();
  switch (from.ElementSpecifier_case()) {
    case kAtomicNumber: {
      _internal_set_atomic_number(from._internal_atomic_number());
      break;
    }
    case kAtomicSymbol: {
      _internal_set_atomic_symbol(from._internal_atomic_symbol());
      break;
    }
    case ELEMENTSPECIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.ElementsNeeded)
}

void ElementsNeeded::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ElementsNeeded_Molecule_5fLib_2fsubstructure_2eproto.base);
  ::memset(&min_hits_needed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_hits_needed_) -
      reinterpret_cast<char*>(&min_hits_needed_)) + sizeof(max_hits_needed_));
  clear_has_ElementSpecifier();
}

ElementsNeeded::~ElementsNeeded() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.ElementsNeeded)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ElementsNeeded::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_ElementSpecifier()) {
    clear_ElementSpecifier();
  }
}

void ElementsNeeded::ArenaDtor(void* object) {
  ElementsNeeded* _this = reinterpret_cast< ElementsNeeded* >(object);
  (void)_this;
}
void ElementsNeeded::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ElementsNeeded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ElementsNeeded& ElementsNeeded::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ElementsNeeded_Molecule_5fLib_2fsubstructure_2eproto.base);
  return *internal_default_instance();
}


void ElementsNeeded::clear_ElementSpecifier() {
// @@protoc_insertion_point(one_of_clear_start:SubstructureSearch.ElementsNeeded)
  switch (ElementSpecifier_case()) {
    case kAtomicNumber: {
      // No need to clear
      break;
    }
    case kAtomicSymbol: {
      ElementSpecifier_.atomic_symbol_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case ELEMENTSPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ELEMENTSPECIFIER_NOT_SET;
}


void ElementsNeeded::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.ElementsNeeded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hits_needed_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&min_hits_needed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_hits_needed_) -
        reinterpret_cast<char*>(&min_hits_needed_)) + sizeof(max_hits_needed_));
  }
  clear_ElementSpecifier();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ElementsNeeded::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 atomic_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_atomic_number(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string atomic_symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_atomic_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.ElementsNeeded.atomic_symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 hits_needed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_hits_needed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hits_needed(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_hits_needed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_min_hits_needed(&has_bits);
          min_hits_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_hits_needed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_hits_needed(&has_bits);
          max_hits_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ElementsNeeded::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.ElementsNeeded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (ElementSpecifier_case()) {
    case kAtomicNumber: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_atomic_number(), target);
      break;
    }
    case kAtomicSymbol: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_atomic_symbol().data(), static_cast<int>(this->_internal_atomic_symbol().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "SubstructureSearch.ElementsNeeded.atomic_symbol");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_atomic_symbol(), target);
      break;
    }
    default: ;
  }
  // repeated uint32 hits_needed = 3;
  for (int i = 0, n = this->_internal_hits_needed_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hits_needed(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 min_hits_needed = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_min_hits_needed(), target);
  }

  // optional uint32 max_hits_needed = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_max_hits_needed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.ElementsNeeded)
  return target;
}

size_t ElementsNeeded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.ElementsNeeded)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 hits_needed = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->hits_needed_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hits_needed_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 min_hits_needed = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_hits_needed());
    }

    // optional uint32 max_hits_needed = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_hits_needed());
    }

  }
  switch (ElementSpecifier_case()) {
    // uint32 atomic_number = 1;
    case kAtomicNumber: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_atomic_number());
      break;
    }
    // string atomic_symbol = 2;
    case kAtomicSymbol: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_atomic_symbol());
      break;
    }
    case ELEMENTSPECIFIER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElementsNeeded::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.ElementsNeeded)
  GOOGLE_DCHECK_NE(&from, this);
  const ElementsNeeded* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ElementsNeeded>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.ElementsNeeded)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.ElementsNeeded)
    MergeFrom(*source);
  }
}

void ElementsNeeded::MergeFrom(const ElementsNeeded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.ElementsNeeded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hits_needed_.MergeFrom(from.hits_needed_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_hits_needed_ = from.min_hits_needed_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_hits_needed_ = from.max_hits_needed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.ElementSpecifier_case()) {
    case kAtomicNumber: {
      _internal_set_atomic_number(from._internal_atomic_number());
      break;
    }
    case kAtomicSymbol: {
      _internal_set_atomic_symbol(from._internal_atomic_symbol());
      break;
    }
    case ELEMENTSPECIFIER_NOT_SET: {
      break;
    }
  }
}

void ElementsNeeded::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.ElementsNeeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElementsNeeded::CopyFrom(const ElementsNeeded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.ElementsNeeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementsNeeded::IsInitialized() const {
  return true;
}

void ElementsNeeded::InternalSwap(ElementsNeeded* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hits_needed_.InternalSwap(&other->hits_needed_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ElementsNeeded, max_hits_needed_)
      + sizeof(ElementsNeeded::max_hits_needed_)
      - PROTOBUF_FIELD_OFFSET(ElementsNeeded, min_hits_needed_)>(
          reinterpret_cast<char*>(&min_hits_needed_),
          reinterpret_cast<char*>(&other->min_hits_needed_));
  swap(ElementSpecifier_, other->ElementSpecifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ElementsNeeded::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NoMatchedAtomsBetween::_Internal {
 public:
  using HasBits = decltype(std::declval<NoMatchedAtomsBetween>()._has_bits_);
  static void set_has_a1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_a2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_qualifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NoMatchedAtomsBetween::NoMatchedAtomsBetween(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubstructureSearch.NoMatchedAtomsBetween)
}
NoMatchedAtomsBetween::NoMatchedAtomsBetween(const NoMatchedAtomsBetween& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  qualifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_qualifier()) {
    qualifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_qualifier(),
      GetArena());
  }
  ::memcpy(&a1_, &from.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&a2_) -
    reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.NoMatchedAtomsBetween)
}

void NoMatchedAtomsBetween::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NoMatchedAtomsBetween_Molecule_5fLib_2fsubstructure_2eproto.base);
  qualifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a2_) -
      reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
}

NoMatchedAtomsBetween::~NoMatchedAtomsBetween() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.NoMatchedAtomsBetween)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NoMatchedAtomsBetween::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  qualifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NoMatchedAtomsBetween::ArenaDtor(void* object) {
  NoMatchedAtomsBetween* _this = reinterpret_cast< NoMatchedAtomsBetween* >(object);
  (void)_this;
}
void NoMatchedAtomsBetween::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NoMatchedAtomsBetween::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NoMatchedAtomsBetween& NoMatchedAtomsBetween::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NoMatchedAtomsBetween_Molecule_5fLib_2fsubstructure_2eproto.base);
  return *internal_default_instance();
}


void NoMatchedAtomsBetween::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.NoMatchedAtomsBetween)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    qualifier_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&a1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&a2_) -
        reinterpret_cast<char*>(&a1_)) + sizeof(a2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoMatchedAtomsBetween::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_a1(&has_bits);
          a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_a2(&has_bits);
          a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string qualifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_qualifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.NoMatchedAtomsBetween.qualifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NoMatchedAtomsBetween::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.NoMatchedAtomsBetween)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 a1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_a1(), target);
  }

  // optional uint32 a2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_a2(), target);
  }

  // optional string qualifier = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_qualifier().data(), static_cast<int>(this->_internal_qualifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.NoMatchedAtomsBetween.qualifier");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_qualifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.NoMatchedAtomsBetween)
  return target;
}

size_t NoMatchedAtomsBetween::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.NoMatchedAtomsBetween)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string qualifier = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_qualifier());
    }

    // optional uint32 a1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_a1());
    }

    // optional uint32 a2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_a2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoMatchedAtomsBetween::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.NoMatchedAtomsBetween)
  GOOGLE_DCHECK_NE(&from, this);
  const NoMatchedAtomsBetween* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NoMatchedAtomsBetween>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.NoMatchedAtomsBetween)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.NoMatchedAtomsBetween)
    MergeFrom(*source);
  }
}

void NoMatchedAtomsBetween::MergeFrom(const NoMatchedAtomsBetween& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.NoMatchedAtomsBetween)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_qualifier(from._internal_qualifier());
    }
    if (cached_has_bits & 0x00000002u) {
      a1_ = from.a1_;
    }
    if (cached_has_bits & 0x00000004u) {
      a2_ = from.a2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NoMatchedAtomsBetween::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.NoMatchedAtomsBetween)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoMatchedAtomsBetween::CopyFrom(const NoMatchedAtomsBetween& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.NoMatchedAtomsBetween)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoMatchedAtomsBetween::IsInitialized() const {
  return true;
}

void NoMatchedAtomsBetween::InternalSwap(NoMatchedAtomsBetween* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  qualifier_.Swap(&other->qualifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NoMatchedAtomsBetween, a2_)
      + sizeof(NoMatchedAtomsBetween::a2_)
      - PROTOBUF_FIELD_OFFSET(NoMatchedAtomsBetween, a1_)>(
          reinterpret_cast<char*>(&a1_),
          reinterpret_cast<char*>(&other->a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NoMatchedAtomsBetween::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LinkAtoms::_Internal {
 public:
  using HasBits = decltype(std::declval<LinkAtoms>()._has_bits_);
  static void set_has_a1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_a2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LinkAtoms::LinkAtoms(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  distance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubstructureSearch.LinkAtoms)
}
LinkAtoms::LinkAtoms(const LinkAtoms& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      distance_(from.distance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&a1_, &from.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_distance_) -
    reinterpret_cast<char*>(&a1_)) + sizeof(max_distance_));
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.LinkAtoms)
}

void LinkAtoms::SharedCtor() {
  ::memset(&a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_distance_) -
      reinterpret_cast<char*>(&a1_)) + sizeof(max_distance_));
}

LinkAtoms::~LinkAtoms() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.LinkAtoms)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinkAtoms::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LinkAtoms::ArenaDtor(void* object) {
  LinkAtoms* _this = reinterpret_cast< LinkAtoms* >(object);
  (void)_this;
}
void LinkAtoms::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinkAtoms::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkAtoms& LinkAtoms::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinkAtoms_Molecule_5fLib_2fsubstructure_2eproto.base);
  return *internal_default_instance();
}


void LinkAtoms::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.LinkAtoms)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distance_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&a1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_distance_) -
        reinterpret_cast<char*>(&a1_)) + sizeof(max_distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkAtoms::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_a1(&has_bits);
          a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_a2(&has_bits);
          a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_distance(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_distance(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_min_distance(&has_bits);
          min_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_distance(&has_bits);
          max_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinkAtoms::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.LinkAtoms)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 a1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_a1(), target);
  }

  // optional uint32 a2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_a2(), target);
  }

  // repeated uint32 distance = 3;
  for (int i = 0, n = this->_internal_distance_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_distance(i), target);
  }

  // optional uint32 min_distance = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_min_distance(), target);
  }

  // optional uint32 max_distance = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_max_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.LinkAtoms)
  return target;
}

size_t LinkAtoms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.LinkAtoms)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 distance = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->distance_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_distance_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 a1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_a1());
    }

    // optional uint32 a2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_a2());
    }

    // optional uint32 min_distance = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_distance());
    }

    // optional uint32 max_distance = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_distance());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkAtoms::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.LinkAtoms)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkAtoms* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinkAtoms>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.LinkAtoms)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.LinkAtoms)
    MergeFrom(*source);
  }
}

void LinkAtoms::MergeFrom(const LinkAtoms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.LinkAtoms)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  distance_.MergeFrom(from.distance_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      a1_ = from.a1_;
    }
    if (cached_has_bits & 0x00000002u) {
      a2_ = from.a2_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_distance_ = from.min_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_distance_ = from.max_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LinkAtoms::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.LinkAtoms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkAtoms::CopyFrom(const LinkAtoms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.LinkAtoms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkAtoms::IsInitialized() const {
  return true;
}

void LinkAtoms::InternalSwap(LinkAtoms* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  distance_.InternalSwap(&other->distance_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinkAtoms, max_distance_)
      + sizeof(LinkAtoms::max_distance_)
      - PROTOBUF_FIELD_OFFSET(LinkAtoms, a1_)>(
          reinterpret_cast<char*>(&a1_),
          reinterpret_cast<char*>(&other->a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkAtoms::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EnvironmentAttachment::_Internal {
 public:
  using HasBits = decltype(std::declval<EnvironmentAttachment>()._has_bits_);
  static void set_has_substructure_bond(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnvironmentAttachment::EnvironmentAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attachment_point_(arena),
  bond_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubstructureSearch.EnvironmentAttachment)
}
EnvironmentAttachment::EnvironmentAttachment(const EnvironmentAttachment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      attachment_point_(from.attachment_point_),
      bond_(from.bond_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  substructure_bond_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_substructure_bond()) {
    substructure_bond_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_substructure_bond(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.EnvironmentAttachment)
}

void EnvironmentAttachment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnvironmentAttachment_Molecule_5fLib_2fsubstructure_2eproto.base);
  substructure_bond_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EnvironmentAttachment::~EnvironmentAttachment() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.EnvironmentAttachment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnvironmentAttachment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  substructure_bond_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnvironmentAttachment::ArenaDtor(void* object) {
  EnvironmentAttachment* _this = reinterpret_cast< EnvironmentAttachment* >(object);
  (void)_this;
}
void EnvironmentAttachment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnvironmentAttachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnvironmentAttachment& EnvironmentAttachment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnvironmentAttachment_Molecule_5fLib_2fsubstructure_2eproto.base);
  return *internal_default_instance();
}


void EnvironmentAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.EnvironmentAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attachment_point_.Clear();
  bond_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    substructure_bond_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvironmentAttachment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 attachment_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_attachment_point(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_attachment_point(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.BondType bond = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::SubstructureSearch::BondType_IsValid(val))) {
              _internal_add_bond(static_cast<::SubstructureSearch::BondType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_bond(), ptr, ctx, ::SubstructureSearch::BondType_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string substructure_bond = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_substructure_bond();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.EnvironmentAttachment.substructure_bond");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvironmentAttachment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.EnvironmentAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 attachment_point = 1;
  for (int i = 0, n = this->_internal_attachment_point_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_attachment_point(i), target);
  }

  // repeated .SubstructureSearch.BondType bond = 2;
  for (int i = 0, n = this->_internal_bond_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        2, this->_internal_bond(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string substructure_bond = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_substructure_bond().data(), static_cast<int>(this->_internal_substructure_bond().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.EnvironmentAttachment.substructure_bond");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_substructure_bond(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.EnvironmentAttachment)
  return target;
}

size_t EnvironmentAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.EnvironmentAttachment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 attachment_point = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->attachment_point_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attachment_point_size());
    total_size += data_size;
  }

  // repeated .SubstructureSearch.BondType bond = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_bond_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_bond(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional string substructure_bond = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_substructure_bond());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentAttachment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.EnvironmentAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentAttachment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvironmentAttachment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.EnvironmentAttachment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.EnvironmentAttachment)
    MergeFrom(*source);
  }
}

void EnvironmentAttachment::MergeFrom(const EnvironmentAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.EnvironmentAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attachment_point_.MergeFrom(from.attachment_point_);
  bond_.MergeFrom(from.bond_);
  if (from._internal_has_substructure_bond()) {
    _internal_set_substructure_bond(from._internal_substructure_bond());
  }
}

void EnvironmentAttachment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.EnvironmentAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentAttachment::CopyFrom(const EnvironmentAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.EnvironmentAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentAttachment::IsInitialized() const {
  return true;
}

void EnvironmentAttachment::InternalSwap(EnvironmentAttachment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attachment_point_.InternalSwap(&other->attachment_point_);
  bond_.InternalSwap(&other->bond_);
  substructure_bond_.Swap(&other->substructure_bond_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentAttachment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstructureRingEnvironment::_Internal {
 public:
  using HasBits = decltype(std::declval<SubstructureRingEnvironment>()._has_bits_);
  static const ::SubstructureSearch::SubstructureAtom& substructure_atom(const SubstructureRingEnvironment* msg);
  static void set_has_substructure_atom(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_hits_needed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_hits_needed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::SubstructureSearch::SubstructureAtom&
SubstructureRingEnvironment::_Internal::substructure_atom(const SubstructureRingEnvironment* msg) {
  return *msg->substructure_atom_;
}
SubstructureRingEnvironment::SubstructureRingEnvironment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubstructureSearch.SubstructureRingEnvironment)
}
SubstructureRingEnvironment::SubstructureRingEnvironment(const SubstructureRingEnvironment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_substructure_atom()) {
    substructure_atom_ = new ::SubstructureSearch::SubstructureAtom(*from.substructure_atom_);
  } else {
    substructure_atom_ = nullptr;
  }
  ::memcpy(&min_hits_needed_, &from.min_hits_needed_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_hits_needed_) -
    reinterpret_cast<char*>(&min_hits_needed_)) + sizeof(max_hits_needed_));
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureRingEnvironment)
}

void SubstructureRingEnvironment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstructureRingEnvironment_Molecule_5fLib_2fsubstructure_2eproto.base);
  ::memset(&substructure_atom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_hits_needed_) -
      reinterpret_cast<char*>(&substructure_atom_)) + sizeof(max_hits_needed_));
}

SubstructureRingEnvironment::~SubstructureRingEnvironment() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureRingEnvironment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstructureRingEnvironment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete substructure_atom_;
}

void SubstructureRingEnvironment::ArenaDtor(void* object) {
  SubstructureRingEnvironment* _this = reinterpret_cast< SubstructureRingEnvironment* >(object);
  (void)_this;
}
void SubstructureRingEnvironment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstructureRingEnvironment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstructureRingEnvironment& SubstructureRingEnvironment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstructureRingEnvironment_Molecule_5fLib_2fsubstructure_2eproto.base);
  return *internal_default_instance();
}


void SubstructureRingEnvironment::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureRingEnvironment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(substructure_atom_ != nullptr);
    substructure_atom_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&min_hits_needed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_hits_needed_) -
        reinterpret_cast<char*>(&min_hits_needed_)) + sizeof(max_hits_needed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstructureRingEnvironment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .SubstructureSearch.SubstructureAtom substructure_atom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_substructure_atom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_hits_needed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_min_hits_needed(&has_bits);
          min_hits_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_hits_needed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_hits_needed(&has_bits);
          max_hits_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstructureRingEnvironment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureRingEnvironment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SubstructureSearch.SubstructureAtom substructure_atom = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::substructure_atom(this), target, stream);
  }

  // optional uint32 min_hits_needed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_min_hits_needed(), target);
  }

  // optional uint32 max_hits_needed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_hits_needed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureRingEnvironment)
  return target;
}

size_t SubstructureRingEnvironment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureRingEnvironment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .SubstructureSearch.SubstructureAtom substructure_atom = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *substructure_atom_);
    }

    // optional uint32 min_hits_needed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_hits_needed());
    }

    // optional uint32 max_hits_needed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_hits_needed());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureRingEnvironment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureRingEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureRingEnvironment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstructureRingEnvironment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureRingEnvironment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureRingEnvironment)
    MergeFrom(*source);
  }
}

void SubstructureRingEnvironment::MergeFrom(const SubstructureRingEnvironment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureRingEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_substructure_atom()->::SubstructureSearch::SubstructureAtom::MergeFrom(from._internal_substructure_atom());
    }
    if (cached_has_bits & 0x00000002u) {
      min_hits_needed_ = from.min_hits_needed_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_hits_needed_ = from.max_hits_needed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubstructureRingEnvironment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureRingEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureRingEnvironment::CopyFrom(const SubstructureRingEnvironment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureRingEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureRingEnvironment::IsInitialized() const {
  return true;
}

void SubstructureRingEnvironment::InternalSwap(SubstructureRingEnvironment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubstructureRingEnvironment, max_hits_needed_)
      + sizeof(SubstructureRingEnvironment::max_hits_needed_)
      - PROTOBUF_FIELD_OFFSET(SubstructureRingEnvironment, substructure_atom_)>(
          reinterpret_cast<char*>(&substructure_atom_),
          reinterpret_cast<char*>(&other->substructure_atom_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstructureRingEnvironment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstructureRingBase::_Internal {
 public:
  using HasBits = decltype(std::declval<SubstructureRingBase>()._has_bits_);
  static void set_has_match_as_match(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_min_hits_needed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_hits_needed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_attached_heteroatom_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_attached_heteroatom_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_min_heteroatom_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_heteroatom_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_min_ncon(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_max_ncon(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_all_hits_in_same_fragment(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_min_within_ring_unsaturation(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_max_within_ring_unsaturation(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_min_largest_number_of_bonds_shared_with_another_ring(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_max_largest_number_of_bonds_shared_with_another_ring(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_min_atoms_with_pi_electrons(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_max_atoms_with_pi_electrons(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_min_strongly_fused_ring_neighbours(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_max_strongly_fused_ring_neighbours(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_environment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_environment_can_match_in_ring_atoms(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

SubstructureRingBase::SubstructureRingBase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hits_needed_(arena),
  attached_heteroatom_count_(arena),
  heteroatom_count_(arena),
  ncon_(arena),
  within_ring_unsaturation_(arena),
  largest_number_of_bonds_shared_with_another_ring_(arena),
  atoms_with_pi_electrons_(arena),
  strongly_fused_ring_neighbours_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubstructureSearch.SubstructureRingBase)
}
SubstructureRingBase::SubstructureRingBase(const SubstructureRingBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      hits_needed_(from.hits_needed_),
      attached_heteroatom_count_(from.attached_heteroatom_count_),
      heteroatom_count_(from.heteroatom_count_),
      ncon_(from.ncon_),
      within_ring_unsaturation_(from.within_ring_unsaturation_),
      largest_number_of_bonds_shared_with_another_ring_(from.largest_number_of_bonds_shared_with_another_ring_),
      atoms_with_pi_electrons_(from.atoms_with_pi_electrons_),
      strongly_fused_ring_neighbours_(from.strongly_fused_ring_neighbours_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  environment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_environment()) {
    environment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_environment(),
      GetArena());
  }
  ::memcpy(&min_hits_needed_, &from.min_hits_needed_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_strongly_fused_ring_neighbours_) -
    reinterpret_cast<char*>(&min_hits_needed_)) + sizeof(max_strongly_fused_ring_neighbours_));
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureRingBase)
}

void SubstructureRingBase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstructureRingBase_Molecule_5fLib_2fsubstructure_2eproto.base);
  environment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_hits_needed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_strongly_fused_ring_neighbours_) -
      reinterpret_cast<char*>(&min_hits_needed_)) + sizeof(max_strongly_fused_ring_neighbours_));
}

SubstructureRingBase::~SubstructureRingBase() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureRingBase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstructureRingBase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  environment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubstructureRingBase::ArenaDtor(void* object) {
  SubstructureRingBase* _this = reinterpret_cast< SubstructureRingBase* >(object);
  (void)_this;
}
void SubstructureRingBase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstructureRingBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstructureRingBase& SubstructureRingBase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstructureRingBase_Molecule_5fLib_2fsubstructure_2eproto.base);
  return *internal_default_instance();
}


void SubstructureRingBase::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureRingBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hits_needed_.Clear();
  attached_heteroatom_count_.Clear();
  heteroatom_count_.Clear();
  ncon_.Clear();
  within_ring_unsaturation_.Clear();
  largest_number_of_bonds_shared_with_another_ring_.Clear();
  atoms_with_pi_electrons_.Clear();
  strongly_fused_ring_neighbours_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    environment_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&min_hits_needed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_ncon_) -
        reinterpret_cast<char*>(&min_hits_needed_)) + sizeof(min_ncon_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&match_as_match_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_largest_number_of_bonds_shared_with_another_ring_) -
        reinterpret_cast<char*>(&match_as_match_)) + sizeof(max_largest_number_of_bonds_shared_with_another_ring_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&min_atoms_with_pi_electrons_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_strongly_fused_ring_neighbours_) -
        reinterpret_cast<char*>(&min_atoms_with_pi_electrons_)) + sizeof(max_strongly_fused_ring_neighbours_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstructureRingBase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool match_as_match = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_as_match(&has_bits);
          match_as_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 hits_needed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_hits_needed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hits_needed(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_hits_needed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_min_hits_needed(&has_bits);
          min_hits_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_hits_needed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_hits_needed(&has_bits);
          max_hits_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 attached_heteroatom_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_attached_heteroatom_count(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_attached_heteroatom_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_min_attached_heteroatom_count(&has_bits);
          min_attached_heteroatom_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_attached_heteroatom_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_max_attached_heteroatom_count(&has_bits);
          max_attached_heteroatom_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 heteroatom_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_heteroatom_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_heteroatom_count(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_heteroatom_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_min_heteroatom_count(&has_bits);
          min_heteroatom_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_heteroatom_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_max_heteroatom_count(&has_bits);
          max_heteroatom_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ncon = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ncon(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ncon(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_ncon = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_min_ncon(&has_bits);
          min_ncon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_ncon = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_max_ncon(&has_bits);
          max_ncon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool all_hits_in_same_fragment = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_all_hits_in_same_fragment(&has_bits);
          all_hits_in_same_fragment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 within_ring_unsaturation = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_within_ring_unsaturation(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<128>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_within_ring_unsaturation(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_within_ring_unsaturation = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_min_within_ring_unsaturation(&has_bits);
          min_within_ring_unsaturation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_within_ring_unsaturation = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_max_within_ring_unsaturation(&has_bits);
          max_within_ring_unsaturation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 largest_number_of_bonds_shared_with_another_ring = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_largest_number_of_bonds_shared_with_another_ring(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<152>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_largest_number_of_bonds_shared_with_another_ring(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_largest_number_of_bonds_shared_with_another_ring = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_min_largest_number_of_bonds_shared_with_another_ring(&has_bits);
          min_largest_number_of_bonds_shared_with_another_ring_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_largest_number_of_bonds_shared_with_another_ring = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_max_largest_number_of_bonds_shared_with_another_ring(&has_bits);
          max_largest_number_of_bonds_shared_with_another_ring_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string environment = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_environment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.SubstructureRingBase.environment");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool environment_can_match_in_ring_atoms = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_environment_can_match_in_ring_atoms(&has_bits);
          environment_can_match_in_ring_atoms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 atoms_with_pi_electrons = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_atoms_with_pi_electrons(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<208>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_atoms_with_pi_electrons(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_atoms_with_pi_electrons = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_min_atoms_with_pi_electrons(&has_bits);
          min_atoms_with_pi_electrons_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_atoms_with_pi_electrons = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_max_atoms_with_pi_electrons(&has_bits);
          max_atoms_with_pi_electrons_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 strongly_fused_ring_neighbours = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_strongly_fused_ring_neighbours(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<232>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_strongly_fused_ring_neighbours(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_strongly_fused_ring_neighbours = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_min_strongly_fused_ring_neighbours(&has_bits);
          min_strongly_fused_ring_neighbours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_strongly_fused_ring_neighbours = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_max_strongly_fused_ring_neighbours(&has_bits);
          max_strongly_fused_ring_neighbours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstructureRingBase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureRingBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool match_as_match = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_match_as_match(), target);
  }

  // repeated uint32 hits_needed = 2;
  for (int i = 0, n = this->_internal_hits_needed_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hits_needed(i), target);
  }

  // optional uint32 min_hits_needed = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_min_hits_needed(), target);
  }

  // optional uint32 max_hits_needed = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_hits_needed(), target);
  }

  // repeated uint32 attached_heteroatom_count = 5;
  for (int i = 0, n = this->_internal_attached_heteroatom_count_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_attached_heteroatom_count(i), target);
  }

  // optional uint32 min_attached_heteroatom_count = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_min_attached_heteroatom_count(), target);
  }

  // optional uint32 max_attached_heteroatom_count = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_max_attached_heteroatom_count(), target);
  }

  // repeated uint32 heteroatom_count = 8;
  for (int i = 0, n = this->_internal_heteroatom_count_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_heteroatom_count(i), target);
  }

  // optional uint32 min_heteroatom_count = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_min_heteroatom_count(), target);
  }

  // optional uint32 max_heteroatom_count = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_max_heteroatom_count(), target);
  }

  // repeated uint32 ncon = 11;
  for (int i = 0, n = this->_internal_ncon_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_ncon(i), target);
  }

  // optional uint32 min_ncon = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_min_ncon(), target);
  }

  // optional uint32 max_ncon = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_max_ncon(), target);
  }

  // optional bool all_hits_in_same_fragment = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_all_hits_in_same_fragment(), target);
  }

  // repeated uint32 within_ring_unsaturation = 16;
  for (int i = 0, n = this->_internal_within_ring_unsaturation_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_within_ring_unsaturation(i), target);
  }

  // optional uint32 min_within_ring_unsaturation = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_min_within_ring_unsaturation(), target);
  }

  // optional uint32 max_within_ring_unsaturation = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_max_within_ring_unsaturation(), target);
  }

  // repeated uint32 largest_number_of_bonds_shared_with_another_ring = 19;
  for (int i = 0, n = this->_internal_largest_number_of_bonds_shared_with_another_ring_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_largest_number_of_bonds_shared_with_another_ring(i), target);
  }

  // optional uint32 min_largest_number_of_bonds_shared_with_another_ring = 20;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_min_largest_number_of_bonds_shared_with_another_ring(), target);
  }

  // optional uint32 max_largest_number_of_bonds_shared_with_another_ring = 21;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_max_largest_number_of_bonds_shared_with_another_ring(), target);
  }

  // optional string environment = 22;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_environment().data(), static_cast<int>(this->_internal_environment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureRingBase.environment");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_environment(), target);
  }

  // optional bool environment_can_match_in_ring_atoms = 23;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_environment_can_match_in_ring_atoms(), target);
  }

  // repeated uint32 atoms_with_pi_electrons = 26;
  for (int i = 0, n = this->_internal_atoms_with_pi_electrons_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_atoms_with_pi_electrons(i), target);
  }

  // optional uint32 min_atoms_with_pi_electrons = 27;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_min_atoms_with_pi_electrons(), target);
  }

  // optional uint32 max_atoms_with_pi_electrons = 28;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_max_atoms_with_pi_electrons(), target);
  }

  // repeated uint32 strongly_fused_ring_neighbours = 29;
  for (int i = 0, n = this->_internal_strongly_fused_ring_neighbours_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_strongly_fused_ring_neighbours(i), target);
  }

  // optional uint32 min_strongly_fused_ring_neighbours = 30;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_min_strongly_fused_ring_neighbours(), target);
  }

  // optional uint32 max_strongly_fused_ring_neighbours = 31;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_max_strongly_fused_ring_neighbours(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureRingBase)
  return target;
}

size_t SubstructureRingBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureRingBase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 hits_needed = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->hits_needed_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hits_needed_size());
    total_size += data_size;
  }

  // repeated uint32 attached_heteroatom_count = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->attached_heteroatom_count_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attached_heteroatom_count_size());
    total_size += data_size;
  }

  // repeated uint32 heteroatom_count = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->heteroatom_count_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_heteroatom_count_size());
    total_size += data_size;
  }

  // repeated uint32 ncon = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ncon_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ncon_size());
    total_size += data_size;
  }

  // repeated uint32 within_ring_unsaturation = 16;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->within_ring_unsaturation_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_within_ring_unsaturation_size());
    total_size += data_size;
  }

  // repeated uint32 largest_number_of_bonds_shared_with_another_ring = 19;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->largest_number_of_bonds_shared_with_another_ring_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_largest_number_of_bonds_shared_with_another_ring_size());
    total_size += data_size;
  }

  // repeated uint32 atoms_with_pi_electrons = 26;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->atoms_with_pi_electrons_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_atoms_with_pi_electrons_size());
    total_size += data_size;
  }

  // repeated uint32 strongly_fused_ring_neighbours = 29;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->strongly_fused_ring_neighbours_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_strongly_fused_ring_neighbours_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string environment = 22;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_environment());
    }

    // optional uint32 min_hits_needed = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_hits_needed());
    }

    // optional uint32 max_hits_needed = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_hits_needed());
    }

    // optional uint32 min_attached_heteroatom_count = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_attached_heteroatom_count());
    }

    // optional uint32 max_attached_heteroatom_count = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_attached_heteroatom_count());
    }

    // optional uint32 min_heteroatom_count = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_heteroatom_count());
    }

    // optional uint32 max_heteroatom_count = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_heteroatom_count());
    }

    // optional uint32 min_ncon = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_ncon());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool match_as_match = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool all_hits_in_same_fragment = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool environment_can_match_in_ring_atoms = 23;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional uint32 max_ncon = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_ncon());
    }

    // optional uint32 min_within_ring_unsaturation = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_within_ring_unsaturation());
    }

    // optional uint32 max_within_ring_unsaturation = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_within_ring_unsaturation());
    }

    // optional uint32 min_largest_number_of_bonds_shared_with_another_ring = 20;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_largest_number_of_bonds_shared_with_another_ring());
    }

    // optional uint32 max_largest_number_of_bonds_shared_with_another_ring = 21;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_largest_number_of_bonds_shared_with_another_ring());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional uint32 min_atoms_with_pi_electrons = 27;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_atoms_with_pi_electrons());
    }

    // optional uint32 max_atoms_with_pi_electrons = 28;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_atoms_with_pi_electrons());
    }

    // optional uint32 min_strongly_fused_ring_neighbours = 30;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_strongly_fused_ring_neighbours());
    }

    // optional uint32 max_strongly_fused_ring_neighbours = 31;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_strongly_fused_ring_neighbours());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureRingBase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureRingBase)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureRingBase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstructureRingBase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureRingBase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureRingBase)
    MergeFrom(*source);
  }
}

void SubstructureRingBase::MergeFrom(const SubstructureRingBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureRingBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hits_needed_.MergeFrom(from.hits_needed_);
  attached_heteroatom_count_.MergeFrom(from.attached_heteroatom_count_);
  heteroatom_count_.MergeFrom(from.heteroatom_count_);
  ncon_.MergeFrom(from.ncon_);
  within_ring_unsaturation_.MergeFrom(from.within_ring_unsaturation_);
  largest_number_of_bonds_shared_with_another_ring_.MergeFrom(from.largest_number_of_bonds_shared_with_another_ring_);
  atoms_with_pi_electrons_.MergeFrom(from.atoms_with_pi_electrons_);
  strongly_fused_ring_neighbours_.MergeFrom(from.strongly_fused_ring_neighbours_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_environment(from._internal_environment());
    }
    if (cached_has_bits & 0x00000002u) {
      min_hits_needed_ = from.min_hits_needed_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_hits_needed_ = from.max_hits_needed_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_attached_heteroatom_count_ = from.min_attached_heteroatom_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_attached_heteroatom_count_ = from.max_attached_heteroatom_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_heteroatom_count_ = from.min_heteroatom_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_heteroatom_count_ = from.max_heteroatom_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      min_ncon_ = from.min_ncon_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      match_as_match_ = from.match_as_match_;
    }
    if (cached_has_bits & 0x00000200u) {
      all_hits_in_same_fragment_ = from.all_hits_in_same_fragment_;
    }
    if (cached_has_bits & 0x00000400u) {
      environment_can_match_in_ring_atoms_ = from.environment_can_match_in_ring_atoms_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_ncon_ = from.max_ncon_;
    }
    if (cached_has_bits & 0x00001000u) {
      min_within_ring_unsaturation_ = from.min_within_ring_unsaturation_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_within_ring_unsaturation_ = from.max_within_ring_unsaturation_;
    }
    if (cached_has_bits & 0x00004000u) {
      min_largest_number_of_bonds_shared_with_another_ring_ = from.min_largest_number_of_bonds_shared_with_another_ring_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_largest_number_of_bonds_shared_with_another_ring_ = from.max_largest_number_of_bonds_shared_with_another_ring_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      min_atoms_with_pi_electrons_ = from.min_atoms_with_pi_electrons_;
    }
    if (cached_has_bits & 0x00020000u) {
      max_atoms_with_pi_electrons_ = from.max_atoms_with_pi_electrons_;
    }
    if (cached_has_bits & 0x00040000u) {
      min_strongly_fused_ring_neighbours_ = from.min_strongly_fused_ring_neighbours_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_strongly_fused_ring_neighbours_ = from.max_strongly_fused_ring_neighbours_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubstructureRingBase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureRingBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureRingBase::CopyFrom(const SubstructureRingBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureRingBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureRingBase::IsInitialized() const {
  return true;
}

void SubstructureRingBase::InternalSwap(SubstructureRingBase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hits_needed_.InternalSwap(&other->hits_needed_);
  attached_heteroatom_count_.InternalSwap(&other->attached_heteroatom_count_);
  heteroatom_count_.InternalSwap(&other->heteroatom_count_);
  ncon_.InternalSwap(&other->ncon_);
  within_ring_unsaturation_.InternalSwap(&other->within_ring_unsaturation_);
  largest_number_of_bonds_shared_with_another_ring_.InternalSwap(&other->largest_number_of_bonds_shared_with_another_ring_);
  atoms_with_pi_electrons_.InternalSwap(&other->atoms_with_pi_electrons_);
  strongly_fused_ring_neighbours_.InternalSwap(&other->strongly_fused_ring_neighbours_);
  environment_.Swap(&other->environment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubstructureRingBase, max_strongly_fused_ring_neighbours_)
      + sizeof(SubstructureRingBase::max_strongly_fused_ring_neighbours_)
      - PROTOBUF_FIELD_OFFSET(SubstructureRingBase, min_hits_needed_)>(
          reinterpret_cast<char*>(&min_hits_needed_),
          reinterpret_cast<char*>(&other->min_hits_needed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstructureRingBase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstructureRingSpecification::_Internal {
 public:
  using HasBits = decltype(std::declval<SubstructureRingSpecification>()._has_bits_);
  static const ::SubstructureSearch::SubstructureRingBase& base(const SubstructureRingSpecification* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_ring_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_ring_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_aromatic(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_fused(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_fused(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_min_fused_aromatic_neighbours(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_fused_aromatic_neighbours(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_min_fused_non_aromatic_neighbours(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_fused_non_aromatic_neighbours(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::SubstructureSearch::SubstructureRingBase&
SubstructureRingSpecification::_Internal::base(const SubstructureRingSpecification* msg) {
  return *msg->base_;
}
SubstructureRingSpecification::SubstructureRingSpecification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ring_size_(arena),
  fused_(arena),
  fused_aromatic_neighbours_(arena),
  fused_non_aromatic_neighbours_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubstructureSearch.SubstructureRingSpecification)
}
SubstructureRingSpecification::SubstructureRingSpecification(const SubstructureRingSpecification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ring_size_(from.ring_size_),
      fused_(from.fused_),
      fused_aromatic_neighbours_(from.fused_aromatic_neighbours_),
      fused_non_aromatic_neighbours_(from.fused_non_aromatic_neighbours_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::SubstructureSearch::SubstructureRingBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&min_ring_size_, &from.min_ring_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_fused_non_aromatic_neighbours_) -
    reinterpret_cast<char*>(&min_ring_size_)) + sizeof(max_fused_non_aromatic_neighbours_));
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureRingSpecification)
}

void SubstructureRingSpecification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstructureRingSpecification_Molecule_5fLib_2fsubstructure_2eproto.base);
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_fused_non_aromatic_neighbours_) -
      reinterpret_cast<char*>(&base_)) + sizeof(max_fused_non_aromatic_neighbours_));
}

SubstructureRingSpecification::~SubstructureRingSpecification() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureRingSpecification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstructureRingSpecification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
}

void SubstructureRingSpecification::ArenaDtor(void* object) {
  SubstructureRingSpecification* _this = reinterpret_cast< SubstructureRingSpecification* >(object);
  (void)_this;
}
void SubstructureRingSpecification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstructureRingSpecification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstructureRingSpecification& SubstructureRingSpecification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstructureRingSpecification_Molecule_5fLib_2fsubstructure_2eproto.base);
  return *internal_default_instance();
}


void SubstructureRingSpecification::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureRingSpecification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ring_size_.Clear();
  fused_.Clear();
  fused_aromatic_neighbours_.Clear();
  fused_non_aromatic_neighbours_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(base_ != nullptr);
    base_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&min_ring_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_fused_aromatic_neighbours_) -
        reinterpret_cast<char*>(&min_ring_size_)) + sizeof(max_fused_aromatic_neighbours_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&min_fused_non_aromatic_neighbours_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_fused_non_aromatic_neighbours_) -
        reinterpret_cast<char*>(&min_fused_non_aromatic_neighbours_)) + sizeof(max_fused_non_aromatic_neighbours_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstructureRingSpecification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .SubstructureSearch.SubstructureRingBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ring_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ring_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ring_size(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_ring_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_min_ring_size(&has_bits);
          min_ring_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_ring_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_ring_size(&has_bits);
          max_ring_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool aromatic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_aromatic(&has_bits);
          aromatic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 fused = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_fused(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_fused(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_fused = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_min_fused(&has_bits);
          min_fused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_fused = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_max_fused(&has_bits);
          max_fused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 fused_aromatic_neighbours = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_fused_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_fused_aromatic_neighbours(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_fused_aromatic_neighbours = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_min_fused_aromatic_neighbours(&has_bits);
          min_fused_aromatic_neighbours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_fused_aromatic_neighbours = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_max_fused_aromatic_neighbours(&has_bits);
          max_fused_aromatic_neighbours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 fused_non_aromatic_neighbours = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_fused_non_aromatic_neighbours(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<96>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_fused_non_aromatic_neighbours(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_fused_non_aromatic_neighbours = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_min_fused_non_aromatic_neighbours(&has_bits);
          min_fused_non_aromatic_neighbours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_fused_non_aromatic_neighbours = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_max_fused_non_aromatic_neighbours(&has_bits);
          max_fused_non_aromatic_neighbours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstructureRingSpecification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureRingSpecification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SubstructureSearch.SubstructureRingBase base = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // repeated uint32 ring_size = 2;
  for (int i = 0, n = this->_internal_ring_size_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ring_size(i), target);
  }

  // optional uint32 min_ring_size = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_min_ring_size(), target);
  }

  // optional uint32 max_ring_size = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_ring_size(), target);
  }

  // optional bool aromatic = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_aromatic(), target);
  }

  // repeated uint32 fused = 6;
  for (int i = 0, n = this->_internal_fused_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_fused(i), target);
  }

  // optional uint32 min_fused = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_min_fused(), target);
  }

  // optional uint32 max_fused = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_max_fused(), target);
  }

  // repeated uint32 fused_aromatic_neighbours = 9;
  for (int i = 0, n = this->_internal_fused_aromatic_neighbours_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_fused_aromatic_neighbours(i), target);
  }

  // optional uint32 min_fused_aromatic_neighbours = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_min_fused_aromatic_neighbours(), target);
  }

  // optional uint32 max_fused_aromatic_neighbours = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_max_fused_aromatic_neighbours(), target);
  }

  // repeated uint32 fused_non_aromatic_neighbours = 12;
  for (int i = 0, n = this->_internal_fused_non_aromatic_neighbours_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_fused_non_aromatic_neighbours(i), target);
  }

  // optional uint32 min_fused_non_aromatic_neighbours = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_min_fused_non_aromatic_neighbours(), target);
  }

  // optional uint32 max_fused_non_aromatic_neighbours = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_max_fused_non_aromatic_neighbours(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureRingSpecification)
  return target;
}

size_t SubstructureRingSpecification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureRingSpecification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ring_size = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ring_size_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ring_size_size());
    total_size += data_size;
  }

  // repeated uint32 fused = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->fused_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fused_size());
    total_size += data_size;
  }

  // repeated uint32 fused_aromatic_neighbours = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->fused_aromatic_neighbours_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fused_aromatic_neighbours_size());
    total_size += data_size;
  }

  // repeated uint32 fused_non_aromatic_neighbours = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->fused_non_aromatic_neighbours_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fused_non_aromatic_neighbours_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .SubstructureSearch.SubstructureRingBase base = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_);
    }

    // optional uint32 min_ring_size = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_ring_size());
    }

    // optional uint32 max_ring_size = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_ring_size());
    }

    // optional bool aromatic = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 min_fused = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_fused());
    }

    // optional uint32 max_fused = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_fused());
    }

    // optional uint32 min_fused_aromatic_neighbours = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_fused_aromatic_neighbours());
    }

    // optional uint32 max_fused_aromatic_neighbours = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_fused_aromatic_neighbours());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 min_fused_non_aromatic_neighbours = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_fused_non_aromatic_neighbours());
    }

    // optional uint32 max_fused_non_aromatic_neighbours = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_fused_non_aromatic_neighbours());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureRingSpecification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureRingSpecification)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureRingSpecification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstructureRingSpecification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureRingSpecification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureRingSpecification)
    MergeFrom(*source);
  }
}

void SubstructureRingSpecification::MergeFrom(const SubstructureRingSpecification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureRingSpecification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ring_size_.MergeFrom(from.ring_size_);
  fused_.MergeFrom(from.fused_);
  fused_aromatic_neighbours_.MergeFrom(from.fused_aromatic_neighbours_);
  fused_non_aromatic_neighbours_.MergeFrom(from.fused_non_aromatic_neighbours_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_base()->::SubstructureSearch::SubstructureRingBase::MergeFrom(from._internal_base());
    }
    if (cached_has_bits & 0x00000002u) {
      min_ring_size_ = from.min_ring_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_ring_size_ = from.max_ring_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      aromatic_ = from.aromatic_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_fused_ = from.min_fused_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_fused_ = from.max_fused_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_fused_aromatic_neighbours_ = from.min_fused_aromatic_neighbours_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_fused_aromatic_neighbours_ = from.max_fused_aromatic_neighbours_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      min_fused_non_aromatic_neighbours_ = from.min_fused_non_aromatic_neighbours_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_fused_non_aromatic_neighbours_ = from.max_fused_non_aromatic_neighbours_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubstructureRingSpecification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureRingSpecification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureRingSpecification::CopyFrom(const SubstructureRingSpecification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureRingSpecification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureRingSpecification::IsInitialized() const {
  return true;
}

void SubstructureRingSpecification::InternalSwap(SubstructureRingSpecification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ring_size_.InternalSwap(&other->ring_size_);
  fused_.InternalSwap(&other->fused_);
  fused_aromatic_neighbours_.InternalSwap(&other->fused_aromatic_neighbours_);
  fused_non_aromatic_neighbours_.InternalSwap(&other->fused_non_aromatic_neighbours_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubstructureRingSpecification, max_fused_non_aromatic_neighbours_)
      + sizeof(SubstructureRingSpecification::max_fused_non_aromatic_neighbours_)
      - PROTOBUF_FIELD_OFFSET(SubstructureRingSpecification, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstructureRingSpecification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RingSizeRequirement::_Internal {
 public:
  using HasBits = decltype(std::declval<RingSizeRequirement>()._has_bits_);
  static void set_has_ring_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RingSizeRequirement::RingSizeRequirement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  count_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubstructureSearch.RingSizeRequirement)
}
RingSizeRequirement::RingSizeRequirement(const RingSizeRequirement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      count_(from.count_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ring_size_, &from.ring_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_count_) -
    reinterpret_cast<char*>(&ring_size_)) + sizeof(max_count_));
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.RingSizeRequirement)
}

void RingSizeRequirement::SharedCtor() {
  ::memset(&ring_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_count_) -
      reinterpret_cast<char*>(&ring_size_)) + sizeof(max_count_));
}

RingSizeRequirement::~RingSizeRequirement() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.RingSizeRequirement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RingSizeRequirement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RingSizeRequirement::ArenaDtor(void* object) {
  RingSizeRequirement* _this = reinterpret_cast< RingSizeRequirement* >(object);
  (void)_this;
}
void RingSizeRequirement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RingSizeRequirement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RingSizeRequirement& RingSizeRequirement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RingSizeRequirement_Molecule_5fLib_2fsubstructure_2eproto.base);
  return *internal_default_instance();
}


void RingSizeRequirement::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.RingSizeRequirement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&ring_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_count_) -
        reinterpret_cast<char*>(&ring_size_)) + sizeof(max_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RingSizeRequirement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ring_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ring_size(&has_bits);
          ring_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_count(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_min_count(&has_bits);
          min_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_count(&has_bits);
          max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RingSizeRequirement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.RingSizeRequirement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ring_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ring_size(), target);
  }

  // repeated uint32 count = 2;
  for (int i = 0, n = this->_internal_count_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(i), target);
  }

  // optional uint32 min_count = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_min_count(), target);
  }

  // optional uint32 max_count = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.RingSizeRequirement)
  return target;
}

size_t RingSizeRequirement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.RingSizeRequirement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 count = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->count_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_count_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 ring_size = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ring_size());
    }

    // optional uint32 min_count = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_count());
    }

    // optional uint32 max_count = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RingSizeRequirement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.RingSizeRequirement)
  GOOGLE_DCHECK_NE(&from, this);
  const RingSizeRequirement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RingSizeRequirement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.RingSizeRequirement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.RingSizeRequirement)
    MergeFrom(*source);
  }
}

void RingSizeRequirement::MergeFrom(const RingSizeRequirement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.RingSizeRequirement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  count_.MergeFrom(from.count_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ring_size_ = from.ring_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_count_ = from.min_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_count_ = from.max_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RingSizeRequirement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.RingSizeRequirement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RingSizeRequirement::CopyFrom(const RingSizeRequirement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.RingSizeRequirement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RingSizeRequirement::IsInitialized() const {
  return true;
}

void RingSizeRequirement::InternalSwap(RingSizeRequirement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  count_.InternalSwap(&other->count_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RingSizeRequirement, max_count_)
      + sizeof(RingSizeRequirement::max_count_)
      - PROTOBUF_FIELD_OFFSET(RingSizeRequirement, ring_size_)>(
          reinterpret_cast<char*>(&ring_size_),
          reinterpret_cast<char*>(&other->ring_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RingSizeRequirement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstructureRingSystemSpecification::_Internal {
 public:
  using HasBits = decltype(std::declval<SubstructureRingSystemSpecification>()._has_bits_);
  static const ::SubstructureSearch::SubstructureRingBase& base(const SubstructureRingSystemSpecification* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_rings_in_system(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_rings_in_system(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_ring_sizes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_ring_sizes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_min_aromatic_ring_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_aromatic_ring_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_min_non_aromatic_ring_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_max_non_aromatic_ring_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_min_degree_of_fusion(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_max_degree_of_fusion(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_min_atoms_in_system(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_max_atoms_in_system(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_min_number_spinach_groups(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_max_number_spinach_groups(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_min_number_non_spinach_groups(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_max_number_non_spinach_groups(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_min_atoms_in_spinach_group(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_max_atoms_in_spinach_group(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_min_length_of_spinach_group(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_max_length_of_spinach_group(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_min_distance_to_another_ring(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_max_distance_to_another_ring(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_min_strongly_fused_ring_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_max_strongly_fused_ring_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
};

const ::SubstructureSearch::SubstructureRingBase&
SubstructureRingSystemSpecification::_Internal::base(const SubstructureRingSystemSpecification* msg) {
  return *msg->base_;
}
SubstructureRingSystemSpecification::SubstructureRingSystemSpecification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rings_in_system_(arena),
  ring_sizes_(arena),
  ring_size_count_(arena),
  aromatic_ring_count_(arena),
  non_aromatic_ring_count_(arena),
  degree_of_fusion_(arena),
  atoms_in_system_(arena),
  number_spinach_groups_(arena),
  number_non_spinach_groups_(arena),
  atoms_in_spinach_group_(arena),
  length_of_spinach_group_(arena),
  distance_to_another_ring_(arena),
  strongly_fused_ring_count_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubstructureSearch.SubstructureRingSystemSpecification)
}
SubstructureRingSystemSpecification::SubstructureRingSystemSpecification(const SubstructureRingSystemSpecification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rings_in_system_(from.rings_in_system_),
      ring_sizes_(from.ring_sizes_),
      ring_size_count_(from.ring_size_count_),
      aromatic_ring_count_(from.aromatic_ring_count_),
      non_aromatic_ring_count_(from.non_aromatic_ring_count_),
      degree_of_fusion_(from.degree_of_fusion_),
      atoms_in_system_(from.atoms_in_system_),
      number_spinach_groups_(from.number_spinach_groups_),
      number_non_spinach_groups_(from.number_non_spinach_groups_),
      atoms_in_spinach_group_(from.atoms_in_spinach_group_),
      length_of_spinach_group_(from.length_of_spinach_group_),
      distance_to_another_ring_(from.distance_to_another_ring_),
      strongly_fused_ring_count_(from.strongly_fused_ring_count_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::SubstructureSearch::SubstructureRingBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&min_rings_in_system_, &from.min_rings_in_system_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_strongly_fused_ring_count_) -
    reinterpret_cast<char*>(&min_rings_in_system_)) + sizeof(max_strongly_fused_ring_count_));
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureRingSystemSpecification)
}

void SubstructureRingSystemSpecification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstructureRingSystemSpecification_Molecule_5fLib_2fsubstructure_2eproto.base);
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_strongly_fused_ring_count_) -
      reinterpret_cast<char*>(&base_)) + sizeof(max_strongly_fused_ring_count_));
}

SubstructureRingSystemSpecification::~SubstructureRingSystemSpecification() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureRingSystemSpecification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstructureRingSystemSpecification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
}

void SubstructureRingSystemSpecification::ArenaDtor(void* object) {
  SubstructureRingSystemSpecification* _this = reinterpret_cast< SubstructureRingSystemSpecification* >(object);
  (void)_this;
}
void SubstructureRingSystemSpecification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstructureRingSystemSpecification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstructureRingSystemSpecification& SubstructureRingSystemSpecification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstructureRingSystemSpecification_Molecule_5fLib_2fsubstructure_2eproto.base);
  return *internal_default_instance();
}


void SubstructureRingSystemSpecification::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureRingSystemSpecification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rings_in_system_.Clear();
  ring_sizes_.Clear();
  ring_size_count_.Clear();
  aromatic_ring_count_.Clear();
  non_aromatic_ring_count_.Clear();
  degree_of_fusion_.Clear();
  atoms_in_system_.Clear();
  number_spinach_groups_.Clear();
  number_non_spinach_groups_.Clear();
  atoms_in_spinach_group_.Clear();
  length_of_spinach_group_.Clear();
  distance_to_another_ring_.Clear();
  strongly_fused_ring_count_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(base_ != nullptr);
    base_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&min_rings_in_system_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_non_aromatic_ring_count_) -
        reinterpret_cast<char*>(&min_rings_in_system_)) + sizeof(min_non_aromatic_ring_count_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&max_non_aromatic_ring_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_number_non_spinach_groups_) -
        reinterpret_cast<char*>(&max_non_aromatic_ring_count_)) + sizeof(min_number_non_spinach_groups_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&max_number_non_spinach_groups_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_strongly_fused_ring_count_) -
        reinterpret_cast<char*>(&max_number_non_spinach_groups_)) + sizeof(min_strongly_fused_ring_count_));
  }
  max_strongly_fused_ring_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstructureRingSystemSpecification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .SubstructureSearch.SubstructureRingBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 rings_in_system = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_rings_in_system(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_rings_in_system(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_rings_in_system = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_min_rings_in_system(&has_bits);
          min_rings_in_system_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_rings_in_system = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_rings_in_system(&has_bits);
          max_rings_in_system_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ring_sizes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ring_sizes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ring_sizes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_ring_sizes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_min_ring_sizes(&has_bits);
          min_ring_sizes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_ring_sizes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_max_ring_sizes(&has_bits);
          max_ring_sizes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.RingSizeRequirement ring_size_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ring_size_count(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 aromatic_ring_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_aromatic_ring_count(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_aromatic_ring_count = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_min_aromatic_ring_count(&has_bits);
          min_aromatic_ring_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_aromatic_ring_count = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_max_aromatic_ring_count(&has_bits);
          max_aromatic_ring_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 non_aromatic_ring_count = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_non_aromatic_ring_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<112>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_non_aromatic_ring_count(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_non_aromatic_ring_count = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_min_non_aromatic_ring_count(&has_bits);
          min_non_aromatic_ring_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_non_aromatic_ring_count = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_max_non_aromatic_ring_count(&has_bits);
          max_non_aromatic_ring_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 degree_of_fusion = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_degree_of_fusion(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<136>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_degree_of_fusion(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_degree_of_fusion = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_min_degree_of_fusion(&has_bits);
          min_degree_of_fusion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_degree_of_fusion = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_max_degree_of_fusion(&has_bits);
          max_degree_of_fusion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 atoms_in_system = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_atoms_in_system(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<160>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_atoms_in_system(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_atoms_in_system = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_min_atoms_in_system(&has_bits);
          min_atoms_in_system_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_atoms_in_system = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_max_atoms_in_system(&has_bits);
          max_atoms_in_system_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 number_spinach_groups = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_number_spinach_groups(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<184>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_number_spinach_groups(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_number_spinach_groups = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_min_number_spinach_groups(&has_bits);
          min_number_spinach_groups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_number_spinach_groups = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_max_number_spinach_groups(&has_bits);
          max_number_spinach_groups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 number_non_spinach_groups = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_number_non_spinach_groups(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<208>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_number_non_spinach_groups(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_number_non_spinach_groups = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_min_number_non_spinach_groups(&has_bits);
          min_number_non_spinach_groups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_number_non_spinach_groups = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_max_number_non_spinach_groups(&has_bits);
          max_number_non_spinach_groups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 atoms_in_spinach_group = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_atoms_in_spinach_group(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<232>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_atoms_in_spinach_group(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_atoms_in_spinach_group = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_min_atoms_in_spinach_group(&has_bits);
          min_atoms_in_spinach_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_atoms_in_spinach_group = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_max_atoms_in_spinach_group(&has_bits);
          max_atoms_in_spinach_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 length_of_spinach_group = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_length_of_spinach_group(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<256>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_length_of_spinach_group(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_length_of_spinach_group = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_min_length_of_spinach_group(&has_bits);
          min_length_of_spinach_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_length_of_spinach_group = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_length_of_spinach_group(&has_bits);
          max_length_of_spinach_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 distance_to_another_ring = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_distance_to_another_ring(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<280>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_distance_to_another_ring(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_distance_to_another_ring = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_min_distance_to_another_ring(&has_bits);
          min_distance_to_another_ring_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_distance_to_another_ring = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_distance_to_another_ring(&has_bits);
          max_distance_to_another_ring_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 strongly_fused_ring_count = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_strongly_fused_ring_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<304>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_strongly_fused_ring_count(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_strongly_fused_ring_count = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_min_strongly_fused_ring_count(&has_bits);
          min_strongly_fused_ring_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_strongly_fused_ring_count = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_max_strongly_fused_ring_count(&has_bits);
          max_strongly_fused_ring_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstructureRingSystemSpecification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureRingSystemSpecification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SubstructureSearch.SubstructureRingBase base = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // repeated uint32 rings_in_system = 2;
  for (int i = 0, n = this->_internal_rings_in_system_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rings_in_system(i), target);
  }

  // optional uint32 min_rings_in_system = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_min_rings_in_system(), target);
  }

  // optional uint32 max_rings_in_system = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_rings_in_system(), target);
  }

  // repeated uint32 ring_sizes = 5;
  for (int i = 0, n = this->_internal_ring_sizes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ring_sizes(i), target);
  }

  // optional uint32 min_ring_sizes = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_min_ring_sizes(), target);
  }

  // optional uint32 max_ring_sizes = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_max_ring_sizes(), target);
  }

  // repeated .SubstructureSearch.RingSizeRequirement ring_size_count = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ring_size_count_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_ring_size_count(i), target, stream);
  }

  // repeated uint32 aromatic_ring_count = 11;
  for (int i = 0, n = this->_internal_aromatic_ring_count_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_aromatic_ring_count(i), target);
  }

  // optional uint32 min_aromatic_ring_count = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_min_aromatic_ring_count(), target);
  }

  // optional uint32 max_aromatic_ring_count = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_max_aromatic_ring_count(), target);
  }

  // repeated uint32 non_aromatic_ring_count = 14;
  for (int i = 0, n = this->_internal_non_aromatic_ring_count_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_non_aromatic_ring_count(i), target);
  }

  // optional uint32 min_non_aromatic_ring_count = 15;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_min_non_aromatic_ring_count(), target);
  }

  // optional uint32 max_non_aromatic_ring_count = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_max_non_aromatic_ring_count(), target);
  }

  // repeated uint32 degree_of_fusion = 17;
  for (int i = 0, n = this->_internal_degree_of_fusion_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_degree_of_fusion(i), target);
  }

  // optional uint32 min_degree_of_fusion = 18;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_min_degree_of_fusion(), target);
  }

  // optional uint32 max_degree_of_fusion = 19;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_max_degree_of_fusion(), target);
  }

  // repeated uint32 atoms_in_system = 20;
  for (int i = 0, n = this->_internal_atoms_in_system_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_atoms_in_system(i), target);
  }

  // optional uint32 min_atoms_in_system = 21;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_min_atoms_in_system(), target);
  }

  // optional uint32 max_atoms_in_system = 22;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_max_atoms_in_system(), target);
  }

  // repeated uint32 number_spinach_groups = 23;
  for (int i = 0, n = this->_internal_number_spinach_groups_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_number_spinach_groups(i), target);
  }

  // optional uint32 min_number_spinach_groups = 24;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_min_number_spinach_groups(), target);
  }

  // optional uint32 max_number_spinach_groups = 25;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_max_number_spinach_groups(), target);
  }

  // repeated uint32 number_non_spinach_groups = 26;
  for (int i = 0, n = this->_internal_number_non_spinach_groups_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_number_non_spinach_groups(i), target);
  }

  // optional uint32 min_number_non_spinach_groups = 27;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_min_number_non_spinach_groups(), target);
  }

  // optional uint32 max_number_non_spinach_groups = 28;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_max_number_non_spinach_groups(), target);
  }

  // repeated uint32 atoms_in_spinach_group = 29;
  for (int i = 0, n = this->_internal_atoms_in_spinach_group_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_atoms_in_spinach_group(i), target);
  }

  // optional uint32 min_atoms_in_spinach_group = 30;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_min_atoms_in_spinach_group(), target);
  }

  // optional uint32 max_atoms_in_spinach_group = 31;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_max_atoms_in_spinach_group(), target);
  }

  // repeated uint32 length_of_spinach_group = 32;
  for (int i = 0, n = this->_internal_length_of_spinach_group_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_length_of_spinach_group(i), target);
  }

  // optional uint32 min_length_of_spinach_group = 33;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_min_length_of_spinach_group(), target);
  }

  // optional uint32 max_length_of_spinach_group = 34;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_max_length_of_spinach_group(), target);
  }

  // repeated uint32 distance_to_another_ring = 35;
  for (int i = 0, n = this->_internal_distance_to_another_ring_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_distance_to_another_ring(i), target);
  }

  // optional uint32 min_distance_to_another_ring = 36;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_min_distance_to_another_ring(), target);
  }

  // optional uint32 max_distance_to_another_ring = 37;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_max_distance_to_another_ring(), target);
  }

  // repeated uint32 strongly_fused_ring_count = 38;
  for (int i = 0, n = this->_internal_strongly_fused_ring_count_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_strongly_fused_ring_count(i), target);
  }

  // optional uint32 min_strongly_fused_ring_count = 39;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_min_strongly_fused_ring_count(), target);
  }

  // optional uint32 max_strongly_fused_ring_count = 40;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_max_strongly_fused_ring_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureRingSystemSpecification)
  return target;
}

size_t SubstructureRingSystemSpecification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureRingSystemSpecification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 rings_in_system = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->rings_in_system_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rings_in_system_size());
    total_size += data_size;
  }

  // repeated uint32 ring_sizes = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ring_sizes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ring_sizes_size());
    total_size += data_size;
  }

  // repeated .SubstructureSearch.RingSizeRequirement ring_size_count = 8;
  total_size += 1UL * this->_internal_ring_size_count_size();
  for (const auto& msg : this->ring_size_count_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 aromatic_ring_count = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->aromatic_ring_count_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_aromatic_ring_count_size());
    total_size += data_size;
  }

  // repeated uint32 non_aromatic_ring_count = 14;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->non_aromatic_ring_count_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_non_aromatic_ring_count_size());
    total_size += data_size;
  }

  // repeated uint32 degree_of_fusion = 17;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->degree_of_fusion_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_degree_of_fusion_size());
    total_size += data_size;
  }

  // repeated uint32 atoms_in_system = 20;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->atoms_in_system_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_atoms_in_system_size());
    total_size += data_size;
  }

  // repeated uint32 number_spinach_groups = 23;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->number_spinach_groups_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_number_spinach_groups_size());
    total_size += data_size;
  }

  // repeated uint32 number_non_spinach_groups = 26;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->number_non_spinach_groups_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_number_non_spinach_groups_size());
    total_size += data_size;
  }

  // repeated uint32 atoms_in_spinach_group = 29;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->atoms_in_spinach_group_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_atoms_in_spinach_group_size());
    total_size += data_size;
  }

  // repeated uint32 length_of_spinach_group = 32;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->length_of_spinach_group_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_length_of_spinach_group_size());
    total_size += data_size;
  }

  // repeated uint32 distance_to_another_ring = 35;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->distance_to_another_ring_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_distance_to_another_ring_size());
    total_size += data_size;
  }

  // repeated uint32 strongly_fused_ring_count = 38;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->strongly_fused_ring_count_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_strongly_fused_ring_count_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .SubstructureSearch.SubstructureRingBase base = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_);
    }

    // optional uint32 min_rings_in_system = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_rings_in_system());
    }

    // optional uint32 max_rings_in_system = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_rings_in_system());
    }

    // optional uint32 min_ring_sizes = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_ring_sizes());
    }

    // optional uint32 max_ring_sizes = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_ring_sizes());
    }

    // optional uint32 min_aromatic_ring_count = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_aromatic_ring_count());
    }

    // optional uint32 max_aromatic_ring_count = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_aromatic_ring_count());
    }

    // optional uint32 min_non_aromatic_ring_count = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_non_aromatic_ring_count());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 max_non_aromatic_ring_count = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_non_aromatic_ring_count());
    }

    // optional uint32 min_degree_of_fusion = 18;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_degree_of_fusion());
    }

    // optional uint32 max_degree_of_fusion = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_degree_of_fusion());
    }

    // optional uint32 min_atoms_in_system = 21;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_atoms_in_system());
    }

    // optional uint32 max_atoms_in_system = 22;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_atoms_in_system());
    }

    // optional uint32 min_number_spinach_groups = 24;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_number_spinach_groups());
    }

    // optional uint32 max_number_spinach_groups = 25;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_number_spinach_groups());
    }

    // optional uint32 min_number_non_spinach_groups = 27;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_number_non_spinach_groups());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 max_number_non_spinach_groups = 28;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_number_non_spinach_groups());
    }

    // optional uint32 min_atoms_in_spinach_group = 30;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_atoms_in_spinach_group());
    }

    // optional uint32 max_atoms_in_spinach_group = 31;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_atoms_in_spinach_group());
    }

    // optional uint32 min_length_of_spinach_group = 33;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_length_of_spinach_group());
    }

    // optional uint32 max_length_of_spinach_group = 34;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_length_of_spinach_group());
    }

    // optional uint32 min_distance_to_another_ring = 36;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_distance_to_another_ring());
    }

    // optional uint32 max_distance_to_another_ring = 37;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_distance_to_another_ring());
    }

    // optional uint32 min_strongly_fused_ring_count = 39;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_strongly_fused_ring_count());
    }

  }
  // optional uint32 max_strongly_fused_ring_count = 40;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_strongly_fused_ring_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureRingSystemSpecification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureRingSystemSpecification)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureRingSystemSpecification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstructureRingSystemSpecification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureRingSystemSpecification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureRingSystemSpecification)
    MergeFrom(*source);
  }
}

void SubstructureRingSystemSpecification::MergeFrom(const SubstructureRingSystemSpecification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureRingSystemSpecification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rings_in_system_.MergeFrom(from.rings_in_system_);
  ring_sizes_.MergeFrom(from.ring_sizes_);
  ring_size_count_.MergeFrom(from.ring_size_count_);
  aromatic_ring_count_.MergeFrom(from.aromatic_ring_count_);
  non_aromatic_ring_count_.MergeFrom(from.non_aromatic_ring_count_);
  degree_of_fusion_.MergeFrom(from.degree_of_fusion_);
  atoms_in_system_.MergeFrom(from.atoms_in_system_);
  number_spinach_groups_.MergeFrom(from.number_spinach_groups_);
  number_non_spinach_groups_.MergeFrom(from.number_non_spinach_groups_);
  atoms_in_spinach_group_.MergeFrom(from.atoms_in_spinach_group_);
  length_of_spinach_group_.MergeFrom(from.length_of_spinach_group_);
  distance_to_another_ring_.MergeFrom(from.distance_to_another_ring_);
  strongly_fused_ring_count_.MergeFrom(from.strongly_fused_ring_count_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_base()->::SubstructureSearch::SubstructureRingBase::MergeFrom(from._internal_base());
    }
    if (cached_has_bits & 0x00000002u) {
      min_rings_in_system_ = from.min_rings_in_system_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_rings_in_system_ = from.max_rings_in_system_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_ring_sizes_ = from.min_ring_sizes_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_ring_sizes_ = from.max_ring_sizes_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_aromatic_ring_count_ = from.min_aromatic_ring_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_aromatic_ring_count_ = from.max_aromatic_ring_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      min_non_aromatic_ring_count_ = from.min_non_aromatic_ring_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      max_non_aromatic_ring_count_ = from.max_non_aromatic_ring_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      min_degree_of_fusion_ = from.min_degree_of_fusion_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_degree_of_fusion_ = from.max_degree_of_fusion_;
    }
    if (cached_has_bits & 0x00000800u) {
      min_atoms_in_system_ = from.min_atoms_in_system_;
    }
    if (cached_has_bits & 0x00001000u) {
      max_atoms_in_system_ = from.max_atoms_in_system_;
    }
    if (cached_has_bits & 0x00002000u) {
      min_number_spinach_groups_ = from.min_number_spinach_groups_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_number_spinach_groups_ = from.max_number_spinach_groups_;
    }
    if (cached_has_bits & 0x00008000u) {
      min_number_non_spinach_groups_ = from.min_number_non_spinach_groups_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      max_number_non_spinach_groups_ = from.max_number_non_spinach_groups_;
    }
    if (cached_has_bits & 0x00020000u) {
      min_atoms_in_spinach_group_ = from.min_atoms_in_spinach_group_;
    }
    if (cached_has_bits & 0x00040000u) {
      max_atoms_in_spinach_group_ = from.max_atoms_in_spinach_group_;
    }
    if (cached_has_bits & 0x00080000u) {
      min_length_of_spinach_group_ = from.min_length_of_spinach_group_;
    }
    if (cached_has_bits & 0x00100000u) {
      max_length_of_spinach_group_ = from.max_length_of_spinach_group_;
    }
    if (cached_has_bits & 0x00200000u) {
      min_distance_to_another_ring_ = from.min_distance_to_another_ring_;
    }
    if (cached_has_bits & 0x00400000u) {
      max_distance_to_another_ring_ = from.max_distance_to_another_ring_;
    }
    if (cached_has_bits & 0x00800000u) {
      min_strongly_fused_ring_count_ = from.min_strongly_fused_ring_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_max_strongly_fused_ring_count(from._internal_max_strongly_fused_ring_count());
  }
}

void SubstructureRingSystemSpecification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureRingSystemSpecification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureRingSystemSpecification::CopyFrom(const SubstructureRingSystemSpecification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureRingSystemSpecification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureRingSystemSpecification::IsInitialized() const {
  return true;
}

void SubstructureRingSystemSpecification::InternalSwap(SubstructureRingSystemSpecification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rings_in_system_.InternalSwap(&other->rings_in_system_);
  ring_sizes_.InternalSwap(&other->ring_sizes_);
  ring_size_count_.InternalSwap(&other->ring_size_count_);
  aromatic_ring_count_.InternalSwap(&other->aromatic_ring_count_);
  non_aromatic_ring_count_.InternalSwap(&other->non_aromatic_ring_count_);
  degree_of_fusion_.InternalSwap(&other->degree_of_fusion_);
  atoms_in_system_.InternalSwap(&other->atoms_in_system_);
  number_spinach_groups_.InternalSwap(&other->number_spinach_groups_);
  number_non_spinach_groups_.InternalSwap(&other->number_non_spinach_groups_);
  atoms_in_spinach_group_.InternalSwap(&other->atoms_in_spinach_group_);
  length_of_spinach_group_.InternalSwap(&other->length_of_spinach_group_);
  distance_to_another_ring_.InternalSwap(&other->distance_to_another_ring_);
  strongly_fused_ring_count_.InternalSwap(&other->strongly_fused_ring_count_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubstructureRingSystemSpecification, max_strongly_fused_ring_count_)
      + sizeof(SubstructureRingSystemSpecification::max_strongly_fused_ring_count_)
      - PROTOBUF_FIELD_OFFSET(SubstructureRingSystemSpecification, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstructureRingSystemSpecification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstructureAtomSpecifier::_Internal {
 public:
  using HasBits = decltype(std::declval<SubstructureAtomSpecifier>()._has_bits_);
  static void set_has_min_ncon(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_ncon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_ncon2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_ncon2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_nbonds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_nbonds(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_min_formal_charge(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_formal_charge(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_min_nrings(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_nrings(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_min_ring_bond_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_max_ring_bond_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_min_ring_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_max_ring_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_min_hcount(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_max_hcount(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_aromatic(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_chirality(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_min_aromatic_ring_size(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_max_aromatic_ring_size(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_min_aliphatic_ring_size(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_max_aliphatic_ring_size(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_min_attached_heteroatom_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_max_attached_heteroatom_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_min_lone_pair_count(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_max_lone_pair_count(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_min_unsaturation(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_max_unsaturation(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_min_daylight_x(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_max_daylight_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_min_isotope(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_max_isotope(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_min_aryl(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_max_aryl(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_min_fused_system_size(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_max_fused_system_size(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_min_vinyl(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_max_vinyl(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_all_rings_kekule(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_min_heteroatoms_in_ring(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_max_heteroatoms_in_ring(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_match_spinach_only(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_min_scaffold_bonds_attached_to_ring(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_max_scaffold_bonds_attached_to_ring(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_preference_value(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_min_symmetry_degree(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_max_symmetry_degree(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_symmetry_group(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_logical_operator(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_user_atom_type(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_atom_type(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
};

SubstructureAtomSpecifier::SubstructureAtomSpecifier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  atomic_symbol_(arena),
  atomic_number_(arena),
  ncon_(arena),
  ncon2_(arena),
  nbonds_(arena),
  formal_charge_(arena),
  nrings_(arena),
  ring_bond_count_(arena),
  ring_size_(arena),
  hcount_(arena),
  aromatic_ring_size_(arena),
  aliphatic_ring_size_(arena),
  attached_heteroatom_count_(arena),
  lone_pair_count_(arena),
  unsaturation_(arena),
  daylight_x_(arena),
  isotope_(arena),
  aryl_(arena),
  fused_system_size_(arena),
  vinyl_(arena),
  heteroatoms_in_ring_(arena),
  scaffold_bonds_attached_to_ring_(arena),
  symmetry_degree_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubstructureSearch.SubstructureAtomSpecifier)
}
SubstructureAtomSpecifier::SubstructureAtomSpecifier(const SubstructureAtomSpecifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      atomic_symbol_(from.atomic_symbol_),
      atomic_number_(from.atomic_number_),
      ncon_(from.ncon_),
      ncon2_(from.ncon2_),
      nbonds_(from.nbonds_),
      formal_charge_(from.formal_charge_),
      nrings_(from.nrings_),
      ring_bond_count_(from.ring_bond_count_),
      ring_size_(from.ring_size_),
      hcount_(from.hcount_),
      aromatic_ring_size_(from.aromatic_ring_size_),
      aliphatic_ring_size_(from.aliphatic_ring_size_),
      attached_heteroatom_count_(from.attached_heteroatom_count_),
      lone_pair_count_(from.lone_pair_count_),
      unsaturation_(from.unsaturation_),
      daylight_x_(from.daylight_x_),
      isotope_(from.isotope_),
      aryl_(from.aryl_),
      fused_system_size_(from.fused_system_size_),
      vinyl_(from.vinyl_),
      heteroatoms_in_ring_(from.heteroatoms_in_ring_),
      scaffold_bonds_attached_to_ring_(from.scaffold_bonds_attached_to_ring_),
      symmetry_degree_(from.symmetry_degree_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_ncon_, &from.min_ncon_,
    static_cast<size_t>(reinterpret_cast<char*>(&logical_operator_) -
    reinterpret_cast<char*>(&min_ncon_)) + sizeof(logical_operator_));
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureAtomSpecifier)
}

void SubstructureAtomSpecifier::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstructureAtomSpecifier_Molecule_5fLib_2fsubstructure_2eproto.base);
  ::memset(&min_ncon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&atom_type_) -
      reinterpret_cast<char*>(&min_ncon_)) + sizeof(atom_type_));
  logical_operator_ = 8;
}

SubstructureAtomSpecifier::~SubstructureAtomSpecifier() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureAtomSpecifier)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstructureAtomSpecifier::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubstructureAtomSpecifier::ArenaDtor(void* object) {
  SubstructureAtomSpecifier* _this = reinterpret_cast< SubstructureAtomSpecifier* >(object);
  (void)_this;
}
void SubstructureAtomSpecifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstructureAtomSpecifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstructureAtomSpecifier& SubstructureAtomSpecifier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstructureAtomSpecifier_Molecule_5fLib_2fsubstructure_2eproto.base);
  return *internal_default_instance();
}


void SubstructureAtomSpecifier::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureAtomSpecifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  atomic_symbol_.Clear();
  atomic_number_.Clear();
  ncon_.Clear();
  ncon2_.Clear();
  nbonds_.Clear();
  formal_charge_.Clear();
  nrings_.Clear();
  ring_bond_count_.Clear();
  ring_size_.Clear();
  hcount_.Clear();
  aromatic_ring_size_.Clear();
  aliphatic_ring_size_.Clear();
  attached_heteroatom_count_.Clear();
  lone_pair_count_.Clear();
  unsaturation_.Clear();
  daylight_x_.Clear();
  isotope_.Clear();
  aryl_.Clear();
  fused_system_size_.Clear();
  vinyl_.Clear();
  heteroatoms_in_ring_.Clear();
  scaffold_bonds_attached_to_ring_.Clear();
  symmetry_degree_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&min_ncon_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_formal_charge_) -
        reinterpret_cast<char*>(&min_ncon_)) + sizeof(max_formal_charge_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&min_nrings_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_hcount_) -
        reinterpret_cast<char*>(&min_nrings_)) + sizeof(max_hcount_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&min_aromatic_ring_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chirality_) -
        reinterpret_cast<char*>(&min_aromatic_ring_size_)) + sizeof(chirality_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&all_rings_kekule_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_isotope_) -
        reinterpret_cast<char*>(&all_rings_kekule_)) + sizeof(min_isotope_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&max_isotope_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_heteroatoms_in_ring_) -
        reinterpret_cast<char*>(&max_isotope_)) + sizeof(min_heteroatoms_in_ring_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&max_heteroatoms_in_ring_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&symmetry_group_) -
        reinterpret_cast<char*>(&max_heteroatoms_in_ring_)) + sizeof(symmetry_group_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&user_atom_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&atom_type_) -
        reinterpret_cast<char*>(&user_atom_type_)) + sizeof(atom_type_));
    logical_operator_ = 8;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstructureAtomSpecifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string atomic_symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_atomic_symbol();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.SubstructureAtomSpecifier.atomic_symbol");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 atomic_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_atomic_number(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_atomic_number(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ncon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ncon(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ncon(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_ncon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_min_ncon(&_has_bits_);
          min_ncon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_ncon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_ncon(&_has_bits_);
          max_ncon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ncon2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ncon2(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ncon2(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_ncon2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_min_ncon2(&_has_bits_);
          min_ncon2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_ncon2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_max_ncon2(&_has_bits_);
          max_ncon2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 nbonds = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_nbonds(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_nbonds(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_nbonds = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_min_nbonds(&_has_bits_);
          min_nbonds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_nbonds = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_max_nbonds(&_has_bits_);
          max_nbonds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 formal_charge = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_formal_charge(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<96>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_formal_charge(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 min_formal_charge = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_min_formal_charge(&_has_bits_);
          min_formal_charge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_formal_charge = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_max_formal_charge(&_has_bits_);
          max_formal_charge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 nrings = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_nrings(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<120>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_nrings(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_nrings = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_min_nrings(&_has_bits_);
          min_nrings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_nrings = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_max_nrings(&_has_bits_);
          max_nrings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ring_bond_count = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ring_bond_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<144>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ring_bond_count(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_ring_bond_count = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_min_ring_bond_count(&_has_bits_);
          min_ring_bond_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_ring_bond_count = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_max_ring_bond_count(&_has_bits_);
          max_ring_bond_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ring_size = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ring_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<168>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ring_size(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_ring_size = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_min_ring_size(&_has_bits_);
          min_ring_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_ring_size = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_max_ring_size(&_has_bits_);
          max_ring_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 hcount = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_hcount(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<192>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hcount(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_hcount = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_min_hcount(&_has_bits_);
          min_hcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_hcount = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_max_hcount(&_has_bits_);
          max_hcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool aromatic = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_aromatic(&_has_bits_);
          aromatic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool chirality = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_chirality(&_has_bits_);
          chirality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 aromatic_ring_size = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_aromatic_ring_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<240>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_aromatic_ring_size(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_aromatic_ring_size = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_min_aromatic_ring_size(&_has_bits_);
          min_aromatic_ring_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_aromatic_ring_size = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_max_aromatic_ring_size(&_has_bits_);
          max_aromatic_ring_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 aliphatic_ring_size = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_aliphatic_ring_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<264>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_aliphatic_ring_size(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_aliphatic_ring_size = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_min_aliphatic_ring_size(&_has_bits_);
          min_aliphatic_ring_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_aliphatic_ring_size = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_aliphatic_ring_size(&_has_bits_);
          max_aliphatic_ring_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 attached_heteroatom_count = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<288>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_attached_heteroatom_count(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_attached_heteroatom_count = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_min_attached_heteroatom_count(&_has_bits_);
          min_attached_heteroatom_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_attached_heteroatom_count = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_max_attached_heteroatom_count(&_has_bits_);
          max_attached_heteroatom_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 lone_pair_count = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_lone_pair_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<312>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_lone_pair_count(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_lone_pair_count = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_min_lone_pair_count(&_has_bits_);
          min_lone_pair_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_lone_pair_count = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_max_lone_pair_count(&_has_bits_);
          max_lone_pair_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 unsaturation = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unsaturation(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<336>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_unsaturation(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_unsaturation = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_min_unsaturation(&_has_bits_);
          min_unsaturation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_unsaturation = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_max_unsaturation(&_has_bits_);
          max_unsaturation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 daylight_x = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_daylight_x(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<360>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_daylight_x(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_daylight_x = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_min_daylight_x(&_has_bits_);
          min_daylight_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_daylight_x = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_max_daylight_x(&_has_bits_);
          max_daylight_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 isotope = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_isotope(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<384>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_isotope(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_isotope = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_min_isotope(&_has_bits_);
          min_isotope_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_isotope = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_max_isotope(&_has_bits_);
          max_isotope_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 aryl = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_aryl(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<408>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_aryl(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_aryl = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_min_aryl(&_has_bits_);
          min_aryl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_aryl = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_max_aryl(&_has_bits_);
          max_aryl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 fused_system_size = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_fused_system_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<432>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_fused_system_size(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_fused_system_size = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_min_fused_system_size(&_has_bits_);
          min_fused_system_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_fused_system_size = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_max_fused_system_size(&_has_bits_);
          max_fused_system_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 vinyl = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_vinyl(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<456>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_vinyl(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_vinyl = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_min_vinyl(&_has_bits_);
          min_vinyl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_vinyl = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_max_vinyl(&_has_bits_);
          max_vinyl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool all_rings_kekule = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_all_rings_kekule(&_has_bits_);
          all_rings_kekule_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 heteroatoms_in_ring = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_heteroatoms_in_ring(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<488>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_heteroatoms_in_ring(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_heteroatoms_in_ring = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_min_heteroatoms_in_ring(&_has_bits_);
          min_heteroatoms_in_ring_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_heteroatoms_in_ring = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_max_heteroatoms_in_ring(&_has_bits_);
          max_heteroatoms_in_ring_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 match_spinach_only = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_match_spinach_only(&_has_bits_);
          match_spinach_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 scaffold_bonds_attached_to_ring = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_scaffold_bonds_attached_to_ring(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<520>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_scaffold_bonds_attached_to_ring(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_scaffold_bonds_attached_to_ring = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_min_scaffold_bonds_attached_to_ring(&_has_bits_);
          min_scaffold_bonds_attached_to_ring_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_scaffold_bonds_attached_to_ring = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_scaffold_bonds_attached_to_ring(&_has_bits_);
          max_scaffold_bonds_attached_to_ring_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 preference_value = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_preference_value(&_has_bits_);
          preference_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 symmetry_degree = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_symmetry_degree(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<552>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_symmetry_degree(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_symmetry_degree = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_min_symmetry_degree(&_has_bits_);
          min_symmetry_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_symmetry_degree = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_max_symmetry_degree(&_has_bits_);
          max_symmetry_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 symmetry_group = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_symmetry_group(&_has_bits_);
          symmetry_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SubstructureSearch.Operator logical_operator = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SubstructureSearch::Operator_IsValid(val))) {
            _internal_set_logical_operator(static_cast<::SubstructureSearch::Operator>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(76, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 user_atom_type = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_user_atom_type(&_has_bits_);
          user_atom_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 atom_type = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_atom_type(&_has_bits_);
          atom_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstructureAtomSpecifier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureAtomSpecifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string atomic_symbol = 1;
  for (int i = 0, n = this->_internal_atomic_symbol_size(); i < n; i++) {
    const auto& s = this->_internal_atomic_symbol(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureAtomSpecifier.atomic_symbol");
    target = stream->WriteString(1, s, target);
  }

  // repeated uint32 atomic_number = 2;
  for (int i = 0, n = this->_internal_atomic_number_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_atomic_number(i), target);
  }

  // repeated uint32 ncon = 3;
  for (int i = 0, n = this->_internal_ncon_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ncon(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 min_ncon = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_min_ncon(), target);
  }

  // optional uint32 max_ncon = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_max_ncon(), target);
  }

  // repeated uint32 ncon2 = 6;
  for (int i = 0, n = this->_internal_ncon2_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ncon2(i), target);
  }

  // optional uint32 min_ncon2 = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_min_ncon2(), target);
  }

  // optional uint32 max_ncon2 = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_max_ncon2(), target);
  }

  // repeated uint32 nbonds = 9;
  for (int i = 0, n = this->_internal_nbonds_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_nbonds(i), target);
  }

  // optional uint32 min_nbonds = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_min_nbonds(), target);
  }

  // optional uint32 max_nbonds = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_max_nbonds(), target);
  }

  // repeated int32 formal_charge = 12;
  for (int i = 0, n = this->_internal_formal_charge_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_formal_charge(i), target);
  }

  // optional int32 min_formal_charge = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_min_formal_charge(), target);
  }

  // optional int32 max_formal_charge = 14;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_max_formal_charge(), target);
  }

  // repeated uint32 nrings = 15;
  for (int i = 0, n = this->_internal_nrings_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_nrings(i), target);
  }

  // optional uint32 min_nrings = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_min_nrings(), target);
  }

  // optional uint32 max_nrings = 17;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_max_nrings(), target);
  }

  // repeated uint32 ring_bond_count = 18;
  for (int i = 0, n = this->_internal_ring_bond_count_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_ring_bond_count(i), target);
  }

  // optional uint32 min_ring_bond_count = 19;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_min_ring_bond_count(), target);
  }

  // optional uint32 max_ring_bond_count = 20;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_max_ring_bond_count(), target);
  }

  // repeated uint32 ring_size = 21;
  for (int i = 0, n = this->_internal_ring_size_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_ring_size(i), target);
  }

  // optional uint32 min_ring_size = 22;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_min_ring_size(), target);
  }

  // optional uint32 max_ring_size = 23;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_max_ring_size(), target);
  }

  // repeated uint32 hcount = 24;
  for (int i = 0, n = this->_internal_hcount_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_hcount(i), target);
  }

  // optional uint32 min_hcount = 25;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_min_hcount(), target);
  }

  // optional uint32 max_hcount = 26;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_max_hcount(), target);
  }

  // optional bool aromatic = 27;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_aromatic(), target);
  }

  // optional bool chirality = 28;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_chirality(), target);
  }

  // repeated uint32 aromatic_ring_size = 30;
  for (int i = 0, n = this->_internal_aromatic_ring_size_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_aromatic_ring_size(i), target);
  }

  // optional uint32 min_aromatic_ring_size = 31;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_min_aromatic_ring_size(), target);
  }

  // optional uint32 max_aromatic_ring_size = 32;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_max_aromatic_ring_size(), target);
  }

  // repeated uint32 aliphatic_ring_size = 33;
  for (int i = 0, n = this->_internal_aliphatic_ring_size_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_aliphatic_ring_size(i), target);
  }

  // optional uint32 min_aliphatic_ring_size = 34;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_min_aliphatic_ring_size(), target);
  }

  // optional uint32 max_aliphatic_ring_size = 35;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_max_aliphatic_ring_size(), target);
  }

  // repeated uint32 attached_heteroatom_count = 36;
  for (int i = 0, n = this->_internal_attached_heteroatom_count_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_attached_heteroatom_count(i), target);
  }

  // optional uint32 min_attached_heteroatom_count = 37;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_min_attached_heteroatom_count(), target);
  }

  // optional uint32 max_attached_heteroatom_count = 38;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_max_attached_heteroatom_count(), target);
  }

  // repeated uint32 lone_pair_count = 39;
  for (int i = 0, n = this->_internal_lone_pair_count_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_lone_pair_count(i), target);
  }

  // optional uint32 min_lone_pair_count = 40;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_min_lone_pair_count(), target);
  }

  // optional uint32 max_lone_pair_count = 41;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(41, this->_internal_max_lone_pair_count(), target);
  }

  // repeated uint32 unsaturation = 42;
  for (int i = 0, n = this->_internal_unsaturation_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(42, this->_internal_unsaturation(i), target);
  }

  // optional uint32 min_unsaturation = 43;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(43, this->_internal_min_unsaturation(), target);
  }

  // optional uint32 max_unsaturation = 44;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(44, this->_internal_max_unsaturation(), target);
  }

  // repeated uint32 daylight_x = 45;
  for (int i = 0, n = this->_internal_daylight_x_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(45, this->_internal_daylight_x(i), target);
  }

  // optional uint32 min_daylight_x = 46;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(46, this->_internal_min_daylight_x(), target);
  }

  // optional uint32 max_daylight_x = 47;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(47, this->_internal_max_daylight_x(), target);
  }

  // repeated uint32 isotope = 48;
  for (int i = 0, n = this->_internal_isotope_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(48, this->_internal_isotope(i), target);
  }

  // optional uint32 min_isotope = 49;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(49, this->_internal_min_isotope(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 max_isotope = 50;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_max_isotope(), target);
  }

  // repeated uint32 aryl = 51;
  for (int i = 0, n = this->_internal_aryl_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(51, this->_internal_aryl(i), target);
  }

  // optional uint32 min_aryl = 52;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(52, this->_internal_min_aryl(), target);
  }

  // optional uint32 max_aryl = 53;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(53, this->_internal_max_aryl(), target);
  }

  // repeated uint32 fused_system_size = 54;
  for (int i = 0, n = this->_internal_fused_system_size_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(54, this->_internal_fused_system_size(i), target);
  }

  // optional uint32 min_fused_system_size = 55;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(55, this->_internal_min_fused_system_size(), target);
  }

  // optional uint32 max_fused_system_size = 56;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(56, this->_internal_max_fused_system_size(), target);
  }

  // repeated uint32 vinyl = 57;
  for (int i = 0, n = this->_internal_vinyl_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(57, this->_internal_vinyl(i), target);
  }

  // optional uint32 min_vinyl = 58;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(58, this->_internal_min_vinyl(), target);
  }

  // optional uint32 max_vinyl = 59;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(59, this->_internal_max_vinyl(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool all_rings_kekule = 60;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(60, this->_internal_all_rings_kekule(), target);
  }

  // repeated uint32 heteroatoms_in_ring = 61;
  for (int i = 0, n = this->_internal_heteroatoms_in_ring_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(61, this->_internal_heteroatoms_in_ring(i), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 min_heteroatoms_in_ring = 62;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(62, this->_internal_min_heteroatoms_in_ring(), target);
  }

  // optional uint32 max_heteroatoms_in_ring = 63;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(63, this->_internal_max_heteroatoms_in_ring(), target);
  }

  // optional int32 match_spinach_only = 64;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(64, this->_internal_match_spinach_only(), target);
  }

  // repeated uint32 scaffold_bonds_attached_to_ring = 65;
  for (int i = 0, n = this->_internal_scaffold_bonds_attached_to_ring_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(65, this->_internal_scaffold_bonds_attached_to_ring(i), target);
  }

  // optional uint32 min_scaffold_bonds_attached_to_ring = 66;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(66, this->_internal_min_scaffold_bonds_attached_to_ring(), target);
  }

  // optional uint32 max_scaffold_bonds_attached_to_ring = 67;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(67, this->_internal_max_scaffold_bonds_attached_to_ring(), target);
  }

  // optional int32 preference_value = 68;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(68, this->_internal_preference_value(), target);
  }

  // repeated uint32 symmetry_degree = 69;
  for (int i = 0, n = this->_internal_symmetry_degree_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(69, this->_internal_symmetry_degree(i), target);
  }

  // optional uint32 min_symmetry_degree = 70;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(70, this->_internal_min_symmetry_degree(), target);
  }

  // optional uint32 max_symmetry_degree = 71;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(71, this->_internal_max_symmetry_degree(), target);
  }

  // optional int32 symmetry_group = 72;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(72, this->_internal_symmetry_group(), target);
  }

  // optional .SubstructureSearch.Operator logical_operator = 76;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      76, this->_internal_logical_operator(), target);
  }

  // optional uint32 user_atom_type = 77;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(77, this->_internal_user_atom_type(), target);
  }

  // optional uint32 atom_type = 78;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(78, this->_internal_atom_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureAtomSpecifier)
  return target;
}

size_t SubstructureAtomSpecifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureAtomSpecifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string atomic_symbol = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(atomic_symbol_.size());
  for (int i = 0, n = atomic_symbol_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      atomic_symbol_.Get(i));
  }

  // repeated uint32 atomic_number = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->atomic_number_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_atomic_number_size());
    total_size += data_size;
  }

  // repeated uint32 ncon = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ncon_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ncon_size());
    total_size += data_size;
  }

  // repeated uint32 ncon2 = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ncon2_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ncon2_size());
    total_size += data_size;
  }

  // repeated uint32 nbonds = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->nbonds_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_nbonds_size());
    total_size += data_size;
  }

  // repeated int32 formal_charge = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->formal_charge_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_formal_charge_size());
    total_size += data_size;
  }

  // repeated uint32 nrings = 15;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->nrings_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_nrings_size());
    total_size += data_size;
  }

  // repeated uint32 ring_bond_count = 18;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ring_bond_count_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ring_bond_count_size());
    total_size += data_size;
  }

  // repeated uint32 ring_size = 21;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ring_size_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ring_size_size());
    total_size += data_size;
  }

  // repeated uint32 hcount = 24;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->hcount_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hcount_size());
    total_size += data_size;
  }

  // repeated uint32 aromatic_ring_size = 30;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->aromatic_ring_size_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_aromatic_ring_size_size());
    total_size += data_size;
  }

  // repeated uint32 aliphatic_ring_size = 33;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->aliphatic_ring_size_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_aliphatic_ring_size_size());
    total_size += data_size;
  }

  // repeated uint32 attached_heteroatom_count = 36;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->attached_heteroatom_count_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attached_heteroatom_count_size());
    total_size += data_size;
  }

  // repeated uint32 lone_pair_count = 39;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->lone_pair_count_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_lone_pair_count_size());
    total_size += data_size;
  }

  // repeated uint32 unsaturation = 42;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->unsaturation_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unsaturation_size());
    total_size += data_size;
  }

  // repeated uint32 daylight_x = 45;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->daylight_x_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_daylight_x_size());
    total_size += data_size;
  }

  // repeated uint32 isotope = 48;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->isotope_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_isotope_size());
    total_size += data_size;
  }

  // repeated uint32 aryl = 51;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->aryl_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_aryl_size());
    total_size += data_size;
  }

  // repeated uint32 fused_system_size = 54;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->fused_system_size_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fused_system_size_size());
    total_size += data_size;
  }

  // repeated uint32 vinyl = 57;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->vinyl_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vinyl_size());
    total_size += data_size;
  }

  // repeated uint32 heteroatoms_in_ring = 61;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->heteroatoms_in_ring_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_heteroatoms_in_ring_size());
    total_size += data_size;
  }

  // repeated uint32 scaffold_bonds_attached_to_ring = 65;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->scaffold_bonds_attached_to_ring_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_scaffold_bonds_attached_to_ring_size());
    total_size += data_size;
  }

  // repeated uint32 symmetry_degree = 69;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->symmetry_degree_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_symmetry_degree_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 min_ncon = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_ncon());
    }

    // optional uint32 max_ncon = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_ncon());
    }

    // optional uint32 min_ncon2 = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_ncon2());
    }

    // optional uint32 max_ncon2 = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_ncon2());
    }

    // optional uint32 min_nbonds = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_nbonds());
    }

    // optional uint32 max_nbonds = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_nbonds());
    }

    // optional int32 min_formal_charge = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_min_formal_charge());
    }

    // optional int32 max_formal_charge = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_formal_charge());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 min_nrings = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_nrings());
    }

    // optional uint32 max_nrings = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_nrings());
    }

    // optional uint32 min_ring_bond_count = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_ring_bond_count());
    }

    // optional uint32 max_ring_bond_count = 20;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_ring_bond_count());
    }

    // optional uint32 min_ring_size = 22;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_ring_size());
    }

    // optional uint32 max_ring_size = 23;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_ring_size());
    }

    // optional uint32 min_hcount = 25;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_hcount());
    }

    // optional uint32 max_hcount = 26;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_hcount());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 min_aromatic_ring_size = 31;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_aromatic_ring_size());
    }

    // optional uint32 max_aromatic_ring_size = 32;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_aromatic_ring_size());
    }

    // optional uint32 min_aliphatic_ring_size = 34;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_aliphatic_ring_size());
    }

    // optional uint32 max_aliphatic_ring_size = 35;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_aliphatic_ring_size());
    }

    // optional uint32 min_attached_heteroatom_count = 37;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_attached_heteroatom_count());
    }

    // optional uint32 max_attached_heteroatom_count = 38;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_attached_heteroatom_count());
    }

    // optional bool aromatic = 27;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool chirality = 28;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool all_rings_kekule = 60;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional uint32 min_lone_pair_count = 40;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_lone_pair_count());
    }

    // optional uint32 max_lone_pair_count = 41;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_lone_pair_count());
    }

    // optional uint32 min_unsaturation = 43;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_unsaturation());
    }

    // optional uint32 max_unsaturation = 44;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_unsaturation());
    }

    // optional uint32 min_daylight_x = 46;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_daylight_x());
    }

    // optional uint32 max_daylight_x = 47;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_daylight_x());
    }

    // optional uint32 min_isotope = 49;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_isotope());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 max_isotope = 50;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_isotope());
    }

    // optional uint32 min_aryl = 52;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_aryl());
    }

    // optional uint32 max_aryl = 53;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_aryl());
    }

    // optional uint32 min_fused_system_size = 55;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_fused_system_size());
    }

    // optional uint32 max_fused_system_size = 56;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_fused_system_size());
    }

    // optional uint32 min_vinyl = 58;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_vinyl());
    }

    // optional uint32 max_vinyl = 59;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_vinyl());
    }

    // optional uint32 min_heteroatoms_in_ring = 62;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_heteroatoms_in_ring());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 max_heteroatoms_in_ring = 63;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_heteroatoms_in_ring());
    }

    // optional int32 match_spinach_only = 64;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_match_spinach_only());
    }

    // optional uint32 min_scaffold_bonds_attached_to_ring = 66;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_scaffold_bonds_attached_to_ring());
    }

    // optional uint32 max_scaffold_bonds_attached_to_ring = 67;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_scaffold_bonds_attached_to_ring());
    }

    // optional int32 preference_value = 68;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_preference_value());
    }

    // optional uint32 min_symmetry_degree = 70;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_symmetry_degree());
    }

    // optional uint32 max_symmetry_degree = 71;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_symmetry_degree());
    }

    // optional int32 symmetry_group = 72;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_symmetry_group());
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional uint32 user_atom_type = 77;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_user_atom_type());
    }

    // optional uint32 atom_type = 78;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_atom_type());
    }

    // optional .SubstructureSearch.Operator logical_operator = 76;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_logical_operator());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureAtomSpecifier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureAtomSpecifier)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureAtomSpecifier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstructureAtomSpecifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureAtomSpecifier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureAtomSpecifier)
    MergeFrom(*source);
  }
}

void SubstructureAtomSpecifier::MergeFrom(const SubstructureAtomSpecifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureAtomSpecifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  atomic_symbol_.MergeFrom(from.atomic_symbol_);
  atomic_number_.MergeFrom(from.atomic_number_);
  ncon_.MergeFrom(from.ncon_);
  ncon2_.MergeFrom(from.ncon2_);
  nbonds_.MergeFrom(from.nbonds_);
  formal_charge_.MergeFrom(from.formal_charge_);
  nrings_.MergeFrom(from.nrings_);
  ring_bond_count_.MergeFrom(from.ring_bond_count_);
  ring_size_.MergeFrom(from.ring_size_);
  hcount_.MergeFrom(from.hcount_);
  aromatic_ring_size_.MergeFrom(from.aromatic_ring_size_);
  aliphatic_ring_size_.MergeFrom(from.aliphatic_ring_size_);
  attached_heteroatom_count_.MergeFrom(from.attached_heteroatom_count_);
  lone_pair_count_.MergeFrom(from.lone_pair_count_);
  unsaturation_.MergeFrom(from.unsaturation_);
  daylight_x_.MergeFrom(from.daylight_x_);
  isotope_.MergeFrom(from.isotope_);
  aryl_.MergeFrom(from.aryl_);
  fused_system_size_.MergeFrom(from.fused_system_size_);
  vinyl_.MergeFrom(from.vinyl_);
  heteroatoms_in_ring_.MergeFrom(from.heteroatoms_in_ring_);
  scaffold_bonds_attached_to_ring_.MergeFrom(from.scaffold_bonds_attached_to_ring_);
  symmetry_degree_.MergeFrom(from.symmetry_degree_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      min_ncon_ = from.min_ncon_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ncon_ = from.max_ncon_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_ncon2_ = from.min_ncon2_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_ncon2_ = from.max_ncon2_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_nbonds_ = from.min_nbonds_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_nbonds_ = from.max_nbonds_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_formal_charge_ = from.min_formal_charge_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_formal_charge_ = from.max_formal_charge_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      min_nrings_ = from.min_nrings_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_nrings_ = from.max_nrings_;
    }
    if (cached_has_bits & 0x00000400u) {
      min_ring_bond_count_ = from.min_ring_bond_count_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_ring_bond_count_ = from.max_ring_bond_count_;
    }
    if (cached_has_bits & 0x00001000u) {
      min_ring_size_ = from.min_ring_size_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_ring_size_ = from.max_ring_size_;
    }
    if (cached_has_bits & 0x00004000u) {
      min_hcount_ = from.min_hcount_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_hcount_ = from.max_hcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      min_aromatic_ring_size_ = from.min_aromatic_ring_size_;
    }
    if (cached_has_bits & 0x00020000u) {
      max_aromatic_ring_size_ = from.max_aromatic_ring_size_;
    }
    if (cached_has_bits & 0x00040000u) {
      min_aliphatic_ring_size_ = from.min_aliphatic_ring_size_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_aliphatic_ring_size_ = from.max_aliphatic_ring_size_;
    }
    if (cached_has_bits & 0x00100000u) {
      min_attached_heteroatom_count_ = from.min_attached_heteroatom_count_;
    }
    if (cached_has_bits & 0x00200000u) {
      max_attached_heteroatom_count_ = from.max_attached_heteroatom_count_;
    }
    if (cached_has_bits & 0x00400000u) {
      aromatic_ = from.aromatic_;
    }
    if (cached_has_bits & 0x00800000u) {
      chirality_ = from.chirality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      all_rings_kekule_ = from.all_rings_kekule_;
    }
    if (cached_has_bits & 0x02000000u) {
      min_lone_pair_count_ = from.min_lone_pair_count_;
    }
    if (cached_has_bits & 0x04000000u) {
      max_lone_pair_count_ = from.max_lone_pair_count_;
    }
    if (cached_has_bits & 0x08000000u) {
      min_unsaturation_ = from.min_unsaturation_;
    }
    if (cached_has_bits & 0x10000000u) {
      max_unsaturation_ = from.max_unsaturation_;
    }
    if (cached_has_bits & 0x20000000u) {
      min_daylight_x_ = from.min_daylight_x_;
    }
    if (cached_has_bits & 0x40000000u) {
      max_daylight_x_ = from.max_daylight_x_;
    }
    if (cached_has_bits & 0x80000000u) {
      min_isotope_ = from.min_isotope_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      max_isotope_ = from.max_isotope_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_aryl_ = from.min_aryl_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_aryl_ = from.max_aryl_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_fused_system_size_ = from.min_fused_system_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_fused_system_size_ = from.max_fused_system_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_vinyl_ = from.min_vinyl_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_vinyl_ = from.max_vinyl_;
    }
    if (cached_has_bits & 0x00000080u) {
      min_heteroatoms_in_ring_ = from.min_heteroatoms_in_ring_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      max_heteroatoms_in_ring_ = from.max_heteroatoms_in_ring_;
    }
    if (cached_has_bits & 0x00000200u) {
      match_spinach_only_ = from.match_spinach_only_;
    }
    if (cached_has_bits & 0x00000400u) {
      min_scaffold_bonds_attached_to_ring_ = from.min_scaffold_bonds_attached_to_ring_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_scaffold_bonds_attached_to_ring_ = from.max_scaffold_bonds_attached_to_ring_;
    }
    if (cached_has_bits & 0x00001000u) {
      preference_value_ = from.preference_value_;
    }
    if (cached_has_bits & 0x00002000u) {
      min_symmetry_degree_ = from.min_symmetry_degree_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_symmetry_degree_ = from.max_symmetry_degree_;
    }
    if (cached_has_bits & 0x00008000u) {
      symmetry_group_ = from.symmetry_group_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      user_atom_type_ = from.user_atom_type_;
    }
    if (cached_has_bits & 0x00020000u) {
      atom_type_ = from.atom_type_;
    }
    if (cached_has_bits & 0x00040000u) {
      logical_operator_ = from.logical_operator_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void SubstructureAtomSpecifier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureAtomSpecifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureAtomSpecifier::CopyFrom(const SubstructureAtomSpecifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureAtomSpecifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureAtomSpecifier::IsInitialized() const {
  return true;
}

void SubstructureAtomSpecifier::InternalSwap(SubstructureAtomSpecifier* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  atomic_symbol_.InternalSwap(&other->atomic_symbol_);
  atomic_number_.InternalSwap(&other->atomic_number_);
  ncon_.InternalSwap(&other->ncon_);
  ncon2_.InternalSwap(&other->ncon2_);
  nbonds_.InternalSwap(&other->nbonds_);
  formal_charge_.InternalSwap(&other->formal_charge_);
  nrings_.InternalSwap(&other->nrings_);
  ring_bond_count_.InternalSwap(&other->ring_bond_count_);
  ring_size_.InternalSwap(&other->ring_size_);
  hcount_.InternalSwap(&other->hcount_);
  aromatic_ring_size_.InternalSwap(&other->aromatic_ring_size_);
  aliphatic_ring_size_.InternalSwap(&other->aliphatic_ring_size_);
  attached_heteroatom_count_.InternalSwap(&other->attached_heteroatom_count_);
  lone_pair_count_.InternalSwap(&other->lone_pair_count_);
  unsaturation_.InternalSwap(&other->unsaturation_);
  daylight_x_.InternalSwap(&other->daylight_x_);
  isotope_.InternalSwap(&other->isotope_);
  aryl_.InternalSwap(&other->aryl_);
  fused_system_size_.InternalSwap(&other->fused_system_size_);
  vinyl_.InternalSwap(&other->vinyl_);
  heteroatoms_in_ring_.InternalSwap(&other->heteroatoms_in_ring_);
  scaffold_bonds_attached_to_ring_.InternalSwap(&other->scaffold_bonds_attached_to_ring_);
  symmetry_degree_.InternalSwap(&other->symmetry_degree_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubstructureAtomSpecifier, atom_type_)
      + sizeof(SubstructureAtomSpecifier::atom_type_)
      - PROTOBUF_FIELD_OFFSET(SubstructureAtomSpecifier, min_ncon_)>(
          reinterpret_cast<char*>(&min_ncon_),
          reinterpret_cast<char*>(&other->min_ncon_));
  swap(logical_operator_, other->logical_operator_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstructureAtomSpecifier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstructureAtomEnvironment::_Internal {
 public:
  using HasBits = decltype(std::declval<SubstructureAtomEnvironment>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_op(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SubstructureAtomEnvironment::SubstructureAtomEnvironment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  substructure_atom_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubstructureSearch.SubstructureAtomEnvironment)
}
SubstructureAtomEnvironment::SubstructureAtomEnvironment(const SubstructureAtomEnvironment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      substructure_atom_(from.substructure_atom_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_op()) {
    op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_op(),
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureAtomEnvironment)
}

void SubstructureAtomEnvironment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstructureAtom_Molecule_5fLib_2fsubstructure_2eproto.base);
  op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

SubstructureAtomEnvironment::~SubstructureAtomEnvironment() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureAtomEnvironment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstructureAtomEnvironment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  op_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubstructureAtomEnvironment::ArenaDtor(void* object) {
  SubstructureAtomEnvironment* _this = reinterpret_cast< SubstructureAtomEnvironment* >(object);
  (void)_this;
}
void SubstructureAtomEnvironment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstructureAtomEnvironment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstructureAtomEnvironment& SubstructureAtomEnvironment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstructureAtom_Molecule_5fLib_2fsubstructure_2eproto.base);
  return *internal_default_instance();
}


void SubstructureAtomEnvironment::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureAtomEnvironment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  substructure_atom_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    op_.ClearNonDefaultToEmpty();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstructureAtomEnvironment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.SubstructureAtom substructure_atom = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_substructure_atom(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string op = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_op();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.SubstructureAtomEnvironment.op");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstructureAtomEnvironment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureAtomEnvironment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated .SubstructureSearch.SubstructureAtom substructure_atom = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_substructure_atom_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_substructure_atom(i), target, stream);
  }

  // optional string op = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_op().data(), static_cast<int>(this->_internal_op().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureAtomEnvironment.op");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_op(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureAtomEnvironment)
  return target;
}

size_t SubstructureAtomEnvironment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureAtomEnvironment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SubstructureSearch.SubstructureAtom substructure_atom = 2;
  total_size += 1UL * this->_internal_substructure_atom_size();
  for (const auto& msg : this->substructure_atom_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string op = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_op());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureAtomEnvironment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureAtomEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureAtomEnvironment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstructureAtomEnvironment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureAtomEnvironment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureAtomEnvironment)
    MergeFrom(*source);
  }
}

void SubstructureAtomEnvironment::MergeFrom(const SubstructureAtomEnvironment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureAtomEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  substructure_atom_.MergeFrom(from.substructure_atom_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_op(from._internal_op());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubstructureAtomEnvironment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureAtomEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureAtomEnvironment::CopyFrom(const SubstructureAtomEnvironment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureAtomEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureAtomEnvironment::IsInitialized() const {
  return true;
}

void SubstructureAtomEnvironment::InternalSwap(SubstructureAtomEnvironment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  substructure_atom_.InternalSwap(&other->substructure_atom_);
  op_.Swap(&other->op_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstructureAtomEnvironment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstructureAtom::_Internal {
 public:
  using HasBits = decltype(std::declval<SubstructureAtom>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_match_as_match(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_text_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_atom_map_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_initial_atom_number(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_or_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_or_operator(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ring_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_fused_system_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_fragment_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_numeric_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_include_in_embedding(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_bond_smarts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sum_all_preference_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_min_unmatched_atoms_attached(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_max_unmatched_atoms_attached(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_atom_type_group(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

SubstructureAtom::SubstructureAtom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  atom_properties_(arena),
  environment_(arena),
  query_bond_(arena),
  preference_(arena),
  single_bond_(arena),
  double_bond_(arena),
  triple_bond_(arena),
  aromatic_bond_(arena),
  bond_(arena),
  unmatched_atoms_attached_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubstructureSearch.SubstructureAtom)
}
SubstructureAtom::SubstructureAtom(const SubstructureAtom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      atom_properties_(from.atom_properties_),
      environment_(from.environment_),
      query_bond_(from.query_bond_),
      preference_(from.preference_),
      single_bond_(from.single_bond_),
      double_bond_(from.double_bond_),
      triple_bond_(from.triple_bond_),
      aromatic_bond_(from.aromatic_bond_),
      bond_(from.bond_),
      unmatched_atoms_attached_(from.unmatched_atoms_attached_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text_identifier()) {
    text_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_text_identifier(),
      GetArena());
  }
  bond_smarts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bond_smarts()) {
    bond_smarts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bond_smarts(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&atom_type_group_) -
    reinterpret_cast<char*>(&id_)) + sizeof(atom_type_group_));
  clear_has_SmilesOrSmarts();
  switch (from.SmilesOrSmarts_case()) {
    case kSmarts: {
      _internal_set_smarts(from._internal_smarts());
      break;
    }
    case kAtomSmarts: {
      _internal_set_atom_smarts(from._internal_atom_smarts());
      break;
    }
    case kSmiles: {
      _internal_set_smiles(from._internal_smiles());
      break;
    }
    case SMILESORSMARTS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureAtom)
}

void SubstructureAtom::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstructureAtom_Molecule_5fLib_2fsubstructure_2eproto.base);
  text_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bond_smarts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&atom_type_group_) -
      reinterpret_cast<char*>(&id_)) + sizeof(atom_type_group_));
  clear_has_SmilesOrSmarts();
}

SubstructureAtom::~SubstructureAtom() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureAtom)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstructureAtom::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bond_smarts_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_SmilesOrSmarts()) {
    clear_SmilesOrSmarts();
  }
}

void SubstructureAtom::ArenaDtor(void* object) {
  SubstructureAtom* _this = reinterpret_cast< SubstructureAtom* >(object);
  (void)_this;
}
void SubstructureAtom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstructureAtom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstructureAtom& SubstructureAtom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstructureAtom_Molecule_5fLib_2fsubstructure_2eproto.base);
  return *internal_default_instance();
}


void SubstructureAtom::clear_SmilesOrSmarts() {
// @@protoc_insertion_point(one_of_clear_start:SubstructureSearch.SubstructureAtom)
  switch (SmilesOrSmarts_case()) {
    case kSmarts: {
      SmilesOrSmarts_.smarts_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kAtomSmarts: {
      SmilesOrSmarts_.atom_smarts_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kSmiles: {
      SmilesOrSmarts_.smiles_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case SMILESORSMARTS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SMILESORSMARTS_NOT_SET;
}


void SubstructureAtom::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureAtom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  atom_properties_.Clear();
  environment_.Clear();
  query_bond_.Clear();
  preference_.Clear();
  single_bond_.Clear();
  double_bond_.Clear();
  triple_bond_.Clear();
  aromatic_bond_.Clear();
  bond_.Clear();
  unmatched_atoms_attached_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      text_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      bond_smarts_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ring_id_) -
        reinterpret_cast<char*>(&id_)) + sizeof(ring_id_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&fused_system_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_unmatched_atoms_attached_) -
        reinterpret_cast<char*>(&fused_system_id_)) + sizeof(max_unmatched_atoms_attached_));
  }
  atom_type_group_ = 0u;
  clear_SmilesOrSmarts();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstructureAtom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool match_as_match = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_match_as_match(&has_bits);
          match_as_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text_identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_text_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.SubstructureAtom.text_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 atom_map_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_atom_map_number(&has_bits);
          atom_map_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 initial_atom_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_initial_atom_number(&has_bits);
          initial_atom_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 or_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_or_id(&has_bits);
          or_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.SubstructureAtomSpecifier atom_properties = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_atom_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 or_operator = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_or_operator(&has_bits);
          or_operator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ring_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ring_id(&has_bits);
          ring_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fused_system_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_fused_system_id(&has_bits);
          fused_system_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fragment_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_fragment_id(&has_bits);
          fragment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double numeric_value = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_numeric_value(&has_bits);
          numeric_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool include_in_embedding = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_include_in_embedding(&has_bits);
          include_in_embedding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string smarts = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_smarts();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.SubstructureAtom.smarts");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string atom_smarts = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_atom_smarts();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.SubstructureAtom.atom_smarts");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string smiles = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_smiles();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.SubstructureAtom.smiles");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.SubstructureAtomEnvironment environment = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_environment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.SubstructureBond query_bond = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_query_bond(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string bond_smarts = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_bond_smarts();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.SubstructureAtom.bond_smarts");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.SubstructureAtomSpecifier preference = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_preference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool sum_all_preference_hits = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_sum_all_preference_hits(&has_bits);
          sum_all_preference_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 single_bond = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_single_bond(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<200>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_single_bond(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 double_bond = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_double_bond(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<208>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_double_bond(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 triple_bond = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_triple_bond(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<216>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_triple_bond(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 aromatic_bond = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_aromatic_bond(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<224>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_aromatic_bond(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 bond = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_bond(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<232>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_bond(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 unmatched_atoms_attached = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unmatched_atoms_attached(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<240>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_unmatched_atoms_attached(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_unmatched_atoms_attached = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_min_unmatched_atoms_attached(&has_bits);
          min_unmatched_atoms_attached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_unmatched_atoms_attached = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_max_unmatched_atoms_attached(&has_bits);
          max_unmatched_atoms_attached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 atom_type_group = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_atom_type_group(&has_bits);
          atom_type_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstructureAtom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureAtom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional bool match_as_match = 2;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_match_as_match(), target);
  }

  // optional string text_identifier = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text_identifier().data(), static_cast<int>(this->_internal_text_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureAtom.text_identifier");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text_identifier(), target);
  }

  // optional uint32 atom_map_number = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_atom_map_number(), target);
  }

  // optional uint32 initial_atom_number = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_initial_atom_number(), target);
  }

  // optional uint32 or_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_or_id(), target);
  }

  // repeated .SubstructureSearch.SubstructureAtomSpecifier atom_properties = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_atom_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_atom_properties(i), target, stream);
  }

  // optional int32 or_operator = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_or_operator(), target);
  }

  // optional int32 ring_id = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_ring_id(), target);
  }

  // optional uint32 fused_system_id = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_fused_system_id(), target);
  }

  // optional int32 fragment_id = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_fragment_id(), target);
  }

  // optional double numeric_value = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_numeric_value(), target);
  }

  // optional bool include_in_embedding = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_include_in_embedding(), target);
  }

  switch (SmilesOrSmarts_case()) {
    case kSmarts: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_smarts().data(), static_cast<int>(this->_internal_smarts().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "SubstructureSearch.SubstructureAtom.smarts");
      target = stream->WriteStringMaybeAliased(
          14, this->_internal_smarts(), target);
      break;
    }
    case kAtomSmarts: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_atom_smarts().data(), static_cast<int>(this->_internal_atom_smarts().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "SubstructureSearch.SubstructureAtom.atom_smarts");
      target = stream->WriteStringMaybeAliased(
          15, this->_internal_atom_smarts(), target);
      break;
    }
    case kSmiles: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_smiles().data(), static_cast<int>(this->_internal_smiles().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "SubstructureSearch.SubstructureAtom.smiles");
      target = stream->WriteStringMaybeAliased(
          16, this->_internal_smiles(), target);
      break;
    }
    default: ;
  }
  // repeated .SubstructureSearch.SubstructureAtomEnvironment environment = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_environment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_environment(i), target, stream);
  }

  // repeated .SubstructureSearch.SubstructureBond query_bond = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_query_bond_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_query_bond(i), target, stream);
  }

  // optional string bond_smarts = 22;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bond_smarts().data(), static_cast<int>(this->_internal_bond_smarts().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureAtom.bond_smarts");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_bond_smarts(), target);
  }

  // repeated .SubstructureSearch.SubstructureAtomSpecifier preference = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_preference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_preference(i), target, stream);
  }

  // optional bool sum_all_preference_hits = 24;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_sum_all_preference_hits(), target);
  }

  // repeated uint32 single_bond = 25;
  for (int i = 0, n = this->_internal_single_bond_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_single_bond(i), target);
  }

  // repeated uint32 double_bond = 26;
  for (int i = 0, n = this->_internal_double_bond_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_double_bond(i), target);
  }

  // repeated uint32 triple_bond = 27;
  for (int i = 0, n = this->_internal_triple_bond_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_triple_bond(i), target);
  }

  // repeated uint32 aromatic_bond = 28;
  for (int i = 0, n = this->_internal_aromatic_bond_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_aromatic_bond(i), target);
  }

  // repeated uint32 bond = 29;
  for (int i = 0, n = this->_internal_bond_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_bond(i), target);
  }

  // repeated uint32 unmatched_atoms_attached = 30;
  for (int i = 0, n = this->_internal_unmatched_atoms_attached_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_unmatched_atoms_attached(i), target);
  }

  // optional uint32 min_unmatched_atoms_attached = 31;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_min_unmatched_atoms_attached(), target);
  }

  // optional uint32 max_unmatched_atoms_attached = 32;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_max_unmatched_atoms_attached(), target);
  }

  // optional uint32 atom_type_group = 33;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_atom_type_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureAtom)
  return target;
}

size_t SubstructureAtom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureAtom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SubstructureSearch.SubstructureAtomSpecifier atom_properties = 7;
  total_size += 1UL * this->_internal_atom_properties_size();
  for (const auto& msg : this->atom_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SubstructureSearch.SubstructureAtomEnvironment environment = 17;
  total_size += 2UL * this->_internal_environment_size();
  for (const auto& msg : this->environment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SubstructureSearch.SubstructureBond query_bond = 21;
  total_size += 2UL * this->_internal_query_bond_size();
  for (const auto& msg : this->query_bond_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SubstructureSearch.SubstructureAtomSpecifier preference = 23;
  total_size += 2UL * this->_internal_preference_size();
  for (const auto& msg : this->preference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 single_bond = 25;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->single_bond_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_single_bond_size());
    total_size += data_size;
  }

  // repeated uint32 double_bond = 26;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->double_bond_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_double_bond_size());
    total_size += data_size;
  }

  // repeated uint32 triple_bond = 27;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->triple_bond_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_triple_bond_size());
    total_size += data_size;
  }

  // repeated uint32 aromatic_bond = 28;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->aromatic_bond_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_aromatic_bond_size());
    total_size += data_size;
  }

  // repeated uint32 bond = 29;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->bond_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bond_size());
    total_size += data_size;
  }

  // repeated uint32 unmatched_atoms_attached = 30;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->unmatched_atoms_attached_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unmatched_atoms_attached_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string text_identifier = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text_identifier());
    }

    // optional string bond_smarts = 22;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bond_smarts());
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

    // optional uint32 atom_map_number = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_atom_map_number());
    }

    // optional uint32 initial_atom_number = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_initial_atom_number());
    }

    // optional uint32 or_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_or_id());
    }

    // optional int32 or_operator = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_or_operator());
    }

    // optional int32 ring_id = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ring_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 fused_system_id = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fused_system_id());
    }

    // optional int32 fragment_id = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fragment_id());
    }

    // optional double numeric_value = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional bool match_as_match = 2;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool include_in_embedding = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool sum_all_preference_hits = 24;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional uint32 min_unmatched_atoms_attached = 31;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_unmatched_atoms_attached());
    }

    // optional uint32 max_unmatched_atoms_attached = 32;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_unmatched_atoms_attached());
    }

  }
  // optional uint32 atom_type_group = 33;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_atom_type_group());
  }

  switch (SmilesOrSmarts_case()) {
    // string smarts = 14;
    case kSmarts: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_smarts());
      break;
    }
    // string atom_smarts = 15;
    case kAtomSmarts: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_atom_smarts());
      break;
    }
    // string smiles = 16;
    case kSmiles: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_smiles());
      break;
    }
    case SMILESORSMARTS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureAtom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureAtom)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureAtom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstructureAtom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureAtom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureAtom)
    MergeFrom(*source);
  }
}

void SubstructureAtom::MergeFrom(const SubstructureAtom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureAtom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  atom_properties_.MergeFrom(from.atom_properties_);
  environment_.MergeFrom(from.environment_);
  query_bond_.MergeFrom(from.query_bond_);
  preference_.MergeFrom(from.preference_);
  single_bond_.MergeFrom(from.single_bond_);
  double_bond_.MergeFrom(from.double_bond_);
  triple_bond_.MergeFrom(from.triple_bond_);
  aromatic_bond_.MergeFrom(from.aromatic_bond_);
  bond_.MergeFrom(from.bond_);
  unmatched_atoms_attached_.MergeFrom(from.unmatched_atoms_attached_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text_identifier(from._internal_text_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_bond_smarts(from._internal_bond_smarts());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      atom_map_number_ = from.atom_map_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      initial_atom_number_ = from.initial_atom_number_;
    }
    if (cached_has_bits & 0x00000020u) {
      or_id_ = from.or_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      or_operator_ = from.or_operator_;
    }
    if (cached_has_bits & 0x00000080u) {
      ring_id_ = from.ring_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      fused_system_id_ = from.fused_system_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      fragment_id_ = from.fragment_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      numeric_value_ = from.numeric_value_;
    }
    if (cached_has_bits & 0x00000800u) {
      match_as_match_ = from.match_as_match_;
    }
    if (cached_has_bits & 0x00001000u) {
      include_in_embedding_ = from.include_in_embedding_;
    }
    if (cached_has_bits & 0x00002000u) {
      sum_all_preference_hits_ = from.sum_all_preference_hits_;
    }
    if (cached_has_bits & 0x00004000u) {
      min_unmatched_atoms_attached_ = from.min_unmatched_atoms_attached_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_unmatched_atoms_attached_ = from.max_unmatched_atoms_attached_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_atom_type_group(from._internal_atom_type_group());
  }
  switch (from.SmilesOrSmarts_case()) {
    case kSmarts: {
      _internal_set_smarts(from._internal_smarts());
      break;
    }
    case kAtomSmarts: {
      _internal_set_atom_smarts(from._internal_atom_smarts());
      break;
    }
    case kSmiles: {
      _internal_set_smiles(from._internal_smiles());
      break;
    }
    case SMILESORSMARTS_NOT_SET: {
      break;
    }
  }
}

void SubstructureAtom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureAtom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureAtom::CopyFrom(const SubstructureAtom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureAtom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureAtom::IsInitialized() const {
  return true;
}

void SubstructureAtom::InternalSwap(SubstructureAtom* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  atom_properties_.InternalSwap(&other->atom_properties_);
  environment_.InternalSwap(&other->environment_);
  query_bond_.InternalSwap(&other->query_bond_);
  preference_.InternalSwap(&other->preference_);
  single_bond_.InternalSwap(&other->single_bond_);
  double_bond_.InternalSwap(&other->double_bond_);
  triple_bond_.InternalSwap(&other->triple_bond_);
  aromatic_bond_.InternalSwap(&other->aromatic_bond_);
  bond_.InternalSwap(&other->bond_);
  unmatched_atoms_attached_.InternalSwap(&other->unmatched_atoms_attached_);
  text_identifier_.Swap(&other->text_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bond_smarts_.Swap(&other->bond_smarts_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubstructureAtom, atom_type_group_)
      + sizeof(SubstructureAtom::atom_type_group_)
      - PROTOBUF_FIELD_OFFSET(SubstructureAtom, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
  swap(SmilesOrSmarts_, other->SmilesOrSmarts_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstructureAtom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstructureEnvironment::_Internal {
 public:
  using HasBits = decltype(std::declval<SubstructureEnvironment>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::SubstructureSearch::EnvironmentAttachment& attachment(const SubstructureEnvironment* msg);
  static void set_has_attachment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_or_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_and_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_hits_needed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_hits_needed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_no_other_substituents_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_env_matches_can_share_attachment_points(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_max_matches_to_find(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_hydrogen_ok(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_env_matches_per_anchor(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::SubstructureSearch::EnvironmentAttachment&
SubstructureEnvironment::_Internal::attachment(const SubstructureEnvironment* msg) {
  return *msg->attachment_;
}
SubstructureEnvironment::SubstructureEnvironment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  smarts_(arena),
  smiles_(arena),
  query_atom_(arena),
  bond_(arena),
  hits_needed_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubstructureSearch.SubstructureEnvironment)
}
SubstructureEnvironment::SubstructureEnvironment(const SubstructureEnvironment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      smarts_(from.smarts_),
      smiles_(from.smiles_),
      query_atom_(from.query_atom_),
      bond_(from.bond_),
      hits_needed_(from.hits_needed_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attachment()) {
    attachment_ = new ::SubstructureSearch::EnvironmentAttachment(*from.attachment_);
  } else {
    attachment_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_env_matches_per_anchor_) -
    reinterpret_cast<char*>(&id_)) + sizeof(max_env_matches_per_anchor_));
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureEnvironment)
}

void SubstructureEnvironment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstructureEnvironment_Molecule_5fLib_2fsubstructure_2eproto.base);
  ::memset(&attachment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_env_matches_per_anchor_) -
      reinterpret_cast<char*>(&attachment_)) + sizeof(max_env_matches_per_anchor_));
}

SubstructureEnvironment::~SubstructureEnvironment() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureEnvironment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstructureEnvironment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete attachment_;
}

void SubstructureEnvironment::ArenaDtor(void* object) {
  SubstructureEnvironment* _this = reinterpret_cast< SubstructureEnvironment* >(object);
  (void)_this;
}
void SubstructureEnvironment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstructureEnvironment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstructureEnvironment& SubstructureEnvironment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstructureEnvironment_Molecule_5fLib_2fsubstructure_2eproto.base);
  return *internal_default_instance();
}


void SubstructureEnvironment::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureEnvironment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  smarts_.Clear();
  smiles_.Clear();
  query_atom_.Clear();
  bond_.Clear();
  hits_needed_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(attachment_ != nullptr);
    attachment_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&env_matches_can_share_attachment_points_) -
        reinterpret_cast<char*>(&id_)) + sizeof(env_matches_can_share_attachment_points_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&hydrogen_ok_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_env_matches_per_anchor_) -
        reinterpret_cast<char*>(&hydrogen_ok_)) + sizeof(max_env_matches_per_anchor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstructureEnvironment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string smarts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_smarts();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.SubstructureEnvironment.smarts");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string smiles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_smiles();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.SubstructureEnvironment.smiles");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.SubstructureAtom query_atom = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_query_atom(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .SubstructureSearch.EnvironmentAttachment attachment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_attachment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string bond = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bond();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.SubstructureEnvironment.bond");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 or_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_or_id(&has_bits);
          or_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 and_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_and_id(&has_bits);
          and_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 hits_needed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_hits_needed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hits_needed(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_hits_needed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_min_hits_needed(&has_bits);
          min_hits_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_hits_needed = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_max_hits_needed(&has_bits);
          max_hits_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool no_other_substituents_allowed = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_no_other_substituents_allowed(&has_bits);
          no_other_substituents_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool env_matches_can_share_attachment_points = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_env_matches_can_share_attachment_points(&has_bits);
          env_matches_can_share_attachment_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_matches_to_find = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_max_matches_to_find(&has_bits);
          max_matches_to_find_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hydrogen_ok = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_hydrogen_ok(&has_bits);
          hydrogen_ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_env_matches_per_anchor = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_max_env_matches_per_anchor(&has_bits);
          max_env_matches_per_anchor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstructureEnvironment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureEnvironment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated string smarts = 3;
  for (int i = 0, n = this->_internal_smarts_size(); i < n; i++) {
    const auto& s = this->_internal_smarts(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureEnvironment.smarts");
    target = stream->WriteString(3, s, target);
  }

  // repeated string smiles = 4;
  for (int i = 0, n = this->_internal_smiles_size(); i < n; i++) {
    const auto& s = this->_internal_smiles(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureEnvironment.smiles");
    target = stream->WriteString(4, s, target);
  }

  // repeated .SubstructureSearch.SubstructureAtom query_atom = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_query_atom_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_query_atom(i), target, stream);
  }

  // optional .SubstructureSearch.EnvironmentAttachment attachment = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::attachment(this), target, stream);
  }

  // repeated string bond = 7;
  for (int i = 0, n = this->_internal_bond_size(); i < n; i++) {
    const auto& s = this->_internal_bond(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureEnvironment.bond");
    target = stream->WriteString(7, s, target);
  }

  // optional uint32 or_id = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_or_id(), target);
  }

  // optional uint32 and_id = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_and_id(), target);
  }

  // repeated uint32 hits_needed = 10;
  for (int i = 0, n = this->_internal_hits_needed_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_hits_needed(i), target);
  }

  // optional uint32 min_hits_needed = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_min_hits_needed(), target);
  }

  // optional uint32 max_hits_needed = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_max_hits_needed(), target);
  }

  // optional bool no_other_substituents_allowed = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_no_other_substituents_allowed(), target);
  }

  // optional bool env_matches_can_share_attachment_points = 15;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_env_matches_can_share_attachment_points(), target);
  }

  // optional uint32 max_matches_to_find = 16;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_max_matches_to_find(), target);
  }

  // optional bool hydrogen_ok = 17;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_hydrogen_ok(), target);
  }

  // optional uint32 max_env_matches_per_anchor = 18;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_max_env_matches_per_anchor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureEnvironment)
  return target;
}

size_t SubstructureEnvironment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureEnvironment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string smarts = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(smarts_.size());
  for (int i = 0, n = smarts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      smarts_.Get(i));
  }

  // repeated string smiles = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(smiles_.size());
  for (int i = 0, n = smiles_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      smiles_.Get(i));
  }

  // repeated .SubstructureSearch.SubstructureAtom query_atom = 5;
  total_size += 1UL * this->_internal_query_atom_size();
  for (const auto& msg : this->query_atom_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string bond = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bond_.size());
  for (int i = 0, n = bond_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      bond_.Get(i));
  }

  // repeated uint32 hits_needed = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->hits_needed_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hits_needed_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .SubstructureSearch.EnvironmentAttachment attachment = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *attachment_);
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 or_id = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_or_id());
    }

    // optional uint32 and_id = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_and_id());
    }

    // optional uint32 min_hits_needed = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_hits_needed());
    }

    // optional uint32 max_hits_needed = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_hits_needed());
    }

    // optional bool no_other_substituents_allowed = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool env_matches_can_share_attachment_points = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool hydrogen_ok = 17;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional uint32 max_matches_to_find = 16;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_matches_to_find());
    }

    // optional uint32 max_env_matches_per_anchor = 18;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_env_matches_per_anchor());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureEnvironment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureEnvironment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstructureEnvironment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureEnvironment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureEnvironment)
    MergeFrom(*source);
  }
}

void SubstructureEnvironment::MergeFrom(const SubstructureEnvironment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  smarts_.MergeFrom(from.smarts_);
  smiles_.MergeFrom(from.smiles_);
  query_atom_.MergeFrom(from.query_atom_);
  bond_.MergeFrom(from.bond_);
  hits_needed_.MergeFrom(from.hits_needed_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_attachment()->::SubstructureSearch::EnvironmentAttachment::MergeFrom(from._internal_attachment());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      or_id_ = from.or_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      and_id_ = from.and_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_hits_needed_ = from.min_hits_needed_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_hits_needed_ = from.max_hits_needed_;
    }
    if (cached_has_bits & 0x00000040u) {
      no_other_substituents_allowed_ = from.no_other_substituents_allowed_;
    }
    if (cached_has_bits & 0x00000080u) {
      env_matches_can_share_attachment_points_ = from.env_matches_can_share_attachment_points_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      hydrogen_ok_ = from.hydrogen_ok_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_matches_to_find_ = from.max_matches_to_find_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_env_matches_per_anchor_ = from.max_env_matches_per_anchor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubstructureEnvironment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureEnvironment::CopyFrom(const SubstructureEnvironment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureEnvironment::IsInitialized() const {
  return true;
}

void SubstructureEnvironment::InternalSwap(SubstructureEnvironment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  smarts_.InternalSwap(&other->smarts_);
  smiles_.InternalSwap(&other->smiles_);
  query_atom_.InternalSwap(&other->query_atom_);
  bond_.InternalSwap(&other->bond_);
  hits_needed_.InternalSwap(&other->hits_needed_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubstructureEnvironment, max_env_matches_per_anchor_)
      + sizeof(SubstructureEnvironment::max_env_matches_per_anchor_)
      - PROTOBUF_FIELD_OFFSET(SubstructureEnvironment, attachment_)>(
          reinterpret_cast<char*>(&attachment_),
          reinterpret_cast<char*>(&other->attachment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstructureEnvironment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SingleSubstructureQuery::_Internal {
 public:
  using HasBits = decltype(std::declval<SingleSubstructureQuery>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_one_embedding_per_start_atom(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_normalise_rc_per_hits_needed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_subtract_from_rc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_matches_to_find(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_save_matched_atoms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ncon_ignore_singly_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_perceive_symmetric_equivalents(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_implicit_ring_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_all_hits_in_same_fragment(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_only_match_largest_fragment(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_embeddings_do_not_overlap(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_sort_by_preference_value(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_no_matched_atoms_between_exhaustive(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_fail_if_embeddings_too_close(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_distance_between_hits_ncheck(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_sort_matches(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_attached_heteroatom_count(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_max_attached_heteroatom_count(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_min_hits_needed(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_max_hits_needed(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_min_ring_atoms_matched(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_max_ring_atoms_matched(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_min_heteroatoms_matched(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_max_heteroatoms_matched(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_min_heteroatoms_in_molecule(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_max_heteroatoms_in_molecule(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_min_natoms(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_max_natoms(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_min_nrings(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_max_nrings(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_min_ncon(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_max_ncon(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_min_fused_rings(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_max_fused_rings(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_min_strongly_fused_rings(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_max_strongly_fused_rings(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_min_isolated_rings(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_max_isolated_rings(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_min_isolated_ring_objects(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_max_isolated_ring_objects(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_min_aromatic_rings(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_max_aromatic_rings(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_min_non_aromatic_rings(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_max_non_aromatic_rings(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_min_distance_between_hits(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_max_distance_between_hits(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_min_number_isotopic_atoms(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_max_number_isotopic_atoms(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_min_number_fragments(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_max_number_fragments(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_min_distance_between_root_atoms(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_max_distance_between_root_atoms(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_min_atoms_in_spinach(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_max_atoms_in_spinach(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_min_inter_ring_atoms(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_max_inter_ring_atoms(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_min_unmatched_atoms(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_max_unmatched_atoms(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_min_net_formal_charge(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_max_net_formal_charge(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_min_fraction_atoms_matched(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_max_fraction_atoms_matched(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_environment_must_match_unmatched_atoms(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_env_matches_can_share_attachment_points(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_min_aromatic_atoms(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_max_aromatic_atoms(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_unique_embeddings_only(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_respect_initial_atom_numbering(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_compress_embeddings(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_environments_can_share_attachment_points(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_atom_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SingleSubstructureQuery::SingleSubstructureQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  numeric_value_(arena),
  no_matched_atoms_between_(arena),
  link_atoms_(arena),
  attached_heteroatom_count_(arena),
  hits_needed_(arena),
  ring_atoms_matched_(arena),
  heteroatoms_matched_(arena),
  heteroatoms_in_molecule_(arena),
  natoms_(arena),
  nrings_(arena),
  ncon_(arena),
  fused_rings_(arena),
  strongly_fused_rings_(arena),
  isolated_rings_(arena),
  isolated_ring_objects_(arena),
  aromatic_rings_(arena),
  non_aromatic_rings_(arena),
  distance_between_hits_(arena),
  number_isotopic_atoms_(arena),
  number_fragments_(arena),
  distance_between_root_atoms_(arena),
  atoms_in_spinach_(arena),
  inter_ring_atoms_(arena),
  unmatched_atoms_(arena),
  net_formal_charge_(arena),
  environment_(arena),
  environment_no_match_(arena),
  ring_specification_(arena),
  ring_specification_logexp_(arena),
  ring_system_specifier_(arena),
  ring_system_specifier_logexp_(arena),
  element_hits_needed_(arena),
  elements_needed_(arena),
  aromatic_atoms_(arena),
  heteroatoms_(arena),
  query_atom_(arena),
  chiral_centre_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubstructureSearch.SingleSubstructureQuery)
}
SingleSubstructureQuery::SingleSubstructureQuery(const SingleSubstructureQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      numeric_value_(from.numeric_value_),
      no_matched_atoms_between_(from.no_matched_atoms_between_),
      link_atoms_(from.link_atoms_),
      attached_heteroatom_count_(from.attached_heteroatom_count_),
      hits_needed_(from.hits_needed_),
      ring_atoms_matched_(from.ring_atoms_matched_),
      heteroatoms_matched_(from.heteroatoms_matched_),
      heteroatoms_in_molecule_(from.heteroatoms_in_molecule_),
      natoms_(from.natoms_),
      nrings_(from.nrings_),
      ncon_(from.ncon_),
      fused_rings_(from.fused_rings_),
      strongly_fused_rings_(from.strongly_fused_rings_),
      isolated_rings_(from.isolated_rings_),
      isolated_ring_objects_(from.isolated_ring_objects_),
      aromatic_rings_(from.aromatic_rings_),
      non_aromatic_rings_(from.non_aromatic_rings_),
      distance_between_hits_(from.distance_between_hits_),
      number_isotopic_atoms_(from.number_isotopic_atoms_),
      number_fragments_(from.number_fragments_),
      distance_between_root_atoms_(from.distance_between_root_atoms_),
      atoms_in_spinach_(from.atoms_in_spinach_),
      inter_ring_atoms_(from.inter_ring_atoms_),
      unmatched_atoms_(from.unmatched_atoms_),
      net_formal_charge_(from.net_formal_charge_),
      environment_(from.environment_),
      environment_no_match_(from.environment_no_match_),
      ring_specification_(from.ring_specification_),
      ring_specification_logexp_(from.ring_specification_logexp_),
      ring_system_specifier_(from.ring_system_specifier_),
      ring_system_specifier_logexp_(from.ring_system_specifier_logexp_),
      element_hits_needed_(from.element_hits_needed_),
      elements_needed_(from.elements_needed_),
      aromatic_atoms_(from.aromatic_atoms_),
      heteroatoms_(from.heteroatoms_),
      query_atom_(from.query_atom_),
      chiral_centre_(from.chiral_centre_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_label(),
      GetArena());
  }
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_comment()) {
    comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_comment(),
      GetArena());
  }
  sort_matches_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sort_matches()) {
    sort_matches_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sort_matches(),
      GetArena());
  }
  atom_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_atom_type()) {
    atom_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_atom_type(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&environments_can_share_attachment_points_) -
    reinterpret_cast<char*>(&id_)) + sizeof(environments_can_share_attachment_points_));
  clear_has_smiles_or_smarts();
  switch (from.smiles_or_smarts_case()) {
    case kSmiles: {
      _internal_set_smiles(from._internal_smiles());
      break;
    }
    case kSmarts: {
      _internal_set_smarts(from._internal_smarts());
      break;
    }
    case SMILES_OR_SMARTS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SingleSubstructureQuery)
}

void SingleSubstructureQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleSubstructureQuery_Molecule_5fLib_2fsubstructure_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sort_matches_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  atom_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&environments_can_share_attachment_points_) -
      reinterpret_cast<char*>(&id_)) + sizeof(environments_can_share_attachment_points_));
  clear_has_smiles_or_smarts();
}

SingleSubstructureQuery::~SingleSubstructureQuery() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SingleSubstructureQuery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SingleSubstructureQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sort_matches_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  atom_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_smiles_or_smarts()) {
    clear_smiles_or_smarts();
  }
}

void SingleSubstructureQuery::ArenaDtor(void* object) {
  SingleSubstructureQuery* _this = reinterpret_cast< SingleSubstructureQuery* >(object);
  (void)_this;
}
void SingleSubstructureQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleSubstructureQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleSubstructureQuery& SingleSubstructureQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleSubstructureQuery_Molecule_5fLib_2fsubstructure_2eproto.base);
  return *internal_default_instance();
}


void SingleSubstructureQuery::clear_smiles_or_smarts() {
// @@protoc_insertion_point(one_of_clear_start:SubstructureSearch.SingleSubstructureQuery)
  switch (smiles_or_smarts_case()) {
    case kSmiles: {
      smiles_or_smarts_.smiles_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kSmarts: {
      smiles_or_smarts_.smarts_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case SMILES_OR_SMARTS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SMILES_OR_SMARTS_NOT_SET;
}


void SingleSubstructureQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SingleSubstructureQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  numeric_value_.Clear();
  no_matched_atoms_between_.Clear();
  link_atoms_.Clear();
  attached_heteroatom_count_.Clear();
  hits_needed_.Clear();
  ring_atoms_matched_.Clear();
  heteroatoms_matched_.Clear();
  heteroatoms_in_molecule_.Clear();
  natoms_.Clear();
  nrings_.Clear();
  ncon_.Clear();
  fused_rings_.Clear();
  strongly_fused_rings_.Clear();
  isolated_rings_.Clear();
  isolated_ring_objects_.Clear();
  aromatic_rings_.Clear();
  non_aromatic_rings_.Clear();
  distance_between_hits_.Clear();
  number_isotopic_atoms_.Clear();
  number_fragments_.Clear();
  distance_between_root_atoms_.Clear();
  atoms_in_spinach_.Clear();
  inter_ring_atoms_.Clear();
  unmatched_atoms_.Clear();
  net_formal_charge_.Clear();
  environment_.Clear();
  environment_no_match_.Clear();
  ring_specification_.Clear();
  ring_specification_logexp_.Clear();
  ring_system_specifier_.Clear();
  ring_system_specifier_logexp_.Clear();
  element_hits_needed_.Clear();
  elements_needed_.Clear();
  aromatic_atoms_.Clear();
  heteroatoms_.Clear();
  query_atom_.Clear();
  chiral_centre_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      comment_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      sort_matches_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      atom_type_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_matches_to_find_) -
        reinterpret_cast<char*>(&id_)) + sizeof(max_matches_to_find_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&one_embedding_per_start_atom_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&embeddings_do_not_overlap_) -
        reinterpret_cast<char*>(&one_embedding_per_start_atom_)) + sizeof(embeddings_do_not_overlap_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&sort_by_preference_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_ring_atoms_matched_) -
        reinterpret_cast<char*>(&sort_by_preference_value_)) + sizeof(max_ring_atoms_matched_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&min_heteroatoms_matched_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_nrings_) -
        reinterpret_cast<char*>(&min_heteroatoms_matched_)) + sizeof(max_nrings_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&min_ncon_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_isolated_rings_) -
        reinterpret_cast<char*>(&min_ncon_)) + sizeof(max_isolated_rings_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&no_matched_atoms_between_exhaustive_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_aromatic_rings_) -
        reinterpret_cast<char*>(&no_matched_atoms_between_exhaustive_)) + sizeof(max_aromatic_rings_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&min_non_aromatic_rings_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_number_fragments_) -
        reinterpret_cast<char*>(&min_non_aromatic_rings_)) + sizeof(max_number_fragments_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&min_distance_between_root_atoms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_unmatched_atoms_) -
        reinterpret_cast<char*>(&min_distance_between_root_atoms_)) + sizeof(max_unmatched_atoms_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&min_net_formal_charge_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&respect_initial_atom_numbering_) -
        reinterpret_cast<char*>(&min_net_formal_charge_)) + sizeof(respect_initial_atom_numbering_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&compress_embeddings_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&environments_can_share_attachment_points_) -
        reinterpret_cast<char*>(&compress_embeddings_)) + sizeof(environments_can_share_attachment_points_));
  }
  clear_smiles_or_smarts();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleSubstructureQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&_has_bits_);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.SingleSubstructureQuery.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string comment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.SingleSubstructureQuery.comment");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool one_embedding_per_start_atom = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_one_embedding_per_start_atom(&_has_bits_);
          one_embedding_per_start_atom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 normalise_rc_per_hits_needed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_normalise_rc_per_hits_needed(&_has_bits_);
          normalise_rc_per_hits_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 subtract_from_rc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_subtract_from_rc(&_has_bits_);
          subtract_from_rc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_matches_to_find = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_max_matches_to_find(&_has_bits_);
          max_matches_to_find_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool save_matched_atoms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_save_matched_atoms(&_has_bits_);
          save_matched_atoms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ncon_ignore_singly_connected = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_ncon_ignore_singly_connected(&_has_bits_);
          ncon_ignore_singly_connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool perceive_symmetric_equivalents = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_perceive_symmetric_equivalents(&_has_bits_);
          perceive_symmetric_equivalents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 implicit_ring_condition = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_implicit_ring_condition(&_has_bits_);
          implicit_ring_condition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool all_hits_in_same_fragment = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_all_hits_in_same_fragment(&_has_bits_);
          all_hits_in_same_fragment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool only_match_largest_fragment = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_only_match_largest_fragment(&_has_bits_);
          only_match_largest_fragment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool embeddings_do_not_overlap = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_embeddings_do_not_overlap(&_has_bits_);
          embeddings_do_not_overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool sort_by_preference_value = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_sort_by_preference_value(&_has_bits_);
          sort_by_preference_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string smiles = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_smiles();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.SingleSubstructureQuery.smiles");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string smarts = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_smarts();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.SingleSubstructureQuery.smarts");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double numeric_value = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_numeric_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<153>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_numeric_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.NoMatchedAtomsBetween no_matched_atoms_between = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_no_matched_atoms_between(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool no_matched_atoms_between_exhaustive = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_no_matched_atoms_between_exhaustive(&_has_bits_);
          no_matched_atoms_between_exhaustive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.LinkAtoms link_atoms = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_link_atoms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool fail_if_embeddings_too_close = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_fail_if_embeddings_too_close(&_has_bits_);
          fail_if_embeddings_too_close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 distance_between_hits_ncheck = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_distance_between_hits_ncheck(&_has_bits_);
          distance_between_hits_ncheck_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sort_matches = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_sort_matches();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.SingleSubstructureQuery.sort_matches");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 attached_heteroatom_count = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_attached_heteroatom_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<208>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_attached_heteroatom_count(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_attached_heteroatom_count = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_min_attached_heteroatom_count(&_has_bits_);
          min_attached_heteroatom_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_attached_heteroatom_count = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_max_attached_heteroatom_count(&_has_bits_);
          max_attached_heteroatom_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 hits_needed = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_hits_needed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<232>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hits_needed(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_hits_needed = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_min_hits_needed(&_has_bits_);
          min_hits_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_hits_needed = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_max_hits_needed(&_has_bits_);
          max_hits_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ring_atoms_matched = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ring_atoms_matched(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<256>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ring_atoms_matched(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_ring_atoms_matched = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_min_ring_atoms_matched(&_has_bits_);
          min_ring_atoms_matched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_ring_atoms_matched = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_ring_atoms_matched(&_has_bits_);
          max_ring_atoms_matched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 heteroatoms_matched = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_heteroatoms_matched(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<280>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_heteroatoms_matched(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_heteroatoms_matched = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_min_heteroatoms_matched(&_has_bits_);
          min_heteroatoms_matched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_heteroatoms_matched = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_heteroatoms_matched(&_has_bits_);
          max_heteroatoms_matched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 heteroatoms_in_molecule = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_heteroatoms_in_molecule(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<304>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_heteroatoms_in_molecule(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_heteroatoms_in_molecule = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_min_heteroatoms_in_molecule(&_has_bits_);
          min_heteroatoms_in_molecule_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_heteroatoms_in_molecule = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_max_heteroatoms_in_molecule(&_has_bits_);
          max_heteroatoms_in_molecule_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 natoms = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_natoms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<328>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_natoms(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_natoms = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_min_natoms(&_has_bits_);
          min_natoms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_natoms = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_max_natoms(&_has_bits_);
          max_natoms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 nrings = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_nrings(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<352>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_nrings(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_nrings = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_min_nrings(&_has_bits_);
          min_nrings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_nrings = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_max_nrings(&_has_bits_);
          max_nrings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ncon = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ncon(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<376>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ncon(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_ncon = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_min_ncon(&_has_bits_);
          min_ncon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_ncon = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_max_ncon(&_has_bits_);
          max_ncon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 fused_rings = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_fused_rings(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<400>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_fused_rings(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_fused_rings = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_min_fused_rings(&_has_bits_);
          min_fused_rings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_fused_rings = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_max_fused_rings(&_has_bits_);
          max_fused_rings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 strongly_fused_rings = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_strongly_fused_rings(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<424>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_strongly_fused_rings(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_strongly_fused_rings = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_min_strongly_fused_rings(&_has_bits_);
          min_strongly_fused_rings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_strongly_fused_rings = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_max_strongly_fused_rings(&_has_bits_);
          max_strongly_fused_rings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 isolated_rings = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_isolated_rings(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<448>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_isolated_rings(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_isolated_rings = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_min_isolated_rings(&_has_bits_);
          min_isolated_rings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_isolated_rings = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_max_isolated_rings(&_has_bits_);
          max_isolated_rings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 isolated_ring_objects = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_isolated_ring_objects(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<472>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_isolated_ring_objects(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_isolated_ring_objects = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_min_isolated_ring_objects(&_has_bits_);
          min_isolated_ring_objects_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_isolated_ring_objects = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_max_isolated_ring_objects(&_has_bits_);
          max_isolated_ring_objects_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 aromatic_rings = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_aromatic_rings(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<496>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_aromatic_rings(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_aromatic_rings = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_min_aromatic_rings(&_has_bits_);
          min_aromatic_rings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_aromatic_rings = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_max_aromatic_rings(&_has_bits_);
          max_aromatic_rings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 non_aromatic_rings = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_non_aromatic_rings(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<520>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_non_aromatic_rings(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_non_aromatic_rings = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_min_non_aromatic_rings(&_has_bits_);
          min_non_aromatic_rings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_non_aromatic_rings = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_non_aromatic_rings(&_has_bits_);
          max_non_aromatic_rings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 distance_between_hits = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_distance_between_hits(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<544>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_distance_between_hits(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_distance_between_hits = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_min_distance_between_hits(&_has_bits_);
          min_distance_between_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_distance_between_hits = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_max_distance_between_hits(&_has_bits_);
          max_distance_between_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 number_isotopic_atoms = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_number_isotopic_atoms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<568>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_number_isotopic_atoms(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_number_isotopic_atoms = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_min_number_isotopic_atoms(&_has_bits_);
          min_number_isotopic_atoms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_number_isotopic_atoms = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_max_number_isotopic_atoms(&_has_bits_);
          max_number_isotopic_atoms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 number_fragments = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_number_fragments(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<592>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_number_fragments(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_number_fragments = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_min_number_fragments(&_has_bits_);
          min_number_fragments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_number_fragments = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_max_number_fragments(&_has_bits_);
          max_number_fragments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 distance_between_root_atoms = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_distance_between_root_atoms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<616>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_distance_between_root_atoms(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_distance_between_root_atoms = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_min_distance_between_root_atoms(&_has_bits_);
          min_distance_between_root_atoms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_distance_between_root_atoms = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_max_distance_between_root_atoms(&_has_bits_);
          max_distance_between_root_atoms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 atoms_in_spinach = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_atoms_in_spinach(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<640>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_atoms_in_spinach(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_atoms_in_spinach = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_min_atoms_in_spinach(&_has_bits_);
          min_atoms_in_spinach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_atoms_in_spinach = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_max_atoms_in_spinach(&_has_bits_);
          max_atoms_in_spinach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 inter_ring_atoms = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_inter_ring_atoms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<664>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_inter_ring_atoms(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_inter_ring_atoms = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_min_inter_ring_atoms(&_has_bits_);
          min_inter_ring_atoms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_inter_ring_atoms = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_max_inter_ring_atoms(&_has_bits_);
          max_inter_ring_atoms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 unmatched_atoms = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unmatched_atoms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<688>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_unmatched_atoms(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_unmatched_atoms = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_min_unmatched_atoms(&_has_bits_);
          min_unmatched_atoms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_unmatched_atoms = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_max_unmatched_atoms(&_has_bits_);
          max_unmatched_atoms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 net_formal_charge = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_net_formal_charge(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<712>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_net_formal_charge(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 min_net_formal_charge = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_min_net_formal_charge(&_has_bits_);
          min_net_formal_charge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_net_formal_charge = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_max_net_formal_charge(&_has_bits_);
          max_net_formal_charge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float min_fraction_atoms_matched = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_min_fraction_atoms_matched(&_has_bits_);
          min_fraction_atoms_matched_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_fraction_atoms_matched = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_max_fraction_atoms_matched(&_has_bits_);
          max_fraction_atoms_matched_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.SubstructureEnvironment environment = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_environment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<754>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.SubstructureEnvironment environment_no_match = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_environment_no_match(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<762>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool environment_must_match_unmatched_atoms = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_environment_must_match_unmatched_atoms(&_has_bits_);
          environment_must_match_unmatched_atoms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool env_matches_can_share_attachment_points = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_env_matches_can_share_attachment_points(&_has_bits_);
          env_matches_can_share_attachment_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.SubstructureRingSpecification ring_specification = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ring_specification(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<786>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.Operator ring_specification_logexp = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 2;
          do {
            ptr += 2;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::SubstructureSearch::Operator_IsValid(val))) {
              _internal_add_ring_specification_logexp(static_cast<::SubstructureSearch::Operator>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(99, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<792>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_ring_specification_logexp(), ptr, ctx, ::SubstructureSearch::Operator_IsValid, &_internal_metadata_, 99);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.SubstructureRingSystemSpecification ring_system_specifier = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ring_system_specifier(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<802>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.Operator ring_system_specifier_logexp = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 2;
          do {
            ptr += 2;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::SubstructureSearch::Operator_IsValid(val))) {
              _internal_add_ring_system_specifier_logexp(static_cast<::SubstructureSearch::Operator>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(101, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<808>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_ring_system_specifier_logexp(), ptr, ctx, ::SubstructureSearch::Operator_IsValid, &_internal_metadata_, 101);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.ElementsNeeded element_hits_needed = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_element_hits_needed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<818>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.ElementsNeeded elements_needed = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_elements_needed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<826>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 aromatic_atoms = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_aromatic_atoms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<832>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_aromatic_atoms(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_aromatic_atoms = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_min_aromatic_atoms(&_has_bits_);
          min_aromatic_atoms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_aromatic_atoms = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_max_aromatic_atoms(&_has_bits_);
          max_aromatic_atoms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool unique_embeddings_only = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_unique_embeddings_only(&_has_bits_);
          unique_embeddings_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 heteroatoms = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_heteroatoms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<896>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_heteroatoms(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool respect_initial_atom_numbering = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_respect_initial_atom_numbering(&_has_bits_);
          respect_initial_atom_numbering_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool compress_embeddings = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_compress_embeddings(&_has_bits_);
          compress_embeddings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool environments_can_share_attachment_points = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_environments_can_share_attachment_points(&_has_bits_);
          environments_can_share_attachment_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.SubstructureAtom query_atom = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_query_atom(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<930>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.SubstructureChiralCenter chiral_centre = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_chiral_centre(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<938>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string atom_type = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_atom_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.SingleSubstructureQuery.atom_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleSubstructureQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SingleSubstructureQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string label = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SingleSubstructureQuery.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  // optional string comment = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SingleSubstructureQuery.comment");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_comment(), target);
  }

  // optional bool one_embedding_per_start_atom = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_one_embedding_per_start_atom(), target);
  }

  // optional uint32 normalise_rc_per_hits_needed = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_normalise_rc_per_hits_needed(), target);
  }

  // optional uint32 subtract_from_rc = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_subtract_from_rc(), target);
  }

  // optional uint32 max_matches_to_find = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_max_matches_to_find(), target);
  }

  // optional bool save_matched_atoms = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_save_matched_atoms(), target);
  }

  // optional bool ncon_ignore_singly_connected = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_ncon_ignore_singly_connected(), target);
  }

  // optional bool perceive_symmetric_equivalents = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_perceive_symmetric_equivalents(), target);
  }

  // optional uint32 implicit_ring_condition = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_implicit_ring_condition(), target);
  }

  // optional bool all_hits_in_same_fragment = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_all_hits_in_same_fragment(), target);
  }

  // optional bool only_match_largest_fragment = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_only_match_largest_fragment(), target);
  }

  // optional bool embeddings_do_not_overlap = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_embeddings_do_not_overlap(), target);
  }

  // optional bool sort_by_preference_value = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_sort_by_preference_value(), target);
  }

  switch (smiles_or_smarts_case()) {
    case kSmiles: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_smiles().data(), static_cast<int>(this->_internal_smiles().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "SubstructureSearch.SingleSubstructureQuery.smiles");
      target = stream->WriteStringMaybeAliased(
          17, this->_internal_smiles(), target);
      break;
    }
    case kSmarts: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_smarts().data(), static_cast<int>(this->_internal_smarts().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "SubstructureSearch.SingleSubstructureQuery.smarts");
      target = stream->WriteStringMaybeAliased(
          18, this->_internal_smarts(), target);
      break;
    }
    default: ;
  }
  // repeated double numeric_value = 19;
  for (int i = 0, n = this->_internal_numeric_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_numeric_value(i), target);
  }

  // repeated .SubstructureSearch.NoMatchedAtomsBetween no_matched_atoms_between = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_no_matched_atoms_between_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_no_matched_atoms_between(i), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool no_matched_atoms_between_exhaustive = 21;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_no_matched_atoms_between_exhaustive(), target);
  }

  // repeated .SubstructureSearch.LinkAtoms link_atoms = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_link_atoms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_link_atoms(i), target, stream);
  }

  // optional bool fail_if_embeddings_too_close = 23;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_fail_if_embeddings_too_close(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 distance_between_hits_ncheck = 24;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_distance_between_hits_ncheck(), target);
  }

  // optional string sort_matches = 25;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sort_matches().data(), static_cast<int>(this->_internal_sort_matches().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SingleSubstructureQuery.sort_matches");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_sort_matches(), target);
  }

  // repeated uint32 attached_heteroatom_count = 26;
  for (int i = 0, n = this->_internal_attached_heteroatom_count_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_attached_heteroatom_count(i), target);
  }

  // optional uint32 min_attached_heteroatom_count = 27;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_min_attached_heteroatom_count(), target);
  }

  // optional uint32 max_attached_heteroatom_count = 28;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_max_attached_heteroatom_count(), target);
  }

  // repeated uint32 hits_needed = 29;
  for (int i = 0, n = this->_internal_hits_needed_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_hits_needed(i), target);
  }

  // optional uint32 min_hits_needed = 30;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_min_hits_needed(), target);
  }

  // optional uint32 max_hits_needed = 31;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_max_hits_needed(), target);
  }

  // repeated uint32 ring_atoms_matched = 32;
  for (int i = 0, n = this->_internal_ring_atoms_matched_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_ring_atoms_matched(i), target);
  }

  // optional uint32 min_ring_atoms_matched = 33;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_min_ring_atoms_matched(), target);
  }

  // optional uint32 max_ring_atoms_matched = 34;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_max_ring_atoms_matched(), target);
  }

  // repeated uint32 heteroatoms_matched = 35;
  for (int i = 0, n = this->_internal_heteroatoms_matched_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_heteroatoms_matched(i), target);
  }

  // optional uint32 min_heteroatoms_matched = 36;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_min_heteroatoms_matched(), target);
  }

  // optional uint32 max_heteroatoms_matched = 37;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_max_heteroatoms_matched(), target);
  }

  // repeated uint32 heteroatoms_in_molecule = 38;
  for (int i = 0, n = this->_internal_heteroatoms_in_molecule_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_heteroatoms_in_molecule(i), target);
  }

  // optional uint32 min_heteroatoms_in_molecule = 39;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_min_heteroatoms_in_molecule(), target);
  }

  // optional uint32 max_heteroatoms_in_molecule = 40;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_max_heteroatoms_in_molecule(), target);
  }

  // repeated uint32 natoms = 41;
  for (int i = 0, n = this->_internal_natoms_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(41, this->_internal_natoms(i), target);
  }

  // optional uint32 min_natoms = 42;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(42, this->_internal_min_natoms(), target);
  }

  // optional uint32 max_natoms = 43;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(43, this->_internal_max_natoms(), target);
  }

  // repeated uint32 nrings = 44;
  for (int i = 0, n = this->_internal_nrings_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(44, this->_internal_nrings(i), target);
  }

  // optional uint32 min_nrings = 45;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(45, this->_internal_min_nrings(), target);
  }

  // optional uint32 max_nrings = 46;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(46, this->_internal_max_nrings(), target);
  }

  // repeated uint32 ncon = 47;
  for (int i = 0, n = this->_internal_ncon_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(47, this->_internal_ncon(i), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 min_ncon = 48;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(48, this->_internal_min_ncon(), target);
  }

  // optional uint32 max_ncon = 49;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(49, this->_internal_max_ncon(), target);
  }

  // repeated uint32 fused_rings = 50;
  for (int i = 0, n = this->_internal_fused_rings_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_fused_rings(i), target);
  }

  // optional uint32 min_fused_rings = 51;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(51, this->_internal_min_fused_rings(), target);
  }

  // optional uint32 max_fused_rings = 52;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(52, this->_internal_max_fused_rings(), target);
  }

  // repeated uint32 strongly_fused_rings = 53;
  for (int i = 0, n = this->_internal_strongly_fused_rings_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(53, this->_internal_strongly_fused_rings(i), target);
  }

  // optional uint32 min_strongly_fused_rings = 54;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(54, this->_internal_min_strongly_fused_rings(), target);
  }

  // optional uint32 max_strongly_fused_rings = 55;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(55, this->_internal_max_strongly_fused_rings(), target);
  }

  // repeated uint32 isolated_rings = 56;
  for (int i = 0, n = this->_internal_isolated_rings_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(56, this->_internal_isolated_rings(i), target);
  }

  // optional uint32 min_isolated_rings = 57;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(57, this->_internal_min_isolated_rings(), target);
  }

  // optional uint32 max_isolated_rings = 58;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(58, this->_internal_max_isolated_rings(), target);
  }

  // repeated uint32 isolated_ring_objects = 59;
  for (int i = 0, n = this->_internal_isolated_ring_objects_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(59, this->_internal_isolated_ring_objects(i), target);
  }

  // optional uint32 min_isolated_ring_objects = 60;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(60, this->_internal_min_isolated_ring_objects(), target);
  }

  // optional uint32 max_isolated_ring_objects = 61;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(61, this->_internal_max_isolated_ring_objects(), target);
  }

  // repeated uint32 aromatic_rings = 62;
  for (int i = 0, n = this->_internal_aromatic_rings_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(62, this->_internal_aromatic_rings(i), target);
  }

  // optional uint32 min_aromatic_rings = 63;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(63, this->_internal_min_aromatic_rings(), target);
  }

  // optional uint32 max_aromatic_rings = 64;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(64, this->_internal_max_aromatic_rings(), target);
  }

  // repeated uint32 non_aromatic_rings = 65;
  for (int i = 0, n = this->_internal_non_aromatic_rings_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(65, this->_internal_non_aromatic_rings(i), target);
  }

  // optional uint32 min_non_aromatic_rings = 66;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(66, this->_internal_min_non_aromatic_rings(), target);
  }

  // optional uint32 max_non_aromatic_rings = 67;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(67, this->_internal_max_non_aromatic_rings(), target);
  }

  // repeated uint32 distance_between_hits = 68;
  for (int i = 0, n = this->_internal_distance_between_hits_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(68, this->_internal_distance_between_hits(i), target);
  }

  // optional uint32 min_distance_between_hits = 69;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(69, this->_internal_min_distance_between_hits(), target);
  }

  // optional uint32 max_distance_between_hits = 70;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(70, this->_internal_max_distance_between_hits(), target);
  }

  // repeated uint32 number_isotopic_atoms = 71;
  for (int i = 0, n = this->_internal_number_isotopic_atoms_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(71, this->_internal_number_isotopic_atoms(i), target);
  }

  // optional uint32 min_number_isotopic_atoms = 72;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(72, this->_internal_min_number_isotopic_atoms(), target);
  }

  // optional uint32 max_number_isotopic_atoms = 73;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(73, this->_internal_max_number_isotopic_atoms(), target);
  }

  // repeated uint32 number_fragments = 74;
  for (int i = 0, n = this->_internal_number_fragments_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(74, this->_internal_number_fragments(i), target);
  }

  // optional uint32 min_number_fragments = 75;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(75, this->_internal_min_number_fragments(), target);
  }

  // optional uint32 max_number_fragments = 76;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(76, this->_internal_max_number_fragments(), target);
  }

  // repeated uint32 distance_between_root_atoms = 77;
  for (int i = 0, n = this->_internal_distance_between_root_atoms_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(77, this->_internal_distance_between_root_atoms(i), target);
  }

  // optional uint32 min_distance_between_root_atoms = 78;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(78, this->_internal_min_distance_between_root_atoms(), target);
  }

  // optional uint32 max_distance_between_root_atoms = 79;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(79, this->_internal_max_distance_between_root_atoms(), target);
  }

  // repeated uint32 atoms_in_spinach = 80;
  for (int i = 0, n = this->_internal_atoms_in_spinach_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(80, this->_internal_atoms_in_spinach(i), target);
  }

  // optional uint32 min_atoms_in_spinach = 81;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(81, this->_internal_min_atoms_in_spinach(), target);
  }

  // optional uint32 max_atoms_in_spinach = 82;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(82, this->_internal_max_atoms_in_spinach(), target);
  }

  // repeated uint32 inter_ring_atoms = 83;
  for (int i = 0, n = this->_internal_inter_ring_atoms_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(83, this->_internal_inter_ring_atoms(i), target);
  }

  // optional uint32 min_inter_ring_atoms = 84;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(84, this->_internal_min_inter_ring_atoms(), target);
  }

  // optional uint32 max_inter_ring_atoms = 85;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(85, this->_internal_max_inter_ring_atoms(), target);
  }

  // repeated uint32 unmatched_atoms = 86;
  for (int i = 0, n = this->_internal_unmatched_atoms_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(86, this->_internal_unmatched_atoms(i), target);
  }

  // optional uint32 min_unmatched_atoms = 87;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(87, this->_internal_min_unmatched_atoms(), target);
  }

  // optional uint32 max_unmatched_atoms = 88;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(88, this->_internal_max_unmatched_atoms(), target);
  }

  // repeated int32 net_formal_charge = 89;
  for (int i = 0, n = this->_internal_net_formal_charge_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(89, this->_internal_net_formal_charge(i), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 min_net_formal_charge = 90;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(90, this->_internal_min_net_formal_charge(), target);
  }

  // optional int32 max_net_formal_charge = 91;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(91, this->_internal_max_net_formal_charge(), target);
  }

  // optional float min_fraction_atoms_matched = 92;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(92, this->_internal_min_fraction_atoms_matched(), target);
  }

  // optional float max_fraction_atoms_matched = 93;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(93, this->_internal_max_fraction_atoms_matched(), target);
  }

  // repeated .SubstructureSearch.SubstructureEnvironment environment = 94;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_environment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(94, this->_internal_environment(i), target, stream);
  }

  // repeated .SubstructureSearch.SubstructureEnvironment environment_no_match = 95;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_environment_no_match_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(95, this->_internal_environment_no_match(i), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool environment_must_match_unmatched_atoms = 96;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(96, this->_internal_environment_must_match_unmatched_atoms(), target);
  }

  // optional bool env_matches_can_share_attachment_points = 97;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(97, this->_internal_env_matches_can_share_attachment_points(), target);
  }

  // repeated .SubstructureSearch.SubstructureRingSpecification ring_specification = 98;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ring_specification_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(98, this->_internal_ring_specification(i), target, stream);
  }

  // repeated .SubstructureSearch.Operator ring_specification_logexp = 99;
  for (int i = 0, n = this->_internal_ring_specification_logexp_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        99, this->_internal_ring_specification_logexp(i), target);
  }

  // repeated .SubstructureSearch.SubstructureRingSystemSpecification ring_system_specifier = 100;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ring_system_specifier_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, this->_internal_ring_system_specifier(i), target, stream);
  }

  // repeated .SubstructureSearch.Operator ring_system_specifier_logexp = 101;
  for (int i = 0, n = this->_internal_ring_system_specifier_logexp_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        101, this->_internal_ring_system_specifier_logexp(i), target);
  }

  // repeated .SubstructureSearch.ElementsNeeded element_hits_needed = 102;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_element_hits_needed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(102, this->_internal_element_hits_needed(i), target, stream);
  }

  // repeated .SubstructureSearch.ElementsNeeded elements_needed = 103;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elements_needed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(103, this->_internal_elements_needed(i), target, stream);
  }

  // repeated uint32 aromatic_atoms = 104;
  for (int i = 0, n = this->_internal_aromatic_atoms_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(104, this->_internal_aromatic_atoms(i), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 min_aromatic_atoms = 105;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(105, this->_internal_min_aromatic_atoms(), target);
  }

  // optional uint32 max_aromatic_atoms = 106;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(106, this->_internal_max_aromatic_atoms(), target);
  }

  // optional bool unique_embeddings_only = 110;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(110, this->_internal_unique_embeddings_only(), target);
  }

  // repeated uint32 heteroatoms = 112;
  for (int i = 0, n = this->_internal_heteroatoms_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(112, this->_internal_heteroatoms(i), target);
  }

  // optional bool respect_initial_atom_numbering = 113;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(113, this->_internal_respect_initial_atom_numbering(), target);
  }

  // optional bool compress_embeddings = 114;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(114, this->_internal_compress_embeddings(), target);
  }

  // optional bool environments_can_share_attachment_points = 115;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(115, this->_internal_environments_can_share_attachment_points(), target);
  }

  // repeated .SubstructureSearch.SubstructureAtom query_atom = 116;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_query_atom_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(116, this->_internal_query_atom(i), target, stream);
  }

  // repeated .SubstructureSearch.SubstructureChiralCenter chiral_centre = 117;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chiral_centre_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(117, this->_internal_chiral_centre(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string atom_type = 119;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_atom_type().data(), static_cast<int>(this->_internal_atom_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SingleSubstructureQuery.atom_type");
    target = stream->WriteStringMaybeAliased(
        119, this->_internal_atom_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SingleSubstructureQuery)
  return target;
}

size_t SingleSubstructureQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SingleSubstructureQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double numeric_value = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_numeric_value_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_numeric_value_size());
    total_size += data_size;
  }

  // repeated .SubstructureSearch.NoMatchedAtomsBetween no_matched_atoms_between = 20;
  total_size += 2UL * this->_internal_no_matched_atoms_between_size();
  for (const auto& msg : this->no_matched_atoms_between_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SubstructureSearch.LinkAtoms link_atoms = 22;
  total_size += 2UL * this->_internal_link_atoms_size();
  for (const auto& msg : this->link_atoms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 attached_heteroatom_count = 26;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->attached_heteroatom_count_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attached_heteroatom_count_size());
    total_size += data_size;
  }

  // repeated uint32 hits_needed = 29;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->hits_needed_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hits_needed_size());
    total_size += data_size;
  }

  // repeated uint32 ring_atoms_matched = 32;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ring_atoms_matched_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ring_atoms_matched_size());
    total_size += data_size;
  }

  // repeated uint32 heteroatoms_matched = 35;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->heteroatoms_matched_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_heteroatoms_matched_size());
    total_size += data_size;
  }

  // repeated uint32 heteroatoms_in_molecule = 38;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->heteroatoms_in_molecule_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_heteroatoms_in_molecule_size());
    total_size += data_size;
  }

  // repeated uint32 natoms = 41;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->natoms_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_natoms_size());
    total_size += data_size;
  }

  // repeated uint32 nrings = 44;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->nrings_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_nrings_size());
    total_size += data_size;
  }

  // repeated uint32 ncon = 47;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ncon_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ncon_size());
    total_size += data_size;
  }

  // repeated uint32 fused_rings = 50;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->fused_rings_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fused_rings_size());
    total_size += data_size;
  }

  // repeated uint32 strongly_fused_rings = 53;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->strongly_fused_rings_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_strongly_fused_rings_size());
    total_size += data_size;
  }

  // repeated uint32 isolated_rings = 56;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->isolated_rings_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_isolated_rings_size());
    total_size += data_size;
  }

  // repeated uint32 isolated_ring_objects = 59;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->isolated_ring_objects_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_isolated_ring_objects_size());
    total_size += data_size;
  }

  // repeated uint32 aromatic_rings = 62;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->aromatic_rings_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_aromatic_rings_size());
    total_size += data_size;
  }

  // repeated uint32 non_aromatic_rings = 65;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->non_aromatic_rings_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_non_aromatic_rings_size());
    total_size += data_size;
  }

  // repeated uint32 distance_between_hits = 68;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->distance_between_hits_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_distance_between_hits_size());
    total_size += data_size;
  }

  // repeated uint32 number_isotopic_atoms = 71;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->number_isotopic_atoms_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_number_isotopic_atoms_size());
    total_size += data_size;
  }

  // repeated uint32 number_fragments = 74;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->number_fragments_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_number_fragments_size());
    total_size += data_size;
  }

  // repeated uint32 distance_between_root_atoms = 77;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->distance_between_root_atoms_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_distance_between_root_atoms_size());
    total_size += data_size;
  }

  // repeated uint32 atoms_in_spinach = 80;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->atoms_in_spinach_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_atoms_in_spinach_size());
    total_size += data_size;
  }

  // repeated uint32 inter_ring_atoms = 83;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->inter_ring_atoms_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_inter_ring_atoms_size());
    total_size += data_size;
  }

  // repeated uint32 unmatched_atoms = 86;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->unmatched_atoms_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unmatched_atoms_size());
    total_size += data_size;
  }

  // repeated int32 net_formal_charge = 89;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->net_formal_charge_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_net_formal_charge_size());
    total_size += data_size;
  }

  // repeated .SubstructureSearch.SubstructureEnvironment environment = 94;
  total_size += 2UL * this->_internal_environment_size();
  for (const auto& msg : this->environment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SubstructureSearch.SubstructureEnvironment environment_no_match = 95;
  total_size += 2UL * this->_internal_environment_no_match_size();
  for (const auto& msg : this->environment_no_match_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SubstructureSearch.SubstructureRingSpecification ring_specification = 98;
  total_size += 2UL * this->_internal_ring_specification_size();
  for (const auto& msg : this->ring_specification_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SubstructureSearch.Operator ring_specification_logexp = 99;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_ring_specification_logexp_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_ring_specification_logexp(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .SubstructureSearch.SubstructureRingSystemSpecification ring_system_specifier = 100;
  total_size += 2UL * this->_internal_ring_system_specifier_size();
  for (const auto& msg : this->ring_system_specifier_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SubstructureSearch.Operator ring_system_specifier_logexp = 101;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_ring_system_specifier_logexp_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_ring_system_specifier_logexp(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .SubstructureSearch.ElementsNeeded element_hits_needed = 102;
  total_size += 2UL * this->_internal_element_hits_needed_size();
  for (const auto& msg : this->element_hits_needed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SubstructureSearch.ElementsNeeded elements_needed = 103;
  total_size += 2UL * this->_internal_elements_needed_size();
  for (const auto& msg : this->elements_needed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 aromatic_atoms = 104;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->aromatic_atoms_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_aromatic_atoms_size());
    total_size += data_size;
  }

  // repeated uint32 heteroatoms = 112;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->heteroatoms_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_heteroatoms_size());
    total_size += data_size;
  }

  // repeated .SubstructureSearch.SubstructureAtom query_atom = 116;
  total_size += 2UL * this->_internal_query_atom_size();
  for (const auto& msg : this->query_atom_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SubstructureSearch.SubstructureChiralCenter chiral_centre = 117;
  total_size += 2UL * this->_internal_chiral_centre_size();
  for (const auto& msg : this->chiral_centre_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string label = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional string comment = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comment());
    }

    // optional string sort_matches = 25;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sort_matches());
    }

    // optional string atom_type = 119;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_atom_type());
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

    // optional uint32 normalise_rc_per_hits_needed = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_normalise_rc_per_hits_needed());
    }

    // optional uint32 subtract_from_rc = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_subtract_from_rc());
    }

    // optional uint32 max_matches_to_find = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_matches_to_find());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool one_embedding_per_start_atom = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool save_matched_atoms = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool ncon_ignore_singly_connected = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool perceive_symmetric_equivalents = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint32 implicit_ring_condition = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_implicit_ring_condition());
    }

    // optional bool all_hits_in_same_fragment = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool only_match_largest_fragment = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool embeddings_do_not_overlap = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool sort_by_preference_value = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional uint32 distance_between_hits_ncheck = 24;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_distance_between_hits_ncheck());
    }

    // optional uint32 min_attached_heteroatom_count = 27;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_attached_heteroatom_count());
    }

    // optional uint32 max_attached_heteroatom_count = 28;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_attached_heteroatom_count());
    }

    // optional uint32 min_hits_needed = 30;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_hits_needed());
    }

    // optional uint32 max_hits_needed = 31;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_hits_needed());
    }

    // optional uint32 min_ring_atoms_matched = 33;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_ring_atoms_matched());
    }

    // optional uint32 max_ring_atoms_matched = 34;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_ring_atoms_matched());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 min_heteroatoms_matched = 36;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_heteroatoms_matched());
    }

    // optional uint32 max_heteroatoms_matched = 37;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_heteroatoms_matched());
    }

    // optional uint32 min_heteroatoms_in_molecule = 39;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_heteroatoms_in_molecule());
    }

    // optional uint32 max_heteroatoms_in_molecule = 40;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_heteroatoms_in_molecule());
    }

    // optional uint32 min_natoms = 42;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_natoms());
    }

    // optional uint32 max_natoms = 43;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_natoms());
    }

    // optional uint32 min_nrings = 45;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_nrings());
    }

    // optional uint32 max_nrings = 46;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_nrings());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 min_ncon = 48;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_ncon());
    }

    // optional uint32 max_ncon = 49;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_ncon());
    }

    // optional uint32 min_fused_rings = 51;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_fused_rings());
    }

    // optional uint32 max_fused_rings = 52;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_fused_rings());
    }

    // optional uint32 min_strongly_fused_rings = 54;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_strongly_fused_rings());
    }

    // optional uint32 max_strongly_fused_rings = 55;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_strongly_fused_rings());
    }

    // optional uint32 min_isolated_rings = 57;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_isolated_rings());
    }

    // optional uint32 max_isolated_rings = 58;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_isolated_rings());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool no_matched_atoms_between_exhaustive = 21;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool fail_if_embeddings_too_close = 23;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool environment_must_match_unmatched_atoms = 96;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool env_matches_can_share_attachment_points = 97;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional uint32 min_isolated_ring_objects = 60;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_isolated_ring_objects());
    }

    // optional uint32 max_isolated_ring_objects = 61;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_isolated_ring_objects());
    }

    // optional uint32 min_aromatic_rings = 63;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_aromatic_rings());
    }

    // optional uint32 max_aromatic_rings = 64;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_aromatic_rings());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 min_non_aromatic_rings = 66;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_non_aromatic_rings());
    }

    // optional uint32 max_non_aromatic_rings = 67;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_non_aromatic_rings());
    }

    // optional uint32 min_distance_between_hits = 69;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_distance_between_hits());
    }

    // optional uint32 max_distance_between_hits = 70;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_distance_between_hits());
    }

    // optional uint32 min_number_isotopic_atoms = 72;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_number_isotopic_atoms());
    }

    // optional uint32 max_number_isotopic_atoms = 73;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_number_isotopic_atoms());
    }

    // optional uint32 min_number_fragments = 75;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_number_fragments());
    }

    // optional uint32 max_number_fragments = 76;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_number_fragments());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 min_distance_between_root_atoms = 78;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_distance_between_root_atoms());
    }

    // optional uint32 max_distance_between_root_atoms = 79;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_distance_between_root_atoms());
    }

    // optional uint32 min_atoms_in_spinach = 81;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_atoms_in_spinach());
    }

    // optional uint32 max_atoms_in_spinach = 82;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_atoms_in_spinach());
    }

    // optional uint32 min_inter_ring_atoms = 84;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_inter_ring_atoms());
    }

    // optional uint32 max_inter_ring_atoms = 85;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_inter_ring_atoms());
    }

    // optional uint32 min_unmatched_atoms = 87;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_unmatched_atoms());
    }

    // optional uint32 max_unmatched_atoms = 88;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_unmatched_atoms());
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 min_net_formal_charge = 90;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_min_net_formal_charge());
    }

    // optional int32 max_net_formal_charge = 91;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_net_formal_charge());
    }

    // optional float min_fraction_atoms_matched = 92;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float max_fraction_atoms_matched = 93;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional uint32 min_aromatic_atoms = 105;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_aromatic_atoms());
    }

    // optional uint32 max_aromatic_atoms = 106;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_aromatic_atoms());
    }

    // optional bool unique_embeddings_only = 110;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool respect_initial_atom_numbering = 113;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool compress_embeddings = 114;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool environments_can_share_attachment_points = 115;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

  }
  switch (smiles_or_smarts_case()) {
    // string smiles = 17;
    case kSmiles: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_smiles());
      break;
    }
    // string smarts = 18;
    case kSmarts: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_smarts());
      break;
    }
    case SMILES_OR_SMARTS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleSubstructureQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SingleSubstructureQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleSubstructureQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleSubstructureQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SingleSubstructureQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SingleSubstructureQuery)
    MergeFrom(*source);
  }
}

void SingleSubstructureQuery::MergeFrom(const SingleSubstructureQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SingleSubstructureQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  numeric_value_.MergeFrom(from.numeric_value_);
  no_matched_atoms_between_.MergeFrom(from.no_matched_atoms_between_);
  link_atoms_.MergeFrom(from.link_atoms_);
  attached_heteroatom_count_.MergeFrom(from.attached_heteroatom_count_);
  hits_needed_.MergeFrom(from.hits_needed_);
  ring_atoms_matched_.MergeFrom(from.ring_atoms_matched_);
  heteroatoms_matched_.MergeFrom(from.heteroatoms_matched_);
  heteroatoms_in_molecule_.MergeFrom(from.heteroatoms_in_molecule_);
  natoms_.MergeFrom(from.natoms_);
  nrings_.MergeFrom(from.nrings_);
  ncon_.MergeFrom(from.ncon_);
  fused_rings_.MergeFrom(from.fused_rings_);
  strongly_fused_rings_.MergeFrom(from.strongly_fused_rings_);
  isolated_rings_.MergeFrom(from.isolated_rings_);
  isolated_ring_objects_.MergeFrom(from.isolated_ring_objects_);
  aromatic_rings_.MergeFrom(from.aromatic_rings_);
  non_aromatic_rings_.MergeFrom(from.non_aromatic_rings_);
  distance_between_hits_.MergeFrom(from.distance_between_hits_);
  number_isotopic_atoms_.MergeFrom(from.number_isotopic_atoms_);
  number_fragments_.MergeFrom(from.number_fragments_);
  distance_between_root_atoms_.MergeFrom(from.distance_between_root_atoms_);
  atoms_in_spinach_.MergeFrom(from.atoms_in_spinach_);
  inter_ring_atoms_.MergeFrom(from.inter_ring_atoms_);
  unmatched_atoms_.MergeFrom(from.unmatched_atoms_);
  net_formal_charge_.MergeFrom(from.net_formal_charge_);
  environment_.MergeFrom(from.environment_);
  environment_no_match_.MergeFrom(from.environment_no_match_);
  ring_specification_.MergeFrom(from.ring_specification_);
  ring_specification_logexp_.MergeFrom(from.ring_specification_logexp_);
  ring_system_specifier_.MergeFrom(from.ring_system_specifier_);
  ring_system_specifier_logexp_.MergeFrom(from.ring_system_specifier_logexp_);
  element_hits_needed_.MergeFrom(from.element_hits_needed_);
  elements_needed_.MergeFrom(from.elements_needed_);
  aromatic_atoms_.MergeFrom(from.aromatic_atoms_);
  heteroatoms_.MergeFrom(from.heteroatoms_);
  query_atom_.MergeFrom(from.query_atom_);
  chiral_centre_.MergeFrom(from.chiral_centre_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_comment(from._internal_comment());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_sort_matches(from._internal_sort_matches());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_atom_type(from._internal_atom_type());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      normalise_rc_per_hits_needed_ = from.normalise_rc_per_hits_needed_;
    }
    if (cached_has_bits & 0x00000040u) {
      subtract_from_rc_ = from.subtract_from_rc_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_matches_to_find_ = from.max_matches_to_find_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      one_embedding_per_start_atom_ = from.one_embedding_per_start_atom_;
    }
    if (cached_has_bits & 0x00000200u) {
      save_matched_atoms_ = from.save_matched_atoms_;
    }
    if (cached_has_bits & 0x00000400u) {
      ncon_ignore_singly_connected_ = from.ncon_ignore_singly_connected_;
    }
    if (cached_has_bits & 0x00000800u) {
      perceive_symmetric_equivalents_ = from.perceive_symmetric_equivalents_;
    }
    if (cached_has_bits & 0x00001000u) {
      implicit_ring_condition_ = from.implicit_ring_condition_;
    }
    if (cached_has_bits & 0x00002000u) {
      all_hits_in_same_fragment_ = from.all_hits_in_same_fragment_;
    }
    if (cached_has_bits & 0x00004000u) {
      only_match_largest_fragment_ = from.only_match_largest_fragment_;
    }
    if (cached_has_bits & 0x00008000u) {
      embeddings_do_not_overlap_ = from.embeddings_do_not_overlap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      sort_by_preference_value_ = from.sort_by_preference_value_;
    }
    if (cached_has_bits & 0x00020000u) {
      distance_between_hits_ncheck_ = from.distance_between_hits_ncheck_;
    }
    if (cached_has_bits & 0x00040000u) {
      min_attached_heteroatom_count_ = from.min_attached_heteroatom_count_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_attached_heteroatom_count_ = from.max_attached_heteroatom_count_;
    }
    if (cached_has_bits & 0x00100000u) {
      min_hits_needed_ = from.min_hits_needed_;
    }
    if (cached_has_bits & 0x00200000u) {
      max_hits_needed_ = from.max_hits_needed_;
    }
    if (cached_has_bits & 0x00400000u) {
      min_ring_atoms_matched_ = from.min_ring_atoms_matched_;
    }
    if (cached_has_bits & 0x00800000u) {
      max_ring_atoms_matched_ = from.max_ring_atoms_matched_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      min_heteroatoms_matched_ = from.min_heteroatoms_matched_;
    }
    if (cached_has_bits & 0x02000000u) {
      max_heteroatoms_matched_ = from.max_heteroatoms_matched_;
    }
    if (cached_has_bits & 0x04000000u) {
      min_heteroatoms_in_molecule_ = from.min_heteroatoms_in_molecule_;
    }
    if (cached_has_bits & 0x08000000u) {
      max_heteroatoms_in_molecule_ = from.max_heteroatoms_in_molecule_;
    }
    if (cached_has_bits & 0x10000000u) {
      min_natoms_ = from.min_natoms_;
    }
    if (cached_has_bits & 0x20000000u) {
      max_natoms_ = from.max_natoms_;
    }
    if (cached_has_bits & 0x40000000u) {
      min_nrings_ = from.min_nrings_;
    }
    if (cached_has_bits & 0x80000000u) {
      max_nrings_ = from.max_nrings_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      min_ncon_ = from.min_ncon_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ncon_ = from.max_ncon_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_fused_rings_ = from.min_fused_rings_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_fused_rings_ = from.max_fused_rings_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_strongly_fused_rings_ = from.min_strongly_fused_rings_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_strongly_fused_rings_ = from.max_strongly_fused_rings_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_isolated_rings_ = from.min_isolated_rings_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_isolated_rings_ = from.max_isolated_rings_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      no_matched_atoms_between_exhaustive_ = from.no_matched_atoms_between_exhaustive_;
    }
    if (cached_has_bits & 0x00000200u) {
      fail_if_embeddings_too_close_ = from.fail_if_embeddings_too_close_;
    }
    if (cached_has_bits & 0x00000400u) {
      environment_must_match_unmatched_atoms_ = from.environment_must_match_unmatched_atoms_;
    }
    if (cached_has_bits & 0x00000800u) {
      env_matches_can_share_attachment_points_ = from.env_matches_can_share_attachment_points_;
    }
    if (cached_has_bits & 0x00001000u) {
      min_isolated_ring_objects_ = from.min_isolated_ring_objects_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_isolated_ring_objects_ = from.max_isolated_ring_objects_;
    }
    if (cached_has_bits & 0x00004000u) {
      min_aromatic_rings_ = from.min_aromatic_rings_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_aromatic_rings_ = from.max_aromatic_rings_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      min_non_aromatic_rings_ = from.min_non_aromatic_rings_;
    }
    if (cached_has_bits & 0x00020000u) {
      max_non_aromatic_rings_ = from.max_non_aromatic_rings_;
    }
    if (cached_has_bits & 0x00040000u) {
      min_distance_between_hits_ = from.min_distance_between_hits_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_distance_between_hits_ = from.max_distance_between_hits_;
    }
    if (cached_has_bits & 0x00100000u) {
      min_number_isotopic_atoms_ = from.min_number_isotopic_atoms_;
    }
    if (cached_has_bits & 0x00200000u) {
      max_number_isotopic_atoms_ = from.max_number_isotopic_atoms_;
    }
    if (cached_has_bits & 0x00400000u) {
      min_number_fragments_ = from.min_number_fragments_;
    }
    if (cached_has_bits & 0x00800000u) {
      max_number_fragments_ = from.max_number_fragments_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      min_distance_between_root_atoms_ = from.min_distance_between_root_atoms_;
    }
    if (cached_has_bits & 0x02000000u) {
      max_distance_between_root_atoms_ = from.max_distance_between_root_atoms_;
    }
    if (cached_has_bits & 0x04000000u) {
      min_atoms_in_spinach_ = from.min_atoms_in_spinach_;
    }
    if (cached_has_bits & 0x08000000u) {
      max_atoms_in_spinach_ = from.max_atoms_in_spinach_;
    }
    if (cached_has_bits & 0x10000000u) {
      min_inter_ring_atoms_ = from.min_inter_ring_atoms_;
    }
    if (cached_has_bits & 0x20000000u) {
      max_inter_ring_atoms_ = from.max_inter_ring_atoms_;
    }
    if (cached_has_bits & 0x40000000u) {
      min_unmatched_atoms_ = from.min_unmatched_atoms_;
    }
    if (cached_has_bits & 0x80000000u) {
      max_unmatched_atoms_ = from.max_unmatched_atoms_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      min_net_formal_charge_ = from.min_net_formal_charge_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_net_formal_charge_ = from.max_net_formal_charge_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_fraction_atoms_matched_ = from.min_fraction_atoms_matched_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_fraction_atoms_matched_ = from.max_fraction_atoms_matched_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_aromatic_atoms_ = from.min_aromatic_atoms_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_aromatic_atoms_ = from.max_aromatic_atoms_;
    }
    if (cached_has_bits & 0x00000040u) {
      unique_embeddings_only_ = from.unique_embeddings_only_;
    }
    if (cached_has_bits & 0x00000080u) {
      respect_initial_atom_numbering_ = from.respect_initial_atom_numbering_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      compress_embeddings_ = from.compress_embeddings_;
    }
    if (cached_has_bits & 0x00000200u) {
      environments_can_share_attachment_points_ = from.environments_can_share_attachment_points_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  switch (from.smiles_or_smarts_case()) {
    case kSmiles: {
      _internal_set_smiles(from._internal_smiles());
      break;
    }
    case kSmarts: {
      _internal_set_smarts(from._internal_smarts());
      break;
    }
    case SMILES_OR_SMARTS_NOT_SET: {
      break;
    }
  }
}

void SingleSubstructureQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SingleSubstructureQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleSubstructureQuery::CopyFrom(const SingleSubstructureQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SingleSubstructureQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleSubstructureQuery::IsInitialized() const {
  return true;
}

void SingleSubstructureQuery::InternalSwap(SingleSubstructureQuery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  numeric_value_.InternalSwap(&other->numeric_value_);
  no_matched_atoms_between_.InternalSwap(&other->no_matched_atoms_between_);
  link_atoms_.InternalSwap(&other->link_atoms_);
  attached_heteroatom_count_.InternalSwap(&other->attached_heteroatom_count_);
  hits_needed_.InternalSwap(&other->hits_needed_);
  ring_atoms_matched_.InternalSwap(&other->ring_atoms_matched_);
  heteroatoms_matched_.InternalSwap(&other->heteroatoms_matched_);
  heteroatoms_in_molecule_.InternalSwap(&other->heteroatoms_in_molecule_);
  natoms_.InternalSwap(&other->natoms_);
  nrings_.InternalSwap(&other->nrings_);
  ncon_.InternalSwap(&other->ncon_);
  fused_rings_.InternalSwap(&other->fused_rings_);
  strongly_fused_rings_.InternalSwap(&other->strongly_fused_rings_);
  isolated_rings_.InternalSwap(&other->isolated_rings_);
  isolated_ring_objects_.InternalSwap(&other->isolated_ring_objects_);
  aromatic_rings_.InternalSwap(&other->aromatic_rings_);
  non_aromatic_rings_.InternalSwap(&other->non_aromatic_rings_);
  distance_between_hits_.InternalSwap(&other->distance_between_hits_);
  number_isotopic_atoms_.InternalSwap(&other->number_isotopic_atoms_);
  number_fragments_.InternalSwap(&other->number_fragments_);
  distance_between_root_atoms_.InternalSwap(&other->distance_between_root_atoms_);
  atoms_in_spinach_.InternalSwap(&other->atoms_in_spinach_);
  inter_ring_atoms_.InternalSwap(&other->inter_ring_atoms_);
  unmatched_atoms_.InternalSwap(&other->unmatched_atoms_);
  net_formal_charge_.InternalSwap(&other->net_formal_charge_);
  environment_.InternalSwap(&other->environment_);
  environment_no_match_.InternalSwap(&other->environment_no_match_);
  ring_specification_.InternalSwap(&other->ring_specification_);
  ring_specification_logexp_.InternalSwap(&other->ring_specification_logexp_);
  ring_system_specifier_.InternalSwap(&other->ring_system_specifier_);
  ring_system_specifier_logexp_.InternalSwap(&other->ring_system_specifier_logexp_);
  element_hits_needed_.InternalSwap(&other->element_hits_needed_);
  elements_needed_.InternalSwap(&other->elements_needed_);
  aromatic_atoms_.InternalSwap(&other->aromatic_atoms_);
  heteroatoms_.InternalSwap(&other->heteroatoms_);
  query_atom_.InternalSwap(&other->query_atom_);
  chiral_centre_.InternalSwap(&other->chiral_centre_);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sort_matches_.Swap(&other->sort_matches_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  atom_type_.Swap(&other->atom_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleSubstructureQuery, environments_can_share_attachment_points_)
      + sizeof(SingleSubstructureQuery::environments_can_share_attachment_points_)
      - PROTOBUF_FIELD_OFFSET(SingleSubstructureQuery, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
  swap(smiles_or_smarts_, other->smiles_or_smarts_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleSubstructureQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstructureQuery::_Internal {
 public:
  using HasBits = decltype(std::declval<SubstructureQuery>()._has_bits_);
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_each_component(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SubstructureQuery::SubstructureQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  query_(arena),
  logexp_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubstructureSearch.SubstructureQuery)
}
SubstructureQuery::SubstructureQuery(const SubstructureQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      query_(from.query_),
      logexp_(from.logexp_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_comment()) {
    comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_comment(),
      GetArena());
  }
  match_each_component_ = from.match_each_component_;
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.SubstructureQuery)
}

void SubstructureQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstructureQuery_Molecule_5fLib_2fsubstructure_2eproto.base);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  match_each_component_ = 0;
}

SubstructureQuery::~SubstructureQuery() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.SubstructureQuery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstructureQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubstructureQuery::ArenaDtor(void* object) {
  SubstructureQuery* _this = reinterpret_cast< SubstructureQuery* >(object);
  (void)_this;
}
void SubstructureQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstructureQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstructureQuery& SubstructureQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstructureQuery_Molecule_5fLib_2fsubstructure_2eproto.base);
  return *internal_default_instance();
}


void SubstructureQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.SubstructureQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.Clear();
  logexp_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    comment_.ClearNonDefaultToEmpty();
  }
  match_each_component_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstructureQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string comment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.SubstructureQuery.comment");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.SingleSubstructureQuery query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_query(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.Operator logexp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::SubstructureSearch::Operator_IsValid(val))) {
              _internal_add_logexp(static_cast<::SubstructureSearch::Operator>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_logexp(), ptr, ctx, ::SubstructureSearch::Operator_IsValid, &_internal_metadata_, 3);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 match_each_component = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_match_each_component(&has_bits);
          match_each_component_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstructureQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.SubstructureQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string comment = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.SubstructureQuery.comment");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_comment(), target);
  }

  // repeated .SubstructureSearch.SingleSubstructureQuery query = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_query_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_query(i), target, stream);
  }

  // repeated .SubstructureSearch.Operator logexp = 3;
  for (int i = 0, n = this->_internal_logexp_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        3, this->_internal_logexp(i), target);
  }

  // optional int32 match_each_component = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_match_each_component(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.SubstructureQuery)
  return target;
}

size_t SubstructureQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.SubstructureQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SubstructureSearch.SingleSubstructureQuery query = 2;
  total_size += 1UL * this->_internal_query_size();
  for (const auto& msg : this->query_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SubstructureSearch.Operator logexp = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_logexp_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_logexp(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string comment = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comment());
    }

    // optional int32 match_each_component = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_match_each_component());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstructureQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.SubstructureQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstructureQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstructureQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.SubstructureQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.SubstructureQuery)
    MergeFrom(*source);
  }
}

void SubstructureQuery::MergeFrom(const SubstructureQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.SubstructureQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  query_.MergeFrom(from.query_);
  logexp_.MergeFrom(from.logexp_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_comment(from._internal_comment());
    }
    if (cached_has_bits & 0x00000002u) {
      match_each_component_ = from.match_each_component_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubstructureQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.SubstructureQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstructureQuery::CopyFrom(const SubstructureQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.SubstructureQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstructureQuery::IsInitialized() const {
  return true;
}

void SubstructureQuery::InternalSwap(SubstructureQuery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  query_.InternalSwap(&other->query_);
  logexp_.InternalSwap(&other->logexp_);
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(match_each_component_, other->match_each_component_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstructureQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MinMaxSpecifierInt::_Internal {
 public:
  using HasBits = decltype(std::declval<MinMaxSpecifierInt>()._has_bits_);
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MinMaxSpecifierInt::MinMaxSpecifierInt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubstructureSearch.MinMaxSpecifierInt)
}
MinMaxSpecifierInt::MinMaxSpecifierInt(const MinMaxSpecifierInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.MinMaxSpecifierInt)
}

void MinMaxSpecifierInt::SharedCtor() {
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

MinMaxSpecifierInt::~MinMaxSpecifierInt() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.MinMaxSpecifierInt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MinMaxSpecifierInt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MinMaxSpecifierInt::ArenaDtor(void* object) {
  MinMaxSpecifierInt* _this = reinterpret_cast< MinMaxSpecifierInt* >(object);
  (void)_this;
}
void MinMaxSpecifierInt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MinMaxSpecifierInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MinMaxSpecifierInt& MinMaxSpecifierInt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MinMaxSpecifierInt_Molecule_5fLib_2fsubstructure_2eproto.base);
  return *internal_default_instance();
}


void MinMaxSpecifierInt::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.MinMaxSpecifierInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&min_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MinMaxSpecifierInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_min(&has_bits);
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max(&has_bits);
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MinMaxSpecifierInt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.MinMaxSpecifierInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 value = 1;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 min = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_min(), target);
  }

  // optional int32 max = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.MinMaxSpecifierInt)
  return target;
}

size_t MinMaxSpecifierInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.MinMaxSpecifierInt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 value = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->value_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_value_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 min = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_min());
    }

    // optional int32 max = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MinMaxSpecifierInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.MinMaxSpecifierInt)
  GOOGLE_DCHECK_NE(&from, this);
  const MinMaxSpecifierInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MinMaxSpecifierInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.MinMaxSpecifierInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.MinMaxSpecifierInt)
    MergeFrom(*source);
  }
}

void MinMaxSpecifierInt::MergeFrom(const MinMaxSpecifierInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.MinMaxSpecifierInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MinMaxSpecifierInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.MinMaxSpecifierInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MinMaxSpecifierInt::CopyFrom(const MinMaxSpecifierInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.MinMaxSpecifierInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinMaxSpecifierInt::IsInitialized() const {
  return true;
}

void MinMaxSpecifierInt::InternalSwap(MinMaxSpecifierInt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.InternalSwap(&other->value_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MinMaxSpecifierInt, max_)
      + sizeof(MinMaxSpecifierInt::max_)
      - PROTOBUF_FIELD_OFFSET(MinMaxSpecifierInt, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MinMaxSpecifierInt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MinMaxSpecifierUInt::_Internal {
 public:
  using HasBits = decltype(std::declval<MinMaxSpecifierUInt>()._has_bits_);
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MinMaxSpecifierUInt::MinMaxSpecifierUInt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubstructureSearch.MinMaxSpecifierUInt)
}
MinMaxSpecifierUInt::MinMaxSpecifierUInt(const MinMaxSpecifierUInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.MinMaxSpecifierUInt)
}

void MinMaxSpecifierUInt::SharedCtor() {
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

MinMaxSpecifierUInt::~MinMaxSpecifierUInt() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.MinMaxSpecifierUInt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MinMaxSpecifierUInt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MinMaxSpecifierUInt::ArenaDtor(void* object) {
  MinMaxSpecifierUInt* _this = reinterpret_cast< MinMaxSpecifierUInt* >(object);
  (void)_this;
}
void MinMaxSpecifierUInt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MinMaxSpecifierUInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MinMaxSpecifierUInt& MinMaxSpecifierUInt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MinMaxSpecifierUInt_Molecule_5fLib_2fsubstructure_2eproto.base);
  return *internal_default_instance();
}


void MinMaxSpecifierUInt::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.MinMaxSpecifierUInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&min_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MinMaxSpecifierUInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_min(&has_bits);
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max(&has_bits);
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MinMaxSpecifierUInt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.MinMaxSpecifierUInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 value = 1;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 min = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_min(), target);
  }

  // optional uint32 max = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.MinMaxSpecifierUInt)
  return target;
}

size_t MinMaxSpecifierUInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.MinMaxSpecifierUInt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 value = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->value_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_value_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 min = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min());
    }

    // optional uint32 max = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MinMaxSpecifierUInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.MinMaxSpecifierUInt)
  GOOGLE_DCHECK_NE(&from, this);
  const MinMaxSpecifierUInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MinMaxSpecifierUInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.MinMaxSpecifierUInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.MinMaxSpecifierUInt)
    MergeFrom(*source);
  }
}

void MinMaxSpecifierUInt::MergeFrom(const MinMaxSpecifierUInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.MinMaxSpecifierUInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MinMaxSpecifierUInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.MinMaxSpecifierUInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MinMaxSpecifierUInt::CopyFrom(const MinMaxSpecifierUInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.MinMaxSpecifierUInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinMaxSpecifierUInt::IsInitialized() const {
  return true;
}

void MinMaxSpecifierUInt::InternalSwap(MinMaxSpecifierUInt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.InternalSwap(&other->value_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MinMaxSpecifierUInt, max_)
      + sizeof(MinMaxSpecifierUInt::max_)
      - PROTOBUF_FIELD_OFFSET(MinMaxSpecifierUInt, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MinMaxSpecifierUInt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QueryMatchResults_Matches::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryMatchResults_Matches>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nhits(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

QueryMatchResults_Matches::QueryMatchResults_Matches(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubstructureSearch.QueryMatchResults.Matches)
}
QueryMatchResults_Matches::QueryMatchResults_Matches(const QueryMatchResults_Matches& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  nhits_ = from.nhits_;
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.QueryMatchResults.Matches)
}

void QueryMatchResults_Matches::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryMatchResults_Matches_Molecule_5fLib_2fsubstructure_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nhits_ = 0u;
}

QueryMatchResults_Matches::~QueryMatchResults_Matches() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.QueryMatchResults.Matches)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryMatchResults_Matches::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryMatchResults_Matches::ArenaDtor(void* object) {
  QueryMatchResults_Matches* _this = reinterpret_cast< QueryMatchResults_Matches* >(object);
  (void)_this;
}
void QueryMatchResults_Matches::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryMatchResults_Matches::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryMatchResults_Matches& QueryMatchResults_Matches::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryMatchResults_Matches_Molecule_5fLib_2fsubstructure_2eproto.base);
  return *internal_default_instance();
}


void QueryMatchResults_Matches::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.QueryMatchResults.Matches)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  nhits_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryMatchResults_Matches::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.QueryMatchResults.Matches.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 nhits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nhits(&has_bits);
          nhits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryMatchResults_Matches::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.QueryMatchResults.Matches)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.QueryMatchResults.Matches.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 nhits = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nhits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.QueryMatchResults.Matches)
  return target;
}

size_t QueryMatchResults_Matches::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.QueryMatchResults.Matches)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 nhits = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_nhits());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryMatchResults_Matches::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.QueryMatchResults.Matches)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryMatchResults_Matches* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryMatchResults_Matches>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.QueryMatchResults.Matches)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.QueryMatchResults.Matches)
    MergeFrom(*source);
  }
}

void QueryMatchResults_Matches::MergeFrom(const QueryMatchResults_Matches& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.QueryMatchResults.Matches)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      nhits_ = from.nhits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QueryMatchResults_Matches::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.QueryMatchResults.Matches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMatchResults_Matches::CopyFrom(const QueryMatchResults_Matches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.QueryMatchResults.Matches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMatchResults_Matches::IsInitialized() const {
  return true;
}

void QueryMatchResults_Matches::InternalSwap(QueryMatchResults_Matches* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(nhits_, other->nhits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryMatchResults_Matches::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QueryMatchResults::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryMatchResults>()._has_bits_);
  static void set_has_smiles(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

QueryMatchResults::QueryMatchResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matches_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubstructureSearch.QueryMatchResults)
}
QueryMatchResults::QueryMatchResults(const QueryMatchResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      matches_(from.matches_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  smiles_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_smiles()) {
    smiles_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_smiles(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:SubstructureSearch.QueryMatchResults)
}

void QueryMatchResults::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryMatchResults_Molecule_5fLib_2fsubstructure_2eproto.base);
  smiles_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

QueryMatchResults::~QueryMatchResults() {
  // @@protoc_insertion_point(destructor:SubstructureSearch.QueryMatchResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryMatchResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  smiles_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryMatchResults::ArenaDtor(void* object) {
  QueryMatchResults* _this = reinterpret_cast< QueryMatchResults* >(object);
  (void)_this;
}
void QueryMatchResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryMatchResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryMatchResults& QueryMatchResults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryMatchResults_Molecule_5fLib_2fsubstructure_2eproto.base);
  return *internal_default_instance();
}


void QueryMatchResults::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstructureSearch.QueryMatchResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matches_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      smiles_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryMatchResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string smiles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_smiles();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.QueryMatchResults.smiles");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SubstructureSearch.QueryMatchResults.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SubstructureSearch.QueryMatchResults.Matches matches = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryMatchResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstructureSearch.QueryMatchResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string smiles = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_smiles().data(), static_cast<int>(this->_internal_smiles().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.QueryMatchResults.smiles");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_smiles(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SubstructureSearch.QueryMatchResults.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .SubstructureSearch.QueryMatchResults.Matches matches = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_matches(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstructureSearch.QueryMatchResults)
  return target;
}

size_t QueryMatchResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstructureSearch.QueryMatchResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SubstructureSearch.QueryMatchResults.Matches matches = 3;
  total_size += 1UL * this->_internal_matches_size();
  for (const auto& msg : this->matches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string smiles = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_smiles());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryMatchResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstructureSearch.QueryMatchResults)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryMatchResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryMatchResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstructureSearch.QueryMatchResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstructureSearch.QueryMatchResults)
    MergeFrom(*source);
  }
}

void QueryMatchResults::MergeFrom(const QueryMatchResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstructureSearch.QueryMatchResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matches_.MergeFrom(from.matches_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_smiles(from._internal_smiles());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
  }
}

void QueryMatchResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstructureSearch.QueryMatchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMatchResults::CopyFrom(const QueryMatchResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstructureSearch.QueryMatchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMatchResults::IsInitialized() const {
  return true;
}

void QueryMatchResults::InternalSwap(QueryMatchResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  matches_.InternalSwap(&other->matches_);
  smiles_.Swap(&other->smiles_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryMatchResults::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SubstructureSearch
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SubstructureSearch::AtomNumberOrHLp* Arena::CreateMaybeMessage< ::SubstructureSearch::AtomNumberOrHLp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubstructureSearch::AtomNumberOrHLp >(arena);
}
template<> PROTOBUF_NOINLINE ::SubstructureSearch::SubstructureChiralCenter* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureChiralCenter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubstructureSearch::SubstructureChiralCenter >(arena);
}
template<> PROTOBUF_NOINLINE ::SubstructureSearch::SubstructureBond* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureBond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubstructureSearch::SubstructureBond >(arena);
}
template<> PROTOBUF_NOINLINE ::SubstructureSearch::SubstructureEnvironmentBond* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureEnvironmentBond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubstructureSearch::SubstructureEnvironmentBond >(arena);
}
template<> PROTOBUF_NOINLINE ::SubstructureSearch::ElementsNeeded* Arena::CreateMaybeMessage< ::SubstructureSearch::ElementsNeeded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubstructureSearch::ElementsNeeded >(arena);
}
template<> PROTOBUF_NOINLINE ::SubstructureSearch::NoMatchedAtomsBetween* Arena::CreateMaybeMessage< ::SubstructureSearch::NoMatchedAtomsBetween >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubstructureSearch::NoMatchedAtomsBetween >(arena);
}
template<> PROTOBUF_NOINLINE ::SubstructureSearch::LinkAtoms* Arena::CreateMaybeMessage< ::SubstructureSearch::LinkAtoms >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubstructureSearch::LinkAtoms >(arena);
}
template<> PROTOBUF_NOINLINE ::SubstructureSearch::EnvironmentAttachment* Arena::CreateMaybeMessage< ::SubstructureSearch::EnvironmentAttachment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubstructureSearch::EnvironmentAttachment >(arena);
}
template<> PROTOBUF_NOINLINE ::SubstructureSearch::SubstructureRingEnvironment* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureRingEnvironment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubstructureSearch::SubstructureRingEnvironment >(arena);
}
template<> PROTOBUF_NOINLINE ::SubstructureSearch::SubstructureRingBase* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureRingBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubstructureSearch::SubstructureRingBase >(arena);
}
template<> PROTOBUF_NOINLINE ::SubstructureSearch::SubstructureRingSpecification* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureRingSpecification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubstructureSearch::SubstructureRingSpecification >(arena);
}
template<> PROTOBUF_NOINLINE ::SubstructureSearch::RingSizeRequirement* Arena::CreateMaybeMessage< ::SubstructureSearch::RingSizeRequirement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubstructureSearch::RingSizeRequirement >(arena);
}
template<> PROTOBUF_NOINLINE ::SubstructureSearch::SubstructureRingSystemSpecification* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureRingSystemSpecification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubstructureSearch::SubstructureRingSystemSpecification >(arena);
}
template<> PROTOBUF_NOINLINE ::SubstructureSearch::SubstructureAtomSpecifier* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureAtomSpecifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubstructureSearch::SubstructureAtomSpecifier >(arena);
}
template<> PROTOBUF_NOINLINE ::SubstructureSearch::SubstructureAtomEnvironment* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureAtomEnvironment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubstructureSearch::SubstructureAtomEnvironment >(arena);
}
template<> PROTOBUF_NOINLINE ::SubstructureSearch::SubstructureAtom* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureAtom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubstructureSearch::SubstructureAtom >(arena);
}
template<> PROTOBUF_NOINLINE ::SubstructureSearch::SubstructureEnvironment* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureEnvironment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubstructureSearch::SubstructureEnvironment >(arena);
}
template<> PROTOBUF_NOINLINE ::SubstructureSearch::SingleSubstructureQuery* Arena::CreateMaybeMessage< ::SubstructureSearch::SingleSubstructureQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubstructureSearch::SingleSubstructureQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::SubstructureSearch::SubstructureQuery* Arena::CreateMaybeMessage< ::SubstructureSearch::SubstructureQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubstructureSearch::SubstructureQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::SubstructureSearch::MinMaxSpecifierInt* Arena::CreateMaybeMessage< ::SubstructureSearch::MinMaxSpecifierInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubstructureSearch::MinMaxSpecifierInt >(arena);
}
template<> PROTOBUF_NOINLINE ::SubstructureSearch::MinMaxSpecifierUInt* Arena::CreateMaybeMessage< ::SubstructureSearch::MinMaxSpecifierUInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubstructureSearch::MinMaxSpecifierUInt >(arena);
}
template<> PROTOBUF_NOINLINE ::SubstructureSearch::QueryMatchResults_Matches* Arena::CreateMaybeMessage< ::SubstructureSearch::QueryMatchResults_Matches >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubstructureSearch::QueryMatchResults_Matches >(arena);
}
template<> PROTOBUF_NOINLINE ::SubstructureSearch::QueryMatchResults* Arena::CreateMaybeMessage< ::SubstructureSearch::QueryMatchResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SubstructureSearch::QueryMatchResults >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
